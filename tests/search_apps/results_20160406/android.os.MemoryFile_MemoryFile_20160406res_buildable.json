{"responseHeader": {"status": 0}, "response": {"docs": [{"user_sni": "kyorohiro", "repo_sni": "kyorohiro/KyoroStressV2", "imports_t": ["java.util.LinkedList android.os.MemoryFile"], "email_sni": "kyorohiro@gmail.com", "contents_t": ["package info.kyorohiro.helloworld.stress.task;\n\nimport java.util.LinkedList;\n\nimport android.os.MemoryFile;\n\npublic class StressUtility {\n\n\tpublic static long eatUpJavaHeap(LinkedList<byte[]> list, int eatUpSize, int atomSize) {\n\t\tlong ret = 0;\n\t\ttry {\n\t\t\twhile(list.size()*atomSize < eatUpSize) {\n\t\t\t\tlist.add(new byte[atomSize]);\n\t\t\t\tret += atomSize;\n\t\t\t}\n\t\t} catch(Throwable t) {\n\t\t\tt.printStackTrace();\n\t\t}\n\t\tfinally { \n\t\t}\n\t\treturn ret;\n\t}\n\n\tpublic static long eatUpHeapFromMemoryFile(LinkedList<MemoryFile> list, int eatUpSize, int atomSize) {\n\t\tlong ret = 0;\n\t\ttry {\n\t\t\tbyte[] buffer = new byte[atomSize];\n\t\t\tdo{\n\t\t\t\tMemoryFile mmap = new MemoryFile(\"name\"+list.size(), eatUpSize/10);\n\t\t\t\tint s = 0;\n\t\t\t\tint e = 0;\n\t\t\t\twhile(true) {\n\t\t\t\t\te = s+buffer.length;\n\t\t\t\t\tif(e>eatUpSize/10) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(s!=e) {\n\t\t\t\t\t\tmmap.writeBytes(buffer, 0, s, buffer.length);\n\t\t\t\t\t}\n\t\t\t\t\ts = e;\n\t\t\t\t}\n\t\t\t\tlist.add(mmap);\n\t\t\t\tret += eatUpSize/10;\n\t\t\t} while(ret < eatUpSize);\n\t\t} catch(Throwable t) {\n\t\t\tandroid.util.Log.v(\"kiyo\",\"###eeee_d\"+t.getMessage());\n\t\t\tt.printStackTrace();\n\t\t}\n\t\tfinally { \n\t\t}\n\t\treturn ret;\n\t}\n\n}\n"], "body_t": ["<empty>"], "date_tdt": "2013-02-17T12:39:51Z", "hash_sni": "f6ca6af8885416f42a03a36e670c7a77e5aa7eca", "name_sni": "src/info/kyorohiro/helloworld/stress/task/StressUtility.java", "patch_t": [" \n public class StressUtility {\n \n-\tpublic static LinkedList<byte[]> eatUpJavaHeap(int eatUpSize, int atomSize) {\n-\t\tLinkedList<byte[]> list = new LinkedList<byte[]>();\n-\t\treturn eatUpJavaHeap(list, eatUpSize, atomSize);\n-\t}\n-\n-\tpublic static LinkedList<byte[]> eatUpJavaHeap(LinkedList<byte[]> list, int eatUpSize, int atomSize) {\n+\tpublic static long eatUpJavaHeap(LinkedList<byte[]> list, int eatUpSize, int atomSize) {\n+\t\tlong ret = 0;\n \t\ttry {\n \t\t\twhile(list.size()*atomSize < eatUpSize) {\n \t\t\t\tlist.add(new byte[atomSize]);\n+\t\t\t\tret += atomSize;\n \t\t\t}\n \t\t} catch(Throwable t) {\n \t\t\tt.printStackTrace();\n \t\t}\n \t\tfinally { \n \t\t}\n-\t\treturn list;\n+\t\treturn ret;\n \t}\n \n \tpublic static long eatUpHeapFromMemoryFile(LinkedList<MemoryFile> list, int eatUpSize, int atomSize) {"], "score": 1.0, "methods_t": ["MemoryFile add getMessage printStackTrace size v writeBytes"], "_version_": 1526724996369481728, "subject_t": ["house keeping"], "comments_t": ["<empty>"], "parents_ss": ["cf2c7a0e46155574841af1cfcc0bfb5b0a86cd7f"], "id": "kyorohiro/KyoroStressV2\u0000f6ca6af8885416f42a03a36e670c7a77e5aa7eca\u0000src/info/kyorohiro/helloworld/stress/task/StressUtility.java", "callsites_cs": "android.os.MemoryFile.MemoryFile(java.lang.String, int)#java.util.LinkedList<android.os.MemoryFile>.size()#java.lang.Throwable.getMessage()#java.util.LinkedList<byte[]>.size()#java.lang.Throwable.printStackTrace()#android.os.MemoryFile.writeBytes(byte[], int, int, int)#java.lang.Throwable.printStackTrace()#java.util.LinkedList<android.os.MemoryFile>.add(android.os.MemoryFile)#java.util.LinkedList<byte[]>.add(byte[])#android.util.Log.v(java.lang.String, java.lang.String)", "callsites_t": ["android.os.MemoryFile.MemoryFile(java.lang.String, int) java.util.LinkedList<android.os.MemoryFile>.size() java.lang.Throwable.getMessage() java.util.LinkedList<byte[]>.size() java.lang.Throwable.printStackTrace() android.os.MemoryFile.writeBytes(byte[], int, int, int) java.lang.Throwable.printStackTrace() java.util.LinkedList<android.os.MemoryFile>.add(android.os.MemoryFile) java.util.LinkedList<byte[]>.add(byte[]) android.util.Log.v(java.lang.String, java.lang.String)"]}, {"user_sni": "Ronald Krueger", "repo_sni": "SilentCircle/silent-contacts-android", "imports_t": ["net.sqlcipher.Cursor net.sqlcipher.database.SQLiteStatement android.os.MemoryFile android.text.TextUtils java.io.IOException java.util.HashMap java.util.Map.Entry android.content.res.AssetFileDescriptor android.content.ContentValues net.sqlcipher.DatabaseUtils net.sqlcipher.database.SQLiteDatabase java.io.FileNotFoundException java.util.Set"], "email_sni": "rkrueger@silentcircle.com", "contents_t": ["/*\nCopyright \u00a9 2013-2014, Silent Circle, LLC.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Any redistribution, use, or modification is done solely for personal \n      benefit and not for any commercial purpose or for monetary gain\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name Silent Circle nor the names of its contributors may \n      be used to endorse or promote products derived from this software \n      without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL SILENT CIRCLE, LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*\n * This  implementation is edited version of original Android sources.\n */\n\n/*\n * Copyright (C) 2011 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License\n */\n\npackage com.silentcircle.contacts.utils;\n\nimport android.content.ContentValues;\nimport android.content.res.AssetFileDescriptor;\nimport android.os.MemoryFile;\nimport android.text.TextUtils;\n\nimport net.sqlcipher.Cursor;\nimport net.sqlcipher.DatabaseUtils;\nimport net.sqlcipher.database.SQLiteDatabase;\nimport net.sqlcipher.database.SQLiteStatement;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map.Entry;\nimport java.util.Set;\n\n/**\n * Static methods for helping us build database query selection strings.\n */\npublic class DbQueryUtils {\n    // Static class with helper methods, so private constructor.\n    private DbQueryUtils() {\n    }\n\n    /** Returns a WHERE clause asserting equality of a field to a value. */\n    public static String getEqualityClause(String field, String value) {\n        return getClauseWithOperator(field, \"=\", value);\n    }\n\n    /** Returns a WHERE clause asserting equality of a field to a value. */\n    public static String getEqualityClause(String field, long value) {\n        return getClauseWithOperator(field, \"=\", value);\n    }\n\n    /** Returns a WHERE clause asserting in-equality of a field to a value. */\n    public static String getInequalityClause(String field, long value) {\n        return getClauseWithOperator(field, \"!=\", value);\n    }\n\n    private static String getClauseWithOperator(String field, String operator, String value) {\n        StringBuilder clause = new StringBuilder();\n        clause.append(\"(\");\n        clause.append(field);\n        clause.append(\" \").append(operator).append(\" \");\n        DatabaseUtils.appendEscapedSQLString(clause, value);\n        clause.append(\")\");\n        return clause.toString();\n    }\n\n    private static String getClauseWithOperator(String field, String operator, long value) {\n        StringBuilder clause = new StringBuilder();\n        clause.append(\"(\");\n        clause.append(field);\n        clause.append(\" \").append(operator).append(\" \");\n        clause.append(value);\n        clause.append(\")\");\n        return clause.toString();\n    }\n\n    /** Concatenates any number of clauses using \"AND\". */\n    public static String concatenateClauses(String... clauses) {\n        StringBuilder builder = new StringBuilder();\n        for (String clause : clauses) {\n            if (!TextUtils.isEmpty(clause)) {\n                if (builder.length() > 0) {\n                    builder.append(\" AND \");\n                }\n                builder.append(\"(\");\n                builder.append(clause);\n                builder.append(\")\");\n            }\n        }\n        return builder.toString();\n    }\n\n    /**\n     * Checks if the given ContentValues contains values within the projection  map.\n     * \n     * The method uses valueSet()/Entry to get and loop over the keys. The ContentValues.getKeys() method\n     * is not available in API 10, only since API 11 \n     * \n     * @throws IllegalArgumentException if any value in values is not found in the projection map.\n     */\n    public static void checkForSupportedColumns(HashMap<String, String> projectionMap, ContentValues values) {\n        Set<Entry<String, Object>> valueEntries = values.valueSet();\n        for (Entry<String, Object> requestedColumn : valueEntries) {\n            if (!projectionMap.keySet().contains(requestedColumn.getKey())) {\n                throw new IllegalArgumentException(\"Column '\" + requestedColumn + \"' is invalid.\");\n            }\n        }\n    }\n\n    /**\n     * Escape values to be used in LIKE sqlite clause.\n     *\n     * The LIKE clause has two special characters: '%' and '_'.  If either of these\n     * characters need to be matched literally, then they must be escaped like so:\n     *\n     * WHERE value LIKE 'android\\_%' ESCAPE '\\'\n     *\n     * The ESCAPE clause is required and no default exists as the escape character in this context.\n     * Since the escape character needs to be defined as part of the sql string, it must be\n     * provided to this method so the escape characters match.\n     *\n     * @param sb The StringBuilder to append the escaped value to.\n     * @param value The value to be escaped.\n     * @param escapeChar The escape character to be defined in the sql ESCAPE clause.\n     */\n    public static void escapeLikeValue(StringBuilder sb, String value, char escapeChar) {\n        for (int i = 0; i < value.length(); i++) {\n            char ch = value.charAt(i);\n            if (ch == '%' || ch == '_') {\n                sb.append(escapeChar);\n            }\n            sb.append(ch);\n        }\n    }\n\n    /**\n     * Concatenates two SQL WHERE clauses, handling empty or null values.\n     */\n    public static String concatenateWhere(String a, String b) {\n        if (TextUtils.isEmpty(a)) {\n            return b;\n        }\n        if (TextUtils.isEmpty(b)) {\n            return a;\n        }\n\n        return \"(\" + a + \") AND (\" + b + \")\";\n    }\n\n    // TODO: the following two methods are sort of workaround for 2.3.3\n    /**\n     * Runs an SQLite query and returns an AssetFileDescriptor for the\n     * blob in column 0 of the first row. If the first column does\n     * not contain a blob, an unspecified exception is thrown.\n     *\n     * @param db Handle to a readable database.\n     * @param sql SQL query, possibly with query arguments.\n     * @param selectionArgs Query argument values, or {@code null} for no argument.\n     * @return If no exception is thrown, a non-null AssetFileDescriptor is returned.\n     * @throws FileNotFoundException If the query returns no results or the\n     *         value of column 0 is NULL, or if there is an error creating the\n     *         asset file descriptor.\n     */\n    public static AssetFileDescriptor getBlobColumnAsAssetFile(SQLiteDatabase db, String sql,\n            String[] selectionArgs) throws FileNotFoundException {\n\n        android.os.ParcelFileDescriptor fd = null;\n\n        try {\n            MemoryFile file = simpleQueryForBlobMemoryFile(db, sql, selectionArgs);\n            if (file == null) {\n                throw new FileNotFoundException(\"No results.\");\n            }\n            Class<?> c = file.getClass();\n            try {\n                java.lang.reflect.Method m = c.getDeclaredMethod(\"getParcelFileDescriptor\");\n                m.setAccessible(true);\n                fd = (android.os.ParcelFileDescriptor)m.invoke(file);\n            } catch (Exception e) {\n                android.util.Log.i(\"SQLiteContentHelper\", \"SQLiteCursor.java: \" + e);\n            }       \n            AssetFileDescriptor afd = new AssetFileDescriptor(fd, 0, file.length());\n            return afd;\n        } catch (IOException ex) {\n            throw new FileNotFoundException(ex.toString());\n        }\n    }\n    /**\n     * Runs an SQLite query and returns a MemoryFile for the\n     * blob in column 0 of the first row. If the first column does\n     * not contain a blob, an unspecified exception is thrown.\n     *\n     * @return A memory file, or {@code null} if the query returns no results\n     *         or the value column 0 is NULL.\n     * @throws IOException If there is an error creating the memory file.\n     */\n    // TODO: make this native and use the SQLite blob API to reduce copying\n    private static MemoryFile simpleQueryForBlobMemoryFile(SQLiteDatabase db, String sql, String[] selectionArgs) \n            throws IOException {\n\n        Cursor cursor = db.rawQuery(sql, selectionArgs);\n        if (cursor == null) {\n            return null;\n        }\n        try {\n            if (!cursor.moveToFirst()) {\n                return null;\n            }\n            byte[] bytes = cursor.getBlob(0);\n            if (bytes == null) {\n                return null;\n            }\n            MemoryFile file = new MemoryFile(null, bytes.length);\n            file.writeBytes(bytes, 0, 0, bytes.length);\n//            file.deactivate();\n            return file;\n        } finally {\n            cursor.close();\n        }\n    }\n\n    /**\n     * Query the table for the number of rows in the table.\n     * \n     * @param db the database the table is in\n     * @param table the name of the table to query\n     * @return the number of rows in the table\n     */\n    public static long queryNumEntries(SQLiteDatabase db, String table) {\n        return longForQuery(db, \"select count(*) from \" + table);\n    }\n\n    /**\n     * Utility method to run the query on the db and return the value in the\n     * first column of the first row.\n     */\n    public static long longForQuery(SQLiteDatabase db, String query) {\n        SQLiteStatement prog = db.compileStatement(query);\n        try {\n            return prog.simpleQueryForLong();\n        } finally {\n            prog.close();\n        }\n    }\n}\n"], "body_t": ["<empty>"], "date_tdt": "2014-01-16T23:57:06Z", "hash_sni": "056ed515e6baf90ee7ce6df2c3c3801a1cb6eac0", "name_sni": "SilentContacts/src/main/java/com/silentcircle/contacts/utils/DbQueryUtils.java", "patch_t": ["+/*\n+Copyright \u00a9 2013-2014, Silent Circle, LLC.\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are met:\n+    * Any redistribution, use, or modification is done solely for personal \n+      benefit and not for any commercial purpose or for monetary gain\n+    * Redistributions of source code must retain the above copyright\n+      notice, this list of conditions and the following disclaimer.\n+    * Redistributions in binary form must reproduce the above copyright\n+      notice, this list of conditions and the following disclaimer in the\n+      documentation and/or other materials provided with the distribution.\n+    * Neither the name Silent Circle nor the names of its contributors may \n+      be used to endorse or promote products derived from this software \n+      without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL SILENT CIRCLE, LLC BE LIABLE FOR ANY\n+DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+*/\n+\n+/*\n+ * This  implementation is edited version of original Android sources.\n+ */\n+\n+/*\n+ * Copyright (C) 2011 The Android Open Source Project\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License\n+ */\n+\n+package com.silentcircle.contacts.utils;\n+\n+import android.content.ContentValues;\n+import android.content.res.AssetFileDescriptor;\n+import android.os.MemoryFile;\n+import android.text.TextUtils;\n+\n+import net.sqlcipher.Cursor;\n+import net.sqlcipher.DatabaseUtils;\n+import net.sqlcipher.database.SQLiteDatabase;\n+import net.sqlcipher.database.SQLiteStatement;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+/**\n+ * Static methods for helping us build database query selection strings.\n+ */\n+public class DbQueryUtils {\n+    // Static class with helper methods, so private constructor.\n+    private DbQueryUtils() {\n+    }\n+\n+    /** Returns a WHERE clause asserting equality of a field to a value. */\n+    public static String getEqualityClause(String field, String value) {\n+        return getClauseWithOperator(field, \"=\", value);\n+    }\n+\n+    /** Returns a WHERE clause asserting equality of a field to a value. */\n+    public static String getEqualityClause(String field, long value) {\n+        return getClauseWithOperator(field, \"=\", value);\n+    }\n+\n+    /** Returns a WHERE clause asserting in-equality of a field to a value. */\n+    public static String getInequalityClause(String field, long value) {\n+        return getClauseWithOperator(field, \"!=\", value);\n+    }\n+\n+    private static String getClauseWithOperator(String field, String operator, String value) {\n+        StringBuilder clause = new StringBuilder();\n+        clause.append(\"(\");\n+        clause.append(field);\n+        clause.append(\" \").append(operator).append(\" \");\n+        DatabaseUtils.appendEscapedSQLString(clause, value);\n+        clause.append(\")\");\n+        return clause.toString();\n+    }\n+\n+    private static String getClauseWithOperator(String field, String operator, long value) {\n+        StringBuilder clause = new StringBuilder();\n+        clause.append(\"(\");\n+        clause.append(field);\n+        clause.append(\" \").append(operator).append(\" \");\n+        clause.append(value);\n+        clause.append(\")\");\n+        return clause.toString();\n+    }\n+\n+    /** Concatenates any number of clauses using \"AND\". */\n+    public static String concatenateClauses(String... clauses) {\n+        StringBuilder builder = new StringBuilder();\n+        for (String clause : clauses) {\n+            if (!TextUtils.isEmpty(clause)) {\n+                if (builder.length() > 0) {\n+                    builder.append(\" AND \");\n+                }\n+                builder.append(\"(\");\n+                builder.append(clause);\n+                builder.append(\")\");\n+            }\n+        }\n+        return builder.toString();\n+    }\n+\n+    /**\n+     * Checks if the given ContentValues contains values within the projection  map.\n+     * \n+     * The method uses valueSet()/Entry to get and loop over the keys. The ContentValues.getKeys() method\n+     * is not available in API 10, only since API 11 \n+     * \n+     * @throws IllegalArgumentException if any value in values is not found in the projection map.\n+     */\n+    public static void checkForSupportedColumns(HashMap<String, String> projectionMap, ContentValues values) {\n+        Set<Entry<String, Object>> valueEntries = values.valueSet();\n+        for (Entry<String, Object> requestedColumn : valueEntries) {\n+            if (!projectionMap.keySet().contains(requestedColumn.getKey())) {\n+                throw new IllegalArgumentException(\"Column '\" + requestedColumn + \"' is invalid.\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Escape values to be used in LIKE sqlite clause.\n+     *\n+     * The LIKE clause has two special characters: '%' and '_'.  If either of these\n+     * characters need to be matched literally, then they must be escaped like so:\n+     *\n+     * WHERE value LIKE 'android\\_%' ESCAPE '\\'\n+     *\n+     * The ESCAPE clause is required and no default exists as the escape character in this context.\n+     * Since the escape character needs to be defined as part of the sql string, it must be\n+     * provided to this method so the escape characters match.\n+     *\n+     * @param sb The StringBuilder to append the escaped value to.\n+     * @param value The value to be escaped.\n+     * @param escapeChar The escape character to be defined in the sql ESCAPE clause.\n+     */\n+    public static void escapeLikeValue(StringBuilder sb, String value, char escapeChar) {\n+        for (int i = 0; i < value.length(); i++) {\n+            char ch = value.charAt(i);\n+            if (ch == '%' || ch == '_') {\n+                sb.append(escapeChar);\n+            }\n+            sb.append(ch);\n+        }\n+    }\n+\n+    /**\n+     * Concatenates two SQL WHERE clauses, handling empty or null values.\n+     */\n+    public static String concatenateWhere(String a, String b) {\n+        if (TextUtils.isEmpty(a)) {\n+            return b;\n+        }\n+        if (TextUtils.isEmpty(b)) {\n+            return a;\n+        }\n+\n+        return \"(\" + a + \") AND (\" + b + \")\";\n+    }\n+\n+    // TODO: the following two methods are sort of workaround for 2.3.3\n+    /**\n+     * Runs an SQLite query and returns an AssetFileDescriptor for the\n+     * blob in column 0 of the first row. If the first column does\n+     * not contain a blob, an unspecified exception is thrown.\n+     *\n+     * @param db Handle to a readable database.\n+     * @param sql SQL query, possibly with query arguments.\n+     * @param selectionArgs Query argument values, or {@code null} for no argument.\n+     * @return If no exception is thrown, a non-null AssetFileDescriptor is returned.\n+     * @throws FileNotFoundException If the query returns no results or the\n+     *         value of column 0 is NULL, or if there is an error creating the\n+     *         asset file descriptor.\n+     */\n+    public static AssetFileDescriptor getBlobColumnAsAssetFile(SQLiteDatabase db, String sql,\n+            String[] selectionArgs) throws FileNotFoundException {\n+\n+        android.os.ParcelFileDescriptor fd = null;\n+\n+        try {\n+            MemoryFile file = simpleQueryForBlobMemoryFile(db, sql, selectionArgs);\n+            if (file == null) {\n+                throw new FileNotFoundException(\"No results.\");\n+            }\n+            Class<?> c = file.getClass();\n+            try {\n+                java.lang.reflect.Method m = c.getDeclaredMethod(\"getParcelFileDescriptor\");\n+                m.setAccessible(true);\n+                fd = (android.os.ParcelFileDescriptor)m.invoke(file);\n+            } catch (Exception e) {\n+                android.util.Log.i(\"SQLiteContentHelper\", \"SQLiteCursor.java: \" + e);\n+            }       \n+            AssetFileDescriptor afd = new AssetFileDescriptor(fd, 0, file.length());\n+            return afd;\n+        } catch (IOException ex) {\n+            throw new FileNotFoundException(ex.toString());\n+        }\n+    }\n+    /**\n+     * Runs an SQLite query and returns a MemoryFile for the\n+     * blob in column 0 of the first row. If the first column does\n+     * not contain a blob, an unspecified exception is thrown.\n+     *\n+     * @return A memory file, or {@code null} if the query returns no results\n+     *         or the value column 0 is NULL.\n+     * @throws IOException If there is an error creating the memory file.\n+     */\n+    // TODO: make this native and use the SQLite blob API to reduce copying\n+    private static MemoryFile simpleQueryForBlobMemoryFile(SQLiteDatabase db, String sql, String[] selectionArgs) \n+            throws IOException {\n+\n+        Cursor cursor = db.rawQuery(sql, selectionArgs);\n+        if (cursor == null) {\n+            return null;\n+        }\n+        try {\n+            if (!cursor.moveToFirst()) {\n+                return null;\n+            }\n+            byte[] bytes = cursor.getBlob(0);\n+            if (bytes == null) {\n+                return null;\n+            }\n+            MemoryFile file = new MemoryFile(null, bytes.length);\n+            file.writeBytes(bytes, 0, 0, bytes.length);\n+//            file.deactivate();\n+            return file;\n+        } finally {\n+            cursor.close();\n+        }\n+    }\n+\n+    /**\n+     * Query the table for the number of rows in the table.\n+     * \n+     * @param db the database the table is in\n+     * @param table the name of the table to query\n+     * @return the number of rows in the table\n+     */\n+    public static long queryNumEntries(SQLiteDatabase db, String table) {\n+        return longForQuery(db, \"select count(*) from \" + table);\n+    }\n+\n+    /**\n+     * Utility method to run the query on the db and return the value in the\n+     * first column of the first row.\n+     */\n+    public static long longForQuery(SQLiteDatabase db, String query) {\n+        SQLiteStatement prog = db.compileStatement(query);\n+        try {\n+            return prog.simpleQueryForLong();\n+        } finally {\n+            prog.close();\n+        }\n+    }\n+}"], "score": 1.0, "methods_t": ["AssetFileDescriptor FileNotFoundException IllegalArgumentException MemoryFile StringBuilder append appendEscapedSQLString charAt close compileStatement contains getBlob getClass getClauseWithOperator getDeclaredMethod getKey i invoke isEmpty keySet length longForQuery moveToFirst rawQuery setAccessible simpleQueryForBlobMemoryFile simpleQueryForLong toString valueSet writeBytes"], "_version_": 1526735686324977664, "subject_t": ["silent contacts android v1.0.1"], "comments_t": ["/** \n * Escape values to be used in LIKE sqlite clause. The LIKE clause has two special characters: '%' and '_'.  If either of these characters need to be matched literally, then they must be escaped like so: WHERE value LIKE 'android\\_%' ESCAPE '\\' The ESCAPE clause is required and no default exists as the escape character in this context. Since the escape character needs to be defined as part of the sql string, it must be provided to this method so the escape characters match.\n * @param sb The StringBuilder to append the escaped value to.\n * @param value The value to be escaped.\n * @param escapeChar The escape character to be defined in the sql ESCAPE clause.\n */\n /** \n * Concatenates any number of clauses using \"AND\". \n */\n /** \n * Returns a WHERE clause asserting in-equality of a field to a value. \n */\n /** \n * Checks if the given ContentValues contains values within the projection  map. The method uses valueSet()/Entry to get and loop over the keys. The ContentValues.getKeys() method is not available in API 10, only since API 11 \n * @throws IllegalArgumentException if any value in values is not found in the projection map.\n */\n /** \n * Utility method to run the query on the db and return the value in the first column of the first row.\n */\n /** \n * Returns a WHERE clause asserting equality of a field to a value. \n */\n /*\n* This  implementation is edited version of original Android sources.\n*/\n /** \n * Query the table for the number of rows in the table.\n * @param db the database the table is in\n * @param table the name of the table to query\n * @return the number of rows in the table\n */\n /** \n * Static methods for helping us build database query selection strings.\n */\n     // TODO: make this native and use the SQLite blob API to reduce copying //            file.deactivate(); /** \n * Concatenates two SQL WHERE clauses, handling empty or null values.\n */\n /*\n* Copyright (C) 2011 The Android Open Source Project\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License\n*/\n /*\nCopyright \u00a9 2013-2014, Silent Circle, LLC.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n* Any redistribution, use, or modification is done solely for personal\nbenefit and not for any commercial purpose or for monetary gain\n* Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n* Neither the name Silent Circle nor the names of its contributors may\nbe used to endorse or promote products derived from this software\nwithout specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL SILENT CIRCLE, LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n /** \n * Runs an SQLite query and returns a MemoryFile for the blob in column 0 of the first row. If the first column does not contain a blob, an unspecified exception is thrown.\n * @return A memory file, or {@code null} if the query returns no resultsor the value column 0 is NULL.\n * @throws IOException If there is an error creating the memory file.\n */\n     // TODO: the following two methods are sort of workaround for 2.3.3     // Static class with helper methods, so private constructor. /** \n * Runs an SQLite query and returns an AssetFileDescriptor for the blob in column 0 of the first row. If the first column does not contain a blob, an unspecified exception is thrown.\n * @param db Handle to a readable database.\n * @param sql SQL query, possibly with query arguments.\n * @param selectionArgs Query argument values, or {@code null} for no argument.\n * @return If no exception is thrown, a non-null AssetFileDescriptor is returned.\n * @throws FileNotFoundException If the query returns no results or thevalue of column 0 is NULL, or if there is an error creating the asset file descriptor.\n */\n"], "callsites_t": ["com.silentcircle.contacts.utils.DbQueryUtils.getClauseWithOperator(java.lang.String, java.lang.String, long) java.lang.StringBuilder.toString() java.lang.StringBuilder.StringBuilder() android.content.res.AssetFileDescriptor.AssetFileDescriptor(android.os.ParcelFileDescriptor, int, int) java.lang.StringBuilder.append(java.lang.String) java.lang.StringBuilder.append(java.lang.String) java.lang.String.length() java.lang.StringBuilder.append(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.keySet() android.util.Log.i(java.lang.String, java.lang.String) java.util.Set.contains(java.lang.String) android.content.ContentValues.valueSet() java.lang.StringBuilder.append(java.lang.String) java.lang.StringBuilder.append(long) java.lang.StringBuilder.append(java.lang.String) java.lang.reflect.AccessibleObject.setAccessible(boolean) <unknown>.compileStatement(java.lang.String) java.lang.StringBuilder.StringBuilder() java.lang.StringBuilder.append(java.lang.String) <unknown>.rawQuery(java.lang.String, java.lang.String[]) android.os.MemoryFile.MemoryFile(null, int) android.text.TextUtils.isEmpty(java.lang.String) java.lang.reflect.Method.invoke(android.os.MemoryFile) android.os.MemoryFile.length() com.silentcircle.contacts.utils.DbQueryUtils.getClauseWithOperator(java.lang.String, java.lang.String, long) com.silentcircle.contacts.utils.DbQueryUtils.longForQuery(com.silentcircle.contacts.utils.SQLiteDatabase, java.lang.String) <unknown>.close() <unknown>.moveToFirst() com.silentcircle.contacts.utils.DbQueryUtils.simpleQueryForBlobMemoryFile(com.silentcircle.contacts.utils.SQLiteDatabase, java.lang.String, java.lang.String[]) java.lang.StringBuilder.append(java.lang.String) java.lang.StringBuilder.append(char) java.lang.StringBuilder.append(char) com.silentcircle.contacts.utils.DbQueryUtils.getClauseWithOperator(java.lang.String, java.lang.String, java.lang.String) java.lang.Object.getClass() <unknown>.close() java.lang.Throwable.toString() android.os.MemoryFile.writeBytes(byte[], int, int, int) java.lang.String.charAt(int) java.lang.StringBuilder.append(java.lang.String) java.lang.Class<>.getDeclaredMethod(java.lang.String) java.lang.StringBuilder.append(java.lang.String) <unknown>.getBlob(int) <unknown>.simpleQueryForLong() java.lang.StringBuilder.toString() java.io.FileNotFoundException.FileNotFoundException(java.lang.String) java.util.Map.Entry<java.lang.String,java.lang.Object>.getKey() java.lang.StringBuilder.append(java.lang.String) <unknown>.appendEscapedSQLString(java.lang.StringBuilder, java.lang.String) android.text.TextUtils.isEmpty(java.lang.String) java.lang.StringBuilder.length() android.text.TextUtils.isEmpty(java.lang.String) java.io.FileNotFoundException.FileNotFoundException(java.lang.String) java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)"], "id": "SilentCircle/silent-contacts-android\u0000056ed515e6baf90ee7ce6df2c3c3801a1cb6eac0\u0000SilentContacts/src/main/java/com/silentcircle/contacts/utils/DbQueryUtils.java", "callsites_cs": "com.silentcircle.contacts.utils.DbQueryUtils.getClauseWithOperator(java.lang.String, java.lang.String, long)#java.lang.StringBuilder.toString()#java.lang.StringBuilder.StringBuilder()#android.content.res.AssetFileDescriptor.AssetFileDescriptor(android.os.ParcelFileDescriptor, int, int)#java.lang.StringBuilder.append(java.lang.String)#java.lang.StringBuilder.append(java.lang.String)#java.lang.String.length()#java.lang.StringBuilder.append(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.keySet()#android.util.Log.i(java.lang.String, java.lang.String)#java.util.Set.contains(java.lang.String)#android.content.ContentValues.valueSet()#java.lang.StringBuilder.append(java.lang.String)#java.lang.StringBuilder.append(long)#java.lang.StringBuilder.append(java.lang.String)#java.lang.reflect.AccessibleObject.setAccessible(boolean)#<unknown>.compileStatement(java.lang.String)#java.lang.StringBuilder.StringBuilder()#java.lang.StringBuilder.append(java.lang.String)#<unknown>.rawQuery(java.lang.String, java.lang.String[])#android.os.MemoryFile.MemoryFile(null, int)#android.text.TextUtils.isEmpty(java.lang.String)#java.lang.reflect.Method.invoke(android.os.MemoryFile)#android.os.MemoryFile.length()#com.silentcircle.contacts.utils.DbQueryUtils.getClauseWithOperator(java.lang.String, java.lang.String, long)#com.silentcircle.contacts.utils.DbQueryUtils.longForQuery(com.silentcircle.contacts.utils.SQLiteDatabase, java.lang.String)#<unknown>.close()#<unknown>.moveToFirst()#com.silentcircle.contacts.utils.DbQueryUtils.simpleQueryForBlobMemoryFile(com.silentcircle.contacts.utils.SQLiteDatabase, java.lang.String, java.lang.String[])#java.lang.StringBuilder.append(java.lang.String)#java.lang.StringBuilder.append(char)#java.lang.StringBuilder.append(char)#com.silentcircle.contacts.utils.DbQueryUtils.getClauseWithOperator(java.lang.String, java.lang.String, java.lang.String)#java.lang.Object.getClass()#<unknown>.close()#java.lang.Throwable.toString()#android.os.MemoryFile.writeBytes(byte[], int, int, int)#java.lang.String.charAt(int)#java.lang.StringBuilder.append(java.lang.String)#java.lang.Class<>.getDeclaredMethod(java.lang.String)#java.lang.StringBuilder.append(java.lang.String)#<unknown>.getBlob(int)#<unknown>.simpleQueryForLong()#java.lang.StringBuilder.toString()#java.io.FileNotFoundException.FileNotFoundException(java.lang.String)#java.util.Map.Entry<java.lang.String,java.lang.Object>.getKey()#java.lang.StringBuilder.append(java.lang.String)#<unknown>.appendEscapedSQLString(java.lang.StringBuilder, java.lang.String)#android.text.TextUtils.isEmpty(java.lang.String)#java.lang.StringBuilder.length()#android.text.TextUtils.isEmpty(java.lang.String)#java.io.FileNotFoundException.FileNotFoundException(java.lang.String)#java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)"}, {"user_sni": "Cedric Fung", "repo_sni": "vecio/AndroidIPC", "imports_t": ["java.io.IOException android.app.Activity android.view.Menu android.util.Log android.os.Bundle android.os.MemoryFile"], "email_sni": "cedric@vec.io", "contents_t": ["package io.vec.demo.android.ipc;\n\nimport java.io.IOException;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.MemoryFile;\nimport android.util.Log;\nimport android.view.Menu;\n\npublic class MainActivity extends Activity {\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_main);\n\t\ttry {\n\t\t\tMemoryFile mf = new MemoryFile(\"shm-demo\", 1024);\n\t\t\tboolean ipcStatus = IPC.setMemoryFile(mf);\n\t\t\tLog.i(\"AndroidIPC::SHM\", \"IPC.setMemoryFile \" + ipcStatus);\n\t\t\tmf.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onCreateOptionsMenu(Menu menu) {\n\t\tgetMenuInflater().inflate(R.menu.main, menu);\n\t\treturn true;\n\t}\n\n}\n"], "body_t": ["<empty>"], "date_tdt": "2013-09-30T09:03:48Z", "hash_sni": "e475f079b8acb401e88c35454d0a7e5b961e5a0e", "name_sni": "src/io/vec/demo/android/ipc/MainActivity.java", "patch_t": [" package io.vec.demo.android.ipc;\n \n-import android.os.Bundle;\n+import java.io.IOException;\n+\n import android.app.Activity;\n+import android.os.Bundle;\n+import android.os.MemoryFile;\n+import android.util.Log;\n import android.view.Menu;\n \n public class MainActivity extends Activity {\n@@ -10,11 +14,18 @@ public class MainActivity extends Activity {\n \tprotected void onCreate(Bundle savedInstanceState) {\n \t\tsuper.onCreate(savedInstanceState);\n \t\tsetContentView(R.layout.activity_main);\n+\t\ttry {\n+\t\t\tMemoryFile mf = new MemoryFile(\"shm-demo\", 1024);\n+\t\t\tboolean ipcStatus = IPC.setMemoryFile(mf);\n+\t\t\tLog.i(\"AndroidIPC::SHM\", \"IPC.setMemoryFile \" + ipcStatus);\n+\t\t\tmf.close();\n+\t\t} catch (IOException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n \t}\n \n \t@Override\n \tpublic boolean onCreateOptionsMenu(Menu menu) {\n-\t\t// Inflate the menu; this adds items to the action bar if it is present.\n \t\tgetMenuInflater().inflate(R.menu.main, menu);\n \t\treturn true;\n \t}"], "score": 1.0, "methods_t": ["MemoryFile close getMenuInflater i inflate printStackTrace setContentView setMemoryFile"], "_version_": 1526730485742436352, "subject_t": ["Use Binder and ashmem to share memory"], "comments_t": ["<empty>"], "parents_ss": ["73e8902fc61367aef5c87b6cd9afe55d1b2b44c9"], "id": "vecio/AndroidIPC\u0000e475f079b8acb401e88c35454d0a7e5b961e5a0e\u0000src/io/vec/demo/android/ipc/MainActivity.java", "callsites_cs": "android.util.Log.i(java.lang.String, java.lang.String)#java.lang.Throwable.printStackTrace()#android.os.MemoryFile.MemoryFile(java.lang.String, int)#android.view.MenuInflater.inflate(<unknown>, android.view.Menu)#android.app.Activity.getMenuInflater()#android.os.MemoryFile.close()#<unknown>.setMemoryFile(android.os.MemoryFile)#android.app.Activity.setContentView(<unknown>)", "callsites_t": ["android.util.Log.i(java.lang.String, java.lang.String) java.lang.Throwable.printStackTrace() android.os.MemoryFile.MemoryFile(java.lang.String, int) android.view.MenuInflater.inflate(<unknown>, android.view.Menu) android.app.Activity.getMenuInflater() android.os.MemoryFile.close() <unknown>.setMemoryFile(android.os.MemoryFile) android.app.Activity.setContentView(<unknown>)"]}, {"user_sni": "kyorohiro", "repo_sni": "kyorohiro/KyoroStressV2", "imports_t": ["java.util.LinkedList android.os.MemoryFile"], "email_sni": "kyorohiro@gmail.com", "contents_t": ["package info.kyorohiro.helloworld.stress.task;\n\nimport java.util.LinkedList;\n\nimport android.os.MemoryFile;\n\npublic class StressUtility {\n\n\tpublic static LinkedList<byte[]> eatUpJavaHeap(int eatUpSize, int atomSize) {\n\t\tLinkedList<byte[]> list = new LinkedList<byte[]>();\n\t\treturn eatUpJavaHeap(list, eatUpSize, atomSize);\n\t}\n\n\tpublic static LinkedList<byte[]> eatUpJavaHeap(LinkedList<byte[]> list, int eatUpSize, int atomSize) {\n\t\ttry {\n\t\t\twhile(list.size()*atomSize < eatUpSize) {\n\t\t\t\tlist.add(new byte[atomSize]);\n\t\t\t}\n\t\t} catch(Throwable t) {\n\t\t\tt.printStackTrace();\n\t\t}\n\t\tfinally { \n\t\t}\n\t\treturn list;\n\t}\n\n\tpublic static long eatUpHeapFromMemoryFile(LinkedList<MemoryFile> list, int eatUpSize, int atomSize) {\n\t\tlong ret = 0;\n\t\ttry {\n\t\t\tbyte[] buffer = new byte[atomSize];\n\t\t\tdo{\n\t\t\t\tMemoryFile mmap = new MemoryFile(\"name\"+list.size(), eatUpSize/10);\n\t\t\t\tint s = 0;\n\t\t\t\tint e = 0;\n\t\t\t\twhile(true) {\n\t\t\t\t\te = s+buffer.length;\n\t\t\t\t\tif(e>eatUpSize/10) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(s!=e) {\n\t\t\t\t\t\tmmap.writeBytes(buffer, 0, s, buffer.length);\n\t\t\t\t\t}\n\t\t\t\t\ts = e;\n\t\t\t\t}\n\t\t\t\tlist.add(mmap);\n\t\t\t\tret += eatUpSize/10;\n\t\t\t} while(ret < eatUpSize);\n\t\t} catch(Throwable t) {\n\t\t\tandroid.util.Log.v(\"kiyo\",\"###eeee_d\"+t.getMessage());\n\t\t\tt.printStackTrace();\n\t\t}\n\t\tfinally { \n\t\t}\n\t\treturn ret;\n\t}\n\n}\n"], "body_t": ["<empty>"], "date_tdt": "2013-02-17T12:10:56Z", "hash_sni": "cf2c7a0e46155574841af1cfcc0bfb5b0a86cd7f", "name_sni": "src/info/kyorohiro/helloworld/stress/task/StressUtility.java", "patch_t": [" \n import java.util.LinkedList;\n \n+import android.os.MemoryFile;\n+\n public class StressUtility {\n \n \tpublic static LinkedList<byte[]> eatUpJavaHeap(int eatUpSize, int atomSize) {\n@@ -21,4 +23,35 @@ public class StressUtility {\n \t\t}\n \t\treturn list;\n \t}\n+\n+\tpublic static long eatUpHeapFromMemoryFile(LinkedList<MemoryFile> list, int eatUpSize, int atomSize) {\n+\t\tlong ret = 0;\n+\t\ttry {\n+\t\t\tbyte[] buffer = new byte[atomSize];\n+\t\t\tdo{\n+\t\t\t\tMemoryFile mmap = new MemoryFile(\"name\"+list.size(), eatUpSize/10);\n+\t\t\t\tint s = 0;\n+\t\t\t\tint e = 0;\n+\t\t\t\twhile(true) {\n+\t\t\t\t\te = s+buffer.length;\n+\t\t\t\t\tif(e>eatUpSize/10) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tif(s!=e) {\n+\t\t\t\t\t\tmmap.writeBytes(buffer, 0, s, buffer.length);\n+\t\t\t\t\t}\n+\t\t\t\t\ts = e;\n+\t\t\t\t}\n+\t\t\t\tlist.add(mmap);\n+\t\t\t\tret += eatUpSize/10;\n+\t\t\t} while(ret < eatUpSize);\n+\t\t} catch(Throwable t) {\n+\t\t\tandroid.util.Log.v(\"kiyo\",\"###eeee_d\"+t.getMessage());\n+\t\t\tt.printStackTrace();\n+\t\t}\n+\t\tfinally { \n+\t\t}\n+\t\treturn ret;\n+\t}\n+\n }\n\\ No newline at end of file"], "score": 1.0, "methods_t": ["LinkedList, byte[] MemoryFile add eatUpJavaHeap getMessage printStackTrace size v writeBytes"], "_version_": 1526735681327464448, "subject_t": ["house keeping"], "comments_t": ["<empty>"], "parents_ss": ["a1303d02064d5a469c2b35f70048183a81318d73"], "id": "kyorohiro/KyoroStressV2\u0000cf2c7a0e46155574841af1cfcc0bfb5b0a86cd7f\u0000src/info/kyorohiro/helloworld/stress/task/StressUtility.java", "callsites_cs": "java.lang.Throwable.getMessage()#info.kyorohiro.helloworld.stress.task.StressUtility.eatUpJavaHeap(java.util.LinkedList<byte[]>, int, int)#android.os.MemoryFile.writeBytes(byte[], int, int, int)#java.util.LinkedList<android.os.MemoryFile>.add(android.os.MemoryFile)#java.util.LinkedList<byte[]>.add(byte[])#java.util.LinkedList<byte[]>.LinkedList, byte[]()#android.os.MemoryFile.MemoryFile(java.lang.String, int)#java.util.LinkedList<android.os.MemoryFile>.size()#java.lang.Throwable.printStackTrace()#java.util.LinkedList<byte[]>.size()#java.lang.Throwable.printStackTrace()#android.util.Log.v(java.lang.String, java.lang.String)", "callsites_t": ["java.lang.Throwable.getMessage() info.kyorohiro.helloworld.stress.task.StressUtility.eatUpJavaHeap(java.util.LinkedList<byte[]>, int, int) android.os.MemoryFile.writeBytes(byte[], int, int, int) java.util.LinkedList<android.os.MemoryFile>.add(android.os.MemoryFile) java.util.LinkedList<byte[]>.add(byte[]) java.util.LinkedList<byte[]>.LinkedList, byte[]() android.os.MemoryFile.MemoryFile(java.lang.String, int) java.util.LinkedList<android.os.MemoryFile>.size() java.lang.Throwable.printStackTrace() java.util.LinkedList<byte[]>.size() java.lang.Throwable.printStackTrace() android.util.Log.v(java.lang.String, java.lang.String)"]}, {"user_sni": "kyorohiro", "repo_sni": "kyorohiro/KyoroStressV2", "imports_t": ["java.util.LinkedList info.kyorohiro.helloworld.stressv2.KyoroSetting android.os.MemoryFile"], "email_sni": "kyorohiro@gmail.com", "contents_t": ["package info.kyorohiro.helloworld.stress.task;\n\n\nimport info.kyorohiro.helloworld.stressv2.KyoroSetting;\nimport java.util.LinkedList;\n\nimport android.os.MemoryFile;\n\n\npublic class EatUpMemoryFileTask implements Runnable {\n\tprivate LinkedList<MemoryFile> mBuffer = new LinkedList<MemoryFile>();\n\tpublic static int mEatUpSize = 10*1024*1024;\n\tpublic static int mAtomSize = 1024*4;\n\n\tpublic EatUpMemoryFileTask(LinkedList<MemoryFile> buffer) {\n\t\tif(buffer == null) {\n\t\t\tbuffer = new LinkedList<MemoryFile>();\n\t\t}\n\t\ttry {\n\t\t\tmEatUpSize = KyoroSetting.getEatupHeapSize() * 1024;\n\t\t} catch(Throwable t) {\n\t\t\tt.printStackTrace();\n\t\t}\n\t\tmBuffer = buffer;\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\tString retryValue = null;\n\t\ttry {\n\t\t\twhile(true) {\n\t\t\t\tretryValue = KyoroSetting.getRetry();\n\t\t\t\tlong size = StressUtility.eatUpHeapFromMemoryFile(mBuffer, mEatUpSize, mAtomSize);\n\t\t\t\tif(KyoroSetting.RETRY_ON.equals(retryValue)&& size < mEatUpSize) {\n\t\t\t\t\tThread.sleep(500);\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2013-02-17T12:10:56Z", "hash_sni": "cf2c7a0e46155574841af1cfcc0bfb5b0a86cd7f", "name_sni": "src/info/kyorohiro/helloworld/stress/task/EatUpMemoryFileTask.java", "patch_t": ["+package info.kyorohiro.helloworld.stress.task;\n+\n+\n+import info.kyorohiro.helloworld.stressv2.KyoroSetting;\n+import java.util.LinkedList;\n+\n+import android.os.MemoryFile;\n+\n+\n+public class EatUpMemoryFileTask implements Runnable {\n+\tprivate LinkedList<MemoryFile> mBuffer = new LinkedList<MemoryFile>();\n+\tpublic static int mEatUpSize = 10*1024*1024;\n+\tpublic static int mAtomSize = 1024*4;\n+\n+\tpublic EatUpMemoryFileTask(LinkedList<MemoryFile> buffer) {\n+\t\tif(buffer == null) {\n+\t\t\tbuffer = new LinkedList<MemoryFile>();\n+\t\t}\n+\t\ttry {\n+\t\t\tmEatUpSize = KyoroSetting.getEatupHeapSize() * 1024;\n+\t\t} catch(Throwable t) {\n+\t\t\tt.printStackTrace();\n+\t\t}\n+\t\tmBuffer = buffer;\n+\t}\n+\n+\t@Override\n+\tpublic void run() {\n+\t\tString retryValue = null;\n+\t\ttry {\n+\t\t\twhile(true) {\n+\t\t\t\tretryValue = KyoroSetting.getRetry();\n+\t\t\t\tlong size = StressUtility.eatUpHeapFromMemoryFile(mBuffer, mEatUpSize, mAtomSize);\n+\t\t\t\tif(KyoroSetting.RETRY_ON.equals(retryValue)&& size < mEatUpSize) {\n+\t\t\t\t\tThread.sleep(500);\n+\t\t\t\t} else {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (InterruptedException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\n+\t}\n+}"], "score": 1.0, "methods_t": ["LinkedList, MemoryFile eatUpHeapFromMemoryFile equals getEatupHeapSize getRetry printStackTrace sleep"], "_version_": 1526735681332707329, "subject_t": ["house keeping"], "comments_t": ["<empty>"], "callsites_t": ["<unknown>.getRetry() java.lang.Throwable.printStackTrace() <unknown>.equals(java.lang.String) java.util.LinkedList<android.os.MemoryFile>.LinkedList, MemoryFile() java.lang.Thread.sleep(int) <unknown>.eatUpHeapFromMemoryFile(java.util.LinkedList<android.os.MemoryFile>, int, int) java.util.LinkedList<android.os.MemoryFile>.LinkedList, MemoryFile() <unknown>.getEatupHeapSize() java.lang.Throwable.printStackTrace()"], "id": "kyorohiro/KyoroStressV2\u0000cf2c7a0e46155574841af1cfcc0bfb5b0a86cd7f\u0000src/info/kyorohiro/helloworld/stress/task/EatUpMemoryFileTask.java", "callsites_cs": "<unknown>.getRetry()#java.lang.Throwable.printStackTrace()#<unknown>.equals(java.lang.String)#java.util.LinkedList<android.os.MemoryFile>.LinkedList, MemoryFile()#java.lang.Thread.sleep(int)#<unknown>.eatUpHeapFromMemoryFile(java.util.LinkedList<android.os.MemoryFile>, int, int)#java.util.LinkedList<android.os.MemoryFile>.LinkedList, MemoryFile()#<unknown>.getEatupHeapSize()#java.lang.Throwable.printStackTrace()"}], "numFound": 5, "start": 0}}