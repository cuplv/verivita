{"responseHeader": {"status": 0}, "response": {"docs": [{"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener com.vinsol.expensetracker.utils.DisplayDate android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayDate;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\tprivate Boolean isChanged = false;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\")) {\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ****** ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio  ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\tisChanged = true;\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif(mRecordingHelper != null)\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\t\n\t\t\tif(intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\t\tIntent mIntent = new Intent(this, ShowTextActivity.class);\n\t\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t\tBundle tempBundle = new Bundle();\n\t\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\t\tmEditList = new ArrayList<String>();\n\t\t\t\tmEditList.addAll(listOnResult);\n\t\t\t\tmIntent.putExtra(\"textShowBundle\", tempBundle);\n\t\t\t\tsetResult(Activity.RESULT_CANCELED, mIntent);\n\t\t\t}\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,mDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\t\t ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\t\n\t\t\n\t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tBundle mToHighLight = new Bundle();\n\t\t\tmToHighLight.putString(\"toHighLight\", _list.get(DatabaseAdapter.KEY_ID));\n\t\t\tintentExpenseListing.putExtras(mToHighLight);\n\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t} else {\n\t\t\t\n\t\t\tIntent mIntent = new Intent(this, ShowVoiceActivity.class);\n\t\t\tBundle tempBundle = new Bundle();\n\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\tlistOnResult.add(mEditList.get(0));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_TAG));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_AMOUNT));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n\t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDateDate(_list.get(DatabaseAdapter.KEY_DATE_TIME)));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(3));\n\t\t\t}\t\t\t\t\n\t\t\tif((mEditList.get(1) != listOnResult.get(1)) || (mEditList.get(2) != listOnResult.get(2)) || isChanged ) {\n\t\t\t\tShowTextActivity.favID = null;\n\t\t\t\tHashMap<String, String> listForFav = new HashMap<String, String>();\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_FAVORITE, \"\");\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_ID, mEditList.get(0));\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.editDatabase(listForFav);\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t} else if(ShowVoiceActivity.favID == null) {\n\t\t\t\t\tlistOnResult.add(mEditList.get(4));\n\t\t\t\t}\n\t\t\t\telse { \n\t\t\t\t\tlistOnResult.add(ShowVoiceActivity.favID);\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(5));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n\t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(6));\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(7));\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList.addAll(listOnResult);\n\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\tmIntent.putExtra(\"voiceShowBundle\", tempBundle);\n\t\t\tsetResult(Activity.RESULT_OK, mIntent);\n\t\t}\n\t\tfinish();\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-12T14:15:52Z", "hash_sni": "42f7b119ff2a1e43f185038dbba2711ba7bcefb4", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \t\t\n \t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n \t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n+\t\t\tBundle mToHighLight = new Bundle();\n+\t\t\tmToHighLight.putString(\"toHighLight\", _list.get(DatabaseAdapter.KEY_ID));\n+\t\t\tintentExpenseListing.putExtras(mToHighLight);\n \t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n \t\t\tstartActivity(intentExpenseListing);\n \t\t} else {"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay Bundle DatabaseAdapter DateHandler DateHelper DisplayDate DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper add addAll addFlags canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLocationDate getLocationDateDate getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put putExtra putExtras putString putStringArrayList saveEntry setBase setClickListeners setContentView setFirstDayOfWeek setGraphicsVoice setOnChronometerTickListener setOnClickListener setResult setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim"], "_version_": 1526726163647430656, "subject_t": ["Ready for testing"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// ////// ******** Starts Recording each time activity starts ****** /////// \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items ********** ///////// \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// //// ******* Update database if user added additional info *******\t\t /////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t// //// ****** If audio recording started then stop recording audio  ***** /////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["b4530849bd081acd9a91404dbcb619fd1f92825c"], "id": "vinsol/expense-tracker\u000042f7b119ff2a1e43f185038dbba2711ba7bcefb4\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#<unknown>.getLocationDateDate(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.os.Bundle.putString(java.lang.String, <unknown>)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#<unknown>.getLocationDate(<unknown>, java.lang.String)#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.Bundle()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setResult(int, android.content.Intent)#android.widget.TextView.getText()#android.content.Intent.putExtras(android.os.Bundle)#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.DisplayDate()#<unknown>.isAudioPlaying()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.widget.TextView.getText()#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.view.KeyEvent.getRepeatCount()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.content.Intent.addFlags(int)#android.os.Bundle.Bundle()#android.app.Activity.setResult(int, android.content.Intent)#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#<unknown>.isRecording()#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) <unknown>.getLocationDateDate(<unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.os.Bundle.putString(java.lang.String, <unknown>) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.util.ArrayList<java.lang.String>.get(int) java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() <unknown>.getLocationDate(<unknown>, java.lang.String) android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.Bundle() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setResult(int, android.content.Intent) android.widget.TextView.getText() android.content.Intent.putExtras(android.os.Bundle) <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.DisplayDate() <unknown>.isAudioPlaying() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() java.util.ArrayList<java.lang.String>.add(<unknown>) android.widget.TextView.getText() <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.add(java.lang.String) android.view.KeyEvent.getRepeatCount() java.util.ArrayList<java.lang.String>.add(<unknown>) android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.ArrayList<java.lang.String>.ArrayList, String() android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.content.Intent.addFlags(int) android.os.Bundle.Bundle() android.app.Activity.setResult(int, android.content.Intent) android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) <unknown>.isRecording() android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent android.view.Window com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class Voice extends Activity implements OnClickListener{\n\t\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\t\n\t\t///////   ****** No Title Bar   ********* /////////\n        \n        \n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        \n        setContentView(R.layout.text_voice_camera);\n        \n        \n        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n        \n        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n    \ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n    \ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n    \ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n    \tmDatabaseAdapter = new DatabaseAdapter(this);\n    \t\n    \t////////*********     Get id from intent extras     ********   ////////////\n        intentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n        _id = intentExtras.getLong(\"_id\");\n    \t\n        \n        \n        \n        ////////   ********  Handle Date Bar   *********   ////////\n        new DateHandler(this);\n        \n        \n        ////////   ********   Starts Recording each time activity starts   ******   ///////\n        if(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n        \tsetGraphicsVoice();\n        \tcontrolVoiceChronometer();\n        \tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n        \tmRecordingHelper.startRecording();\n        } \n        else {\n        \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n        }\n        setClickListeners();\n\t\t\n\t\t////////*********     Get Last most accurate location info   *********   /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\t\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\n\t\n\t@Override\n\tprotected void onPause() {\n\t\t\n\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t}\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n\t\t\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n\t\t\n\t\t\n\t\t////  ***** if stop button pressed ****** //////\n\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n\t\t\tmRecordingHelper.stopRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t}\n\t\t\n\t\t\n\t\t////  ***** if play button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n\t\t\tmAudioPlay = new AudioPlay(_id+\"\",this);\n\t\t\t\n\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n\t\t\tif(!mAudioPlay.isAudioPlaying()){\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\t\t\n\t\t////  ***** if rerecord button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){}\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\t\t\t\n\t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n\t\t\tif(mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\t\t\n\t\t////////********  Adding Action to save entry     *********    ///////////\n\t\t\n\t\tif(v.getId() == R.id.text_voice_camera_save_entry){\n\t\t\tsaveEntry();\n\t\t}\n\t\n\t\n\t\t/////////     *********   Adding action if delete button **********  /////////\n\t\n\t\tif(v.getId() == R.id.text_voice_camera_delete){\n\t\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t}\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\n\t\t\tnew FileDelete(_id);\n\t\t\n\t\t\t//////   *******   Delete entry from database ********   /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n\t\n\tprivate void saveEntry() {\n\t\t///////    *******  Creating HashMap to update info   *******  ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\t\t\n\t\tif(!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")){\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double)((int)((mAmount+0.005)*100.0)/100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\t\n\t\tif(text_voice_camera_tag.getText().toString() != \"\"){\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\t\t\n\t\tif(!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString))\t\n\t\ttry{\n\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\t//////    *******   Update database if user added additional info   *******  ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\tstartActivity(intentExpenseListing);\n\t}\n\n\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\t\n\t\n\t///// ******************  Handling back press of key   ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n\t     if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t    \t onBackPressed();\n\t         return true;\n\t      }\n\t    return super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t    // This will be called either automatically for you on 2.0    \n\t    // or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t    return;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-24T14:26:29Z", "hash_sni": "8bac2deef1cd35abda043ca84e78770bc802dd09", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \t\t///////    *******  Creating HashMap to update info   *******  ////////\n \t\tHashMap<String, String> _list = new HashMap<String, String>();\n \t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n-\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, text_voice_camera_amount.getText().toString());\n-\t\t\t\t\n+\t\t\n+\t\tif(!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")){\n+\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n+\t\t\tmAmount = (double)((int)((mAmount+0.005)*100.0)/100.0);\n+\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n+\t\t} else {\n+\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n+\t\t}\t\n \t\tif(text_voice_camera_tag.getText().toString() != \"\"){\n \t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n \t\t}"], "score": 1.0, "methods_t": ["AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper cancel close controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish getBundleExtra getDisplayTime getExternalStorageState getId getIntent getLastLocation getLong getPlayBackTime getRepeatCount getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble printStackTrace put requestWindowFeature saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526726191661187072, "subject_t": ["Final commit Nov 24"], "comments_t": ["\t\t////////********  Adding Action to save entry     *********    /////////// \t//countdowntimer is an abstract class, so extend it and fill in methods         ///////   ***** Sets Title Voice Entry *********/////// \t\t///////   ****** No Title Bar   ********* /////////         ////////   ********    Initializing and assigning memory to UI Items **********    /////////     \t////////*********     Get id from intent extras     ********   //////////// \t    // This will be called either automatically for you on 2.0     \t\t\t///////   *******   Chronometer Starts Countdown   ******  /////// \t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** /////// \t\t\t//////  ******  Restarts chronometer and recording   *******  //////// \t\t////////    *******    Adding Click Listeners to UI Items ******** ////////// \t\t\t//////   *****  Check whether audio is recording or not   *******   /////// \t///// ******************  Handling back press of key   ********** /////////// \t\t////////*********     Get Last most accurate location info   *********   ///////// \t\t////  ***** if play button pressed ****** //////\t\t \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   //////// \t\t\t//////   *******   Delete entry from database ********   ///////// \t\t////  ***** if rerecord button pressed ****** //////\t\t \t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t//////    *******   Update database if user added additional info   *******  /////// \t\t///////   ********     Adding On Click Actions to click listeners *********    ////////// \t\t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////       \t\t////  ***** if stop button pressed ****** //////         ////////   ********   Starts Recording each time activity starts   ******   /////// \t    // or later, or by the code above on earlier versions of the platform. \t\t///////   ***** Sets Title Voice Entry *********/////// \t\t\t//////   ******   Handles UI items on button click  ******  ///////         //////   ******  Shows Voice Details ********//////// \t\t\t//////\t     ********   to handle playback of recorded file   *********   //////// \t\t///////    *******  Creating HashMap to update info   *******  ////////         ////////   ********  Handle Date Bar   *********   //////// \t\t/////////     *********   Adding action if delete button **********  /////////"], "parents_ss": ["ec69e0a972fad3ed1f7e08df339475bc0b645454"], "id": "vinsol/expense-tracker\u00008bac2deef1cd35abda043ca84e78770bc802dd09\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.isRecording()#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.lang.Long.toString(long)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getLastLocation()#android.widget.TextView.getText()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#com.vinsol.expensetracker.Voice.onBackPressed()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.app.Activity.finish()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.lang.Long.toString(long)#com.vinsol.expensetracker.Voice.setGraphicsVoice()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#android.view.View.setVisibility(int)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DisplayTime()#android.os.SystemClock.elapsedRealtime()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.widget.TextView.getText()#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#android.view.KeyEvent.getRepeatCount()#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#android.os.Environment.getExternalStorageState()#android.widget.Chronometer.setOnChronometerTickListener()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.length()#<unknown>.getPlayBackTime()#.OnChronometerTickListener()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.requestWindowFeature(int)#<unknown>.open()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#android.view.View.setVisibility(int)#android.widget.Toast.show()#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.startPlayBack()#java.lang.CharSequence.toString()#<unknown>.close()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#java.lang.Double.toString()#android.widget.Chronometer.stop()#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#<unknown>.isRecording()#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)#android.app.Activity.finish()", "callsites_t": ["<unknown>.isRecording() <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.view.View.setVisibility(int) android.widget.Chronometer.start() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.lang.Long.toString(long) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) android.view.View.setVisibility(int) <unknown>.getLastLocation() android.widget.TextView.getText() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() com.vinsol.expensetracker.Voice.onBackPressed() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.app.Activity.finish() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.lang.Long.toString(long) com.vinsol.expensetracker.Voice.setGraphicsVoice() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() android.view.View.setVisibility(int) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DisplayTime() android.os.SystemClock.elapsedRealtime() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.widget.TextView.getText() android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) android.view.KeyEvent.getRepeatCount() com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) android.os.Environment.getExternalStorageState() android.widget.Chronometer.setOnChronometerTickListener() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.length() <unknown>.getPlayBackTime() .OnChronometerTickListener() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.requestWindowFeature(int) <unknown>.open() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) android.view.View.setVisibility(int) android.widget.Toast.show() android.view.View.setVisibility(int) android.widget.Chronometer.start() android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.startPlayBack() java.lang.CharSequence.toString() <unknown>.close() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) java.lang.Double.toString() android.widget.Chronometer.stop() java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) android.view.View.getId() <unknown>.isRecording() android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long) android.app.Activity.finish()"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener com.vinsol.expensetracker.utils.DisplayDate android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.StringProcessing com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayDate;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\nimport com.vinsol.expensetracker.utils.StringProcessing;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\tprivate Boolean isChanged = false;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\")) {\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry)) || mEditList.get(5).equals(getString(R.string.unknown))){\n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ****** ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio  ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\tisChanged = true;\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif(mRecordingHelper != null)\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\t\n\t\t\tif(intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\t\tIntent mIntent = new Intent(this, ShowTextActivity.class);\n\t\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t\tBundle tempBundle = new Bundle();\n\t\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\t\tmEditList = new ArrayList<String>();\n\t\t\t\tmEditList.addAll(listOnResult);\n\t\t\t\tmIntent.putExtra(\"textShowBundle\", tempBundle);\n\t\t\t\tsetResult(Activity.RESULT_CANCELED, mIntent);\n\t\t\t}\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, \"\");\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\n\t\t\n\t\t\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,mDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\t\t ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\t\n\t\t\n\t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tBundle mToHighLight = new Bundle();\n\t\t\tmToHighLight.putString(\"toHighLight\", _list.get(DatabaseAdapter.KEY_ID));\n\t\t\tintentExpenseListing.putExtras(mToHighLight);\n\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t} else {\n\t\t\t\n\t\t\tIntent mIntent = new Intent(this, ShowVoiceActivity.class);\n\t\t\tBundle tempBundle = new Bundle();\n\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\tlistOnResult.add(mEditList.get(0));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_TAG));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_AMOUNT));\n\t\t\tif(listOnResult.get(2) == null || listOnResult.get(2) == \"\"){\n\t\t\t\tlistOnResult.set(2, \"?\");\n\t\t\t}\n\t\t\t\n\t\t\tif(!mEditList.get(1).equals(listOnResult.get(1))) {\n\t\t\t\n\t\t\t\tif (listOnResult.get(1) == null || listOnResult.get(1).equals(\"\") || listOnResult.get(1).equals(getString(R.string.unfinished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.finished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.unknown_entry))) {\n\t\t\t\t\tlistOnResult.set(1, getString(R.string.finished_voiceentry));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (mEditList.get(1) == null || mEditList.get(1).equals(\"\") || mEditList.get(1).equals(getString(R.string.unfinished_voiceentry)) || mEditList.get(1).equals(getString(R.string.finished_voiceentry)) || mEditList.get(1).equals(getString(R.string.unknown_entry))) {\n\t\t\t\t\tmEditList.set(1, getString(R.string.finished_voiceentry));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n\t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDateDate(_list.get(DatabaseAdapter.KEY_DATE_TIME)));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(3));\n\t\t\t}\n\t\t\tBoolean isAmountNotEqual = false;\n\t\t\ttry{\n\t\t\t\tisAmountNotEqual = Double.parseDouble(new StringProcessing().getStringDoubleDecimal(listOnResult.get(2))) != Double.parseDouble(mEditList.get(2));\n\t\t\t}catch(Exception e){\n\t\t\t\tisAmountNotEqual = true;\n\t\t\t}\n\t\t\tif((!mEditList.get(1).equals(listOnResult.get(1))) || isAmountNotEqual || isChanged ) {\n\t\t\t\tisChanged = false;\n\t\t\t\tShowVoiceActivity.favID = null;\n\t\t\t\tHashMap<String, String> listForFav = new HashMap<String, String>();\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_FAVORITE, \"\");\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_ID, mEditList.get(0));\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.editDatabase(listForFav);\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t} else \n\t\t\t\tif(ShowVoiceActivity.favID == null) {\n\t\t\t\t\tlistOnResult.add(mEditList.get(4));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlistOnResult.add(ShowVoiceActivity.favID);\n\t\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(5));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n\t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(6));\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(7));\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList.addAll(listOnResult);\n\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\tmIntent.putExtra(\"voiceShowBundle\", tempBundle);\n\t\t\tsetResult(Activity.RESULT_OK, mIntent);\n\t\t}\n\t\tfinish();\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-15T11:39:59Z", "hash_sni": "1d3defef5c3de0999063c625a5b67f9cb03aaae0", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" import android.os.Bundle;\n import android.os.CountDownTimer;\n import android.os.SystemClock;\n-import android.util.Log;\n import android.view.KeyEvent;\n import android.view.View;\n import android.view.View.OnClickListener;\n@@ -450,7 +449,6 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\tif((!mEditList.get(1).equals(listOnResult.get(1))) || isAmountNotEqual || isChanged ) {\n \t\t\t\tisChanged = false;\n \t\t\t\tShowVoiceActivity.favID = null;\n-\t\t\t\tLog.v(\"isChanged\", isChanged+\" \"+ShowVoiceActivity.favID);\n \t\t\t\tHashMap<String, String> listForFav = new HashMap<String, String>();\n \t\t\t\tlistForFav.put(DatabaseAdapter.KEY_FAVORITE, \"\");\n \t\t\t\tlistForFav.put(DatabaseAdapter.KEY_ID, mEditList.get(0));\n@@ -463,7 +461,6 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t\t\tlistOnResult.add(mEditList.get(4));\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\tLog.v(\"ShowVoiceActivity.favID\", ShowVoiceActivity.favID+\" fav\");\n \t\t\t\t\tlistOnResult.add(ShowVoiceActivity.favID);\n \t\t\t\t}\n \t\t\tlistOnResult.add(mEditList.get(5));"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay Bundle DatabaseAdapter DateHandler DateHelper DisplayDate DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper StringProcessing add addAll addFlags canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLocationDate getLocationDateDate getLong getPlayBackTime getRepeatCount getString getStringArrayList getStringDoubleDecimal getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put putExtra putExtras putString putStringArrayList saveEntry set setBase setClickListeners setContentView setFirstDayOfWeek setGraphicsVoice setOnChronometerTickListener setOnClickListener setResult setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim"], "_version_": 1526726374002262016, "subject_t": ["Ready For Launch"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// ////// ******** Starts Recording each time activity starts ****** /////// \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items ********** ///////// \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// //// ******* Update database if user added additional info *******\t\t /////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t// //// ****** If audio recording started then stop recording audio  ***** /////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["fb336e9a1af83b45bba8d95fa92a02e8ae030615"], "id": "vinsol/expense-tracker\u00001d3defef5c3de0999063c625a5b67f9cb03aaae0\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#java.lang.String.equals(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#java.lang.Double.parseDouble(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.lang.String.equals(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#<unknown>.getLocationDateDate(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.content.Context.getString(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.set(int, <unknown>)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.os.Bundle.putString(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#<unknown>.getLocationDate(<unknown>, java.lang.String)#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.content.Context.getString(<unknown>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.Bundle()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#java.lang.String.equals(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setResult(int, android.content.Intent)#android.widget.TextView.getText()#android.content.Intent.putExtras(android.os.Bundle)#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#java.lang.String.equals(java.lang.String)#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.StringProcessing()#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#java.lang.String.equals(java.lang.String)#java.util.ArrayList<java.lang.String>.set(int, <unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.DisplayDate()#<unknown>.isAudioPlaying()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#java.lang.String.equals(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.widget.TextView.getText()#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.view.KeyEvent.getRepeatCount()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.content.Intent.addFlags(int)#android.os.Bundle.Bundle()#android.app.Activity.setResult(int, android.content.Intent)#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#<unknown>.isRecording()#<unknown>.getStringDoubleDecimal(java.lang.String)#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) java.lang.String.equals(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() java.lang.Double.parseDouble(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.add(<unknown>) java.lang.String.equals(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) <unknown>.getLocationDateDate(<unknown>) android.app.Activity.findViewById(<unknown>) android.content.Context.getString(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.set(int, <unknown>) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.Double.parseDouble(<unknown>) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.os.Bundle.putString(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.util.ArrayList<java.lang.String>.get(int) java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() <unknown>.getLocationDate(<unknown>, java.lang.String) android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) java.lang.String.equals(<unknown>) android.widget.TextView.setText(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.content.Context.getString(<unknown>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) java.lang.String.equals(<unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.Bundle() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) java.lang.String.equals(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setResult(int, android.content.Intent) android.widget.TextView.getText() android.content.Intent.putExtras(android.os.Bundle) <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() java.lang.String.equals(java.lang.String) android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.StringProcessing() android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.util.ArrayList<java.lang.String>.get(int) java.lang.String.equals(java.lang.String) java.util.ArrayList<java.lang.String>.set(int, <unknown>) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.DisplayDate() <unknown>.isAudioPlaying() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() java.lang.String.equals(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) android.widget.TextView.getText() <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.add(java.lang.String) android.view.KeyEvent.getRepeatCount() java.util.ArrayList<java.lang.String>.add(<unknown>) android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.ArrayList<java.lang.String>.ArrayList, String() android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.content.Intent.addFlags(int) android.os.Bundle.Bundle() android.app.Activity.setResult(int, android.content.Intent) android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) <unknown>.isRecording() <unknown>.getStringDoubleDecimal(java.lang.String) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener com.vinsol.expensetracker.utils.DisplayDate android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayDate;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\tprivate Boolean isChanged = false;\n\t\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\")) {\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ****** ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio  ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\tisChanged = true;\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif(mRecordingHelper != null)\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,mDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\t\t ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\t\n\t\t\n\t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t} else {\n\t\t\t\n\t\t\tIntent mIntent = new Intent(this, ShowVoiceActivity.class);\n\t\t\tBundle tempBundle = new Bundle();\n\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\tlistOnResult.add(mEditList.get(0));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_TAG));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_AMOUNT));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n\t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDateDate(_list.get(DatabaseAdapter.KEY_DATE_TIME)));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(3));\n\t\t\t}\t\t\t\t\n\t\t\tif((mEditList.get(1) != listOnResult.get(1)) || (mEditList.get(2) != listOnResult.get(2)) || isChanged ) {\n\t\t\t\tShowTextActivity.favID = null;\n\t\t\t\tHashMap<String, String> listForFav = new HashMap<String, String>();\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_FAVORITE, \"\");\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_ID, mEditList.get(0));\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.editDatabase(listForFav);\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t} else if(ShowVoiceActivity.favID == null) {\n\t\t\t\t\tlistOnResult.add(mEditList.get(4));\n\t\t\t\t}\n\t\t\t\telse { \n\t\t\t\t\tlistOnResult.add(ShowVoiceActivity.favID);\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(5));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n\t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(6));\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(7));\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList.addAll(listOnResult);\n\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\tmIntent.putExtra(\"voiceShowBundle\", tempBundle);\n\t\t\tsetResult(Activity.RESULT_OK, mIntent);\n\t\t}\n\t\tfinish();\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-12T10:38:51Z", "hash_sni": "2791ed27f7882f037221f8aff4fd75946200073b", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \t\t\n \t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n \t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n-\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);\n+\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n \t\t\tstartActivity(intentExpenseListing);\n \t\t} else {\n \t\t\t"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay Bundle DatabaseAdapter DateHandler DateHelper DisplayDate DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper add addAll addFlags canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLocationDate getLocationDateDate getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put putExtra putStringArrayList saveEntry setBase setClickListeners setContentView setFirstDayOfWeek setGraphicsVoice setOnChronometerTickListener setOnClickListener setResult setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim"], "_version_": 1526724850578620416, "subject_t": ["Added FLAG ACTIVITY CLEAR TOP"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// ////// ******** Starts Recording each time activity starts ****** /////// \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items ********** ///////// \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// //// ******* Update database if user added additional info *******\t\t /////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t// //// ****** If audio recording started then stop recording audio  ***** /////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["824dc3cf210d2bcf7ea5de5716edec27606b6a34"], "id": "vinsol/expense-tracker\u00002791ed27f7882f037221f8aff4fd75946200073b\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#<unknown>.getLocationDateDate(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#<unknown>.getLocationDate(<unknown>, java.lang.String)#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.Bundle()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.DisplayDate()#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.widget.TextView.getText()#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.view.KeyEvent.getRepeatCount()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.content.Intent.addFlags(int)#android.app.Activity.setResult(int, android.content.Intent)#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#<unknown>.isRecording()#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) <unknown>.getLocationDateDate(<unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.util.ArrayList<java.lang.String>.get(int) java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() <unknown>.getLocationDate(<unknown>, java.lang.String) android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.Bundle() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.DisplayDate() <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() java.util.ArrayList<java.lang.String>.add(<unknown>) android.widget.TextView.getText() <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.add(java.lang.String) android.view.KeyEvent.getRepeatCount() java.util.ArrayList<java.lang.String>.add(<unknown>) android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) java.util.ArrayList<java.lang.String>.get(int) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.content.Intent.addFlags(int) android.app.Activity.setResult(int, android.content.Intent) android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) <unknown>.isRecording() android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Megha Joshi", "repo_sni": "google/googletv-android-samples", "imports_t": ["android.os.CountDownTimer com.example.google.tv.anymotelibrary.touch.ScaleGestureDetectorFactory com.example.google.tv.anymotelibrary.R android.view.View android.view.MotionEvent com.example.google.tv.anymotelibrary.util.Action com.example.google.tv.anymotelibrary.touch.ScaleGestureDetector"], "email_sni": "mjoshi@google.com", "contents_t": ["/*\n * Copyright (C) 2012 Google Inc.  All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.example.google.tv.anymotelibrary.client;\n\nimport android.os.CountDownTimer;\nimport android.view.MotionEvent;\nimport android.view.View;\n\nimport com.example.google.tv.anymotelibrary.R;\nimport com.example.google.tv.anymotelibrary.touch.ScaleGestureDetector;\nimport com.example.google.tv.anymotelibrary.touch.ScaleGestureDetectorFactory;\nimport com.example.google.tv.anymotelibrary.util.Action;\n\n/**\n * Handler for touch events. Instantiate this handler for a View to send its \n * touch events to the connected Google TV using Anymote protocol.\n * \n */\npublic final class TouchHandler implements View.OnTouchListener {\n    /**\n     * Defines the kind of events this handler is supposed to generate.\n     */\n    private final Mode mode;\n\n    /**\n     * Interface to send anymoteSender during a touch sequence.\n     */\n    private final AnymoteSender anymoteSender;\n\n    /**\n     * The current touch sequence.\n     */\n    private Sequence state;\n\n    /**\n     * {@code true} if the touch handler is active.\n     */\n    private boolean isActive;\n\n    /**\n     * Scale gesture detector.\n     */\n    private final ScaleGestureDetector scaleGestureDetector;\n\n    private final float zoomThreshold;\n\n    /**\n     * Max thresholds for a sequence to be considered a click.\n     */\n    private static final int CLICK_DISTANCE_THRESHOLD_SQUARE = 30 * 30;\n    private static final int CLICK_TIME_THRESHOLD = 500;\n    private static final float SCROLLING_FACTOR = 0.2f;\n\n    /**\n     * Threshold to send a sendScroll event.\n     */\n    private static final int SCROLL_THRESHOLD = 2;\n\n    /**\n     * Thresholds for multitouch gestures.\n     */\n    private static final float MT_SCROLL_BEGIN_DIST_THRESHOLD_SQR = 20.0f * 20.0f;\n    private static final float MT_SCROLL_BEGIN_THRESHOLD = 1.2f;\n    private static final float MT_SCROLL_END_THRESHOLD = 1.4f;\n    private static final float MT_ZOOM_SCALE_THRESHOLD = 1.8f;\n\n    /**\n     * Describes the way touches should be interpreted.\n     */\n    public enum Mode {\n        POINTER,\n        POINTER_MULTITOUCH,\n        SCROLL_VERTICAL,\n        SCROLL_HORIZONTAL,\n        ZOOM_VERTICAL\n    }\n    /**\n     * Constructor\n     * @param view The view on the remote app, whose touch events are sent to Google TV.\n     * @param mode The value of {@code Mode}\n     * @param anymoteSender Sends Anymote messages to Google TV.\n     */\n    public TouchHandler(View view, Mode mode, AnymoteSender anymoteSender) {\n        if (Mode.POINTER_MULTITOUCH.equals(mode)) {\n            this.scaleGestureDetector = ScaleGestureDetectorFactory\n                    .createScaleGestureDetector(view, new MultitouchHandler());\n            this.mode = Mode.POINTER;\n        } else {\n            this.scaleGestureDetector = null;\n            this.mode = mode;\n        }\n\n        this.anymoteSender = anymoteSender;\n        isActive = true;\n        zoomThreshold = view.getResources().getInteger(R.integer.zoom_threshold);\n        view.setOnTouchListener(this);\n    }\n\n    public boolean onTouch(View v, MotionEvent event) {\n        if (!isActive) {\n            return false;\n        }\n\n        if (scaleGestureDetector != null) {\n            scaleGestureDetector.onTouchEvent(event);\n            if (scaleGestureDetector.isInProgress()) {\n                if (state != null) {\n                    state.cancelDownTimer();\n                    state = null;\n                }\n                return true;\n            }\n        }\n\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n        long timestamp = event.getEventTime();\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                state = new Sequence(x, y, timestamp);\n                return true;\n\n            case MotionEvent.ACTION_CANCEL:\n                state = null;\n                return true;\n\n            case MotionEvent.ACTION_UP:\n                boolean handled = state != null && state.handleUp(x, y, timestamp);\n                state = null;\n                return handled;\n\n            case MotionEvent.ACTION_MOVE:\n                return state != null && state.handleMove(x, y, timestamp);\n\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * {@code true} activates the touch handler, {@code false} deactivates it.\n     */\n    public void setActive(boolean active) {\n        isActive = active;\n    }\n\n    /**\n     * Stores parameters of a touch sequence, i.e. down - move(s) - up and\n     * handles new touch events.\n     */\n    private class Sequence {\n\n        /**\n         * Location of the sequence's start event.\n         */\n        private final int refX, refY;\n\n        /**\n         * Location of the last touch event.\n         */\n        private int lastX, lastY;\n        private long lastTimestamp;\n\n        /**\n         * Delta Y accumulated across several touches.\n         */\n        private int accuY;\n\n        /**\n         * Timer that expires when a click down has to be sent.\n         */\n        private CountDownTimer clickDownTimer;\n\n        /**\n         * {@code true} if a click down has been sent.\n         */\n        private boolean clickDownSent;\n\n        public Sequence(int x, int y, long timestamp) {\n            refX = x;\n            refY = y;\n            clickDownSent = false;\n            setLastTouch(x, y, timestamp);\n            if (mode == Mode.POINTER) {\n                startClickDownTimer();\n            }\n        }\n\n        private void setLastTouch(int x, int y, long timestamp) {\n            lastX = x;\n            lastY = y;\n            lastTimestamp = timestamp;\n        }\n\n        /**\n         * Returns {@code true} if a sequence is a movement.\n         */\n        private boolean isMove(int x, int y) {\n            int distance = ((refX - x) * (refX - x)) + ((refY - y) * (refY - y));\n            return distance > CLICK_DISTANCE_THRESHOLD_SQUARE;\n        }\n\n        /**\n         * Starts a timer that will expire after\n         * {@link TouchHandler#CLICK_TIME_THRESHOLD} and start to send a click\n         * down event if the touch event cannot be interpreted as a movement.\n         */\n        private void startClickDownTimer() {\n            clickDownTimer = new CountDownTimer(CLICK_TIME_THRESHOLD,\n                    CLICK_TIME_THRESHOLD) {\n                    @Override\n                public void onTick(long arg0) {\n                    // Nothing to do.\n                }\n\n                    @Override\n                public void onFinish() {\n                    clickDown();\n                }\n            };\n            clickDownTimer.start();\n        }\n\n        /**\n         * Cancels the timer, no-op if there is no timer available.\n         * \n         * @return {@code true} if there was a timer to cancel\n         */\n        private boolean cancelDownTimer() {\n            if (clickDownTimer != null) {\n                clickDownTimer.cancel();\n                clickDownTimer = null;\n                return true;\n            }\n            return false;\n        }\n\n        /**\n         * Sends a click down message.\n         */\n        private void clickDown() {\n            Action.CLICK_DOWN.execute(anymoteSender);\n            clickDownSent = true;\n        }\n\n        /**\n         * Handles a touch up. A click will be issued if the initial touch of\n         * the sequence is close enough both timewise and distance-wise.\n         * \n         * @param x an integer representing the touch's x coordinate\n         * @param y an integer representing the touch's y coordinate\n         * @param timestamp a long representing the touch's time\n         * @return {@code true} if a click was issued\n         */\n        public boolean handleUp(int x, int y, long timestamp) {\n            if (mode != Mode.POINTER) {\n                return true;\n            }\n            // If a click down is waiting, send it.\n            if (cancelDownTimer()) {\n                clickDown();\n            }\n            if (clickDownSent) {\n                Action.CLICK_UP.execute(anymoteSender);\n            }\n            return true;\n        }\n\n        /**\n         * Handles a touch move. Depending on the initial touch of the sequence,\n         * this will result in a pointer move or in a sendScrolling action.\n         * \n         * @param x an integer representing the touch's x coordinate\n         * @param y an integer representing the touch's y coordinate\n         * @param timestamp a long representing the touch's time\n         * @return {@code true} if any action was taken\n         */\n        public boolean handleMove(int x, int y, long timestamp) {\n            if (mode == Mode.POINTER) {\n                if (!isMove(x, y)) {\n                    // Stand still while it's not a move to avoid a movement\n                    // when a click\n                    // is performed.\n                } else {\n                    cancelDownTimer();\n                }\n            }\n\n            long timeDelta = timestamp - lastTimestamp;\n            int deltaX = x - lastX;\n            int deltaY = y - lastY;\n\n            switch (mode) {\n                case POINTER:\n                    anymoteSender.sendMoveRelative(deltaX, deltaY);\n                    break;\n\n                case SCROLL_VERTICAL:\n                    if (shouldTriggerScrollEvent(deltaY)) {\n                        anymoteSender.sendScroll(0, deltaY);\n                    }\n                    break;\n\n                case SCROLL_HORIZONTAL:\n                    if (shouldTriggerScrollEvent(deltaX)) {\n                        anymoteSender.sendScroll(deltaX, 0);\n                    }\n                    break;\n\n                case ZOOM_VERTICAL:\n                    accuY += deltaY;\n                    if (Math.abs(accuY) >= zoomThreshold) {\n                        if (accuY < 0) {\n                            Action.ZOOM_IN.execute(anymoteSender);\n                        } else {\n                            Action.ZOOM_OUT.execute(anymoteSender);\n                        }\n                        accuY = 0;\n                    }\n                    break;\n            }\n            setLastTouch(x, y, timestamp);\n            return true;\n        }\n    }\n\n    /**\n     * Handles multitouch events to capture zoom and sendScroll events.\n     */\n    private class MultitouchHandler\n            implements ScaleGestureDetector.OnScaleGestureListener {\n\n        private float lastScrollX;\n        private float lastScrollY;\n        private boolean isScrolling;\n\n        public boolean onScale(ScaleGestureDetector detector) {\n            float scaleFactor = detector.getScaleFactor();\n            float deltaX = scaleGestureDetector.getFocusX() - lastScrollX;\n            float deltaY = scaleGestureDetector.getFocusY() - lastScrollY;\n\n            toggleScrolling(scaleFactor, deltaX, deltaY);\n            float absX = Math.abs(deltaX);\n            float signX = Math.signum(deltaX);\n            float absY = Math.abs(deltaY);\n            float signY = Math.signum(deltaY);\n            // If both translations are less than 1\n            // pick greater one and align to 1\n            if ((absX < 1) && (absY < 1)) {\n                if (absX > absY) {\n                    deltaX = signX;\n                    deltaY = 0;\n                } else {\n                    deltaX = 0;\n                    deltaY = signY;\n                }\n            } else {\n                if (absX < 1) {\n                    deltaX = 0;\n                } else {\n                    deltaX = ((absX - 1) * SCROLLING_FACTOR + 1) * signX;\n                }\n                if (absY < 1) {\n                    deltaY = 0;\n                } else {\n                    deltaY = ((absY - 1) * SCROLLING_FACTOR + 1) * signY;\n                }\n            }\n\n            if (isScrolling) {\n                if (shouldTriggerScrollEvent(deltaX)\n                        || shouldTriggerScrollEvent(deltaY)) {\n                    executeScrollEvent(deltaX, deltaY);\n                }\n                return false;\n            }\n\n            if (!isWithinInvRange(scaleFactor, MT_ZOOM_SCALE_THRESHOLD)) {\n                executeZoomEvent(scaleFactor);\n                return true;\n            }\n\n            return false;\n        }\n\n        public boolean onScaleBegin(ScaleGestureDetector detector) {\n            resetScroll();\n            return true;\n        }\n\n        public void onScaleEnd(ScaleGestureDetector detector) {\n            // Do nothing\n        }\n\n        /**\n         * Resets sendScrolling mode.\n         */\n        private void resetScroll() {\n            isScrolling = false;\n            updateScroll();\n        }\n\n        /**\n         * Updates last sendScroll positions.\n         */\n        private void updateScroll() {\n            lastScrollX = scaleGestureDetector.getFocusX();\n            lastScrollY = scaleGestureDetector.getFocusY();\n        }\n\n        /**\n         * Sends zoom event.\n         * \n         * @param scaleFactor scale factor.\n         */\n        private void executeZoomEvent(float scaleFactor) {\n            resetScroll();\n            if (scaleFactor > 1.0f) {\n                Action.ZOOM_IN.execute(anymoteSender);\n            } else {\n                Action.ZOOM_OUT.execute(anymoteSender);\n            }\n        }\n\n        /**\n         * Sends sendScroll event.\n         */\n        private void executeScrollEvent(float deltaX, float deltaY) {\n            anymoteSender.sendScroll(Math.round(deltaX), Math.round(deltaY));\n            updateScroll();\n        }\n\n        /**\n         * Enables of disables sendScrolling, depending on the current state,\n         * scale factor, and distance from last registered focus position. mode\n         * should be enabled / disabled depending on the speed of dragging vs.\n         * scale factor.\n         */\n        private void toggleScrolling(\n                float scaleFactor, float deltaX, float deltaY) {\n            if (!isScrolling\n                    && isWithinInvRange(scaleFactor, MT_SCROLL_BEGIN_THRESHOLD)) {\n                float dist = deltaX * deltaX + deltaY * deltaY;\n                if (dist > MT_SCROLL_BEGIN_DIST_THRESHOLD_SQR) {\n                    isScrolling = true;\n                }\n            } else if (isScrolling\n                    && !isWithinInvRange(scaleFactor, MT_SCROLL_END_THRESHOLD)) {\n                // Stop sendScrolling if zooming occurs.\n                isScrolling = false;\n            }\n        }\n\n        /**\n         * Returns {@code true} if {@code (1/upperLimit) &lt; scaleFactor &lt;\n         * upperLimit}\n         */\n        private boolean isWithinInvRange(float scaleFactor, float upperLimit) {\n            if (upperLimit < 1.0f) {\n                throw new IllegalArgumentException(\"Upper limit < 1.0f: \" + upperLimit);\n            }\n            return 1.0f / upperLimit < scaleFactor && scaleFactor < upperLimit;\n        }\n    }\n\n    /**\n     * Returns {@code true} if the delta measured when sendScrolling is enough\n     * to trigger a sendScroll event.\n     * \n     * @param deltaScroll the amount of sendScroll wanted\n     */\n    private static boolean shouldTriggerScrollEvent(float deltaScroll) {\n        return Math.abs(deltaScroll) >= SCROLL_THRESHOLD;\n    }\n}\n"], "body_t": ["<empty>"], "date_tdt": "2012-05-24T19:13:40Z", "hash_sni": "63516b4ecec0a7d9357c166c2245cbf9adfd98c1", "name_sni": "AnymoteLibrary/src/com/example/google/tv/anymotelibrary/client/TouchHandler.java", "patch_t": ["+/*\n+ * Copyright (C) 2012 Google Inc.  All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.google.tv.anymotelibrary.client;\n+\n+import android.os.CountDownTimer;\n+import android.view.MotionEvent;\n+import android.view.View;\n+\n+import com.example.google.tv.anymotelibrary.R;\n+import com.example.google.tv.anymotelibrary.touch.ScaleGestureDetector;\n+import com.example.google.tv.anymotelibrary.touch.ScaleGestureDetectorFactory;\n+import com.example.google.tv.anymotelibrary.util.Action;\n+\n+/**\n+ * Handler for touch events. Instantiate this handler for a View to send its \n+ * touch events to the connected Google TV using Anymote protocol.\n+ * \n+ */\n+public final class TouchHandler implements View.OnTouchListener {\n+    /**\n+     * Defines the kind of events this handler is supposed to generate.\n+     */\n+    private final Mode mode;\n+\n+    /**\n+     * Interface to send anymoteSender during a touch sequence.\n+     */\n+    private final AnymoteSender anymoteSender;\n+\n+    /**\n+     * The current touch sequence.\n+     */\n+    private Sequence state;\n+\n+    /**\n+     * {@code true} if the touch handler is active.\n+     */\n+    private boolean isActive;\n+\n+    /**\n+     * Scale gesture detector.\n+     */\n+    private final ScaleGestureDetector scaleGestureDetector;\n+\n+    private final float zoomThreshold;\n+\n+    /**\n+     * Max thresholds for a sequence to be considered a click.\n+     */\n+    private static final int CLICK_DISTANCE_THRESHOLD_SQUARE = 30 * 30;\n+    private static final int CLICK_TIME_THRESHOLD = 500;\n+    private static final float SCROLLING_FACTOR = 0.2f;\n+\n+    /**\n+     * Threshold to send a sendScroll event.\n+     */\n+    private static final int SCROLL_THRESHOLD = 2;\n+\n+    /**\n+     * Thresholds for multitouch gestures.\n+     */\n+    private static final float MT_SCROLL_BEGIN_DIST_THRESHOLD_SQR = 20.0f * 20.0f;\n+    private static final float MT_SCROLL_BEGIN_THRESHOLD = 1.2f;\n+    private static final float MT_SCROLL_END_THRESHOLD = 1.4f;\n+    private static final float MT_ZOOM_SCALE_THRESHOLD = 1.8f;\n+\n+    /**\n+     * Describes the way touches should be interpreted.\n+     */\n+    public enum Mode {\n+        POINTER,\n+        POINTER_MULTITOUCH,\n+        SCROLL_VERTICAL,\n+        SCROLL_HORIZONTAL,\n+        ZOOM_VERTICAL\n+    }\n+    /**\n+     * Constructor\n+     * @param view The view on the remote app, whose touch events are sent to Google TV.\n+     * @param mode The value of {@code Mode}\n+     * @param anymoteSender Sends Anymote messages to Google TV.\n+     */\n+    public TouchHandler(View view, Mode mode, AnymoteSender anymoteSender) {\n+        if (Mode.POINTER_MULTITOUCH.equals(mode)) {\n+            this.scaleGestureDetector = ScaleGestureDetectorFactory\n+                    .createScaleGestureDetector(view, new MultitouchHandler());\n+            this.mode = Mode.POINTER;\n+        } else {\n+            this.scaleGestureDetector = null;\n+            this.mode = mode;\n+        }\n+\n+        this.anymoteSender = anymoteSender;\n+        isActive = true;\n+        zoomThreshold = view.getResources().getInteger(R.integer.zoom_threshold);\n+        view.setOnTouchListener(this);\n+    }\n+\n+    public boolean onTouch(View v, MotionEvent event) {\n+        if (!isActive) {\n+            return false;\n+        }\n+\n+        if (scaleGestureDetector != null) {\n+            scaleGestureDetector.onTouchEvent(event);\n+            if (scaleGestureDetector.isInProgress()) {\n+                if (state != null) {\n+                    state.cancelDownTimer();\n+                    state = null;\n+                }\n+                return true;\n+            }\n+        }\n+\n+        int x = (int) event.getX();\n+        int y = (int) event.getY();\n+        long timestamp = event.getEventTime();\n+        switch (event.getAction()) {\n+            case MotionEvent.ACTION_DOWN:\n+                state = new Sequence(x, y, timestamp);\n+                return true;\n+\n+            case MotionEvent.ACTION_CANCEL:\n+                state = null;\n+                return true;\n+\n+            case MotionEvent.ACTION_UP:\n+                boolean handled = state != null && state.handleUp(x, y, timestamp);\n+                state = null;\n+                return handled;\n+\n+            case MotionEvent.ACTION_MOVE:\n+                return state != null && state.handleMove(x, y, timestamp);\n+\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    /**\n+     * {@code true} activates the touch handler, {@code false} deactivates it.\n+     */\n+    public void setActive(boolean active) {\n+        isActive = active;\n+    }\n+\n+    /**\n+     * Stores parameters of a touch sequence, i.e. down - move(s) - up and\n+     * handles new touch events.\n+     */\n+    private class Sequence {\n+\n+        /**\n+         * Location of the sequence's start event.\n+         */\n+        private final int refX, refY;\n+\n+        /**\n+         * Location of the last touch event.\n+         */\n+        private int lastX, lastY;\n+        private long lastTimestamp;\n+\n+        /**\n+         * Delta Y accumulated across several touches.\n+         */\n+        private int accuY;\n+\n+        /**\n+         * Timer that expires when a click down has to be sent.\n+         */\n+        private CountDownTimer clickDownTimer;\n+\n+        /**\n+         * {@code true} if a click down has been sent.\n+         */\n+        private boolean clickDownSent;\n+\n+        public Sequence(int x, int y, long timestamp) {\n+            refX = x;\n+            refY = y;\n+            clickDownSent = false;\n+            setLastTouch(x, y, timestamp);\n+            if (mode == Mode.POINTER) {\n+                startClickDownTimer();\n+            }\n+        }\n+\n+        private void setLastTouch(int x, int y, long timestamp) {\n+            lastX = x;\n+            lastY = y;\n+            lastTimestamp = timestamp;\n+        }\n+\n+        /**\n+         * Returns {@code true} if a sequence is a movement.\n+         */\n+        private boolean isMove(int x, int y) {\n+            int distance = ((refX - x) * (refX - x)) + ((refY - y) * (refY - y));\n+            return distance > CLICK_DISTANCE_THRESHOLD_SQUARE;\n+        }\n+\n+        /**\n+         * Starts a timer that will expire after\n+         * {@link TouchHandler#CLICK_TIME_THRESHOLD} and start to send a click\n+         * down event if the touch event cannot be interpreted as a movement.\n+         */\n+        private void startClickDownTimer() {\n+            clickDownTimer = new CountDownTimer(CLICK_TIME_THRESHOLD,\n+                    CLICK_TIME_THRESHOLD) {\n+                    @Override\n+                public void onTick(long arg0) {\n+                    // Nothing to do.\n+                }\n+\n+                    @Override\n+                public void onFinish() {\n+                    clickDown();\n+                }\n+            };\n+            clickDownTimer.start();\n+        }\n+\n+        /**\n+         * Cancels the timer, no-op if there is no timer available.\n+         * \n+         * @return {@code true} if there was a timer to cancel\n+         */\n+        private boolean cancelDownTimer() {\n+            if (clickDownTimer != null) {\n+                clickDownTimer.cancel();\n+                clickDownTimer = null;\n+                return true;\n+            }\n+            return false;\n+        }\n+\n+        /**\n+         * Sends a click down message.\n+         */\n+        private void clickDown() {\n+            Action.CLICK_DOWN.execute(anymoteSender);\n+            clickDownSent = true;\n+        }\n+\n+        /**\n+         * Handles a touch up. A click will be issued if the initial touch of\n+         * the sequence is close enough both timewise and distance-wise.\n+         * \n+         * @param x an integer representing the touch's x coordinate\n+         * @param y an integer representing the touch's y coordinate\n+         * @param timestamp a long representing the touch's time\n+         * @return {@code true} if a click was issued\n+         */\n+        public boolean handleUp(int x, int y, long timestamp) {\n+            if (mode != Mode.POINTER) {\n+                return true;\n+            }\n+            // If a click down is waiting, send it.\n+            if (cancelDownTimer()) {\n+                clickDown();\n+            }\n+            if (clickDownSent) {\n+                Action.CLICK_UP.execute(anymoteSender);\n+            }\n+            return true;\n+        }\n+\n+        /**\n+         * Handles a touch move. Depending on the initial touch of the sequence,\n+         * this will result in a pointer move or in a sendScrolling action.\n+         * \n+         * @param x an integer representing the touch's x coordinate\n+         * @param y an integer representing the touch's y coordinate\n+         * @param timestamp a long representing the touch's time\n+         * @return {@code true} if any action was taken\n+         */\n+        public boolean handleMove(int x, int y, long timestamp) {\n+            if (mode == Mode.POINTER) {\n+                if (!isMove(x, y)) {\n+                    // Stand still while it's not a move to avoid a movement\n+                    // when a click\n+                    // is performed.\n+                } else {\n+                    cancelDownTimer();\n+                }\n+            }\n+\n+            long timeDelta = timestamp - lastTimestamp;\n+            int deltaX = x - lastX;\n+            int deltaY = y - lastY;\n+\n+            switch (mode) {\n+                case POINTER:\n+                    anymoteSender.sendMoveRelative(deltaX, deltaY);\n+                    break;\n+\n+                case SCROLL_VERTICAL:\n+                    if (shouldTriggerScrollEvent(deltaY)) {\n+                        anymoteSender.sendScroll(0, deltaY);\n+                    }\n+                    break;\n+\n+                case SCROLL_HORIZONTAL:\n+                    if (shouldTriggerScrollEvent(deltaX)) {\n+                        anymoteSender.sendScroll(deltaX, 0);\n+                    }\n+                    break;\n+\n+                case ZOOM_VERTICAL:\n+                    accuY += deltaY;\n+                    if (Math.abs(accuY) >= zoomThreshold) {\n+                        if (accuY < 0) {\n+                            Action.ZOOM_IN.execute(anymoteSender);\n+                        } else {\n+                            Action.ZOOM_OUT.execute(anymoteSender);\n+                        }\n+                        accuY = 0;\n+                    }\n+                    break;\n+            }\n+            setLastTouch(x, y, timestamp);\n+            return true;\n+        }\n+    }\n+\n+    /**\n+     * Handles multitouch events to capture zoom and sendScroll events.\n+     */\n+    private class MultitouchHandler\n+            implements ScaleGestureDetector.OnScaleGestureListener {\n+\n+        private float lastScrollX;\n+        private float lastScrollY;\n+        private boolean isScrolling;\n+\n+        public boolean onScale(ScaleGestureDetector detector) {\n+            float scaleFactor = detector.getScaleFactor();\n+            float deltaX = scaleGestureDetector.getFocusX() - lastScrollX;\n+            float deltaY = scaleGestureDetector.getFocusY() - lastScrollY;\n+\n+            toggleScrolling(scaleFactor, deltaX, deltaY);\n+            float absX = Math.abs(deltaX);\n+            float signX = Math.signum(deltaX);\n+            float absY = Math.abs(deltaY);\n+            float signY = Math.signum(deltaY);\n+            // If both translations are less than 1\n+            // pick greater one and align to 1\n+            if ((absX < 1) && (absY < 1)) {\n+                if (absX > absY) {\n+                    deltaX = signX;\n+                    deltaY = 0;\n+                } else {\n+                    deltaX = 0;\n+                    deltaY = signY;\n+                }\n+            } else {\n+                if (absX < 1) {\n+                    deltaX = 0;\n+                } else {\n+                    deltaX = ((absX - 1) * SCROLLING_FACTOR + 1) * signX;\n+                }\n+                if (absY < 1) {\n+                    deltaY = 0;\n+                } else {\n+                    deltaY = ((absY - 1) * SCROLLING_FACTOR + 1) * signY;\n+                }\n+            }\n+\n+            if (isScrolling) {\n+                if (shouldTriggerScrollEvent(deltaX)\n+                        || shouldTriggerScrollEvent(deltaY)) {\n+                    executeScrollEvent(deltaX, deltaY);\n+                }\n+                return false;\n+            }\n+\n+            if (!isWithinInvRange(scaleFactor, MT_ZOOM_SCALE_THRESHOLD)) {\n+                executeZoomEvent(scaleFactor);\n+                return true;\n+            }\n+\n+            return false;\n+        }\n+\n+        public boolean onScaleBegin(ScaleGestureDetector detector) {\n+            resetScroll();\n+            return true;\n+        }\n+\n+        public void onScaleEnd(ScaleGestureDetector detector) {\n+            // Do nothing\n+        }\n+\n+        /**\n+         * Resets sendScrolling mode.\n+         */\n+        private void resetScroll() {\n+            isScrolling = false;\n+            updateScroll();\n+        }\n+\n+        /**\n+         * Updates last sendScroll positions.\n+         */\n+        private void updateScroll() {\n+            lastScrollX = scaleGestureDetector.getFocusX();\n+            lastScrollY = scaleGestureDetector.getFocusY();\n+        }\n+\n+        /**\n+         * Sends zoom event.\n+         * \n+         * @param scaleFactor scale factor.\n+         */\n+        private void executeZoomEvent(float scaleFactor) {\n+            resetScroll();\n+            if (scaleFactor > 1.0f) {\n+                Action.ZOOM_IN.execute(anymoteSender);\n+            } else {\n+                Action.ZOOM_OUT.execute(anymoteSender);\n+            }\n+        }\n+\n+        /**\n+         * Sends sendScroll event.\n+         */\n+        private void executeScrollEvent(float deltaX, float deltaY) {\n+            anymoteSender.sendScroll(Math.round(deltaX), Math.round(deltaY));\n+            updateScroll();\n+        }\n+\n+        /**\n+         * Enables of disables sendScrolling, depending on the current state,\n+         * scale factor, and distance from last registered focus position. mode\n+         * should be enabled / disabled depending on the speed of dragging vs.\n+         * scale factor.\n+         */\n+        private void toggleScrolling(\n+                float scaleFactor, float deltaX, float deltaY) {\n+            if (!isScrolling\n+                    && isWithinInvRange(scaleFactor, MT_SCROLL_BEGIN_THRESHOLD)) {\n+                float dist = deltaX * deltaX + deltaY * deltaY;\n+                if (dist > MT_SCROLL_BEGIN_DIST_THRESHOLD_SQR) {\n+                    isScrolling = true;\n+                }\n+            } else if (isScrolling\n+                    && !isWithinInvRange(scaleFactor, MT_SCROLL_END_THRESHOLD)) {\n+                // Stop sendScrolling if zooming occurs.\n+                isScrolling = false;\n+            }\n+        }\n+\n+        /**\n+         * Returns {@code true} if {@code (1/upperLimit) &lt; scaleFactor &lt;\n+         * upperLimit}\n+         */\n+        private boolean isWithinInvRange(float scaleFactor, float upperLimit) {\n+            if (upperLimit < 1.0f) {\n+                throw new IllegalArgumentException(\"Upper limit < 1.0f: \" + upperLimit);\n+            }\n+            return 1.0f / upperLimit < scaleFactor && scaleFactor < upperLimit;\n+        }\n+    }\n+\n+    /**\n+     * Returns {@code true} if the delta measured when sendScrolling is enough\n+     * to trigger a sendScroll event.\n+     * \n+     * @param deltaScroll the amount of sendScroll wanted\n+     */\n+    private static boolean shouldTriggerScrollEvent(float deltaScroll) {\n+        return Math.abs(deltaScroll) >= SCROLL_THRESHOLD;\n+    }\n+}"], "score": 1.0, "methods_t": ["CountDownTimer IllegalArgumentException MultitouchHandler Sequence abs cancel cancelDownTimer clickDown createScaleGestureDetector equals execute executeScrollEvent executeZoomEvent getAction getEventTime getFocusX getFocusY getInteger getResources getScaleFactor getX getY handleMove handleUp isInProgress isMove isWithinInvRange onTouchEvent resetScroll round sendMoveRelative sendScroll setLastTouch setOnTouchListener shouldTriggerScrollEvent signum start startClickDownTimer toggleScrolling updateScroll"], "_version_": 1526727904632766464, "subject_t": ["Adding AnymoteLibrary and samples."], "comments_t": ["/** \n * Handler for touch events. Instantiate this handler for a View to send its  touch events to the connected Google TV using Anymote protocol.\n */\n             // pick greater one and align to 1 /** \n * {@code true} activates the touch handler, {@code false} deactivates it.\n */\n /** \n * Handles a touch up. A click will be issued if the initial touch of the sequence is close enough both timewise and distance-wise.\n * @param x an integer representing the touch's x coordinate\n * @param y an integer representing the touch's y coordinate\n * @param timestamp a long representing the touch's time\n * @return {@code true} if a click was issued\n */\n /** \n * Location of the sequence's start event.\n */\n /** \n * Timer that expires when a click down has to be sent.\n */\n                     // when a click /** \n * Starts a timer that will expire after {@link TouchHandler#CLICK_TIME_THRESHOLD} and start to send a clickdown event if the touch event cannot be interpreted as a movement.\n */\n /** \n * Updates last sendScroll positions.\n */\n                     // Nothing to do. /** \n * {@code true} if a click down has been sent.\n */\n /** \n * Sends zoom event.\n * @param scaleFactor scale factor.\n */\n /** \n * Returns  {@code true} if a sequence is a movement.\n */\n /** \n * {@code true} if the touch handler is active.\n */\n                 // Stop sendScrolling if zooming occurs. /** \n * Returns  {@code true} if {@code (1/upperLimit) &lt; scaleFactor &lt;upperLimit}\n */\n             // Do nothing /** \n * Sends a click down message.\n */\n             // If a click down is waiting, send it. /** \n * Constructor\n * @param view The view on the remote app, whose touch events are sent to Google TV.\n * @param mode The value of {@code Mode}\n * @param anymoteSender Sends Anymote messages to Google TV.\n */\n /** \n * Location of the last touch event.\n */\n /** \n * Delta Y accumulated across several touches.\n */\n /** \n * Describes the way touches should be interpreted.\n */\n /** \n * Handles multitouch events to capture zoom and sendScroll events.\n */\n /** \n * Handles a touch move. Depending on the initial touch of the sequence, this will result in a pointer move or in a sendScrolling action.\n * @param x an integer representing the touch's x coordinate\n * @param y an integer representing the touch's y coordinate\n * @param timestamp a long representing the touch's time\n * @return {@code true} if any action was taken\n */\n /** \n * Scale gesture detector.\n */\n /** \n * Threshold to send a sendScroll event.\n */\n /** \n * Max thresholds for a sequence to be considered a click.\n */\n /** \n * The current touch sequence.\n */\n /*\n* Copyright (C) 2012 Google Inc.  All rights reserved.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n /** \n * Resets sendScrolling mode.\n */\n /** \n * Sends sendScroll event.\n */\n                     // Stand still while it's not a move to avoid a movement /** \n * Stores parameters of a touch sequence, i.e. down - move(s) - up and handles new touch events.\n */\n             // If both translations are less than 1 /** \n * Interface to send anymoteSender during a touch sequence.\n */\n /** \n * Enables of disables sendScrolling, depending on the current state, scale factor, and distance from last registered focus position. mode should be enabled / disabled depending on the speed of dragging vs. scale factor.\n */\n /** \n * Cancels the timer, no-op if there is no timer available.\n * @return {@code true} if there was a timer to cancel\n */\n                     // is performed. /** \n * Thresholds for multitouch gestures.\n */\n /** \n * Defines the kind of events this handler is supposed to generate.\n */\n /** \n * Returns  {@code true} if the delta measured when sendScrolling is enoughto trigger a sendScroll event.\n * @param deltaScroll the amount of sendScroll wanted\n */\n"], "callsites_t": ["java.lang.Math.signum(float) java.lang.Math.abs(float) com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.handleUp(int, int, long) <unknown>.getFocusX() .CountDownTimer(int, int) com.example.google.tv.anymotelibrary.client.TouchHandler.shouldTriggerScrollEvent(float) android.view.MotionEvent.getX() <unknown>.onTouchEvent(android.view.MotionEvent) com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.resetScroll() com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.clickDown() <unknown>.equals(com.example.google.tv.anymotelibrary.client.Mode) com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.MultitouchHandler() <unknown>.execute(com.example.google.tv.anymotelibrary.client.AnymoteSender) android.view.MotionEvent.getEventTime() android.content.res.Resources.getInteger(<unknown>) <unknown>.getScaleFactor() android.os.CountDownTimer.cancel() <unknown>.execute(com.example.google.tv.anymotelibrary.client.AnymoteSender) <unknown>.isInProgress() <unknown>.createScaleGestureDetector(android.view.View, com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler) <unknown>.sendMoveRelative(int, int) java.lang.Math.abs(int) com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.cancelDownTimer() com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.setLastTouch(int, int, long) java.lang.Math.signum(float) android.view.View.getResources() com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.executeZoomEvent(float) com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.startClickDownTimer() <unknown>.sendScroll(int, int) android.view.MotionEvent.getAction() com.example.google.tv.anymotelibrary.client.TouchHandler.shouldTriggerScrollEvent(int) com.example.google.tv.anymotelibrary.client.TouchHandler.shouldTriggerScrollEvent(int) <unknown>.execute(com.example.google.tv.anymotelibrary.client.AnymoteSender) com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.cancelDownTimer() java.lang.Math.round(float) com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.Sequence(int, int, long) com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.isMove(int, int) com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.clickDown() android.view.MotionEvent.getY() com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.cancelDownTimer() <unknown>.execute(com.example.google.tv.anymotelibrary.client.AnymoteSender) <unknown>.sendScroll(int, int) com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.updateScroll() com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.isWithinInvRange(float, float) com.example.google.tv.anymotelibrary.client.TouchHandler.shouldTriggerScrollEvent(float) java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String) com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.handleMove(int, int, long) com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.toggleScrolling(float, float, float) <unknown>.getFocusX() com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.setLastTouch(int, int, long) android.os.CountDownTimer.start() android.view.View.setOnTouchListener(com.example.google.tv.anymotelibrary.client.TouchHandler) <unknown>.execute(com.example.google.tv.anymotelibrary.client.AnymoteSender) <unknown>.getFocusY() com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.resetScroll() java.lang.Math.abs(float) java.lang.Math.round(float) com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.executeScrollEvent(float, float) <unknown>.sendScroll(int, int) com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.isWithinInvRange(float, float) com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.updateScroll() <unknown>.getFocusY() <unknown>.execute(com.example.google.tv.anymotelibrary.client.AnymoteSender) java.lang.Math.abs(float) com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.isWithinInvRange(float, float)"], "id": "google/googletv-android-samples\u000063516b4ecec0a7d9357c166c2245cbf9adfd98c1\u0000AnymoteLibrary/src/com/example/google/tv/anymotelibrary/client/TouchHandler.java", "callsites_cs": "java.lang.Math.signum(float)#java.lang.Math.abs(float)#com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.handleUp(int, int, long)#<unknown>.getFocusX()#.CountDownTimer(int, int)#com.example.google.tv.anymotelibrary.client.TouchHandler.shouldTriggerScrollEvent(float)#android.view.MotionEvent.getX()#<unknown>.onTouchEvent(android.view.MotionEvent)#com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.resetScroll()#com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.clickDown()#<unknown>.equals(com.example.google.tv.anymotelibrary.client.Mode)#com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.MultitouchHandler()#<unknown>.execute(com.example.google.tv.anymotelibrary.client.AnymoteSender)#android.view.MotionEvent.getEventTime()#android.content.res.Resources.getInteger(<unknown>)#<unknown>.getScaleFactor()#android.os.CountDownTimer.cancel()#<unknown>.execute(com.example.google.tv.anymotelibrary.client.AnymoteSender)#<unknown>.isInProgress()#<unknown>.createScaleGestureDetector(android.view.View, com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler)#<unknown>.sendMoveRelative(int, int)#java.lang.Math.abs(int)#com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.cancelDownTimer()#com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.setLastTouch(int, int, long)#java.lang.Math.signum(float)#android.view.View.getResources()#com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.executeZoomEvent(float)#com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.startClickDownTimer()#<unknown>.sendScroll(int, int)#android.view.MotionEvent.getAction()#com.example.google.tv.anymotelibrary.client.TouchHandler.shouldTriggerScrollEvent(int)#com.example.google.tv.anymotelibrary.client.TouchHandler.shouldTriggerScrollEvent(int)#<unknown>.execute(com.example.google.tv.anymotelibrary.client.AnymoteSender)#com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.cancelDownTimer()#java.lang.Math.round(float)#com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.Sequence(int, int, long)#com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.isMove(int, int)#com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.clickDown()#android.view.MotionEvent.getY()#com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.cancelDownTimer()#<unknown>.execute(com.example.google.tv.anymotelibrary.client.AnymoteSender)#<unknown>.sendScroll(int, int)#com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.updateScroll()#com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.isWithinInvRange(float, float)#com.example.google.tv.anymotelibrary.client.TouchHandler.shouldTriggerScrollEvent(float)#java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)#com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.handleMove(int, int, long)#com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.toggleScrolling(float, float, float)#<unknown>.getFocusX()#com.example.google.tv.anymotelibrary.client.TouchHandler.Sequence.setLastTouch(int, int, long)#android.os.CountDownTimer.start()#android.view.View.setOnTouchListener(com.example.google.tv.anymotelibrary.client.TouchHandler)#<unknown>.execute(com.example.google.tv.anymotelibrary.client.AnymoteSender)#<unknown>.getFocusY()#com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.resetScroll()#java.lang.Math.abs(float)#java.lang.Math.round(float)#com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.executeScrollEvent(float, float)#<unknown>.sendScroll(int, int)#com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.isWithinInvRange(float, float)#com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.updateScroll()#<unknown>.getFocusY()#<unknown>.execute(com.example.google.tv.anymotelibrary.client.AnymoteSender)#java.lang.Math.abs(float)#com.example.google.tv.anymotelibrary.client.TouchHandler.MultitouchHandler.isWithinInvRange(float, float)"}, {"user_sni": "pedant", "repo_sni": "pedant/sweet-alert-dialog", "imports_t": ["android.os.CountDownTimer cn.pedant.SweetAlert.SweetAlertDialog android.os.Bundle android.view.View android.app.Activity"], "email_sni": "yanyuetian@gmail.com", "contents_t": ["package cn.pedant.SweetAlert.sample;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.View;\n\nimport cn.pedant.SweetAlert.SweetAlertDialog;\n\npublic class SampleActivity extends Activity implements View.OnClickListener {\n\n    private int i = -1;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.sample_activity);\n        findViewById(R.id.basic_test).setOnClickListener(this);\n        findViewById(R.id.under_text_test).setOnClickListener(this);\n        findViewById(R.id.error_text_test).setOnClickListener(this);\n        findViewById(R.id.success_text_test).setOnClickListener(this);\n        findViewById(R.id.warning_confirm_test).setOnClickListener(this);\n        findViewById(R.id.warning_cancel_test).setOnClickListener(this);\n        findViewById(R.id.custom_img_test).setOnClickListener(this);\n        findViewById(R.id.progress_dialog).setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.basic_test:\n                // default title \"Here's a message!\"\n                SweetAlertDialog sd = new SweetAlertDialog(this);\n                sd.setCancelable(true);\n                sd.setCanceledOnTouchOutside(true);\n                sd.show();\n                break;\n            case R.id.under_text_test:\n                new SweetAlertDialog(this)\n                        .setContentText(\"It's pretty, isn't it?\")\n                        .show();\n                break;\n            case R.id.error_text_test:\n                new SweetAlertDialog(this, SweetAlertDialog.ERROR_TYPE)\n                        .setTitleText(\"Oops...\")\n                        .setContentText(\"Something went wrong!\")\n                        .show();\n                break;\n            case R.id.success_text_test:\n                new SweetAlertDialog(this, SweetAlertDialog.SUCCESS_TYPE)\n                        .setTitleText(\"Good job!\")\n                        .setContentText(\"You clicked the button!\")\n                        .show();\n                break;\n            case R.id.warning_confirm_test:\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\n                        .setTitleText(\"Are you sure?\")\n                        .setContentText(\"Won't be able to recover this file!\")\n                        .setConfirmText(\"Yes,delete it!\")\n                        .setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {\n                        @Override\n                        public void onClick(SweetAlertDialog sDialog) {\n                            // reuse previous dialog instance\n                            sDialog.setTitleText(\"Deleted!\")\n                                    .setContentText(\"Your imaginary file has been deleted!\")\n                                    .setConfirmText(\"OK\")\n                                    .setConfirmClickListener(null)\n                                    .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);\n                        }\n                        })\n                        .show();\n                break;\n            case R.id.warning_cancel_test:\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\n                        .setTitleText(\"Are you sure?\")\n                        .setContentText(\"Won't be able to recover this file!\")\n                        .setCancelText(\"No,cancel plx!\")\n                        .setConfirmText(\"Yes,delete it!\")\n                        .showCancelButton(true)\n                        .setCancelClickListener(new SweetAlertDialog.OnSweetClickListener() {\n                            @Override\n                            public void onClick(SweetAlertDialog sDialog) {\n                                // reuse previous dialog instance, keep widget user state, reset them if you need\n                                sDialog.setTitleText(\"Cancelled!\")\n                                        .setContentText(\"Your imaginary file is safe :)\")\n                                        .setConfirmText(\"OK\")\n                                        .showCancelButton(false)\n                                        .setCancelClickListener(null)\n                                        .setConfirmClickListener(null)\n                                        .changeAlertType(SweetAlertDialog.ERROR_TYPE);\n\n                                // or you can new a SweetAlertDialog to show\n                               /* sDialog.dismiss();\n                                new SweetAlertDialog(SampleActivity.this, SweetAlertDialog.ERROR_TYPE)\n                                        .setTitleText(\"Cancelled!\")\n                                        .setContentText(\"Your imaginary file is safe :)\")\n                                        .setConfirmText(\"OK\")\n                                        .show();*/\n                            }\n                        })\n                        .setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {\n                            @Override\n                            public void onClick(SweetAlertDialog sDialog) {\n                                sDialog.setTitleText(\"Deleted!\")\n                                        .setContentText(\"Your imaginary file has been deleted!\")\n                                        .setConfirmText(\"OK\")\n                                        .showCancelButton(false)\n                                        .setCancelClickListener(null)\n                                        .setConfirmClickListener(null)\n                                        .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);\n                            }\n                        })\n                        .show();\n                break;\n            case R.id.custom_img_test:\n                new SweetAlertDialog(this, SweetAlertDialog.CUSTOM_IMAGE_TYPE)\n                        .setTitleText(\"Sweet!\")\n                        .setContentText(\"Here's a custom image.\")\n                        .setCustomImage(R.drawable.custom_img)\n                        .show();\n                break;\n            case R.id.progress_dialog:\n                final SweetAlertDialog pDialog = new SweetAlertDialog(this, SweetAlertDialog.PROGRESS_TYPE)\n                        .setTitleText(\"loading...\");\n                pDialog.show();\n                pDialog.setCancelable(false);\n                new CountDownTimer(800 * 7, 800) {\n                    public void onTick(long millisUntilFinished) {\n                        // you can change the progress bar color by ProgressHelper every 800 millis\n                        /*i++;\n                        switch (i){\n                            case 0:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.blue_btn_bg_color));\n                                break;\n                            case 1:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_deep_teal_50));\n                                break;\n                            case 2:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_blue_grey_95));\n                                break;\n                            case 3:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_deep_teal_20));\n                                break;\n                            case 4:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_blue_grey_80));\n                                break;\n                            case 5:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.warning_stroke_color));\n                                break;\n                            case 6:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.success_stroke_color));\n                                break;\n                        }*/\n                    }\n\n                    public void onFinish() {\n                        i = -1;\n                        pDialog.setTitleText(\"Success!\")\n                                .setConfirmText(\"OK\")\n                                .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);\n                    }\n                }.start();\n                break;\n        }\n    }\n}\n"], "body_t": ["<empty>"], "date_tdt": "2014-12-04T10:33:03Z", "hash_sni": "f59e100b3c3187aacb8e0d44310817f24c5144e3", "name_sni": "sample/src/main/java/cn/pedant/SweetAlert/sample/SampleActivity.java", "patch_t": ["                         .show();\n                 break;\n             case R.id.progress_dialog:\n-                final SweetAlertDialog progressSweetAlertDialog = new SweetAlertDialog(this, SweetAlertDialog.PROGRESS_TYPE)\n-                        .setContentText(\"Loading... For ten seconds than close. Every second change color.\")\n-                        .spin();\n-\n-                progressSweetAlertDialog.show();\n-                new CountDownTimer(10000, 1000) {\n-\n+                final SweetAlertDialog pDialog = new SweetAlertDialog(this, SweetAlertDialog.PROGRESS_TYPE)\n+                        .setTitleText(\"loading...\");\n+                pDialog.show();\n+                pDialog.setCancelable(false);\n+                new CountDownTimer(800 * 7, 800) {\n                     public void onTick(long millisUntilFinished) {\n-                        i++;\n+                        // you can change the progress bar color by ProgressHelper every 800 millis\n+                        /*i++;\n                         switch (i){\n                             case 0:\n-                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.red_btn_bg_color));\n-                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.red_btn_bg_color));\n+                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.blue_btn_bg_color));\n                                 break;\n                             case 1:\n-                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.blue_btn_bg_color));\n-                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.blue_btn_bg_color));\n+                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_deep_teal_50));\n                                 break;\n                             case 2:\n-                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.gray_btn_bg_pressed_color));\n-                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.gray_btn_bg_pressed_color));\n+                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_blue_grey_95));\n                                 break;\n                             case 3:\n-                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_deep_teal_500));\n-                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_deep_teal_500));\n+                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_deep_teal_20));\n                                 break;\n                             case 4:\n-                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_deep_teal_500));\n-                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_deep_teal_500));\n+                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_blue_grey_80));\n                                 break;\n                             case 5:\n-                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_blue_grey_950));\n-                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_blue_grey_950));\n+                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.warning_stroke_color));\n                                 break;\n                             case 6:\n-                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_deep_teal_200));\n-                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_deep_teal_200));\n-                                break;\n-                            case 7:\n-                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_blue_grey_800));\n-                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_blue_grey_800));\n+                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.success_stroke_color));\n                                 break;\n-                            case 8:\n-                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.warning_stroke_color));\n-                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.warning_stroke_color));\n-                                break;\n-                            case 9:\n-                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.success_stroke_color));\n-                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.success_stroke_color));\n-                                break;\n-                        }\n+                        }*/\n                     }\n \n                     public void onFinish() {\n                         i = -1;\n-                        progressSweetAlertDialog.dismissWithAnimation();\n+                        pDialog.setTitleText(\"Success!\")\n+                                .setConfirmText(\"OK\")\n+                                .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);\n                     }\n                 }.start();\n                 break;"], "score": 1.0, "methods_t": ["CountDownTimer SweetAlertDialog SweetAlertDialog.OnSweetClickListener changeAlertType findViewById getId setCancelClickListener setCancelText setCancelable setCanceledOnTouchOutside setConfirmClickListener setConfirmText setContentText setContentView setCustomImage setOnClickListener setTitleText show showCancelButton start"], "_version_": 1526728104230256640, "subject_t": ["rebuild apis for  materialish-progress, delete .idea files, simplify progress implement"], "comments_t": ["                                // reuse previous dialog instance, keep widget user state, reset them if you need /* sDialog.dismiss();\nnew SweetAlertDialog(SampleActivity.this, SweetAlertDialog.ERROR_TYPE)\n.setTitleText(\"Cancelled!\")\n.setContentText(\"Your imaginary file is safe :)\")\n.setConfirmText(\"OK\")\n.show();*/\n /*i++;\nswitch (i){\ncase 0:\npDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.blue_btn_bg_color));\nbreak;\ncase 1:\npDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_deep_teal_50));\nbreak;\ncase 2:\npDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_blue_grey_95));\nbreak;\ncase 3:\npDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_deep_teal_20));\nbreak;\ncase 4:\npDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_blue_grey_80));\nbreak;\ncase 5:\npDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.warning_stroke_color));\nbreak;\ncase 6:\npDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.success_stroke_color));\nbreak;\n}*/\n                         // you can change the progress bar color by ProgressHelper every 800 millis                                 // or you can new a SweetAlertDialog to show                 // default title \"Here's a message!\"                             // reuse previous dialog instance"], "parents_ss": ["388ceb08f17dbf632d65375bea63dde1dcebf333"], "id": "pedant/sweet-alert-dialog\u0000f59e100b3c3187aacb8e0d44310817f24c5144e3\u0000sample/src/main/java/cn/pedant/SweetAlert/sample/SampleActivity.java", "callsites_cs": "<unknown>.setConfirmClickListener(null)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#<unknown>.setTitleText(java.lang.String)#<unknown>.show()#<unknown>.show()#<unknown>.setConfirmClickListener()#<unknown>.setTitleText(java.lang.String)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setTitleText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.setTitleText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.setConfirmText(java.lang.String)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#<unknown>.setConfirmText(java.lang.String)#<unknown>.setConfirmText(java.lang.String)#<unknown>.show()#<unknown>.SweetAlertDialog.OnSweetClickListener()#<unknown>.showCancelButton(boolean)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#android.app.Activity.findViewById(<unknown>)#<unknown>.showCancelButton(boolean)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#.CountDownTimer(int, int)#<unknown>.showCancelButton(boolean)#<unknown>.setConfirmClickListener(null)#<unknown>.setContentText(java.lang.String)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.changeAlertType(<unknown>)#android.os.CountDownTimer.start()#<unknown>.setContentText(java.lang.String)#<unknown>.show()#<unknown>.setConfirmText(java.lang.String)#<unknown>.setCancelClickListener(null)#<unknown>.setConfirmText(java.lang.String)#<unknown>.setContentText(java.lang.String)#<unknown>.show()#<unknown>.setCustomImage(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.setContentText(java.lang.String)#<unknown>.changeAlertType(<unknown>)#<unknown>.setConfirmClickListener()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.setCanceledOnTouchOutside(boolean)#<unknown>.setTitleText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#<unknown>.show()#android.app.Activity.findViewById(<unknown>)#<unknown>.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setCancelable(boolean)#<unknown>.show()#<unknown>.setCancelClickListener(null)#android.app.Activity.findViewById(<unknown>)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#<unknown>.show()#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setTitleText(java.lang.String)#<unknown>.setCancelable(boolean)#<unknown>.setTitleText(java.lang.String)#<unknown>.setTitleText(java.lang.String)#<unknown>.changeAlertType(<unknown>)#<unknown>.setCancelClickListener()#<unknown>.setContentText(java.lang.String)#<unknown>.setCancelText(java.lang.String)#<unknown>.changeAlertType(<unknown>)#android.app.Activity.setContentView(<unknown>)#<unknown>.setConfirmClickListener(null)", "callsites_t": ["<unknown>.setConfirmClickListener(null) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) <unknown>.setTitleText(java.lang.String) <unknown>.show() <unknown>.show() <unknown>.setConfirmClickListener() <unknown>.setTitleText(java.lang.String) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setTitleText(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.setTitleText(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.setConfirmText(java.lang.String) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) <unknown>.setConfirmText(java.lang.String) <unknown>.setConfirmText(java.lang.String) <unknown>.show() <unknown>.SweetAlertDialog.OnSweetClickListener() <unknown>.showCancelButton(boolean) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) android.app.Activity.findViewById(<unknown>) <unknown>.showCancelButton(boolean) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) .CountDownTimer(int, int) <unknown>.showCancelButton(boolean) <unknown>.setConfirmClickListener(null) <unknown>.setContentText(java.lang.String) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.changeAlertType(<unknown>) android.os.CountDownTimer.start() <unknown>.setContentText(java.lang.String) <unknown>.show() <unknown>.setConfirmText(java.lang.String) <unknown>.setCancelClickListener(null) <unknown>.setConfirmText(java.lang.String) <unknown>.setContentText(java.lang.String) <unknown>.show() <unknown>.setCustomImage(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.setContentText(java.lang.String) <unknown>.changeAlertType(<unknown>) <unknown>.setConfirmClickListener() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.setCanceledOnTouchOutside(boolean) <unknown>.setTitleText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.view.View.getId() java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) <unknown>.show() android.app.Activity.findViewById(<unknown>) <unknown>.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setCancelable(boolean) <unknown>.show() <unknown>.setCancelClickListener(null) android.app.Activity.findViewById(<unknown>) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) <unknown>.show() <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setTitleText(java.lang.String) <unknown>.setCancelable(boolean) <unknown>.setTitleText(java.lang.String) <unknown>.setTitleText(java.lang.String) <unknown>.changeAlertType(<unknown>) <unknown>.setCancelClickListener() <unknown>.setContentText(java.lang.String) <unknown>.setCancelText(java.lang.String) <unknown>.changeAlertType(<unknown>) android.app.Activity.setContentView(<unknown>) <unknown>.setConfirmClickListener(null)"]}, {"user_sni": "pedant", "repo_sni": "pedant/sweet-alert-dialog", "imports_t": ["android.os.CountDownTimer cn.pedant.SweetAlert.SweetAlertDialog android.os.Bundle android.view.View android.app.Activity"], "email_sni": "yanyuetian@gmail.com", "contents_t": ["package cn.pedant.SweetAlert.sample;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.View;\n\nimport cn.pedant.SweetAlert.SweetAlertDialog;\n\npublic class SampleActivity extends Activity implements View.OnClickListener {\n\n    private int i = -1;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.sample_activity);\n        findViewById(R.id.basic_test).setOnClickListener(this);\n        findViewById(R.id.under_text_test).setOnClickListener(this);\n        findViewById(R.id.error_text_test).setOnClickListener(this);\n        findViewById(R.id.success_text_test).setOnClickListener(this);\n        findViewById(R.id.warning_confirm_test).setOnClickListener(this);\n        findViewById(R.id.warning_cancel_test).setOnClickListener(this);\n        findViewById(R.id.custom_img_test).setOnClickListener(this);\n        findViewById(R.id.progress_dialog).setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.basic_test:\n                // default title \"Here's a message!\"\n                SweetAlertDialog sd = new SweetAlertDialog(this);\n                sd.setCancelable(true);\n                sd.setCanceledOnTouchOutside(true);\n                sd.show();\n                break;\n            case R.id.under_text_test:\n                new SweetAlertDialog(this)\n                        .setContentText(\"It's pretty, isn't it?\")\n                        .show();\n                break;\n            case R.id.error_text_test:\n                new SweetAlertDialog(this, SweetAlertDialog.ERROR_TYPE)\n                        .setTitleText(\"Oops...\")\n                        .setContentText(\"Something went wrong!\")\n                        .show();\n                break;\n            case R.id.success_text_test:\n                new SweetAlertDialog(this, SweetAlertDialog.SUCCESS_TYPE)\n                        .setTitleText(\"Good job!\")\n                        .setContentText(\"You clicked the button!\")\n                        .show();\n                break;\n            case R.id.warning_confirm_test:\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\n                        .setTitleText(\"Are you sure?\")\n                        .setContentText(\"Won't be able to recover this file!\")\n                        .setConfirmText(\"Yes,delete it!\")\n                        .setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {\n                        @Override\n                        public void onClick(SweetAlertDialog sDialog) {\n                            // reuse previous dialog instance\n                            sDialog.setTitleText(\"Deleted!\")\n                                    .setContentText(\"Your imaginary file has been deleted!\")\n                                    .setConfirmText(\"OK\")\n                                    .setConfirmClickListener(null)\n                                    .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);\n                        }\n                        })\n                        .show();\n                break;\n            case R.id.warning_cancel_test:\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\n                        .setTitleText(\"Are you sure?\")\n                        .setContentText(\"Won't be able to recover this file!\")\n                        .setCancelText(\"No,cancel plx!\")\n                        .setConfirmText(\"Yes,delete it!\")\n                        .showCancelButton(true)\n                        .setCancelClickListener(new SweetAlertDialog.OnSweetClickListener() {\n                            @Override\n                            public void onClick(SweetAlertDialog sDialog) {\n                                // reuse previous dialog instance, keep widget user state, reset them if you need\n                                sDialog.setTitleText(\"Cancelled!\")\n                                        .setContentText(\"Your imaginary file is safe :)\")\n                                        .setConfirmText(\"OK\")\n                                        .showCancelButton(false)\n                                        .setCancelClickListener(null)\n                                        .setConfirmClickListener(null)\n                                        .changeAlertType(SweetAlertDialog.ERROR_TYPE);\n\n                                // or you can new a SweetAlertDialog to show\n                               /* sDialog.dismiss();\n                                new SweetAlertDialog(SampleActivity.this, SweetAlertDialog.ERROR_TYPE)\n                                        .setTitleText(\"Cancelled!\")\n                                        .setContentText(\"Your imaginary file is safe :)\")\n                                        .setConfirmText(\"OK\")\n                                        .show();*/\n                            }\n                        })\n                        .setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {\n                            @Override\n                            public void onClick(SweetAlertDialog sDialog) {\n                                sDialog.setTitleText(\"Deleted!\")\n                                        .setContentText(\"Your imaginary file has been deleted!\")\n                                        .setConfirmText(\"OK\")\n                                        .showCancelButton(false)\n                                        .setCancelClickListener(null)\n                                        .setConfirmClickListener(null)\n                                        .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);\n                            }\n                        })\n                        .show();\n                break;\n            case R.id.custom_img_test:\n                new SweetAlertDialog(this, SweetAlertDialog.CUSTOM_IMAGE_TYPE)\n                        .setTitleText(\"Sweet!\")\n                        .setContentText(\"Here's a custom image.\")\n                        .setCustomImage(R.drawable.custom_img)\n                        .show();\n                break;\n            case R.id.progress_dialog:\n                final SweetAlertDialog pDialog = new SweetAlertDialog(this, SweetAlertDialog.PROGRESS_TYPE)\n                        .setTitleText(\"loading...\");\n                pDialog.show();\n                pDialog.setCancelable(false);\n                new CountDownTimer(800 * 7, 800) {\n                    public void onTick(long millisUntilFinished) {\n                        // you can change the progress bar color by ProgressHelper every 800 millis\n                        i++;\n                        switch (i){\n                            case 0:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.blue_btn_bg_color));\n                                break;\n                            case 1:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_deep_teal_50));\n                                break;\n                            case 2:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.success_stroke_color));\n                                break;\n                            case 3:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_deep_teal_20));\n                                break;\n                            case 4:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_blue_grey_80));\n                                break;\n                            case 5:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.warning_stroke_color));\n                                break;\n                            case 6:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.success_stroke_color));\n                                break;\n                        }\n                    }\n\n                    public void onFinish() {\n                        i = -1;\n                        pDialog.setTitleText(\"Success!\")\n                                .setConfirmText(\"OK\")\n                                .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);\n                    }\n                }.start();\n                break;\n        }\n    }\n}\n"], "body_t": ["<empty>"], "date_tdt": "2014-12-04T11:38:19Z", "hash_sni": "b82153382557920efd1a0df73860f2474598b43a", "name_sni": "sample/src/main/java/cn/pedant/SweetAlert/sample/SampleActivity.java", "patch_t": ["                 new CountDownTimer(800 * 7, 800) {\n                     public void onTick(long millisUntilFinished) {\n                         // you can change the progress bar color by ProgressHelper every 800 millis\n-                        /*i++;\n+                        i++;\n                         switch (i){\n                             case 0:\n                                 pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.blue_btn_bg_color));\n@@ -136,7 +136,7 @@ public class SampleActivity extends Activity implements View.OnClickListener {\n                                 pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_deep_teal_50));\n                                 break;\n                             case 2:\n-                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_blue_grey_95));\n+                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.success_stroke_color));\n                                 break;\n                             case 3:\n                                 pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_deep_teal_20));\n@@ -150,7 +150,7 @@ public class SampleActivity extends Activity implements View.OnClickListener {\n                             case 6:\n                                 pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.success_stroke_color));\n                                 break;\n-                        }*/\n+                        }\n                     }\n \n                     public void onFinish() {"], "score": 1.0, "methods_t": ["CountDownTimer SweetAlertDialog SweetAlertDialog.OnSweetClickListener changeAlertType findViewById getColor getId getProgressHelper getResources setBarColor setCancelClickListener setCancelText setCancelable setCanceledOnTouchOutside setConfirmClickListener setConfirmText setContentText setContentView setCustomImage setOnClickListener setTitleText show showCancelButton start"], "_version_": 1526727636968013824, "subject_t": ["add material progress jpg shot"], "comments_t": ["                                // reuse previous dialog instance, keep widget user state, reset them if you need /* sDialog.dismiss();\nnew SweetAlertDialog(SampleActivity.this, SweetAlertDialog.ERROR_TYPE)\n.setTitleText(\"Cancelled!\")\n.setContentText(\"Your imaginary file is safe :)\")\n.setConfirmText(\"OK\")\n.show();*/\n                         // you can change the progress bar color by ProgressHelper every 800 millis                                 // or you can new a SweetAlertDialog to show                 // default title \"Here's a message!\"                             // reuse previous dialog instance"], "parents_ss": ["f59e100b3c3187aacb8e0d44310817f24c5144e3"], "id": "pedant/sweet-alert-dialog\u0000b82153382557920efd1a0df73860f2474598b43a\u0000sample/src/main/java/cn/pedant/SweetAlert/sample/SampleActivity.java", "callsites_cs": "<unknown>.setConfirmClickListener(null)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#<unknown>.setTitleText(java.lang.String)#<unknown>.setBarColor(<unknown>)#<unknown>.show()#<unknown>.show()#<unknown>.setConfirmClickListener()#<unknown>.setTitleText(java.lang.String)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setBarColor(<unknown>)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setTitleText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.setTitleText(java.lang.String)#android.content.res.Resources.getColor(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.setConfirmText(java.lang.String)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#android.content.res.Resources.getColor(<unknown>)#<unknown>.setBarColor(<unknown>)#<unknown>.setConfirmText(java.lang.String)#<unknown>.setConfirmText(java.lang.String)#<unknown>.show()#<unknown>.SweetAlertDialog.OnSweetClickListener()#<unknown>.showCancelButton(boolean)#<unknown>.setBarColor(<unknown>)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#android.app.Activity.findViewById(<unknown>)#<unknown>.showCancelButton(boolean)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#.CountDownTimer(int, int)#android.view.ContextThemeWrapper.getResources()#android.content.res.Resources.getColor(<unknown>)#<unknown>.showCancelButton(boolean)#android.content.res.Resources.getColor(<unknown>)#<unknown>.setConfirmClickListener(null)#<unknown>.setContentText(java.lang.String)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.changeAlertType(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.show()#<unknown>.setConfirmText(java.lang.String)#<unknown>.setCancelClickListener(null)#<unknown>.setConfirmText(java.lang.String)#<unknown>.setContentText(java.lang.String)#<unknown>.show()#<unknown>.setCustomImage(<unknown>)#android.content.res.Resources.getColor(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.setContentText(java.lang.String)#<unknown>.changeAlertType(<unknown>)#<unknown>.setConfirmClickListener()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.setCanceledOnTouchOutside(boolean)#<unknown>.setBarColor(<unknown>)#<unknown>.setTitleText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#<unknown>.setBarColor(<unknown>)#<unknown>.show()#android.app.Activity.findViewById(<unknown>)#<unknown>.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setCancelable(boolean)#<unknown>.show()#<unknown>.setCancelClickListener(null)#android.app.Activity.findViewById(<unknown>)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#<unknown>.show()#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setTitleText(java.lang.String)#<unknown>.setCancelable(boolean)#<unknown>.setTitleText(java.lang.String)#<unknown>.setTitleText(java.lang.String)#<unknown>.changeAlertType(<unknown>)#<unknown>.setCancelClickListener()#<unknown>.setContentText(java.lang.String)#<unknown>.setCancelText(java.lang.String)#<unknown>.changeAlertType(<unknown>)#android.content.res.Resources.getColor(<unknown>)#<unknown>.getProgressHelper()#android.app.Activity.setContentView(<unknown>)#<unknown>.setConfirmClickListener(null)#android.os.CountDownTimer.start()", "callsites_t": ["<unknown>.setConfirmClickListener(null) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) <unknown>.setTitleText(java.lang.String) <unknown>.setBarColor(<unknown>) <unknown>.show() <unknown>.show() <unknown>.setConfirmClickListener() <unknown>.setTitleText(java.lang.String) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setBarColor(<unknown>) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setTitleText(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.setTitleText(java.lang.String) android.content.res.Resources.getColor(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.setConfirmText(java.lang.String) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) android.content.res.Resources.getColor(<unknown>) <unknown>.setBarColor(<unknown>) <unknown>.setConfirmText(java.lang.String) <unknown>.setConfirmText(java.lang.String) <unknown>.show() <unknown>.SweetAlertDialog.OnSweetClickListener() <unknown>.showCancelButton(boolean) <unknown>.setBarColor(<unknown>) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) android.app.Activity.findViewById(<unknown>) <unknown>.showCancelButton(boolean) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) .CountDownTimer(int, int) android.view.ContextThemeWrapper.getResources() android.content.res.Resources.getColor(<unknown>) <unknown>.showCancelButton(boolean) android.content.res.Resources.getColor(<unknown>) <unknown>.setConfirmClickListener(null) <unknown>.setContentText(java.lang.String) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.changeAlertType(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.show() <unknown>.setConfirmText(java.lang.String) <unknown>.setCancelClickListener(null) <unknown>.setConfirmText(java.lang.String) <unknown>.setContentText(java.lang.String) <unknown>.show() <unknown>.setCustomImage(<unknown>) android.content.res.Resources.getColor(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.setContentText(java.lang.String) <unknown>.changeAlertType(<unknown>) <unknown>.setConfirmClickListener() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.setCanceledOnTouchOutside(boolean) <unknown>.setBarColor(<unknown>) <unknown>.setTitleText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.view.View.getId() java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) <unknown>.setBarColor(<unknown>) <unknown>.show() android.app.Activity.findViewById(<unknown>) <unknown>.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setCancelable(boolean) <unknown>.show() <unknown>.setCancelClickListener(null) android.app.Activity.findViewById(<unknown>) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) <unknown>.show() <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setTitleText(java.lang.String) <unknown>.setCancelable(boolean) <unknown>.setTitleText(java.lang.String) <unknown>.setTitleText(java.lang.String) <unknown>.changeAlertType(<unknown>) <unknown>.setCancelClickListener() <unknown>.setContentText(java.lang.String) <unknown>.setCancelText(java.lang.String) <unknown>.changeAlertType(<unknown>) android.content.res.Resources.getColor(<unknown>) <unknown>.getProgressHelper() android.app.Activity.setContentView(<unknown>) <unknown>.setConfirmClickListener(null) android.os.CountDownTimer.start()"]}, {"user_sni": "Alok Vaish", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity"], "email_sni": "alok@alok-PC.(none)", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items\n\t\t// ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n\t\t\t\t//TODO \n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ******\n\t\t// ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText()\n\t\t\t\t.toString();\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t\t.getText().length() > 5) {\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock\n\t\t\t\t\t.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\")\n\t\t\t\t&& !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount\n\t\t\t\t\t.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText()\n\t\t\t\t\t.toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString()\n\t\t\t\t.equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(\n\t\t\t\t\t\t\ttext_voice_camera_date_bar_dateview.getText()\n\t\t\t\t\t\t\t\t\t.toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,\n\t\t\t\t\t\t\tmDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\n\t\t// ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tif (!intentExtras.containsKey(\"timeInMillis\")\n\t\t\t\t&& !intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-07T11:34:35Z", "hash_sni": "7e193f9c2bdad5c17237c9f80e6b9a0b479b0899", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" import android.widget.TextView;\n import android.widget.Toast;\n \n-import com.vinsol.expensetracker.location.LocationLast;\n+import com.vinsol.expensetracker.helpers.LocationHelper;\n import com.vinsol.expensetracker.utils.AudioPlay;\n import com.vinsol.expensetracker.utils.DateHelper;\n import com.vinsol.expensetracker.utils.DisplayTime;\n@@ -138,11 +138,6 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n \t\t}\n \t\tsetClickListeners();\n-\n-\t\t// //////********* Get Last most accurate location info *********\n-\t\t// /////////\n-\t\tLocationLast mLocationLast = new LocationLast(this);\n-\t\tmLocationLast.getLastLocation();\n \t}\n \n \t@Override\n@@ -399,11 +394,10 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t}\n \t\t}\n \t\t\n-\t\tif(MainActivity.mCurrentLocation != null  && setLocation == true){\n-\t\t\tif (!MainActivity.mCurrentLocation.equals(\"\")) {\n-\t\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION,MainActivity.mCurrentLocation);\n-\t\t\t}\n+\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n+\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n \t\t}\n+\t\t\n \t\t// //// ******* Update database if user added additional info *******\n \t\t// ///////\n \t\tmDatabaseAdapter.open();"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim"], "_version_": 1526727482283130880, "subject_t": ["Working on Location Helper"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// /////// \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// //// ******* Update database if user added additional info ******* \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// //// ****** If audio recording started then stop recording audio \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t\t//TODO  \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// ////// ******** Starts Recording each time activity starts ****** \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// ***** /////// \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// ********** ///////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["f012ac2f28a2a9a4c582af78bb258946f5b8ab3d"], "id": "vinsol/expense-tracker\u00007e193f9c2bdad5c17237c9f80e6b9a0b479b0899\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.widget.TextView.setText(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#android.widget.TextView.getText()#<unknown>.DisplayTime()#android.view.KeyEvent.getRepeatCount()#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#<unknown>.isRecording()#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.widget.TextView.setText(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.lang.Long.toString(long) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() android.widget.TextView.getText() <unknown>.DisplayTime() android.view.KeyEvent.getRepeatCount() android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) <unknown>.isRecording() android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.view.View.OnClickListener android.os.Bundle android.widget.TextView android.widget.Button android.widget.RelativeLayout android.view.View android.util.Log android.view.Window com.vinsol.expensetracker.utils.AudioPlay android.app.Activity com.vinsol.expensetracker.utils.RecordingHelper com.vinsol.expensetracker.location.LocationLast android.os.SystemClock android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\n\npublic class Voice extends Activity implements OnClickListener{\n\t\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate String mFileName = \"test1\";\n\tprivate AudioPlay mAudioPlay;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\t\n\t\t///////   ****** No Title Bar   ********* /////////\n        \n        \n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        \n        setContentView(R.layout.text_voice_camera);\n        \n        \n        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n        \n        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n        \n        setGraphicsVoice();\n        controlVoiceChronometer();\n        setClickListeners();\n        \n        ////////   ********  Handle Date Bar   *********   ////////\n        new DateHandler(this);\n        \n        \n        ////////   ********   Starts Recording each time activity starts   ******   ///////\n        mRecordingHelper = new RecordingHelper(mFileName);\n\t\tmRecordingHelper.startRecording();\n\t\t\n\t\t\n\t\t////////*********     Get Last most accurate location info   *********   /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\t\t\n\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\tif(mRecordingHelper.isRecording()){\n\t\t\tmRecordingHelper.stopRecording();\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n\t\t\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\t\t\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n\t\t\n\t\t\n\t\t////  ***** if stop button pressed ****** //////\n\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n\t\t\tmRecordingHelper.stopRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t}\n\t\t\n\t\t\n\t\t////  ***** if play button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n\t\t\tmAudioPlay = new AudioPlay(mFileName);\n\t\t\tLog.v(\"hello\", text_voice_camera_time_details_chronometer.getText()+\"\");\n\t\t\t\n\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n\t\t\tif(!mAudioPlay.isAudioPlaying()){\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\t\t\n\t\t////  ***** if rerecord button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){}\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\t\t\t\n\t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n\t\t\tif(mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(mFileName);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\t}\n\t\n\t\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-19T12:14:05Z", "hash_sni": "d41434269840382b8a0510d233389250fe554534", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \t\t}\n \n \t}\n-\t\n }"], "score": 1.0, "methods_t": ["AudioPlay DateHandler DisplayTime LocationLast MyCount OnChronometerTickListener RecordingHelper cancel controlVoiceChronometer elapsedRealtime findViewById getDisplayTime getId getLastLocation getPlayBackTime getText isAudioPlaying isRecording length requestWindowFeature setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setVisibility start startPlayBack startRecording stop stopPlayBack stopRecording v"], "_version_": 1526727549849174016, "subject_t": ["Completed working on textentry activity"], "comments_t": ["\t\t//////   *****  Check whether audio is recording or not   *******   /////// \t//countdowntimer is an abstract class, so extend it and fill in methods         ///////   ***** Sets Title Voice Entry *********/////// \t\t///////   ****** No Title Bar   ********* /////////         ////////   ********    Initializing and assigning memory to UI Items **********    ///////// \t\t///////   ********     Adding On Click Actions to click listeners *********    ////////// \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******////// \t\t\t///////   *******   Chronometer Starts Countdown   ******  /////// \t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** /////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////       \t\t\t//////  ******  Restarts chronometer and recording   *******  //////// \t\t////////    *******    Adding Click Listeners to UI Items ******** ////////// \t\t////  ***** if stop button pressed ****** //////         ////////   ********   Starts Recording each time activity starts   ******   /////// \t\t////////*********     Get Last most accurate location info   *********   ///////// \t\t///////   ***** Sets Title Voice Entry *********/////// \t\t\t//////   ******   Handles UI items on button click  ******  ///////         //////   ******  Shows Voice Details ********//////// \t\t////  ***** if play button pressed ****** //////\t\t \t\t\t//////\t     ********   to handle playback of recorded file   *********   //////// \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////         ////////   ********  Handle Date Bar   *********   //////// \t\t////  ***** if rerecord button pressed ****** //////\t\t \t\t//////   ******   If audio recording started then stop recording audio   *****   ///////"], "parents_ss": ["c6e09ea52af1874cb5745afb10e44685ec535f8c"], "id": "vinsol/expense-tracker\u0000d41434269840382b8a0510d233389250fe554534\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.isRecording()#android.view.View.setVisibility(int)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#android.widget.Chronometer.stop()#<unknown>.AudioPlay(java.lang.String)#<unknown>.stopPlayBack()#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.DisplayTime()#android.os.SystemClock.elapsedRealtime()#<unknown>.RecordingHelper(java.lang.String)#android.app.Activity.setContentView(<unknown>)#android.view.View.setVisibility(int)#<unknown>.getLastLocation()#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#android.app.Activity.findViewById(<unknown>)#com.vinsol.expensetracker.Voice.setClickListeners()#android.widget.Chronometer.setOnChronometerTickListener()#android.app.Activity.findViewById(<unknown>)#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#<unknown>.getPlayBackTime()#.OnChronometerTickListener()#android.view.View.setVisibility(int)#android.app.Activity.requestWindowFeature(int)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#<unknown>.RecordingHelper(java.lang.String)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.app.Activity.findViewById(<unknown>)#<unknown>.startPlayBack()#android.widget.TextView.getText()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#<unknown>.isRecording()#android.app.Activity.findViewById(<unknown>)#android.util.Log.v(java.lang.String, java.lang.String)#<unknown>.startRecording()#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)", "callsites_t": ["android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.isRecording() android.view.View.setVisibility(int) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() <unknown>.stopRecording() android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.controlVoiceChronometer() android.widget.Chronometer.stop() <unknown>.AudioPlay(java.lang.String) <unknown>.stopPlayBack() android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.DisplayTime() android.os.SystemClock.elapsedRealtime() <unknown>.RecordingHelper(java.lang.String) android.app.Activity.setContentView(<unknown>) android.view.View.setVisibility(int) <unknown>.getLastLocation() com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) android.app.Activity.findViewById(<unknown>) com.vinsol.expensetracker.Voice.setClickListeners() android.widget.Chronometer.setOnChronometerTickListener() android.app.Activity.findViewById(<unknown>) android.os.CountDownTimer.cancel() java.lang.CharSequence.length() <unknown>.getPlayBackTime() .OnChronometerTickListener() android.view.View.setVisibility(int) android.app.Activity.requestWindowFeature(int) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) <unknown>.RecordingHelper(java.lang.String) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.app.Activity.findViewById(<unknown>) <unknown>.startPlayBack() android.widget.TextView.getText() com.vinsol.expensetracker.Voice.setGraphicsVoice() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) android.view.View.getId() <unknown>.isRecording() android.app.Activity.findViewById(<unknown>) android.util.Log.v(java.lang.String, java.lang.String) <unknown>.startRecording() android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.util.Log android.app.Activity java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate static final int EDIT_RESULT = 35;\n\tprivate RelativeLayout dateBarRelativeLayout;\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprotected static String favID = null;\n\tprivate FavoriteHelper mFavoriteHelper;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\t\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\t\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t}\n\t\t\t\n\t\t\tif(mShowList.get(4) != null){\n\t\t\t\tif(!mShowList.get(4).equals(\"\")){\n\t\t\t\t\tfavID = mShowList.get(4);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\n\t\t\tif(mShowList.get(7) != null)\n\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\n\t\t\tif(mShowList.get(6) != null)\n\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\telse {\n\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tmFavoriteHelper = new FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n\n\t\t\tmShowList.set(4, favID);\n\t\t\tintentExtras.remove(\"mDisplayList\");\n\t\t\tintentExtras.putStringArrayList(\"mDisplayList\", mShowList);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivityForResult(editIntent, EDIT_RESULT);\n//\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t\t\n\t\tsuper.onActivityResult(requestCode, resultCode, data);\n\t\tif (EDIT_RESULT == requestCode) {\n\t\t\tif(Activity.RESULT_OK == resultCode) {\n\t\t\t\t\n\t\t\t\tintentExtras = data.getBundleExtra(\"voiceShowBundle\");\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tmShowList = new ArrayList<String>();\n\t\t\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(0) != null){\n\t\t\t\t\t\tif(mShowList.get(0) != \"\"){\n\t\t\t\t\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfinish();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfinish();\n\t\t\t\t\t}\n\t\t\t\t\tString amount = mShowList.get(2);\n\t\t\t\t\tString tag = mShowList.get(1);\n\n\t\t\t\t\tLog.v(\"amount\", amount +\" am\");\n\t\t\t\t\tif (amount != null) {\n\t\t\t\t\t\tif(!amount.equals(\"\") && !amount.equals(\"?\")){\n\t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfinish();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfinish();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)))) {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(getString(R.string.finished_voiceentry));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(7) != null)\n\t\t\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(6) != null)\n\t\t\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\t\t\telse {\n\t\t\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\t\tupdateUI();\n\t\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmFavoriteHelper.setShowList(mShowList);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\n\t\tif(resultCode == Activity.RESULT_CANCELED){\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-13T14:58:08Z", "hash_sni": "ff0c0fae601c35c5a2d9df62e8da71c9d956c278", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" \t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n \t\t\t}\n \t\t\t\n-\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n-\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n+\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))) {\n \t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n \t\t\t} else {\n \t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n@@ -281,7 +280,7 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n \t\t\t\t\tmShowList = new ArrayList<String>();\n \t\t\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n-\t\t\t\t\tLog.v(\"mShowListOnResult\", mShowList.toString());\n+\t\t\t\t\t\n \t\t\t\t\tif(mShowList.get(0) != null){\n \t\t\t\t\t\tif(mShowList.get(0) != \"\"){\n \t\t\t\t\t\t\t_id = Long.parseLong(mShowList.get(0));\n@@ -293,9 +292,16 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t\t\t\t}\n \t\t\t\t\tString amount = mShowList.get(2);\n \t\t\t\t\tString tag = mShowList.get(1);\n-\t\t\t\t\t\n+\n+\t\t\t\t\tLog.v(\"amount\", amount +\" am\");\n \t\t\t\t\tif (amount != null) {\n+\t\t\t\t\t\tif(!amount.equals(\"\") && !amount.equals(\"?\")){\n \t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tfinish();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tfinish();\n \t\t\t\t\t}\n \t\t\t\t\t\n \t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)))) {"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler ShowLocationHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getDrawable getExternalStorageState getId getInstance getIntent getPlayBackTime getResources getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putBoolean putExtra putStringArrayList remove set setBackgroundDrawable setContentView setFirstDayOfWeek setOnClickListener setShowList setText setTimeInMillis setVisibility show start startActivityForResult startPlayBack stop stopPlayBack toString updateUI v"], "_version_": 1526727823724642304, "subject_t": ["Handled Favorites and remove bugs"], "comments_t": ["\t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** //\t\t\tfinish(); \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ****** If audio recording started then stop recording audio ***** /////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["d4beeea8da5bd26d55c1c966ddf74e948f4fea6b"], "id": "vinsol/expense-tracker\u0000ff0c0fae601c35c5a2d9df62e8da71c9d956c278\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "android.os.Bundle.remove(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.startActivityForResult(android.content.Intent, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.io.File.canRead()#android.widget.Toast.show()#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getPlayBackTime()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#<unknown>.open()#android.content.Context.getString(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.Toast.show()#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.view.View.setVisibility(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#java.io.File.File(java.lang.String)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#java.lang.String.equals(<unknown>)#android.view.ContextThemeWrapper.getResources()#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.util.Log.v(java.lang.String, java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.content.Context.getString(<unknown>)#<unknown>.setShowList(java.util.ArrayList<java.lang.String>)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#java.lang.String.equals(<unknown>)#android.os.Environment.getExternalStorageState()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#android.app.Activity.finish()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#java.lang.Long.toString(java.lang.Long)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#<unknown>.getDisplayTime(<unknown>)#android.os.CountDownTimer.cancel()#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setBackgroundDrawable(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.util.ArrayList<java.lang.String>.ArrayList, String()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.Toast.show()#java.lang.String.equals(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#java.util.Calendar.setTimeInMillis(long)#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.res.Resources.getDrawable(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#<unknown>.DisplayTime()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.os.Bundle.putBoolean(java.lang.String, boolean)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.getInstance()#android.view.View.setVisibility(int)", "callsites_t": ["android.os.Bundle.remove(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.startActivityForResult(android.content.Intent, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.io.File.canRead() android.widget.Toast.show() java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getPlayBackTime() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) <unknown>.open() android.content.Context.getString(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.Toast.show() <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) android.view.View.setVisibility(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) java.io.File.File(java.lang.String) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) java.lang.String.equals(<unknown>) android.view.ContextThemeWrapper.getResources() android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.util.Log.v(java.lang.String, java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.content.Context.getString(<unknown>) <unknown>.setShowList(java.util.ArrayList<java.lang.String>) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) java.lang.String.equals(<unknown>) android.os.Environment.getExternalStorageState() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() android.app.Activity.finish() java.io.File.File(java.lang.String) android.widget.Toast.show() java.lang.Long.toString(java.lang.Long) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() <unknown>.getDisplayTime(<unknown>) android.os.CountDownTimer.cancel() java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setBackgroundDrawable(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.util.ArrayList<java.lang.String>.ArrayList, String() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.Toast.show() java.lang.String.equals(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) java.util.Calendar.setTimeInMillis(long) java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.content.res.Resources.getDrawable(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) <unknown>.getPlayBackTime() android.app.Activity.finish() <unknown>.DisplayTime() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) android.content.Intent.getBundleExtra(java.lang.String) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.os.Bundle.putBoolean(java.lang.String, boolean) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) java.util.Calendar.getInstance() android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener com.vinsol.expensetracker.utils.DisplayDate android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.StringProcessing com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.util.Log android.app.Activity"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.util.Log;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayDate;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\nimport com.vinsol.expensetracker.utils.StringProcessing;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\tprivate Boolean isChanged = false;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\")) {\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry)) || mEditList.get(5).equals(getString(R.string.unknown))){\n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ****** ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio  ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\tisChanged = true;\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif(mRecordingHelper != null)\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\t\n\t\t\tif(intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\t\tIntent mIntent = new Intent(this, ShowTextActivity.class);\n\t\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t\tBundle tempBundle = new Bundle();\n\t\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\t\tmEditList = new ArrayList<String>();\n\t\t\t\tmEditList.addAll(listOnResult);\n\t\t\t\tmIntent.putExtra(\"textShowBundle\", tempBundle);\n\t\t\t\tsetResult(Activity.RESULT_CANCELED, mIntent);\n\t\t\t}\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, \"\");\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\n\t\t\n\t\t\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,mDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\t\t ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\t\n\t\t\n\t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tBundle mToHighLight = new Bundle();\n\t\t\tmToHighLight.putString(\"toHighLight\", _list.get(DatabaseAdapter.KEY_ID));\n\t\t\tintentExpenseListing.putExtras(mToHighLight);\n\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t} else {\n\t\t\t\n\t\t\tIntent mIntent = new Intent(this, ShowVoiceActivity.class);\n\t\t\tBundle tempBundle = new Bundle();\n\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\tlistOnResult.add(mEditList.get(0));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_TAG));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_AMOUNT));\n\t\t\tif(listOnResult.get(2) == null || listOnResult.get(2) == \"\"){\n\t\t\t\tlistOnResult.set(2, \"?\");\n\t\t\t}\n\t\t\t\n\t\t\tif(!mEditList.get(1).equals(listOnResult.get(1))) {\n\t\t\t\n\t\t\t\tif (listOnResult.get(1) == null || listOnResult.get(1).equals(\"\") || listOnResult.get(1).equals(getString(R.string.unfinished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.finished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.unknown_entry))) {\n\t\t\t\t\tlistOnResult.set(1, getString(R.string.finished_voiceentry));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (mEditList.get(1) == null || mEditList.get(1).equals(\"\") || mEditList.get(1).equals(getString(R.string.unfinished_voiceentry)) || mEditList.get(1).equals(getString(R.string.finished_voiceentry)) || mEditList.get(1).equals(getString(R.string.unknown_entry))) {\n\t\t\t\t\tmEditList.set(1, getString(R.string.finished_voiceentry));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n\t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDateDate(_list.get(DatabaseAdapter.KEY_DATE_TIME)));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(3));\n\t\t\t}\n\t\t\tBoolean isAmountNotEqual = false;\n\t\t\ttry{\n\t\t\t\tisAmountNotEqual = Double.parseDouble(new StringProcessing().getStringDoubleDecimal(listOnResult.get(2))) != Double.parseDouble(mEditList.get(2));\n\t\t\t}catch(Exception e){\n\t\t\t\tisAmountNotEqual = true;\n\t\t\t}\n\t\t\tif((!mEditList.get(1).equals(listOnResult.get(1))) || isAmountNotEqual || isChanged ) {\n\t\t\t\tisChanged = false;\n\t\t\t\tShowVoiceActivity.favID = null;\n\t\t\t\tLog.v(\"isChanged\", isChanged+\" \"+ShowVoiceActivity.favID);\n\t\t\t\tHashMap<String, String> listForFav = new HashMap<String, String>();\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_FAVORITE, \"\");\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_ID, mEditList.get(0));\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.editDatabase(listForFav);\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t} else \n\t\t\t\tif(ShowVoiceActivity.favID == null) {\n\t\t\t\t\tlistOnResult.add(mEditList.get(4));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlistOnResult.add(ShowVoiceActivity.favID);\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(5));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n\t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(6));\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(7));\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList.addAll(listOnResult);\n\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\tmIntent.putExtra(\"voiceShowBundle\", tempBundle);\n\t\t\tsetResult(Activity.RESULT_OK, mIntent);\n\t\t}\n\t\tfinish();\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-13T14:58:08Z", "hash_sni": "ff0c0fae601c35c5a2d9df62e8da71c9d956c278", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" import android.os.Bundle;\n import android.os.CountDownTimer;\n import android.os.SystemClock;\n+import android.util.Log;\n import android.view.KeyEvent;\n import android.view.View;\n import android.view.View.OnClickListener;\n@@ -422,11 +423,14 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t\tlistOnResult.set(2, \"?\");\n \t\t\t}\n \t\t\t\n-\t\t\tif (listOnResult.get(1) == null || listOnResult.get(1).equals(\"\") || listOnResult.get(1).equals(getString(R.string.unfinished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.finished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.unknown_entry))) {\n-\t\t\t\tif(listOnResult.get(1).equals(getString(R.string.unfinished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.finished_voiceentry))) {\n-\t\t\t\t\tlistOnResult.set(1, mEditList.get(1));\n-\t\t\t\t} else {\n-\t\t\t\t\tlistOnResult.set(1, \"\");\n+\t\t\tif(!mEditList.get(1).equals(listOnResult.get(1))) {\n+\t\t\t\n+\t\t\t\tif (listOnResult.get(1) == null || listOnResult.get(1).equals(\"\") || listOnResult.get(1).equals(getString(R.string.unfinished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.finished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.unknown_entry))) {\n+\t\t\t\t\tlistOnResult.set(1, getString(R.string.finished_voiceentry));\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tif (mEditList.get(1) == null || mEditList.get(1).equals(\"\") || mEditList.get(1).equals(getString(R.string.unfinished_voiceentry)) || mEditList.get(1).equals(getString(R.string.finished_voiceentry)) || mEditList.get(1).equals(getString(R.string.unknown_entry))) {\n+\t\t\t\t\tmEditList.set(1, getString(R.string.finished_voiceentry));\n \t\t\t\t}\n \t\t\t}\n \t\t\t\n@@ -436,9 +440,17 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t\tlistOnResult.add(new DisplayDate().getLocationDateDate(_list.get(DatabaseAdapter.KEY_DATE_TIME)));\n \t\t\t} else {\n \t\t\t\tlistOnResult.add(mEditList.get(3));\n-\t\t\t}\t\t\t\t\n-\t\t\tif((!mEditList.get(1).equals(listOnResult.get(1))) || (!mEditList.get(2).equals(new StringProcessing().getStringDoubleDecimal(listOnResult.get(2)))) || isChanged ) {\n+\t\t\t}\n+\t\t\tBoolean isAmountNotEqual = false;\n+\t\t\ttry{\n+\t\t\t\tisAmountNotEqual = Double.parseDouble(new StringProcessing().getStringDoubleDecimal(listOnResult.get(2))) != Double.parseDouble(mEditList.get(2));\n+\t\t\t}catch(Exception e){\n+\t\t\t\tisAmountNotEqual = true;\n+\t\t\t}\n+\t\t\tif((!mEditList.get(1).equals(listOnResult.get(1))) || isAmountNotEqual || isChanged ) {\n+\t\t\t\tisChanged = false;\n \t\t\t\tShowVoiceActivity.favID = null;\n+\t\t\t\tLog.v(\"isChanged\", isChanged+\" \"+ShowVoiceActivity.favID);\n \t\t\t\tHashMap<String, String> listForFav = new HashMap<String, String>();\n \t\t\t\tlistForFav.put(DatabaseAdapter.KEY_FAVORITE, \"\");\n \t\t\t\tlistForFav.put(DatabaseAdapter.KEY_ID, mEditList.get(0));\n@@ -446,10 +458,11 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t\tmDatabaseAdapter.editDatabase(listForFav);\n \t\t\t\tmDatabaseAdapter.close();\n \t\t\t\tlistOnResult.add(\"\");\n-\t\t\t} else if(ShowVoiceActivity.favID == null) {\n+\t\t\t} else \n+\t\t\t\tif(ShowVoiceActivity.favID == null) {\n \t\t\t\t\tlistOnResult.add(mEditList.get(4));\n \t\t\t\t}\n-\t\t\t\telse { \n+\t\t\t\telse {\n \t\t\t\t\tlistOnResult.add(ShowVoiceActivity.favID);\n \t\t\t}\n \t\t\tlistOnResult.add(mEditList.get(5));"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay Bundle DatabaseAdapter DateHandler DateHelper DisplayDate DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper StringProcessing add addAll addFlags canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLocationDate getLocationDateDate getLong getPlayBackTime getRepeatCount getString getStringArrayList getStringDoubleDecimal getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put putExtra putExtras putString putStringArrayList saveEntry set setBase setClickListeners setContentView setFirstDayOfWeek setGraphicsVoice setOnChronometerTickListener setOnClickListener setResult setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim v"], "_version_": 1526727823748759552, "subject_t": ["Handled Favorites and remove bugs"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// ////// ******** Starts Recording each time activity starts ****** /////// \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items ********** ///////// \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// //// ******* Update database if user added additional info *******\t\t /////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t// //// ****** If audio recording started then stop recording audio  ***** /////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["d4beeea8da5bd26d55c1c966ddf74e948f4fea6b"], "id": "vinsol/expense-tracker\u0000ff0c0fae601c35c5a2d9df62e8da71c9d956c278\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.util.Log.v(java.lang.String, <unknown>)#java.util.Calendar.setFirstDayOfWeek(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#java.lang.String.equals(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#java.lang.Double.parseDouble(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.lang.String.equals(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#<unknown>.getLocationDateDate(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.content.Context.getString(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.set(int, <unknown>)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.os.Bundle.putString(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#<unknown>.getLocationDate(<unknown>, java.lang.String)#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.content.Context.getString(<unknown>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.Bundle()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#java.lang.String.equals(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setResult(int, android.content.Intent)#android.widget.TextView.getText()#android.content.Intent.putExtras(android.os.Bundle)#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#java.lang.String.equals(java.lang.String)#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.StringProcessing()#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#java.lang.String.equals(java.lang.String)#java.util.ArrayList<java.lang.String>.set(int, <unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.DisplayDate()#<unknown>.isAudioPlaying()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#java.lang.String.equals(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.widget.TextView.getText()#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.view.KeyEvent.getRepeatCount()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.content.Intent.addFlags(int)#android.os.Bundle.Bundle()#android.app.Activity.setResult(int, android.content.Intent)#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#<unknown>.isRecording()#<unknown>.getStringDoubleDecimal(java.lang.String)#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() java.util.ArrayList<java.lang.String>.add(java.lang.String) android.util.Log.v(java.lang.String, <unknown>) java.util.Calendar.setFirstDayOfWeek(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) java.lang.String.equals(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() java.lang.Double.parseDouble(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.add(<unknown>) java.lang.String.equals(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) <unknown>.getLocationDateDate(<unknown>) android.app.Activity.findViewById(<unknown>) android.content.Context.getString(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.set(int, <unknown>) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.Double.parseDouble(<unknown>) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.os.Bundle.putString(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.util.ArrayList<java.lang.String>.get(int) java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() <unknown>.getLocationDate(<unknown>, java.lang.String) android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) java.lang.String.equals(<unknown>) android.widget.TextView.setText(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.content.Context.getString(<unknown>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) java.lang.String.equals(<unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.Bundle() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) java.lang.String.equals(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setResult(int, android.content.Intent) android.widget.TextView.getText() android.content.Intent.putExtras(android.os.Bundle) <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() java.lang.String.equals(java.lang.String) android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.StringProcessing() android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.util.ArrayList<java.lang.String>.get(int) java.lang.String.equals(java.lang.String) java.util.ArrayList<java.lang.String>.set(int, <unknown>) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.DisplayDate() <unknown>.isAudioPlaying() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() java.lang.String.equals(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) android.widget.TextView.getText() <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.add(java.lang.String) android.view.KeyEvent.getRepeatCount() java.util.ArrayList<java.lang.String>.add(<unknown>) android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.ArrayList<java.lang.String>.ArrayList, String() android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.content.Intent.addFlags(int) android.os.Bundle.Bundle() android.app.Activity.setResult(int, android.content.Intent) android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) <unknown>.isRecording() <unknown>.getStringDoubleDecimal(java.lang.String) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Ashwini Kumar Singh Chandel", "repo_sni": "ash242186/VideoStreaming", "imports_t": ["android.os.CountDownTimer android.view.View.OnClickListener android.os.Bundle android.widget.Button android.widget.CompoundButton android.media.MediaPlayer android.media.MediaPlayer.OnSeekCompleteListener android.media.MediaPlayer.OnPreparedListener android.content.pm.ActivityInfo android.widget.ToggleButton android.widget.ProgressBar android.widget.CompoundButton.OnCheckedChangeListener android.media.MediaPlayer.OnVideoSizeChangedListener android.media.MediaPlayer.OnBufferingUpdateListener android.widget.TextView android.media.MediaPlayer.OnErrorListener android.net.Uri android.view.View android.util.Log android.app.Activity"], "email_sni": "chandelashwini@gmail.com", "contents_t": ["package com.example.steaming;\n\n\n\n\nimport android.app.Activity;\nimport android.content.pm.ActivityInfo;\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnBufferingUpdateListener;\nimport android.media.MediaPlayer.OnErrorListener;\nimport android.media.MediaPlayer.OnPreparedListener;\nimport android.media.MediaPlayer.OnSeekCompleteListener;\nimport android.media.MediaPlayer.OnVideoSizeChangedListener;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.CompoundButton;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport android.widget.ToggleButton;\nimport android.widget.CompoundButton.OnCheckedChangeListener;\n\npublic class MainActivity extends Activity implements OnPreparedListener, OnErrorListener{\n\n\tprivate String TAG = getClass().getSimpleName();\n\tprivate Button stop;\n\tprivate ToggleButton playtogglebutton;\n\tprivate TextView timeEnd, timeElapsed;\n\tprivate ProgressBar progressBar, loading;\n\tprivate MyVideoView videoviewer;\n\tprivate CountDownTimer timer;\n\tprivate int mVideoWidth, mVideoHeight;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n\t\tsetContentView(R.layout.activity_main);\n\t\t\n\t\tloading = (ProgressBar) findViewById(R.id.loading);\n\t     \n\t\tstop = (Button) findViewById(R.id.stop);\n\t\tplaytogglebutton = (ToggleButton) findViewById(R.id.playtogglebutton);\n\t\ttimeElapsed = (TextView) findViewById(R.id.timeElapsed);\n\t\ttimeEnd = (TextView) findViewById(R.id.timeEnd);\n\t\tprogressBar = (ProgressBar) findViewById(R.id.progressBar);\n\t\t\t\n\t\t\n\t\t\n\t\tvideoviewer = (MyVideoView) findViewById(R.id.videoviewer);\n\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v4.cache1.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYESARFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v5.cache5.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYDSANFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.youtube.com/v/OwMCw2VG04I\")); //not working\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://daily3gp.com/vids/747.3gp\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://commonsware.com/misc/test2.3gp\"));\n\t\tvideoviewer.setVideoURI(Uri.parse(\"http://www.ooklnet.com/files/381/381489/video.mp4\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://184.72.239.149/vod/mp4:BigBuckBunny_115k.mov\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://dl.dropbox.com/u/80419/santa.mp4\"));\n\t\tvideoviewer.requestFocus();\n\t\tvideoviewer.requestFocus();\n\t\tvideoviewer.setKeepScreenOn(true);\n\t\tvideoviewer.setOnErrorListener(this);\n\t\tvideoviewer.setOnPreparedListener(this);\n\t\t\n\t}\n\n\tprivate OnClickListener stoplistener = new OnClickListener() {\n\t\t\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\tstopMedia();\n\t\t}\n\t};\n\tprivate OnCheckedChangeListener checkedchangelistener =  new OnCheckedChangeListener(){\n\n\t\t@Override\n\t\tpublic void onCheckedChanged(CompoundButton arg0, boolean isChecked) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\t/*pause player*/\n\t\t\tif(isChecked){\n\t\t\t\tSystem.out.println(\"player pause\");\n\t\t\t\tplayMedia(false);\n\t\t\t}\n\t\t\t/*play player*/\n\t\t\telse{\n\t\t\t\tSystem.out.println(\"player play\");\n\t\t\t\tplayMedia(true);\n\t\t\t}\n\t\t}};\n\t\t\n\t\t@Override\n\t\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\t//loading.hide();\n\t\t\tloading.setVisibility(View.GONE);\n\t\t\treturn false;\n\t\t}\n\t\t\n\t@Override\n\tpublic void onPrepared(MediaPlayer mp) {\n\t\t// TODO Auto-generated method stub\n\t\tLog.d(TAG, \"media player preparing.......\");\n\t\tmp.setLooping(true);\n\t\t//loading.hide();\n\t\tplaytogglebutton.setOnCheckedChangeListener(checkedchangelistener);\n\t\tstop.setOnClickListener(stoplistener);\n\t\tloading.setVisibility(View.GONE);\n\n\t\tmVideoWidth = mp.getVideoWidth();\n        mVideoHeight = mp.getVideoHeight();\n\t\t//onVideoSizeChangedListener declaration\n\t\tmp.setOnVideoSizeChangedListener(new OnVideoSizeChangedListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onVideoSizeChanged(MediaPlayer mp, int width, int height) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\tLog.d(TAG, \"onVideoSizeChanged called \" + width + \":\" + height);\n\t\t\t\tif (width == 0 || height == 0) {\n\t\t            Log.e(TAG, \"invalid video width(\" + width + \") or height(\" + height + \")\");\n\t\t            return;\n\t\t        }\n\t\t        mVideoWidth = width;\n\t\t        mVideoHeight = height;\n\t\t        playMedia(true);\n\t\t\t}\n\t\t});\n\t\t// onSeekCompletionListener declaration\n\t\tmp.setOnSeekCompleteListener(new OnSeekCompleteListener() {\n\t\t\t// show current frame after changing the playback position\n\t\t\t@Override\n\t\t\tpublic void onSeekComplete(MediaPlayer mp) {\n\t\t\t\tif (!mp.isPlaying()) {\n\t\t\t\t\t//playMedia(true);\n\t\t\t\t\tSystem.out.println(\"inside the setOnSeekCompleteListener\");\n\t\t\t\t\tplayMedia(false);\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"inside------ the setOnSeekCompleteListener\");\n\t\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n\t\t\t}\n\t\t});\n\n\t\tmp.setOnCompletionListener(null);\n\t\t// onBufferingUpdateListener declaration\n\t\tmp.setOnBufferingUpdateListener(new OnBufferingUpdateListener() {\n\t\t\t// show updated information about the buffering progress\n\t\t\t@Override\n\t\t\tpublic void onBufferingUpdate(MediaPlayer mp, int percent) {\n\t\t\t\tLog.d(this.getClass().getName(), \"percent: \" + percent);\n\t\t\t\tprogressBar.setSecondaryProgress(percent);\n\t\t\t}\n\t\t});\n\t\t\n\n\t\tint time = videoviewer.getDuration();\n\t\tint time_elapsed = videoviewer.getCurrentPosition();\n\t\tprogressBar.setProgress(time_elapsed);\n\n\t\t// update current playback time every 500ms until stop\n\t\ttimer = new CountDownTimer(time, 500) {\n\n\t\t\t@Override\n\t\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n\t\t\t\tfloat a = videoviewer.getCurrentPosition();\n\t\t\t\tfloat b = videoviewer.getDuration();\n\t\t\t\tprogressBar.setProgress((int) (a / b * 100));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onFinish() {\n\t\t\t\tstopMedia();\n\t\t\t}\n\t\t};\n\n\t\t\n\t\t\n\t\ttimeEnd.setText(countTime(time));\n\t\ttimeElapsed.setText(countTime(time_elapsed));\n\t\tplayMedia(true);\n\t}\n\n\t/**\n     * Convert time from milliseconds into minutes and seconds, proper to media player\n     * \n     * @param miliseconds\tmedia content time in milliseconds\n     * @return\ttime in format minutes:seconds\n     */\n    public String countTime(int miliseconds) {\n    \tString timeInMinutes = new String();\n    \tint minutes = miliseconds / 60000;\n    \tint seconds = (miliseconds % 60000)/1000;\n    \ttimeInMinutes = minutes + \":\" + (seconds<10?\"0\" + seconds:seconds);\n\t\treturn timeInMinutes;\n    }\n    \n    /**\n     * Start or Pause playback of media content\n     * \n     * @param v\tView the touch event has been dispatched to\n     */\n\tpublic void playMedia(boolean isplay) {\n\t\tSystem.err.println(\"height:- \"+mVideoHeight);\n\t\tSystem.err.println(\"width:- \"+mVideoWidth);\n\t\t\tif (isplay) {\n\t\t\t\tvideoviewer.changeVideoSize(mVideoWidth, mVideoHeight);\n\t\t\t\tvideoviewer.start();\n\t\t\t\ttimer.start();\n\t\t\t} else {\n\t\t\t\tvideoviewer.pause();\n\t\t\t\ttimer.cancel();\n\t\t\t}\n\t\t\n    }\n    \n    /**\n     * Pause and rewind to beginning of the media content\n     * \n     * @param v\tView the touch event has been dispatched to\n     */\n\tpublic void stopMedia() {\n\t\tif (videoviewer.getCurrentPosition() != 0) {\n\t\t\t\n\t\t\tplaytogglebutton.setChecked(true);\n\t\t\t\n\t\t\tvideoviewer.pause();\n\t\t\tvideoviewer.seekTo(0);\n\t\t\ttimer.cancel();\n\n\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n\t\t\tprogressBar.setProgress(0);\n\t\t}\n\t}\n\n\n\t@Override\n\tprotected void onStop() {\n\t\t// TODO Auto-generated method stub\n\t\tif(videoviewer != null)\n\t\t\tvideoviewer.stopPlayback();\n\t\tif (timer != null) {\n\t\t\ttimer.cancel();\n\t\t}\n\t\tsuper.onStop();\n\t}\n\t\n}\n"], "body_t": ["add loading and add click listener at videoview prepare"], "date_tdt": "2013-07-23T05:47:28Z", "hash_sni": "a20fe512f918168760508400bccbf859b553a078", "name_sni": "src/com/example/steaming/MainActivity.java", "patch_t": [" package com.example.steaming;\n \n \n+\n+\n import android.app.Activity;\n import android.content.pm.ActivityInfo;\n import android.media.MediaPlayer;\n@@ -28,10 +30,9 @@ public class MainActivity extends Activity implements OnPreparedListener, OnErro\n \tprivate Button stop;\n \tprivate ToggleButton playtogglebutton;\n \tprivate TextView timeEnd, timeElapsed;\n-\tprivate ProgressBar progressBar;\n+\tprivate ProgressBar progressBar, loading;\n \tprivate MyVideoView videoviewer;\n \tprivate CountDownTimer timer;\n-\t//private ProgressDialog loading;\n \tprivate int mVideoWidth, mVideoHeight;\n \t\n \t@Override\n@@ -41,26 +42,23 @@ public class MainActivity extends Activity implements OnPreparedListener, OnErro\n \t\tsetRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n \t\tsetContentView(R.layout.activity_main);\n \t\t\n-\t\t/*loading = new ProgressDialog(this);\n-\t      loading.setMessage(\"Loading...\");*/\n+\t\tloading = (ProgressBar) findViewById(R.id.loading);\n \t     \n \t\tstop = (Button) findViewById(R.id.stop);\n \t\tplaytogglebutton = (ToggleButton) findViewById(R.id.playtogglebutton);\n \t\ttimeElapsed = (TextView) findViewById(R.id.timeElapsed);\n \t\ttimeEnd = (TextView) findViewById(R.id.timeEnd);\n \t\tprogressBar = (ProgressBar) findViewById(R.id.progressBar);\n-\t    \n-\t\tplaytogglebutton.setOnCheckedChangeListener(checkedchangelistener);\n-\t\t\n+\t\t\t\n \t\t\n \t\t\n \t\tvideoviewer = (MyVideoView) findViewById(R.id.videoviewer);\n-\t\tvideoviewer.setVideoURI(Uri.parse(\"rtsp://v4.cache1.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYESARFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n+\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v4.cache1.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYESARFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n \t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v5.cache5.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYDSANFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n \t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.youtube.com/v/OwMCw2VG04I\")); //not working\n \t\t//videoviewer.setVideoURI(Uri.parse(\"http://daily3gp.com/vids/747.3gp\"));\n \t\t//videoviewer.setVideoURI(Uri.parse(\"http://commonsware.com/misc/test2.3gp\"));\n-\t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.ooklnet.com/files/381/381489/video.mp4\"));\n+\t\tvideoviewer.setVideoURI(Uri.parse(\"http://www.ooklnet.com/files/381/381489/video.mp4\"));\n \t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://184.72.239.149/vod/mp4:BigBuckBunny_115k.mov\"));\n \t\t//videoviewer.setVideoURI(Uri.parse(\"http://dl.dropbox.com/u/80419/santa.mp4\"));\n \t\tvideoviewer.requestFocus();\n@@ -68,18 +66,16 @@ public class MainActivity extends Activity implements OnPreparedListener, OnErro\n \t\tvideoviewer.setKeepScreenOn(true);\n \t\tvideoviewer.setOnErrorListener(this);\n \t\tvideoviewer.setOnPreparedListener(this);\n-\t\t//loading.show();\n \t\t\n-\t\tstop.setOnClickListener(new OnClickListener() {\n-\t\t\t\n-\t\t\t@Override\n-\t\t\tpublic void onClick(View arg0) {\n-\t\t\t\t// TODO Auto-generated method stub\n-\t\t\t\tstopMedia();\n-\t\t\t}\n-\t\t});\n \t}\n \n+\tprivate OnClickListener stoplistener = new OnClickListener() {\n+\t\t\n+\t\t@Override\n+\t\tpublic void onClick(View v) {\n+\t\t\tstopMedia();\n+\t\t}\n+\t};\n \tprivate OnCheckedChangeListener checkedchangelistener =  new OnCheckedChangeListener(){\n \n \t\t@Override\n@@ -101,6 +97,7 @@ public class MainActivity extends Activity implements OnPreparedListener, OnErro\n \t\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n \t\t\t// TODO Auto-generated method stub\n \t\t\t//loading.hide();\n+\t\t\tloading.setVisibility(View.GONE);\n \t\t\treturn false;\n \t\t}\n \t\t\n@@ -110,6 +107,9 @@ public class MainActivity extends Activity implements OnPreparedListener, OnErro\n \t\tLog.d(TAG, \"media player preparing.......\");\n \t\tmp.setLooping(true);\n \t\t//loading.hide();\n+\t\tplaytogglebutton.setOnCheckedChangeListener(checkedchangelistener);\n+\t\tstop.setOnClickListener(stoplistener);\n+\t\tloading.setVisibility(View.GONE);\n \n \t\tmVideoWidth = mp.getVideoWidth();\n         mVideoHeight = mp.getVideoHeight();\n@@ -247,8 +247,5 @@ public class MainActivity extends Activity implements OnPreparedListener, OnErro\n \t\t}\n \t\tsuper.onStop();\n \t}\n-\n-\t\n-\n \t\n }\n\\ No newline at end of file"], "score": 1.0, "methods_t": ["CountDownTimer OnBufferingUpdateListener OnCheckedChangeListener OnClickListener OnSeekCompleteListener OnVideoSizeChangedListener String cancel changeVideoSize countTime d e findViewById getClass getCurrentPosition getDuration getName getSimpleName getVideoHeight getVideoWidth isPlaying parse pause playMedia println requestFocus seekTo setChecked setContentView setKeepScreenOn setLooping setOnBufferingUpdateListener setOnCheckedChangeListener setOnClickListener setOnCompletionListener setOnErrorListener setOnPreparedListener setOnSeekCompleteListener setOnVideoSizeChangedListener setProgress setRequestedOrientation setSecondaryProgress setText setVideoURI setVisibility start stopMedia stopPlayback"], "_version_": 1526727353912262656, "subject_t": ["update code"], "comments_t": ["\t\t\t//loading.hide(); \t\t//onVideoSizeChangedListener declaration \t\t// onBufferingUpdateListener declaration /** \n * Convert time from milliseconds into minutes and seconds, proper to media player\n * @param miliseconds\tmedia content time in milliseconds\n * @return\ttime in format minutes:seconds\n */\n \t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.youtube.com/v/OwMCw2VG04I\")); //not working \t\t\t\t// TODO Auto-generated method stub \t\t\t// show updated information about the buffering progress \t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://184.72.239.149/vod/mp4:BigBuckBunny_115k.mov\")); \t\t// TODO Auto-generated method stub /** \n * Pause and rewind to beginning of the media content\n * @param v\tView the touch event has been dispatched to\n */\n \t\t//loading.hide(); \t\t//videoviewer.setVideoURI(Uri.parse(\"http://daily3gp.com/vids/747.3gp\")); \t\t//videoviewer.setVideoURI(Uri.parse(\"http://commonsware.com/misc/test2.3gp\")); /** \n * Start or Pause playback of media content\n * @param v\tView the touch event has been dispatched to\n */\n /*play player*/\n /*pause player*/\n \t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v5.cache5.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYDSANFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\")); \t\t// update current playback time every 500ms until stop \t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v4.cache1.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYESARFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\")); \t\t// onSeekCompletionListener declaration \t\t//videoviewer.setVideoURI(Uri.parse(\"http://dl.dropbox.com/u/80419/santa.mp4\")); \t\t\t// TODO Auto-generated method stub \t\t\t// show current frame after changing the playback position \t\t\t\t\t//playMedia(true);"], "parents_ss": ["a703781d38b213b0a2311a16c4f31f78e501a3be"], "id": "ash242186/VideoStreaming\u0000a20fe512f918168760508400bccbf859b553a078\u0000src/com/example/steaming/MainActivity.java", "callsites_cs": "java.lang.Class.getSimpleName()#com.example.steaming.MainActivity.countTime(<unknown>)#com.example.steaming.MainActivity.playMedia(boolean)#java.lang.String.String()#<unknown>.getDuration()#com.example.steaming.MainActivity.countTime(<unknown>)#<unknown>.pause()#android.media.MediaPlayer.setLooping(boolean)#java.io.PrintStream.println(java.lang.String)#com.example.steaming.MainActivity.playMedia(boolean)#<unknown>.getCurrentPosition()#android.media.MediaPlayer.setOnSeekCompleteListener()#android.app.Activity.setRequestedOrientation(int)#android.media.MediaPlayer.setOnVideoSizeChangedListener()#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#com.example.steaming.MainActivity.countTime(int)#android.widget.CompoundButton.setOnCheckedChangeListener(android.widget.CompoundButton.OnCheckedChangeListener)#android.widget.TextView.setText(java.lang.String)#<unknown>.start()#java.lang.Object.getClass()#android.util.Log.d(java.lang.String, java.lang.String)#android.os.CountDownTimer.cancel()#.OnBufferingUpdateListener()#<unknown>.getCurrentPosition()#android.app.Activity.findViewById(<unknown>)#<unknown>.getDuration()#com.example.steaming.MainActivity.playMedia(boolean)#android.widget.ProgressBar.setProgress(int)#com.example.steaming.MainActivity.playMedia(boolean)#android.widget.ToggleButton.setChecked(boolean)#android.util.Log.d(java.lang.String, java.lang.String)#java.io.PrintStream.println(java.lang.String)#java.lang.Class.getName()#<unknown>.pause()#.CountDownTimer(int, int)#android.app.Activity.findViewById(<unknown>)#android.widget.ProgressBar.setSecondaryProgress(int)#android.media.MediaPlayer.getVideoHeight()#android.util.Log.e(java.lang.String, java.lang.String)#android.app.Activity.findViewById(<unknown>)#com.example.steaming.MainActivity.stopMedia()#android.os.CountDownTimer.cancel()#<unknown>.setOnErrorListener(com.example.steaming.MainActivity)#android.widget.TextView.setText(java.lang.String)#<unknown>.requestFocus()#com.example.steaming.MainActivity.stopMedia()#com.example.steaming.MainActivity.countTime(<unknown>)#.OnCheckedChangeListener()#android.widget.TextView.setText(<unknown>)#java.io.PrintStream.println(java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.stopPlayback()#<unknown>.changeVideoSize(int, int)#android.media.MediaPlayer.isPlaying()#android.app.Activity.findViewById(<unknown>)#android.os.CountDownTimer.start()#android.net.Uri.parse(java.lang.String)#android.media.MediaPlayer.setOnCompletionListener(null)#android.widget.TextView.setText(<unknown>)#android.widget.ProgressBar.setVisibility(int)#android.os.CountDownTimer.cancel()#com.example.steaming.MainActivity.countTime(int)#java.io.PrintStream.println(java.lang.String)#.OnClickListener()#.OnSeekCompleteListener()#android.app.Activity.setContentView(<unknown>)#java.lang.Object.getClass()#.OnVideoSizeChangedListener()#android.widget.ProgressBar.setVisibility(int)#<unknown>.getCurrentPosition()#android.app.Activity.findViewById(<unknown>)#<unknown>.setVideoURI(android.net.Uri)#<unknown>.seekTo(int)#<unknown>.getCurrentPosition()#java.io.PrintStream.println(java.lang.String)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#com.example.steaming.MainActivity.playMedia(boolean)#android.widget.ProgressBar.setProgress(int)#<unknown>.setKeepScreenOn(boolean)#android.app.Activity.findViewById(<unknown>)#android.widget.ProgressBar.setProgress(int)#java.io.PrintStream.println(java.lang.String)#<unknown>.setOnPreparedListener(com.example.steaming.MainActivity)#android.media.MediaPlayer.getVideoWidth()#android.media.MediaPlayer.setOnBufferingUpdateListener()", "callsites_t": ["java.lang.Class.getSimpleName() com.example.steaming.MainActivity.countTime(<unknown>) com.example.steaming.MainActivity.playMedia(boolean) java.lang.String.String() <unknown>.getDuration() com.example.steaming.MainActivity.countTime(<unknown>) <unknown>.pause() android.media.MediaPlayer.setLooping(boolean) java.io.PrintStream.println(java.lang.String) com.example.steaming.MainActivity.playMedia(boolean) <unknown>.getCurrentPosition() android.media.MediaPlayer.setOnSeekCompleteListener() android.app.Activity.setRequestedOrientation(int) android.media.MediaPlayer.setOnVideoSizeChangedListener() android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) com.example.steaming.MainActivity.countTime(int) android.widget.CompoundButton.setOnCheckedChangeListener(android.widget.CompoundButton.OnCheckedChangeListener) android.widget.TextView.setText(java.lang.String) <unknown>.start() java.lang.Object.getClass() android.util.Log.d(java.lang.String, java.lang.String) android.os.CountDownTimer.cancel() .OnBufferingUpdateListener() <unknown>.getCurrentPosition() android.app.Activity.findViewById(<unknown>) <unknown>.getDuration() com.example.steaming.MainActivity.playMedia(boolean) android.widget.ProgressBar.setProgress(int) com.example.steaming.MainActivity.playMedia(boolean) android.widget.ToggleButton.setChecked(boolean) android.util.Log.d(java.lang.String, java.lang.String) java.io.PrintStream.println(java.lang.String) java.lang.Class.getName() <unknown>.pause() .CountDownTimer(int, int) android.app.Activity.findViewById(<unknown>) android.widget.ProgressBar.setSecondaryProgress(int) android.media.MediaPlayer.getVideoHeight() android.util.Log.e(java.lang.String, java.lang.String) android.app.Activity.findViewById(<unknown>) com.example.steaming.MainActivity.stopMedia() android.os.CountDownTimer.cancel() <unknown>.setOnErrorListener(com.example.steaming.MainActivity) android.widget.TextView.setText(java.lang.String) <unknown>.requestFocus() com.example.steaming.MainActivity.stopMedia() com.example.steaming.MainActivity.countTime(<unknown>) .OnCheckedChangeListener() android.widget.TextView.setText(<unknown>) java.io.PrintStream.println(java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.stopPlayback() <unknown>.changeVideoSize(int, int) android.media.MediaPlayer.isPlaying() android.app.Activity.findViewById(<unknown>) android.os.CountDownTimer.start() android.net.Uri.parse(java.lang.String) android.media.MediaPlayer.setOnCompletionListener(null) android.widget.TextView.setText(<unknown>) android.widget.ProgressBar.setVisibility(int) android.os.CountDownTimer.cancel() com.example.steaming.MainActivity.countTime(int) java.io.PrintStream.println(java.lang.String) .OnClickListener() .OnSeekCompleteListener() android.app.Activity.setContentView(<unknown>) java.lang.Object.getClass() .OnVideoSizeChangedListener() android.widget.ProgressBar.setVisibility(int) <unknown>.getCurrentPosition() android.app.Activity.findViewById(<unknown>) <unknown>.setVideoURI(android.net.Uri) <unknown>.seekTo(int) <unknown>.getCurrentPosition() java.io.PrintStream.println(java.lang.String) android.view.View.setOnClickListener(android.view.View.OnClickListener) com.example.steaming.MainActivity.playMedia(boolean) android.widget.ProgressBar.setProgress(int) <unknown>.setKeepScreenOn(boolean) android.app.Activity.findViewById(<unknown>) android.widget.ProgressBar.setProgress(int) java.io.PrintStream.println(java.lang.String) <unknown>.setOnPreparedListener(com.example.steaming.MainActivity) android.media.MediaPlayer.getVideoWidth() android.media.MediaPlayer.setOnBufferingUpdateListener()"]}, {"user_sni": "campbelg", "repo_sni": "OCLC-Developer-Network/oclc-auth-android-example", "imports_t": ["android.os.CountDownTimer android.content.Context android.widget.LinearLayout android.os.Bundle android.view.Menu android.webkit.WebView android.app.ProgressDialog java.util.HashMap android.widget.TextView android.view.View android.webkit.CookieManager android.app.Activity"], "email_sni": "campbelg@oclc.org", "contents_t": ["package org.oclc.mobile.authentication.android;\n\n/*******************************************************************************\n * Copyright (c) 2013 OCLC Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by\n * applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS\n * OF ANY KIND, either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n *\n ******************************************************************************/\n\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.app.ProgressDialog;\nimport android.content.Context;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.Menu;\nimport android.view.View;\nimport android.webkit.CookieManager;\nimport android.webkit.WebView;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\n\n/**\n * Displays the view for the application and handles UI interaction. The\n * following resources are loaded into this Activity:\n * <ul>\n * <li>res/layout/activity_main.xml - the view objects and their layout</li>\n * <li>/res/values/strings.xml - any strings that are displayed</li>\n * <li>/res/values/authentication.xml - list of strings containing\n * authentication parameters</li>\n * </ul>\n * <p>\n * This class calls an instance of AuthenticatingWebView to handle the actual\n * sign in process with the OCLC Authentication servers. Call back methods are\n * defined by interfaces in AuthenticatingWebViewCallbackMethods, so that the\n * AuthenticatingWebView can turn an activity indicator on and off, and return\n * the authentication results for display.\n * <p>\n * The request and result parameters are as follows:\n * <p>\n * Request Parameters - stored in prop. file res/values/authentication.xml:\n * <ul>\n * <li>authenticatingServerBaseUrl</li>\n * <li>client_id</li>\n * <li>authenticatingInstitutionId</li>\n * <li>contextInstitutionId</li>\n * <li>redirect_uri</li>\n * <li>response_type</li>\n * <li>scope</li>\n * </ul>\n * Returned Parameters - stored in HashMap authorizationReturnParameters:\n * <ul>\n * <li>accessToken</li>\n * <li>principalID</li>\n * <li>principalIDNS</li>\n * <li>context_institution_id</li>\n * <li>token_type</li>\n * <li>expires_in</li>\n * <li>expires_at</li>\n * </ul>\n * <p>\n * The Cookie Manager, myCookieManager, gives access to this app's cookies so\n * that we can clear them when restarting the sign-in activity from scratch.\n *\n * @see android.app.Activity\n */\npublic class MainActivity extends Activity implements\nAuthenticatingWebViewCallbackMethods {\n\n    /**\n     * Multiplier to convert seconds to milliseconds\n     */\n    private static final int SECONDS_TO_MILLISECONDS = 1000;\n\n    /**\n     * An extension that is passed a webview and uses it to handle\n     * authentication\n     */\n    private AuthenticatingWebView authenticatingWebView;\n\n    /**\n     * Holds the context of MainActivity so it can be passed to the WebView. The\n     * WebView uses that context to call back to the MainActivity to\n     * <ul>\n     * <li>Start the activity spinner.</li>\n     * <li>Stop the activity spinner.</li>\n     * <li>Display the authentication results.</li>\n     * </ul>\n     */\n    private Context myContext;\n\n    /**\n     * Handle for managing this application's cookies\n     */\n    private CookieManager myCookieManager;\n\n    /**\n     * Timer activated when authentication token is received to decrement the\n     * seconds remaining until the authentication token expires.\n     */\n    private CountDownTimer tokenCountDownTimer;\n\n    /**\n     * A progress dialog to indicate to the user that the app is waiting for an\n     * http response\n     */\n    private ProgressDialog myProgressDialog;\n\n    /**\n     * The webview used for authentication\n     */\n    private WebView webView;\n\n    /**\n     * The full URL of the Access Token request\n     */\n    private String requestUrl;\n\n    /**\n     * This method initializes the class and only fires once - when the app\n     * loads into memory. Once an app is initialized, it stays in the run state\n     * until the client runs out of memory or shuts off, which could be for\n     * days. This method does not fire when the app returns from the background\n     * to the foreground.\n     * <p>\n     * The method loads the layout from the xml file, instantiates an instance\n     * of the webview. A WebView is an embedded Chrome browser with no user\n     * controls, which we will use to handle OAuth2 authentication. Initially\n     * the webView is invisible. It is made visible to facilitate sign in, and\n     * hidden after a token is received so that the token can be displayed.\n     *\n     * @param savedInstanceState state information for the app\n     * @see android.app.Activity#onCreate(android.os.Bundle)\n     */\n    @Override\n    protected final void onCreate(final Bundle savedInstanceState) {\n\n        /**\n         * Set the context required for the progress dialog\n         */\n        myContext = this;\n\n        /**\n         * Required for all Android apps to pass the savedInstanceState to the\n         * parent\n         */\n        super.onCreate(savedInstanceState);\n\n        /**\n         * Loads the view elements from the xml file. R.layout.activity_main\n         * refers to res/layout/activity_main.xml\n         */\n        setContentView(R.layout.activity_main);\n\n        /**\n         * Get a handle to the webView whose position and size is defined in\n         * activity_main.xml\n         */\n        webView = (WebView) findViewById(R.id.webView);\n\n        /**\n         * Get a handle to the CookieManager, which is global for this app, and\n         * use it to enable cookies.\n         */\n        myCookieManager = CookieManager.getInstance();\n        myCookieManager.setAcceptCookie(true);\n\n        /**\n         * Build the request url by getting the request parameters from\n         * res/values/authentication.xml.\n         */\n        requestUrl = new StringBuffer()\n        .append(getString(R.string.authenticatingServerBaseUrl))\n        .append(\"/authorizeCode?client_id=\")\n        .append(getString(R.string.wskey))\n        .append(\"&authenticatingInstitutionId=\")\n        .append(getString(R.string.authenticatingInstitutionId))\n        .append(\"&contextInstitutionId=\")\n        .append(getString(R.string.contextInstitutionId))\n        .append(\"&redirect_uri=\")\n        .append(getString(R.string.redirectUrl))\n        .append(\"&response_type=\")\n        .append(getString(R.string.responseType)).append(\"&scope=\")\n        .append(getString(R.string.scopes)).toString();\n\n        if (getString(R.string.wskey).equals(\"\")) {\n            // If the wskey is blank, then the user probably forgot to set the\n            // parameters in authentication.xml\n            LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n            resultLayout.setVisibility(View.VISIBLE);\n\n            ((TextView) findViewById(R.id.access_token))\n            .setText(\"You must set the authentication parameters in the authentication.xml properties file.\");\n        } else {\n            /**\n             * Create the AuthenticatingWebView, a custom WebView, to make the url\n             * request. We also pass this class's context so that the\n             * AuthenticatingWebView can execute callbacks.\n             */\n            authenticatingWebView = new AuthenticatingWebView(webView, this);\n            authenticatingWebView.makeRequest(requestUrl);\n        }\n    }\n\n    /**\n     * Boilerplate code required by Android to display any menu xml that may\n     * exist in res/menu.\n     *\n     * @param menu the menu associated with this activity\n     * @return returns true to create the menu\n     */\n    @Override\n    public final boolean onCreateOptionsMenu(final Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.main, menu);\n        return true;\n    }\n\n    /**\n     * Standard form callback for the [Clear Cookies] button, whose properties\n     * are described in res/layout/activity_main.xml.\n     *\n     * @param view [Clear Cookies] button's view\n     */\n    public final void clearCookies(final View view) {\n\n        /**\n         * Removes the cookies associated with this app only - browser cookies\n         * and other app's cookies are not affected.\n         */\n        myCookieManager.removeAllCookie();\n    }\n\n    /**\n     * Standard form callback for the [Sign In Again] button, whose properties\n     * are described in res/layout/activity_main.xml.\n     *\n     * @param view [Sign In Again] button's view\n     */\n    public final void signInAgain(final View view) {\n\n        if (!getString(R.string.wskey).equals(\"\")) {\n            /**\n             * Clear the token count down timer if it is running and set the timer\n             * text to expired.\n             */\n            if (tokenCountDownTimer != null) {\n                tokenCountDownTimer.cancel();\n                tokenCountDownTimer = null;\n                ((TextView) findViewById(R.id.timeRemainingTextView))\n                .setText(getString(R.string.time_remaining_expired));\n            }\n\n            /**\n             *  Hide the text result views.\n             */\n            LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n            resultLayout.setVisibility(View.INVISIBLE);\n\n            /**\n             * Make another request.\n             */\n\n            authenticatingWebView.makeRequest(requestUrl);\n        }\n    }\n\n    /**\n     * Display a progress indicator while authenticating. Implements a callback\n     * function called by AuthenticatingWebViewCallbackMethods\n     */\n    @Override\n    public final void startProgressDialog() {\n\n        /**\n         *  Create a progressDialog if it does not exist.\n         */\n        if (myProgressDialog == null) {\n            myProgressDialog = new ProgressDialog(myContext);\n            myProgressDialog.setTitle(getString(R.string.authenticating));\n            myProgressDialog.setMessage(getString(R.string.please_wait));\n            myProgressDialog.setCancelable(false);\n            myProgressDialog.setIndeterminate(true);\n        }\n\n        /**\n         *  Show the progress dialog.\n         */\n        myProgressDialog.show();\n    }\n\n    /**\n     * Stop and destroy a progress indicator (if it exists). Implements a\n     * callback function called by AuthenticatingWebViewCallbackMethods.\n     */\n    @Override\n    public final void stopProgressDialog() {\n        myProgressDialog.hide();\n    }\n\n    /**\n     * Display the results by extracting the values from the Hash Map and\n     * inserting them into the TextViews which are defined in\n     * res/layout/activity_main.xml. Implements a callback function called by\n     * AuthenticatingWebViewCallbackMethods.\n     *\n     * @param authorizationReturnParameters A list of return params and values\n     */\n    @Override\n    public final void displayResults(\n            final HashMap<String, String> authorizationReturnParameters) {\n\n        /**\n         * Make the text result views visible. Each result parameter's textview\n         * is grouped into a LinearLayout.\n         */\n        LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n        resultLayout.setVisibility(View.VISIBLE);\n\n        ((TextView) findViewById(R.id.access_token))\n        .setText(authorizationReturnParameters.get(\"access_token\"));\n        ((TextView) findViewById(R.id.principalID))\n        .setText(authorizationReturnParameters.get(\"principalID\"));\n        ((TextView) findViewById(R.id.principalIDNS))\n        .setText(authorizationReturnParameters.get(\"principalIDNS\"));\n        ((TextView) findViewById(R.id.context_institution_id))\n        .setText(authorizationReturnParameters\n                .get(\"context_institution_id\"));\n        ((TextView) findViewById(R.id.token_type))\n        .setText(authorizationReturnParameters.get(\"token_type\"));\n        ((TextView) findViewById(R.id.expires_in))\n        .setText(authorizationReturnParameters.get(\"expires_in\"));\n        ((TextView) findViewById(R.id.expires_at))\n        .setText(authorizationReturnParameters.get(\"expires_at\"));\n\n        /**\n         *  Check if the token CountDownTimer, and cancel it if it does.\n         */\n        if (tokenCountDownTimer != null) {\n            tokenCountDownTimer.cancel();\n        }\n\n        /**\n         * Start a new token count down timer based on the time remaining\n         * returned with the token (time remaining is in seconds).\n         */\n        if (authorizationReturnParameters.get(\"expires_in\") != null) {\n            tokenCountDownTimer = new CountDownTimer(\n                    Integer.parseInt(authorizationReturnParameters\n                            .get(\"expires_in\")) * SECONDS_TO_MILLISECONDS,\n                            SECONDS_TO_MILLISECONDS) {\n\n                /* Callback fires every 1000 ms. */\n                @Override\n                public void onTick(final long millisUntilFinished) {\n                    ((TextView) findViewById(R.id.timeRemainingTextView))\n                    .setText(getString(R.string.time_remaining)\n                            + millisUntilFinished\n                            / SECONDS_TO_MILLISECONDS);\n                }\n\n                /**\n                 *  Callback fires when timer counts down to zero.\n                 */\n                @Override\n                public void onFinish() {\n                    ((TextView) findViewById(R.id.timeRemainingTextView))\n                    .setText(getString(R.string.time_remaining_expired));\n                }\n            }.start();\n        } else {\n            /**\n             * If the \"expires_in\" parameter is null, then something has gone\n             * wrong during authentication.\n             */\n            ((TextView) findViewById(R.id.timeRemainingTextView))\n            .setText(getString(R.string.invalid_authentication_request));\n        }\n    }\n}\n"], "body_t": ["<empty>"], "date_tdt": "2014-01-14T16:31:11Z", "hash_sni": "60bd9a4cdb91ff1ec818a4813e6d147acb75583f", "name_sni": "src/org/oclc/mobile/authentication/android/MainActivity.java", "patch_t": ["      */\n     public final void signInAgain(final View view) {\n \n-        /**\n-         * Clear the token count down timer if it is running and set the timer\n-         * text to expired.\n-         */\n-        if (tokenCountDownTimer != null) {\n-            tokenCountDownTimer.cancel();\n-            tokenCountDownTimer = null;\n-            ((TextView) findViewById(R.id.timeRemainingTextView))\n-            .setText(getString(R.string.time_remaining_expired));\n-        }\n+        if (!getString(R.string.wskey).equals(\"\")) {\n+            /**\n+             * Clear the token count down timer if it is running and set the timer\n+             * text to expired.\n+             */\n+            if (tokenCountDownTimer != null) {\n+                tokenCountDownTimer.cancel();\n+                tokenCountDownTimer = null;\n+                ((TextView) findViewById(R.id.timeRemainingTextView))\n+                .setText(getString(R.string.time_remaining_expired));\n+            }\n \n-        /**\n-         *  Hide the text result views.\n-         */\n-        LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n-        resultLayout.setVisibility(View.INVISIBLE);\n+            /**\n+             *  Hide the text result views.\n+             */\n+            LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n+            resultLayout.setVisibility(View.INVISIBLE);\n \n-        /**\n-         * Make another request.\n-         */\n-        authenticatingWebView.makeRequest(requestUrl);\n+            /**\n+             * Make another request.\n+             */\n+\n+            authenticatingWebView.makeRequest(requestUrl);\n+        }\n     }\n \n     /**"], "score": 1.0, "methods_t": ["AuthenticatingWebView CountDownTimer ProgressDialog StringBuffer append cancel equals findViewById get getInstance getMenuInflater getString hide inflate makeRequest parseInt removeAllCookie setAcceptCookie setCancelable setContentView setIndeterminate setMessage setText setTitle setVisibility show start toString"], "_version_": 1526727354849689601, "subject_t": ["Test for existence of wskey parameter before permitting a sign-in-again to execute."], "comments_t": ["/** \n * Holds the context of MainActivity so it can be passed to the WebView. The WebView uses that context to call back to the MainActivity to <ul> <li>Start the activity spinner.</li> <li>Stop the activity spinner.</li> <li>Display the authentication results.</li> </ul>\n */\n /** \n * The webview used for authentication\n */\n /** \n * A progress dialog to indicate to the user that the app is waiting for an http response\n */\n /** \n * Display a progress indicator while authenticating. Implements a callback function called by AuthenticatingWebViewCallbackMethods\n */\n /* Callback fires every 1000 ms. */\n /** \n * Standard form callback for the [Sign In Again] button, whose properties are described in res/layout/activity_main.xml.\n * @param view [Sign In Again] button's view\n */\n /** \n * Standard form callback for the [Clear Cookies] button, whose properties are described in res/layout/activity_main.xml.\n * @param view [Clear Cookies] button's view\n */\n /** \n * Displays the view for the application and handles UI interaction. The following resources are loaded into this Activity: <ul> <li>res/layout/activity_main.xml - the view objects and their layout</li> <li>/res/values/strings.xml - any strings that are displayed</li> <li>/res/values/authentication.xml - list of strings containing authentication parameters</li> </ul> <p> This class calls an instance of AuthenticatingWebView to handle the actual sign in process with the OCLC Authentication servers. Call back methods are defined by interfaces in AuthenticatingWebViewCallbackMethods, so that the AuthenticatingWebView can turn an activity indicator on and off, and return the authentication results for display. <p> The request and result parameters are as follows: <p> Request Parameters - stored in prop. file res/values/authentication.xml: <ul> <li>authenticatingServerBaseUrl</li> <li>client_id</li> <li>authenticatingInstitutionId</li> <li>contextInstitutionId</li> <li>redirect_uri</li> <li>response_type</li> <li>scope</li> </ul> Returned Parameters - stored in HashMap authorizationReturnParameters: <ul> <li>accessToken</li> <li>principalID</li> <li>principalIDNS</li> <li>context_institution_id</li> <li>token_type</li> <li>expires_in</li> <li>expires_at</li> </ul> <p> The Cookie Manager, myCookieManager, gives access to this app's cookies so that we can clear them when restarting the sign-in activity from scratch.\n * @see android.app.Activity\n */\n /** \n * Callback fires when timer counts down to zero.\n */\n /** \n * An extension that is passed a webview and uses it to handle authentication\n */\n /** \n * Timer activated when authentication token is received to decrement the seconds remaining until the authentication token expires.\n */\n /** \n * Boilerplate code required by Android to display any menu xml that may exist in res/menu.\n * @param menu the menu associated with this activity\n * @return returns true to create the menu\n */\n /** \n * Stop and destroy a progress indicator (if it exists). Implements a callback function called by AuthenticatingWebViewCallbackMethods.\n */\n /** \n * Multiplier to convert seconds to milliseconds\n */\n /** \n * Display the results by extracting the values from the Hash Map and inserting them into the TextViews which are defined in res/layout/activity_main.xml. Implements a callback function called by AuthenticatingWebViewCallbackMethods.\n * @param authorizationReturnParameters A list of return params and values\n */\n             // parameters in authentication.xml /** \n * The full URL of the Access Token request\n */\n /** \n * Handle for managing this application's cookies\n */\n             // If the wskey is blank, then the user probably forgot to set the         // Inflate the menu; this adds items to the action bar if it is present. /** \n * This method initializes the class and only fires once - when the app loads into memory. Once an app is initialized, it stays in the run state until the client runs out of memory or shuts off, which could be for days. This method does not fire when the app returns from the background to the foreground. <p> The method loads the layout from the xml file, instantiates an instance of the webview. A WebView is an embedded Chrome browser with no user controls, which we will use to handle OAuth2 authentication. Initially the webView is invisible. It is made visible to facilitate sign in, and hidden after a token is received so that the token can be displayed.\n * @param savedInstanceState state information for the app\n * @see android.app.Activity#onCreate(android.os.Bundle)\n */\n"], "parents_ss": ["e25ac98d2bc459b6ce6efaec24aeadef337c0fa5"], "id": "OCLC-Developer-Network/oclc-auth-android-example\u000060bd9a4cdb91ff1ec818a4813e6d147acb75583f\u0000src/org/oclc/mobile/authentication/android/MainActivity.java", "callsites_cs": "java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#android.app.ProgressDialog.setIndeterminate(boolean)#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#<unknown>.makeRequest(java.lang.String)#<unknown>.append(<unknown>)#<unknown>.equals(java.lang.String)#android.os.CountDownTimer.cancel()#android.app.Activity.setContentView(<unknown>)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(<unknown>)#android.view.MenuInflater.inflate(<unknown>, android.view.Menu)#android.content.Context.getString(<unknown>)#<unknown>.append(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.app.ProgressDialog.setMessage(<unknown>)#android.app.Dialog.setCancelable(boolean)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.append(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.append(<unknown>)#<unknown>.append(java.lang.String)#<unknown>.append(java.lang.String)#android.content.Context.getString(<unknown>)#android.content.Context.getString(<unknown>)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(<unknown>)#<unknown>.append(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#android.webkit.CookieManager.setAcceptCookie(boolean)#<unknown>.makeRequest(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#java.lang.StringBuffer.append(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.os.CountDownTimer.cancel()#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#<unknown>.toString()#android.view.View.setVisibility(int)#<unknown>.append(<unknown>)#android.view.View.setVisibility(int)#android.app.Dialog.hide()#android.app.Activity.findViewById(<unknown>)#android.app.ProgressDialog.ProgressDialog(android.content.Context)#android.content.Context.getString(<unknown>)#android.app.Activity.findViewById(<unknown>)#.CountDownTimer(int, int)#java.lang.StringBuffer.StringBuffer()#<unknown>.equals(java.lang.String)#android.content.Context.getString(<unknown>)#android.app.AlertDialog.setTitle(<unknown>)#android.widget.TextView.setText(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.AuthenticatingWebView(android.webkit.WebView, org.oclc.mobile.authentication.android.MainActivity)#android.webkit.CookieManager.getInstance()#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.content.Context.getString(<unknown>)#android.content.Context.getString(<unknown>)#android.content.Context.getString(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.webkit.CookieManager.removeAllCookie()#<unknown>.append(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#<unknown>.append(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.CountDownTimer.start()#<unknown>.append(java.lang.String)#java.lang.Integer.parseInt(java.lang.String)#android.content.Context.getString(<unknown>)#<unknown>.append(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.getMenuInflater()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.app.Dialog.show()", "callsites_t": ["java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) android.app.ProgressDialog.setIndeterminate(boolean) java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) <unknown>.makeRequest(java.lang.String) <unknown>.append(<unknown>) <unknown>.equals(java.lang.String) android.os.CountDownTimer.cancel() android.app.Activity.setContentView(<unknown>) android.content.Context.getString(<unknown>) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(<unknown>) android.view.MenuInflater.inflate(<unknown>, android.view.Menu) android.content.Context.getString(<unknown>) <unknown>.append(java.lang.String) android.app.Activity.findViewById(<unknown>) android.app.ProgressDialog.setMessage(<unknown>) android.app.Dialog.setCancelable(boolean) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.append(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.append(<unknown>) <unknown>.append(java.lang.String) <unknown>.append(java.lang.String) android.content.Context.getString(<unknown>) android.content.Context.getString(<unknown>) android.content.Context.getString(<unknown>) android.widget.TextView.setText(<unknown>) <unknown>.append(<unknown>) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) android.webkit.CookieManager.setAcceptCookie(boolean) <unknown>.makeRequest(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) java.lang.StringBuffer.append(<unknown>) android.widget.TextView.setText(java.lang.String) android.os.CountDownTimer.cancel() java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) <unknown>.toString() android.view.View.setVisibility(int) <unknown>.append(<unknown>) android.view.View.setVisibility(int) android.app.Dialog.hide() android.app.Activity.findViewById(<unknown>) android.app.ProgressDialog.ProgressDialog(android.content.Context) android.content.Context.getString(<unknown>) android.app.Activity.findViewById(<unknown>) .CountDownTimer(int, int) java.lang.StringBuffer.StringBuffer() <unknown>.equals(java.lang.String) android.content.Context.getString(<unknown>) android.app.AlertDialog.setTitle(<unknown>) android.widget.TextView.setText(<unknown>) android.content.Context.getString(<unknown>) <unknown>.AuthenticatingWebView(android.webkit.WebView, org.oclc.mobile.authentication.android.MainActivity) android.webkit.CookieManager.getInstance() android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.content.Context.getString(<unknown>) android.content.Context.getString(<unknown>) android.content.Context.getString(<unknown>) android.app.Activity.findViewById(<unknown>) android.webkit.CookieManager.removeAllCookie() <unknown>.append(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) <unknown>.append(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.CountDownTimer.start() <unknown>.append(java.lang.String) java.lang.Integer.parseInt(java.lang.String) android.content.Context.getString(<unknown>) <unknown>.append(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.app.Activity.getMenuInflater() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.app.Dialog.show()"]}, {"user_sni": "code-read", "repo_sni": "Inego/Aglona-Reader-Android", "imports_t": ["android.os.CountDownTimer android.content.Context android.graphics.Paint android.graphics.RectF android.util.AttributeSet android.graphics.PorterDuff android.widget.TextView android.view.View android.util.Log android.view.MotionEvent android.graphics.Bitmap android.graphics.Canvas"], "email_sni": "github@carsonwilson.com", "contents_t": ["package ru.parallelbooks.aglonareader;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\n//import android.graphics.BitmapFactory;\nimport android.graphics.Canvas;\nimport android.graphics.Paint;\nimport android.graphics.PorterDuff;\nimport android.graphics.RectF;\nimport android.os.CountDownTimer;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.widget.TextView;\n\n\npublic class ParallelTextView extends View {\n\n\tParallelTextData pTD;\n\tprivate final MainActivity mainActivity;\n\n\tprivate float splitterMoveOffset;\n\n\tprivate final int BACKGROUND_COLOR = 0xFFFFFFFF;\n\n\tprivate float screenDensityX;\n\tprivate float screenDensityY;\n\tprivate float screenWidth;\n\tprivate float screenHeight;\n\n\tprivate final int STATE_IDLE              = 0;\n\tprivate final int STATE_POINTERDOWN       = 1;\n\tprivate final int STATE_DRAGGING_SPLITTER = 3;\n\tprivate final int STATE_DRAGGING_PAGE     = 4;\n\tprivate final int STATE_PAGEDRAGFINISHING = 5;\n\tprivate final int STATE_PAGEDRAGREVERTING = 6;\n\tprivate final int STATE_SCALING           = 7;\n\tprivate final int STATE_BRIGHTNESS_CHANGE = 8;\n\tprivate final int STATE_SCROLL            = 9;\n\n\tprivate int state = STATE_IDLE;\n\tprivate int firstDownPointerId;\n\tprivate int secondDownPointerId;\n\tprivate float pointerDownPositionX;\n\tprivate float pointerDownPositionY;\n\tprivate float scrollY;\n\tprivate float lastBrightY;\n\n\tprivate float initialScalingDistance;\n\tprivate int initialFontProportion;\n\n\tprivate double initialBrightness;\n\n\tprivate long lastSingleTapTime;\n\tprivate final LongTapTimer longTapTimer = new LongTapTimer();\n\tprivate final int LONG_TAP_DELAY = 500;\n\n\t// Bitmaps are made static to avoid memory leaks on Android 2.3.3 and lower\n\tprivate static Bitmap currentPageBitmap;\n\tprivate Canvas currentPageBitmapCanvas;\n\tprivate static Bitmap nextPageBitmap;\n\tprivate Canvas nextPageBitmapCanvas;\n\tprivate float initialFloatingPagePosition;\n\tprivate float floatingPagePosition;\n\n\tprivate boolean switchingToNextPage;\n\n\tprivate static Bitmap shadowBitmap;\n\tprivate float shadowWidth;\n\tprivate final RectF shadowRect = new RectF();\n\n\tprivate boolean suppressParallelTextRedrawing = false;\n\n\tprivate long pageAnimationStartTime;\n\n\tpublic ParallelTextView(Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\tmainActivity = (MainActivity) context;\n\n\t\tif (shadowBitmap == null) {\n\t\t\tshadowBitmap = Bitmap.createBitmap(50, 1, Bitmap.Config.ARGB_8888);\n\t\t\tCanvas shadowBitmapCanvas = new Canvas(shadowBitmap);\n\t\t\tPaint shadowPaint = new Paint();\n\n\t\t\tfor (int i = 0; i < 50; ++i) {\n\t\t\t\tshadowPaint.setARGB(200 - i * 4, 0, 0, 0);\n\t\t\t\tshadowBitmapCanvas.drawPoint((float) i, 0.0f, shadowPaint);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void goToNextPage() {\n\t\tif (state == STATE_IDLE) {\n\t\t\tprepareSwitchToNextPage();\n\t\t\tsetState(STATE_PAGEDRAGFINISHING);\n\t\t\tstartPageAnimation(initialFloatingPagePosition);\n\t\t}\n\t}\n\n\tpublic void goToPreviousPage() {\n\t\tif (state == STATE_IDLE) {\n\t\t\tprepareSwitchToPrevPage();\n\t\t\tsetState(STATE_PAGEDRAGREVERTING);\n\t\t\tstartPageAnimation(initialFloatingPagePosition);\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onTouchEvent(MotionEvent event) {\n\t\tfinal int pointerIndex = event.getActionIndex();\n\t\tfinal int pointerId = event.getPointerId(pointerIndex);\n\t\tfinal float x = event.getX(pointerIndex);\n\t\tfinal float y = event.getY(pointerIndex);\n\n\t\tswitch (event.getActionMasked()) {\n\t\t\tcase MotionEvent.ACTION_DOWN:\n\t\t\tcase MotionEvent.ACTION_POINTER_DOWN:\n\t\t\t\tswitch (state) {\n\t\t\t\t\tcase STATE_IDLE: // A finger is down, start timer for options popup:\n\t\t\t\t\t\tsetState(STATE_POINTERDOWN);\n\t\t\t\t\t\tlongTapTimer.start();\n\t\t\t\t\t\tpointerDownPositionX = x;\n\t\t\t\t\t\tpointerDownPositionY = y;\n\t\t\t\t\t\tfirstDownPointerId = pointerId;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_POINTERDOWN: // A second finger is down, so scale:\n\t\t\t\t\t\tlongTapTimer.cancel();\n\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n\t\t\t\t\t\t\tpTD.TurnAdvancedPopupOff();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetState(STATE_SCALING);\n\t\t\t\t\t\tsecondDownPointerId = pointerId;\n\t\t\t\t\t\tinitialScalingDistance = getDistance(x, y, pointerDownPositionX, pointerDownPositionY);\n\t\t\t\t\t\tinitialFontProportion = pTD.fontProportion;\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase MotionEvent.ACTION_MOVE:\n\t\t\t\tswitch (state) {\n\t\t\t\t\tcase STATE_POINTERDOWN:\n\t\t\t\t\t\tfloat MIN_MOVE_DELTA_INCH = 0.1f;\n\n//\t\t\t\t\t\tLog.e(\"PTV\", \"PDPX= \" + Float.toString(pointerDownPositionX));\n//\t\t\t\t\t\tLog.e(\"PTV\", \"VW= \" + Float.toString(pTD.viewWidth));\n\n//crw\t\t\t\t\t\tif (getHeightDiffInches(pointerDownPositionY, y) > MIN_MOVE_DELTA_INCH) { // vertical movement\n//middle third of screen only, reserve rest for page drag:\n\t\t\t\t\t\tif (getHeightDiffInches(pointerDownPositionY, y) > MIN_MOVE_DELTA_INCH) { // vertical movement\n\t\t\t\t\t\t\tif ((pTD.LayoutMode == pTD.LayoutMode_Normal) &&\n\t\t\t\t\t\t\t\t(pointerDownPositionX > (pTD.viewWidth / 3)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& pointerDownPositionX < pTD.viewWidth / 1.5)) {\n\t\t\t\t\t\t\t\tsetState(STATE_BRIGHTNESS_CHANGE);\n\t\t\t\t\t\t\t\tinitialBrightness = pTD.brightness;\n\t\t\t\t\t\t\t\tlastBrightY = y;\n\t\t\t\t\t\t// Scroll up/down a line if finger moved at least that far:\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetState(STATE_SCROLL);\n\t\t\t\t\t\t\t\tscrollY = pointerDownPositionY; // Track finger movement\n//\t\t\t\t\t\t\t\tLog.e(\"PTV\", \"scroll1\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (getWidthDiffInches(pointerDownPositionX, x) > MIN_MOVE_DELTA_INCH) { // horizontal movement\n\t\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal\n\t\t\t\t\t\t\t\t\t&& pTD.opState == 0 && pTD.XonSplitter(pointerDownPositionX, screenDensityX)) {\n\t\t\t\t\t\t\t\tpTD.opState = 1;\n\t\t\t\t\t\t\t\tsplitterMoveOffset = pointerDownPositionX - pTD.splitterPosition;\n\t\t\t\t\t\t\t\tsetState(STATE_DRAGGING_SPLITTER);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetState(STATE_DRAGGING_PAGE);\n\n\t\t\t\t\t\t\t\tif (x > pointerDownPositionX) { // going to prev page\n\t\t\t\t\t\t\t\t\tprepareSwitchToPrevPage();\n\t\t\t\t\t\t\t\t} else { // next page\n\t\t\t\t\t\t\t\t\tprepareSwitchToNextPage();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_SCALING:\n\t\t\t\t\t\tfloat fx = 0, fy = 0;\n\t\t\t\t\t\tboolean firstPointFound = false;\n\n\t\t\t\t\t\tfor (int pi = 0; pi < event.getPointerCount(); ++pi) {\n\t\t\t\t\t\t\tint pid = event.getPointerId(pi);\n\n\t\t\t\t\t\t\tif (pid == firstDownPointerId || pid == secondDownPointerId) {\n\t\t\t\t\t\t\t\tif (firstPointFound) {\n\t\t\t\t\t\t\t\t\tfinal float distance = getDistance(fx, fy, event.getX(pi), event.getY(pi));\n\t\t\t\t\t\t\t\t\tfinal float factor = distance / initialScalingDistance;\n\t\t\t\t\t\t\t\t\tpTD.fontProportion = (int)(initialFontProportion * factor);\n\n//Due to multiplication on line above, once pTD.fontProportion goes negative, 0 here\n// prevents further adjustments until our prefs cache is cleared, so use pTD.fontSizeMin instead:\n//crw\t\t\t\t\t\t\t\t\tif (pTD.fontProportion < 0) {\n//crw\t\t\t\t\t\t\t\t\t\tpTD.fontProportion = 0;\n\t\t\t\t\t\t\t\t\tif (pTD.fontProportion < pTD.fontSizeMin) {\n\t\t\t\t\t\t\t\t\t\tpTD.fontProportion = (int) pTD.fontSizeMin;\n\t\t\t\t\t\t\t\t\t} else if (pTD.fontProportion > 1000) {\n\t\t\t\t\t\t\t\t\t\tpTD.fontProportion = 1000;\n\t\t\t\t\t\t\t\t\t}\n/*\n\t\t\t\t\t\t\t\t\tLog.w(\"PTV\", \"FP:\" + String.format(\"%04d\", pTD.fontProportion)\n\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" fctr:\" + String.format(\"%.2f\", factor)\n\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" dst:\" + String.format(\"%.2f\", distance)\n\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" ISD:\" + String.format(\"%.2f\", initialScalingDistance)\n\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" IFP:\" + initialFontProportion);\n*/\n\t\t\t\t\t\t\t\t\tpTD.setFontSize(true);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfx = event.getX(pi);\n\t\t\t\t\t\t\t\t\tfy = event.getY(pi);\n\t\t\t\t\t\t\t\t\tfirstPointFound = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_DRAGGING_SPLITTER:\n\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal && pTD.opState == 1) {\n\t\t\t\t\t\t\tfloat newSplitterPosition = x - splitterMoveOffset;\n\n\t\t\t\t\t\t\tif (newSplitterPosition != pTD.splitterPosition) {\n\t\t\t\t\t\t\t\tif (mainActivity.DoSoundEffects) {\n\t\t\t\t\t\t\t\t\t// Indicate splitter drag with sound effects.\n\t\t\t\t\t\t\t\t\t// Calculate rate (pitch):\n\t\t\t\t\t\t\t\t\tfloat SERate = (float) (((newSplitterPosition / screenWidth) * 1.5) + .5);\n\t\t\t\t\t\t\t\t\t// Use +/- 3 to avoid flood of sounds:\n\t\t\t\t\t\t\t\t\tif (newSplitterPosition < pTD.splitterPosition - 3)\n\t\t\t\t\t\t\t\t\t\t// For now we use 1 effect for left/right, this code allows 2 if desired:\n\t\t\t\t\t\t\t\t\t\tmainActivity.SoundEffect(6, .2f, .2f, SERate);\n\t\t\t\t\t\t\t\t\telse if (newSplitterPosition > pTD.splitterPosition + 3)\n\t\t\t\t\t\t\t\t\t\tmainActivity.SoundEffect(6, .2f, .2f, SERate);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpTD.setSplitterPosition(newSplitterPosition);\n\t\t\t\t\t\t\t\tpTD.SetSplitterRatioByPosition();\n\t\t\t\t\t\t\t\tpTD.ProcessLayoutChange(false);\n\t\t\t\t\t\t\t\tinvalidateParallelText();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_DRAGGING_PAGE:\n\t\t\t\t\t\tfinal float deltaX = x - pointerDownPositionX;\n\t\t\t\t\t\tfloatingPagePosition = initialFloatingPagePosition + deltaX;\n\t\t\t\t\t\tif (floatingPagePosition > 0.0f) {\n\t\t\t\t\t\t\tfloatingPagePosition = 0.0f;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinvalidate();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase STATE_SCROLL:\n//\t\t\t\t\t\tLog.e(\"PTV\", \"scroll2\");\n//\t\t\t\t\t\tLog.e(\"PTV\", \"PDPY=\" + Float.toString(pointerDownPositionY));\n//\t\t\t\t\t\tLog.e(\"PTV\", \"SY=\" + Float.toString(scrollY));\n//\t\t\t\t\t\tLog.e(\"PTV\", \"Y=\" + Float.toString(y));\n\n\t\t\t\t\t\tif (Math.abs(scrollY - y) > pTD.lineHeight) { // large vertical movement\n\t\t\t\t\t\t\tif (y < scrollY)\n\t\t\t\t\t\t\t\tpTD.ProcessKeyDown(); // scroll text up (move forwards in text)\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tpTD.ProcessKeyUp();   // scroll text down\n\t\t\t\t\t\t\tif (mainActivity.DoSoundEffects) mainActivity.SoundEffect(2, .2f, .2f, 1);\n\t\t\t\t\t\t\tscrollY = y;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase STATE_BRIGHTNESS_CHANGE:\n\t\t\t\t\t\tfinal double delta = (y - pointerDownPositionY) / screenHeight * 2.0;\n\t\t\t\t\t\tif (Math.abs(lastBrightY - y) > 5) {  // Lower sensitivity\n\t\t\t\t\t\t\tpTD.brightness = initialBrightness + delta;\n\t\t\t\t\t\t\tif (pTD.brightness < 0.5) {\n\t\t\t\t\t\t\t\tpTD.brightness = 0.5f;\n\t\t\t\t\t\t\t} else if (pTD.brightness > 1.0) {\n\t\t\t\t\t\t\t\tpTD.brightness = 1.0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (mainActivity.DoSoundEffects) mainActivity.SoundEffect(5, .2f, .2f, 1);\n\t\t\t\t\t\t\tpTD.SetColorsByBrightness();\n\t\t\t\t\t\t\tinvalidateParallelText();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlastBrightY = y;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase MotionEvent.ACTION_UP:\n\t\t\tcase MotionEvent.ACTION_POINTER_UP:\n\t\t\t\tswitch (state) {\n\t\t\t\t\tcase STATE_SCALING:\n\t\t\t\t\t\tif (pointerId == firstDownPointerId) {\n\t\t\t\t\t\t\tfirstDownPointerId = -1;\n\t\t\t\t\t\t} else if (pointerId == secondDownPointerId) {\n\t\t\t\t\t\t\tsecondDownPointerId = -1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (firstDownPointerId == -1 && secondDownPointerId == -1) {\n\t\t\t\t\t\t\tsetState(STATE_IDLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_POINTERDOWN:\n\t\t\t\t\t\tfinal long time = System.currentTimeMillis();\n\n\t\t\t\t\t\tsetState(STATE_IDLE);\n\t\t\t\t\t\tint DOUBLE_TAP_DELAY = 500;\n\t\t\t\t\t\tif (time - lastSingleTapTime < DOUBLE_TAP_DELAY) {\n//\t\t\t\t\t\t\tprocessDoubleTap();\n\t\t\t\t\t\t\tlastSingleTapTime = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprocessSingleTap(x, y);\n\t\t\t\t\t\t\tlastSingleTapTime = System.currentTimeMillis();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_DRAGGING_SPLITTER:\n\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal && pTD.opState == 1) {\n\t\t\t\t\t\t\tpTD.opState = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetState(STATE_IDLE);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_BRIGHTNESS_CHANGE:\n\t\t\t\t\tcase STATE_SCROLL:\n\t\t\t\t\t\tsetState(STATE_IDLE);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_DRAGGING_PAGE:\n\t\t\t\t\t\tsetState(switchingToNextPage ? STATE_PAGEDRAGFINISHING : STATE_PAGEDRAGREVERTING);\n\t\t\t\t\t\tif (mainActivity.DoSoundEffects) mainActivity.SoundEffect(3, .8f, .8f, 1);\n\t\t\t\t\t\tstartPageAnimation(floatingPagePosition);\n\t\t\t\t\t\treturn true;\n/*\n\t\t\t\t\t\tif (switchingToNextPage) {\n//\t\t\t\t\t\t\tif (!switchingToNextPage) { // revert page change\n\t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = true;\n\t\t\t\t\t\t\t\tpTD.ProcessPageDown();\n\t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = false;\n//\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsetState(STATE_PAGEDRAGFINISHING);\n\t\t\t\t\t\t} else {\n//\t\t\t\t\t\t\tif (switchingToNextPage) { // revert page change\n\t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = true;\n\t\t\t\t\t\t\t\tpTD.ProcessPageUp();\n\t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = false;\n//\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsetState(STATE_PAGEDRAGREVERTING);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstartPageAnimation(floatingPagePosition);\n\t\t\t\t\t\treturn true;\n*/\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate void prepareSwitchToNextPage() {\n\t\tswitchingToNextPage = true;\n\t\tsuppressParallelTextRedrawing = true;\n\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n\t\t\tpTD.TurnAdvancedPopupOff();\n\t\t}\n\t\tpTD.ProcessPageDown();\n\t\tsuppressParallelTextRedrawing = false;\n\t\tnextPageBitmapCanvas.drawColor(BACKGROUND_COLOR, PorterDuff.Mode.SRC);\n\t\tpTD.onDraw(nextPageBitmapCanvas);\n\t\tinitialFloatingPagePosition = 0;\n\t}\n\n\tprivate void prepareSwitchToPrevPage() {\n\t\tswitchingToNextPage = false;\n\t\tsuppressParallelTextRedrawing = true;\n\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n\t\t\tpTD.TurnAdvancedPopupOff();\n\t\t}\n\t\tpTD.ProcessPageUp();\n\t\tsuppressParallelTextRedrawing = false;\n\t\tnextPageBitmapCanvas.drawColor(BACKGROUND_COLOR, PorterDuff.Mode.SRC);\n\t\tpTD.onDraw(nextPageBitmapCanvas);\n\t\tswapBitmaps();\n\t\tinitialFloatingPagePosition = -screenWidth - shadowWidth;\n\t}\n\n\tprivate void swapBitmaps() {\n\t\tfinal Bitmap tempBitmap = nextPageBitmap;\n\t\tnextPageBitmap = currentPageBitmap;\n\t\tcurrentPageBitmap = tempBitmap;\n\n\t\tfinal Canvas tempCanvas = nextPageBitmapCanvas;\n\t\tnextPageBitmapCanvas = currentPageBitmapCanvas;\n\t\tcurrentPageBitmapCanvas = tempCanvas;\n\t}\n\n\tprivate void startPageAnimation(float ininitalPagePosition) {\n\t\tinitialFloatingPagePosition = ininitalPagePosition;\n\t\tpageAnimationStartTime = System.currentTimeMillis();\n\t\tinvalidate();\n\t}\n\n\tprivate void setState(int state) {\n\t\tLog.d(\"ParalleltextView\", \"State change: \" + this.state + \" -> \" + state);\n\t\tthis.state = state;\n\t}\n\n\tprivate void processSingleTap(float x, float y) {\n\t\tpTD.LastMouseX = x;\n\t\tpTD.LastMouseY = y;\n\n\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n\t\t\tpTD.ProcessMousePosition();\n\t\t}\n\t}\n\n\tprivate void processLongTap() {\n\t\tmainActivity.openContextMenu(this);\n\t}\n\n\t@Override\n\tprotected void onSizeChanged(int w, int h, int oldw, int oldh) {\n\t\tif (pTD == null)\n\t\t\treturn;\n\n\t\tif (currentPageBitmap != null) {\n\t\t\tcurrentPageBitmap.recycle();\n\t\t}\n\n\t\tif (nextPageBitmap != null) {\n\t\t\tnextPageBitmap.recycle();\n\t\t}\n\n\t\tcurrentPageBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);\n\t\tcurrentPageBitmapCanvas = new Canvas(currentPageBitmap);\n\t\tnextPageBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);\n\t\tnextPageBitmapCanvas = new Canvas(nextPageBitmap);\n\n\t\tif (!pTD.fontRangeSet) {\n\t\t\tpTD.setFontRange(w, h);\n\t\t\tpTD.setFontSize(false);\n\t\t}\n\t\t\n\t\tpTD.viewWidth = w;\n\t\tpTD.viewHeight = h;\n\t\tpTD.pTV = this;\n\t\tpTD.SetSplitterPositionByRatio();\n\t\tpTD.ProcessLayoutChange(true);\n\n\t\tscreenDensityX = getContext().getResources().getDisplayMetrics().xdpi;\n\t\tscreenDensityY = getContext().getResources().getDisplayMetrics().ydpi;\n\t\tscreenWidth = w;\n\t\tscreenHeight = h;\n\t\tshadowWidth = screenWidth / 25.0f;\n\n\t\tsuper.onSizeChanged(w, h, oldw, oldh);\n\t}\n\n\t@Override\n\tprotected void onDraw(Canvas canvas) {\n\t\tsuper.onDraw(canvas);\n\n\t\tif (state == STATE_PAGEDRAGFINISHING || state == STATE_PAGEDRAGREVERTING) // animating\n\t\t{\n\t\t\tfinal float finalPagePos = state == STATE_PAGEDRAGFINISHING ? (-screenWidth - shadowWidth) : 0.0f;\n\t\t\tlong PAGE_ANIMATION_DURATION = 300;\n\t\t\tfinal float coef = (System.currentTimeMillis() - pageAnimationStartTime) / (float) PAGE_ANIMATION_DURATION;\n\n\t\t\tif (coef >= 1.0f) {\n\t\t\t\tfloatingPagePosition = 0.0f;\n\n\t\t\t\tif (state == STATE_PAGEDRAGFINISHING) {\n\t\t\t\t\tswapBitmaps();\n\t\t\t\t}\n\n\t\t\t\tsetState(STATE_IDLE);\n\t\t\t} else {\n\t\t\t\tfinal float transformedCoef = ((float)Math.sin(coef * Math.PI - Math.PI / 2.0) + 1.0f) / 2.0f; // transform by sine\n\t\t\t\tfloatingPagePosition = initialFloatingPagePosition + (finalPagePos - initialFloatingPagePosition) * transformedCoef;\n\t\t\t\tinvalidate();\n\t\t\t}\n\t\t}\n\n\t\tif (state == STATE_DRAGGING_PAGE || state == STATE_PAGEDRAGFINISHING || state == STATE_PAGEDRAGREVERTING) {\n\t\t\tcanvas.drawBitmap(nextPageBitmap, 0, 0, null);\n\n\t\t\tfinal float shadowLeft = floatingPagePosition + screenWidth;\n\t\t\tfinal float shadowRight = shadowLeft + shadowWidth;\n\t\t\tshadowRect.set(shadowLeft, 0.0f, shadowRight, screenHeight);\n\t\t\tcanvas.drawBitmap(shadowBitmap, null, shadowRect, null);\n\t\t}\n\n\t\tcanvas.drawBitmap(currentPageBitmap, floatingPagePosition, 0, null);\n\t}\n\n\tpublic void invalidateParallelText() {\n\t\tif (suppressParallelTextRedrawing) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (pTD != null) {\n\t\t\tcurrentPageBitmapCanvas.drawColor(BACKGROUND_COLOR, PorterDuff.Mode.SRC);\n\t\t\tpTD.onDraw(currentPageBitmapCanvas);\n\t\t}\n\n\t\tinvalidate();\n\t}\n\n\tpublic void updateNoBookVisibility() {\n\t\t\n\t\tMainActivity mActivity = (MainActivity) getContext();\n\t\t\n\t\t((TextView)mActivity.findViewById(R.id.emptyBookView)).setVisibility(pTD.bookOpened ? View.INVISIBLE : View.VISIBLE);\n\t}\n\n\tprivate float getHeightDiffInches(float y1, float y2) {\n\t\treturn Math.abs(y1 - y2) / screenDensityY;\n\t}\n\n\tprivate float getWidthDiffInches(float x1, float x2) {\n\t\treturn Math.abs(x1 - x2) / screenDensityX;\n\t}\n\n\tprivate static float getDistance(float x1, float y1, float x2, float y2) {\n\t\tfinal float dX = x1 - x2;\n\t\tfinal float dY = y1 - y2;\n\t\treturn (float)Math.sqrt(dX * dX + dY * dY);\n\t}\n\n\tprivate class LongTapTimer extends CountDownTimer {\n\t\tpublic LongTapTimer() {\n\t\t\tsuper(LONG_TAP_DELAY, 1000000);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long l) {\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tmainActivity.runOnUiThread(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tif (state == STATE_POINTERDOWN) {\n\t\t\t\t\t\tsetState(STATE_IDLE);\n\t\t\t\t\t\tprocessLongTap();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2015-08-31T13:43:55Z", "hash_sni": "d5ad87d11608c81dbf31356c1b16b981b4b8a466", "name_sni": "app/src/main/java/ru/parallelbooks/aglonareader/ParallelTextView.java", "patch_t": [" \n import android.content.Context;\n import android.graphics.Bitmap;\n-import android.graphics.BitmapFactory;\n+//import android.graphics.BitmapFactory;\n import android.graphics.Canvas;\n import android.graphics.Paint;\n import android.graphics.PorterDuff;\n@@ -16,10 +16,11 @@ import android.widget.TextView;\n \n \n public class ParallelTextView extends View {\n+\n \tParallelTextData pTD;\n-\tMainActivity mainActivity;\n+\tprivate final MainActivity mainActivity;\n \n-\tpublic float splitterMoveOffset;\n+\tprivate float splitterMoveOffset;\n \n \tprivate final int BACKGROUND_COLOR = 0xFFFFFFFF;\n \n@@ -36,13 +37,15 @@ public class ParallelTextView extends View {\n \tprivate final int STATE_PAGEDRAGREVERTING = 6;\n \tprivate final int STATE_SCALING           = 7;\n \tprivate final int STATE_BRIGHTNESS_CHANGE = 8;\n+\tprivate final int STATE_SCROLL            = 9;\n \n \tprivate int state = STATE_IDLE;\n-\n \tprivate int firstDownPointerId;\n \tprivate int secondDownPointerId;\n \tprivate float pointerDownPositionX;\n \tprivate float pointerDownPositionY;\n+\tprivate float scrollY;\n+\tprivate float lastBrightY;\n \n \tprivate float initialScalingDistance;\n \tprivate int initialFontProportion;\n@@ -50,13 +53,9 @@ public class ParallelTextView extends View {\n \tprivate double initialBrightness;\n \n \tprivate long lastSingleTapTime;\n-\tprivate final int DOUBLE_TAP_DELAY = 500;\n-\n-\tprivate LongTapTimer longTapTimer = new LongTapTimer();\n+\tprivate final LongTapTimer longTapTimer = new LongTapTimer();\n \tprivate final int LONG_TAP_DELAY = 500;\n \n-\tprivate float MIN_MOVE_DELTA_INCH = 0.1f;\n-\n \t// Bitmaps are made static to avoid memory leaks on Android 2.3.3 and lower\n \tprivate static Bitmap currentPageBitmap;\n \tprivate Canvas currentPageBitmapCanvas;\n@@ -69,12 +68,11 @@ public class ParallelTextView extends View {\n \n \tprivate static Bitmap shadowBitmap;\n \tprivate float shadowWidth;\n-\tprivate RectF shadowRect = new RectF();\n+\tprivate final RectF shadowRect = new RectF();\n \n \tprivate boolean suppressParallelTextRedrawing = false;\n \n \tprivate long pageAnimationStartTime;\n-\tprivate final long PAGE_ANIMATION_DURATION = 300;\n \n \tpublic ParallelTextView(Context context, AttributeSet attrs) {\n \t\tsuper(context, attrs);\n@@ -119,14 +117,14 @@ public class ParallelTextView extends View {\n \t\t\tcase MotionEvent.ACTION_DOWN:\n \t\t\tcase MotionEvent.ACTION_POINTER_DOWN:\n \t\t\t\tswitch (state) {\n-\t\t\t\t\tcase STATE_IDLE:\n+\t\t\t\t\tcase STATE_IDLE: // A finger is down, start timer for options popup:\n \t\t\t\t\t\tsetState(STATE_POINTERDOWN);\n \t\t\t\t\t\tlongTapTimer.start();\n \t\t\t\t\t\tpointerDownPositionX = x;\n \t\t\t\t\t\tpointerDownPositionY = y;\n \t\t\t\t\t\tfirstDownPointerId = pointerId;\n \t\t\t\t\t\treturn true;\n-\t\t\t\t\tcase STATE_POINTERDOWN:\n+\t\t\t\t\tcase STATE_POINTERDOWN: // A second finger is down, so scale:\n \t\t\t\t\t\tlongTapTimer.cancel();\n \t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n \t\t\t\t\t\t\tpTD.TurnAdvancedPopupOff();\n@@ -141,9 +139,26 @@ public class ParallelTextView extends View {\n \t\t\tcase MotionEvent.ACTION_MOVE:\n \t\t\t\tswitch (state) {\n \t\t\t\t\tcase STATE_POINTERDOWN:\n+\t\t\t\t\t\tfloat MIN_MOVE_DELTA_INCH = 0.1f;\n+\n+//\t\t\t\t\t\tLog.e(\"PTV\", \"PDPX= \" + Float.toString(pointerDownPositionX));\n+//\t\t\t\t\t\tLog.e(\"PTV\", \"VW= \" + Float.toString(pTD.viewWidth));\n+\n+//crw\t\t\t\t\t\tif (getHeightDiffInches(pointerDownPositionY, y) > MIN_MOVE_DELTA_INCH) { // vertical movement\n+//middle third of screen only, reserve rest for page drag:\n \t\t\t\t\t\tif (getHeightDiffInches(pointerDownPositionY, y) > MIN_MOVE_DELTA_INCH) { // vertical movement\n-\t\t\t\t\t\t\tsetState(STATE_BRIGHTNESS_CHANGE);\n-\t\t\t\t\t\t\tinitialBrightness = pTD.brightness;\n+\t\t\t\t\t\t\tif ((pTD.LayoutMode == pTD.LayoutMode_Normal) &&\n+\t\t\t\t\t\t\t\t(pointerDownPositionX > (pTD.viewWidth / 3)\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& pointerDownPositionX < pTD.viewWidth / 1.5)) {\n+\t\t\t\t\t\t\t\tsetState(STATE_BRIGHTNESS_CHANGE);\n+\t\t\t\t\t\t\t\tinitialBrightness = pTD.brightness;\n+\t\t\t\t\t\t\t\tlastBrightY = y;\n+\t\t\t\t\t\t// Scroll up/down a line if finger moved at least that far:\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tsetState(STATE_SCROLL);\n+\t\t\t\t\t\t\t\tscrollY = pointerDownPositionY; // Track finger movement\n+//\t\t\t\t\t\t\t\tLog.e(\"PTV\", \"scroll1\");\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t} else if (getWidthDiffInches(pointerDownPositionX, x) > MIN_MOVE_DELTA_INCH) { // horizontal movement\n \t\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal\n \t\t\t\t\t\t\t\t\t&& pTD.opState == 0 && pTD.XonSplitter(pointerDownPositionX, screenDensityX)) {\n@@ -173,11 +188,23 @@ public class ParallelTextView extends View {\n \t\t\t\t\t\t\t\t\tfinal float distance = getDistance(fx, fy, event.getX(pi), event.getY(pi));\n \t\t\t\t\t\t\t\t\tfinal float factor = distance / initialScalingDistance;\n \t\t\t\t\t\t\t\t\tpTD.fontProportion = (int)(initialFontProportion * factor);\n-\t\t\t\t\t\t\t\t\tif (pTD.fontProportion < 0) {\n-\t\t\t\t\t\t\t\t\t\tpTD.fontProportion = 0;\n+\n+//Due to multiplication on line above, once pTD.fontProportion goes negative, 0 here\n+// prevents further adjustments until our prefs cache is cleared, so use pTD.fontSizeMin instead:\n+//crw\t\t\t\t\t\t\t\t\tif (pTD.fontProportion < 0) {\n+//crw\t\t\t\t\t\t\t\t\t\tpTD.fontProportion = 0;\n+\t\t\t\t\t\t\t\t\tif (pTD.fontProportion < pTD.fontSizeMin) {\n+\t\t\t\t\t\t\t\t\t\tpTD.fontProportion = (int) pTD.fontSizeMin;\n \t\t\t\t\t\t\t\t\t} else if (pTD.fontProportion > 1000) {\n \t\t\t\t\t\t\t\t\t\tpTD.fontProportion = 1000;\n \t\t\t\t\t\t\t\t\t}\n+/*\n+\t\t\t\t\t\t\t\t\tLog.w(\"PTV\", \"FP:\" + String.format(\"%04d\", pTD.fontProportion)\n+\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" fctr:\" + String.format(\"%.2f\", factor)\n+\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" dst:\" + String.format(\"%.2f\", distance)\n+\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" ISD:\" + String.format(\"%.2f\", initialScalingDistance)\n+\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" IFP:\" + initialFontProportion);\n+*/\n \t\t\t\t\t\t\t\t\tpTD.setFontSize(true);\n \t\t\t\t\t\t\t\t\tbreak;\n \t\t\t\t\t\t\t\t} else {\n@@ -193,7 +220,17 @@ public class ParallelTextView extends View {\n \t\t\t\t\t\t\tfloat newSplitterPosition = x - splitterMoveOffset;\n \n \t\t\t\t\t\t\tif (newSplitterPosition != pTD.splitterPosition) {\n-\n+\t\t\t\t\t\t\t\tif (mainActivity.DoSoundEffects) {\n+\t\t\t\t\t\t\t\t\t// Indicate splitter drag with sound effects.\n+\t\t\t\t\t\t\t\t\t// Calculate rate (pitch):\n+\t\t\t\t\t\t\t\t\tfloat SERate = (float) (((newSplitterPosition / screenWidth) * 1.5) + .5);\n+\t\t\t\t\t\t\t\t\t// Use +/- 3 to avoid flood of sounds:\n+\t\t\t\t\t\t\t\t\tif (newSplitterPosition < pTD.splitterPosition - 3)\n+\t\t\t\t\t\t\t\t\t\t// For now we use 1 effect for left/right, this code allows 2 if desired:\n+\t\t\t\t\t\t\t\t\t\tmainActivity.SoundEffect(6, .2f, .2f, SERate);\n+\t\t\t\t\t\t\t\t\telse if (newSplitterPosition > pTD.splitterPosition + 3)\n+\t\t\t\t\t\t\t\t\t\tmainActivity.SoundEffect(6, .2f, .2f, SERate);\n+\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\tpTD.setSplitterPosition(newSplitterPosition);\n \t\t\t\t\t\t\t\tpTD.SetSplitterRatioByPosition();\n \t\t\t\t\t\t\t\tpTD.ProcessLayoutChange(false);\n@@ -209,16 +246,37 @@ public class ParallelTextView extends View {\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinvalidate();\n \t\t\t\t\t\tbreak;\n+\n+\t\t\t\t\tcase STATE_SCROLL:\n+//\t\t\t\t\t\tLog.e(\"PTV\", \"scroll2\");\n+//\t\t\t\t\t\tLog.e(\"PTV\", \"PDPY=\" + Float.toString(pointerDownPositionY));\n+//\t\t\t\t\t\tLog.e(\"PTV\", \"SY=\" + Float.toString(scrollY));\n+//\t\t\t\t\t\tLog.e(\"PTV\", \"Y=\" + Float.toString(y));\n+\n+\t\t\t\t\t\tif (Math.abs(scrollY - y) > pTD.lineHeight) { // large vertical movement\n+\t\t\t\t\t\t\tif (y < scrollY)\n+\t\t\t\t\t\t\t\tpTD.ProcessKeyDown(); // scroll text up (move forwards in text)\n+\t\t\t\t\t\t\telse\n+\t\t\t\t\t\t\t\tpTD.ProcessKeyUp();   // scroll text down\n+\t\t\t\t\t\t\tif (mainActivity.DoSoundEffects) mainActivity.SoundEffect(2, .2f, .2f, 1);\n+\t\t\t\t\t\t\tscrollY = y;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tbreak;\n+\n \t\t\t\t\tcase STATE_BRIGHTNESS_CHANGE:\n \t\t\t\t\t\tfinal double delta = (y - pointerDownPositionY) / screenHeight * 2.0;\n-\t\t\t\t\t\tpTD.brightness = initialBrightness + delta;\n-\t\t\t\t\t\tif (pTD.brightness < 0.5) {\n-\t\t\t\t\t\t\tpTD.brightness = 0.5f;\n-\t\t\t\t\t\t} else if (pTD.brightness > 1.0) {\n-\t\t\t\t\t\t\tpTD.brightness = 1.0;\n+\t\t\t\t\t\tif (Math.abs(lastBrightY - y) > 5) {  // Lower sensitivity\n+\t\t\t\t\t\t\tpTD.brightness = initialBrightness + delta;\n+\t\t\t\t\t\t\tif (pTD.brightness < 0.5) {\n+\t\t\t\t\t\t\t\tpTD.brightness = 0.5f;\n+\t\t\t\t\t\t\t} else if (pTD.brightness > 1.0) {\n+\t\t\t\t\t\t\t\tpTD.brightness = 1.0;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (mainActivity.DoSoundEffects) mainActivity.SoundEffect(5, .2f, .2f, 1);\n+\t\t\t\t\t\t\tpTD.SetColorsByBrightness();\n+\t\t\t\t\t\t\tinvalidateParallelText();\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tpTD.SetColorsByBrightness();\n-\t\t\t\t\t\tinvalidateParallelText();\n+\t\t\t\t\t\tlastBrightY = y;\n \t\t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t\tbreak;\n@@ -240,8 +298,9 @@ public class ParallelTextView extends View {\n \t\t\t\t\t\tfinal long time = System.currentTimeMillis();\n \n \t\t\t\t\t\tsetState(STATE_IDLE);\n+\t\t\t\t\t\tint DOUBLE_TAP_DELAY = 500;\n \t\t\t\t\t\tif (time - lastSingleTapTime < DOUBLE_TAP_DELAY) {\n-\t\t\t\t\t\t\tprocessDoubleTap();\n+//\t\t\t\t\t\t\tprocessDoubleTap();\n \t\t\t\t\t\t\tlastSingleTapTime = 0;\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tprocessSingleTap(x, y);\n@@ -255,26 +314,33 @@ public class ParallelTextView extends View {\n \t\t\t\t\t\tsetState(STATE_IDLE);\n \t\t\t\t\t\treturn true;\n \t\t\t\t\tcase STATE_BRIGHTNESS_CHANGE:\n+\t\t\t\t\tcase STATE_SCROLL:\n \t\t\t\t\t\tsetState(STATE_IDLE);\n \t\t\t\t\t\treturn true;\n \t\t\t\t\tcase STATE_DRAGGING_PAGE:\n+\t\t\t\t\t\tsetState(switchingToNextPage ? STATE_PAGEDRAGFINISHING : STATE_PAGEDRAGREVERTING);\n+\t\t\t\t\t\tif (mainActivity.DoSoundEffects) mainActivity.SoundEffect(3, .8f, .8f, 1);\n+\t\t\t\t\t\tstartPageAnimation(floatingPagePosition);\n+\t\t\t\t\t\treturn true;\n+/*\n \t\t\t\t\t\tif (switchingToNextPage) {\n-\t\t\t\t\t\t\tif (!switchingToNextPage) { // revert page change\n+//\t\t\t\t\t\t\tif (!switchingToNextPage) { // revert page change\n \t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = true;\n \t\t\t\t\t\t\t\tpTD.ProcessPageDown();\n \t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = false;\n-\t\t\t\t\t\t\t}\n+//\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\tsetState(STATE_PAGEDRAGFINISHING);\n \t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tif (switchingToNextPage) { // revert page change\n+//\t\t\t\t\t\t\tif (switchingToNextPage) { // revert page change\n \t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = true;\n \t\t\t\t\t\t\t\tpTD.ProcessPageUp();\n \t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = false;\n-\t\t\t\t\t\t\t}\n+//\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\tsetState(STATE_PAGEDRAGREVERTING);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tstartPageAnimation(floatingPagePosition);\n \t\t\t\t\t\treturn true;\n+*/\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t}\n@@ -335,7 +401,7 @@ public class ParallelTextView extends View {\n \t\tpTD.LastMouseY = y;\n \n \t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n-\t\t\tpTD.ProcessMousePosition(true, true);\n+\t\t\tpTD.ProcessMousePosition();\n \t\t}\n \t}\n \n@@ -343,10 +409,6 @@ public class ParallelTextView extends View {\n \t\tmainActivity.openContextMenu(this);\n \t}\n \n-\tprivate void processDoubleTap() {\n-\n-\t}\n-\n \t@Override\n \tprotected void onSizeChanged(int w, int h, int oldw, int oldh) {\n \t\tif (pTD == null)\n@@ -392,8 +454,8 @@ public class ParallelTextView extends View {\n \t\tif (state == STATE_PAGEDRAGFINISHING || state == STATE_PAGEDRAGREVERTING) // animating\n \t\t{\n \t\t\tfinal float finalPagePos = state == STATE_PAGEDRAGFINISHING ? (-screenWidth - shadowWidth) : 0.0f;\n-\n-\t\t\tfinal float coef = (System.currentTimeMillis() - pageAnimationStartTime) / (float)PAGE_ANIMATION_DURATION;\n+\t\t\tlong PAGE_ANIMATION_DURATION = 300;\n+\t\t\tfinal float coef = (System.currentTimeMillis() - pageAnimationStartTime) / (float) PAGE_ANIMATION_DURATION;\n \n \t\t\tif (coef >= 1.0f) {\n \t\t\t\tfloatingPagePosition = 0.0f;"], "score": 1.0, "methods_t": ["Canvas LongTapTimer Paint ProcessKeyDown ProcessKeyUp ProcessLayoutChange ProcessMousePosition ProcessPageDown ProcessPageUp RectF Runnable SetColorsByBrightness SetSplitterPositionByRatio SetSplitterRatioByPosition SoundEffect TurnAdvancedPopupOff XonSplitter abs cancel createBitmap currentTimeMillis d drawBitmap drawColor drawPoint findViewById getActionIndex getActionMasked getContext getDisplayMetrics getDistance getHeightDiffInches getPointerCount getPointerId getResources getWidthDiffInches getX getY invalidate invalidateParallelText onDraw openContextMenu prepareSwitchToNextPage prepareSwitchToPrevPage processLongTap processSingleTap recycle runOnUiThread set setARGB setFontRange setFontSize setSplitterPosition setState setVisibility sin sqrt start startPageAnimation swapBitmaps"], "_version_": 1526726000147169280, "subject_t": ["1. Commented many areas of code flagged as unused and applied several code logic changes as recommended by Android Studio (Analyze-->Inspect). 2. Added Android TTS (Text To Speech) to Advanced Reading mode.  When a section is tapped, its translation is shown (as before) and it is spoken in its untranslated language.  Toasts appear for error conditions. This function may be disabled entirely via Settings. 3. Modified \"Brightness\" control to respond to vertical swipes on central vertical 1/3 of screen only.  Rest of screen (and entire screen in Alternating and Advanced modes) scrolls text back/forward by line in response to vertical swipes. 4. Added sound effects for page turn, scroll, Brightness control, program (re)start, which may be disabled via Settings. 5. Corrected problem (in PTV) which caused font size control to stop working if pinch control was used past smallest font. 6. Changed version to 1.0.2.3"], "comments_t": ["//\t\t\t\t\t\t\tprocessDoubleTap(); \t\t\t\t\t\tif (getHeightDiffInches(pointerDownPositionY, y) > MIN_MOVE_DELTA_INCH) { // vertical movement //\t\t\t\t\t\tLog.e(\"PTV\", \"Y=\" + Float.toString(y)); //crw\t\t\t\t\t\t\t\t\t\tpTD.fontProportion = 0; \t\tif (state == STATE_PAGEDRAGFINISHING || state == STATE_PAGEDRAGREVERTING) // animating //\t\t\t\t\t\tLog.e(\"PTV\", \"SY=\" + Float.toString(scrollY)); \t\t\t\t\t\t\t\t} else { // next page //\t\t\t\t\t\tLog.e(\"PTV\", \"scroll2\"); \t\t\t\t\t\t\t\tif (x > pointerDownPositionX) { // going to prev page \t\t\t\t\t\t\t\tpTD.ProcessKeyUp();   // scroll text down \t\t\t\t\t\t\t\t\t// Calculate rate (pitch): //Due to multiplication on line above, once pTD.fontProportion goes negative, 0 here //middle third of screen only, reserve rest for page drag: //\t\t\t\t\t\t\t\tLog.e(\"PTV\", \"scroll1\"); //\t\t\t\t\t\tLog.e(\"PTV\", \"VW= \" + Float.toString(pTD.viewWidth)); \t\t\t\t\t\tif (Math.abs(lastBrightY - y) > 5) {  // Lower sensitivity // prevents further adjustments until our prefs cache is cleared, so use pTD.fontSizeMin instead: //crw\t\t\t\t\t\t\t\t\tif (pTD.fontProportion < 0) { \t\t\t\t\t\tif (Math.abs(scrollY - y) > pTD.lineHeight) { // large vertical movement //\t\t\t\t\t\tLog.e(\"PTV\", \"PDPX= \" + Float.toString(pointerDownPositionX)); /*\nif (switchingToNextPage) {\n//\t\t\t\t\t\t\tif (!switchingToNextPage) { // revert page change\nsuppressParallelTextRedrawing = true;\npTD.ProcessPageDown();\nsuppressParallelTextRedrawing = false;\n//\t\t\t\t\t\t\t}\nsetState(STATE_PAGEDRAGFINISHING);\n} else {\n//\t\t\t\t\t\t\tif (switchingToNextPage) { // revert page change\nsuppressParallelTextRedrawing = true;\npTD.ProcessPageUp();\nsuppressParallelTextRedrawing = false;\n//\t\t\t\t\t\t\t}\nsetState(STATE_PAGEDRAGREVERTING);\n}\nstartPageAnimation(floatingPagePosition);\nreturn true;\n*/\n \t// Bitmaps are made static to avoid memory leaks on Android 2.3.3 and lower //\t\t\t\t\t\tLog.e(\"PTV\", \"PDPY=\" + Float.toString(pointerDownPositionY)); \t\t\t\t\t\t} else if (getWidthDiffInches(pointerDownPositionX, x) > MIN_MOVE_DELTA_INCH) { // horizontal movement \t\t\t\t\t\t\t\tscrollY = pointerDownPositionY; // Track finger movement \t\t\t\t\t\t\t\t\t// Indicate splitter drag with sound effects. \t\t\t\t\tcase STATE_POINTERDOWN: // A second finger is down, so scale: \t\t\t\t\t\t// Scroll up/down a line if finger moved at least that far: \t\t\t\t\t\t\t\t\t// Use +/- 3 to avoid flood of sounds: \t\t\t\t\t\t\t\t\t\t// For now we use 1 effect for left/right, this code allows 2 if desired: //import android.graphics.BitmapFactory; \t\t\t\t\tcase STATE_IDLE: // A finger is down, start timer for options popup: //crw\t\t\t\t\t\tif (getHeightDiffInches(pointerDownPositionY, y) > MIN_MOVE_DELTA_INCH) { // vertical movement \t\t\t\tfinal float transformedCoef = ((float)Math.sin(coef * Math.PI - Math.PI / 2.0) + 1.0f) / 2.0f; // transform by sine /*\nLog.w(\"PTV\", \"FP:\" + String.format(\"%04d\", pTD.fontProportion)\n+ \" fctr:\" + String.format(\"%.2f\", factor)\n+ \" dst:\" + String.format(\"%.2f\", distance)\n+ \" ISD:\" + String.format(\"%.2f\", initialScalingDistance)\n+ \" IFP:\" + initialFontProportion);\n*/\n \t\t\t\t\t\t\t\tpTD.ProcessKeyDown(); // scroll text up (move forwards in text)"], "parents_ss": ["835bb105ff4a2e9a6d457ba00a4be1d2ce1e0b39"], "id": "Inego/Aglona-Reader-Android\u0000d5ad87d11608c81dbf31356c1b16b981b4b8a466\u0000app/src/main/java/ru/parallelbooks/aglonareader/ParallelTextView.java", "callsites_cs": "<unknown>.ProcessKeyUp()#android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, float, int, null)#android.content.Context.getResources()#java.lang.System.currentTimeMillis()#<unknown>.SoundEffect(int, float, float, int)#<unknown>.onDraw(android.graphics.Canvas)#android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode)#android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap.Config)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float)#.Runnable()#<unknown>.setFontSize(boolean)#ru.parallelbooks.aglonareader.ParallelTextView.swapBitmaps()#<unknown>.TurnAdvancedPopupOff()#android.view.MotionEvent.getX(int)#android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap.Config)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#<unknown>.ProcessPageUp()#<unknown>.setFontSize(boolean)#<unknown>.ProcessMousePosition()#ru.parallelbooks.aglonareader.ParallelTextView.getWidthDiffInches(float, float)#<unknown>.ProcessKeyDown()#java.lang.System.currentTimeMillis()#android.os.CountDownTimer.start()#java.lang.Math.abs(float)#ru.parallelbooks.aglonareader.ParallelTextView.processLongTap()#android.content.res.Resources.getDisplayMetrics()#android.view.MotionEvent.getPointerCount()#android.view.View.invalidate()#java.lang.System.currentTimeMillis()#android.graphics.Paint.setARGB(int, int, int, int)#<unknown>.ProcessLayoutChange(boolean)#android.view.MotionEvent.getY(int)#android.graphics.Canvas.Canvas(android.graphics.Bitmap)#<unknown>.ProcessLayoutChange(boolean)#<unknown>.SetSplitterRatioByPosition()#android.view.MotionEvent.getActionMasked()#android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, null, android.graphics.RectF, null)#android.graphics.Bitmap.recycle()#ru.parallelbooks.aglonareader.ParallelTextView.LongTapTimer.LongTapTimer()#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#java.lang.Math.abs(float)#java.lang.Math.sqrt(float)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#android.view.View.invalidate()#ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToPrevPage()#<unknown>.SoundEffect(int, float, float, float)#<unknown>.SetColorsByBrightness()#ru.parallelbooks.aglonareader.ParallelTextView.getDistance(float, float, float, float)#ru.parallelbooks.aglonareader.ParallelTextView.swapBitmaps()#<unknown>.ProcessPageDown()#<unknown>.openContextMenu(ru.parallelbooks.aglonareader.ParallelTextView)#ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToNextPage()#ru.parallelbooks.aglonareader.ParallelTextView.getHeightDiffInches(float, float)#<unknown>.setSplitterPosition(float)#<unknown>.setFontRange(int, int)#android.view.MotionEvent.getActionIndex()#android.graphics.RectF.set(float, float, float, float)#ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float)#java.lang.Math.abs(float)#<unknown>.SoundEffect(int, float, float, int)#ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToPrevPage()#ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float)#android.graphics.Canvas.Canvas(android.graphics.Bitmap)#java.lang.Math.abs(float)#ru.parallelbooks.aglonareader.ParallelTextView.invalidateParallelText()#android.view.View.invalidate()#<unknown>.findViewById(<unknown>)#android.view.View.setVisibility(<unknown>)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#android.graphics.Canvas.Canvas(android.graphics.Bitmap)#<unknown>.onDraw(android.graphics.Canvas)#android.view.MotionEvent.getPointerId(int)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#<unknown>.SetSplitterPositionByRatio()#<unknown>.SoundEffect(int, float, float, int)#android.view.MotionEvent.getPointerId(int)#android.graphics.Canvas.drawPoint(float, float, android.graphics.Paint)#android.view.MotionEvent.getY(int)#android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, int, int, null)#android.view.View.getContext()#android.graphics.Bitmap.recycle()#android.graphics.RectF.RectF()#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.TurnAdvancedPopupOff()#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#<unknown>.XonSplitter(float, float)#android.view.MotionEvent.getX(int)#java.lang.Math.sin(double)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#<unknown>.runOnUiThread()#android.view.View.invalidate()#ru.parallelbooks.aglonareader.ParallelTextView.getDistance(float, float, float, float)#ru.parallelbooks.aglonareader.ParallelTextView.processSingleTap(float, float)#android.graphics.Paint.Paint()#android.view.View.getContext()#<unknown>.onDraw(android.graphics.Canvas)#<unknown>.TurnAdvancedPopupOff()#android.os.CountDownTimer.cancel()#ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToNextPage()", "callsites_t": ["<unknown>.ProcessKeyUp() android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, float, int, null) android.content.Context.getResources() java.lang.System.currentTimeMillis() <unknown>.SoundEffect(int, float, float, int) <unknown>.onDraw(android.graphics.Canvas) android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode) android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap.Config) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float) .Runnable() <unknown>.setFontSize(boolean) ru.parallelbooks.aglonareader.ParallelTextView.swapBitmaps() <unknown>.TurnAdvancedPopupOff() android.view.MotionEvent.getX(int) android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap.Config) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) <unknown>.ProcessPageUp() <unknown>.setFontSize(boolean) <unknown>.ProcessMousePosition() ru.parallelbooks.aglonareader.ParallelTextView.getWidthDiffInches(float, float) <unknown>.ProcessKeyDown() java.lang.System.currentTimeMillis() android.os.CountDownTimer.start() java.lang.Math.abs(float) ru.parallelbooks.aglonareader.ParallelTextView.processLongTap() android.content.res.Resources.getDisplayMetrics() android.view.MotionEvent.getPointerCount() android.view.View.invalidate() java.lang.System.currentTimeMillis() android.graphics.Paint.setARGB(int, int, int, int) <unknown>.ProcessLayoutChange(boolean) android.view.MotionEvent.getY(int) android.graphics.Canvas.Canvas(android.graphics.Bitmap) <unknown>.ProcessLayoutChange(boolean) <unknown>.SetSplitterRatioByPosition() android.view.MotionEvent.getActionMasked() android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, null, android.graphics.RectF, null) android.graphics.Bitmap.recycle() ru.parallelbooks.aglonareader.ParallelTextView.LongTapTimer.LongTapTimer() ru.parallelbooks.aglonareader.ParallelTextView.setState(int) java.lang.Math.abs(float) java.lang.Math.sqrt(float) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) android.view.View.invalidate() ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToPrevPage() <unknown>.SoundEffect(int, float, float, float) <unknown>.SetColorsByBrightness() ru.parallelbooks.aglonareader.ParallelTextView.getDistance(float, float, float, float) ru.parallelbooks.aglonareader.ParallelTextView.swapBitmaps() <unknown>.ProcessPageDown() <unknown>.openContextMenu(ru.parallelbooks.aglonareader.ParallelTextView) ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToNextPage() ru.parallelbooks.aglonareader.ParallelTextView.getHeightDiffInches(float, float) <unknown>.setSplitterPosition(float) <unknown>.setFontRange(int, int) android.view.MotionEvent.getActionIndex() android.graphics.RectF.set(float, float, float, float) ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float) java.lang.Math.abs(float) <unknown>.SoundEffect(int, float, float, int) ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToPrevPage() ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float) android.graphics.Canvas.Canvas(android.graphics.Bitmap) java.lang.Math.abs(float) ru.parallelbooks.aglonareader.ParallelTextView.invalidateParallelText() android.view.View.invalidate() <unknown>.findViewById(<unknown>) android.view.View.setVisibility(<unknown>) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) android.graphics.Canvas.Canvas(android.graphics.Bitmap) <unknown>.onDraw(android.graphics.Canvas) android.view.MotionEvent.getPointerId(int) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) <unknown>.SetSplitterPositionByRatio() <unknown>.SoundEffect(int, float, float, int) android.view.MotionEvent.getPointerId(int) android.graphics.Canvas.drawPoint(float, float, android.graphics.Paint) android.view.MotionEvent.getY(int) android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, int, int, null) android.view.View.getContext() android.graphics.Bitmap.recycle() android.graphics.RectF.RectF() android.util.Log.d(java.lang.String, java.lang.String) <unknown>.TurnAdvancedPopupOff() ru.parallelbooks.aglonareader.ParallelTextView.setState(int) <unknown>.XonSplitter(float, float) android.view.MotionEvent.getX(int) java.lang.Math.sin(double) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) <unknown>.runOnUiThread() android.view.View.invalidate() ru.parallelbooks.aglonareader.ParallelTextView.getDistance(float, float, float, float) ru.parallelbooks.aglonareader.ParallelTextView.processSingleTap(float, float) android.graphics.Paint.Paint() android.view.View.getContext() <unknown>.onDraw(android.graphics.Canvas) <unknown>.TurnAdvancedPopupOff() android.os.CountDownTimer.cancel() ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToNextPage()"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items\n\t\t// ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n\t\t\t\t//TODO \n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ******\n\t\t// ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\n\t\t// //////********* Get Last most accurate location info *********\n\t\t// /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText()\n\t\t\t\t.toString();\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t\t.getText().length() > 5) {\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock\n\t\t\t\t\t.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\")\n\t\t\t\t&& !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount\n\t\t\t\t\t.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText()\n\t\t\t\t\t.toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString()\n\t\t\t\t.equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(\n\t\t\t\t\t\t\ttext_voice_camera_date_bar_dateview.getText()\n\t\t\t\t\t\t\t\t\t.toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,\n\t\t\t\t\t\t\tmDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(MainActivity.mCurrentLocation != null  && setLocation == true){\n\t\t\tif (!MainActivity.mCurrentLocation.equals(\"\")) {\n\t\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION,MainActivity.mCurrentLocation);\n\t\t\t}\n\t\t}\n\t\t// //// ******* Update database if user added additional info *******\n\t\t// ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tif (!intentExtras.containsKey(\"timeInMillis\")\n\t\t\t\t&& !intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-07T07:23:29Z", "hash_sni": "78a44e8988bd6c8069cb256c490b6bb5fbefda79", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \t\t\t\t//TODO \n \t\t\t\tsetUnknown = true;\n \t\t\t}\n-\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n+\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n \t\t\t\ttext_voice_camera_tag.setText(tag);\n \t\t\t}\n \t\t}"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime File FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLastLocation getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526725600600915968, "subject_t": ["Finished Listing and Fav UI integration"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// /////// \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// //// ******* Update database if user added additional info ******* \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //////********* Get Last most accurate location info ********* \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// //// ****** If audio recording started then stop recording audio \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t\t//TODO  \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// ////// ******** Starts Recording each time activity starts ****** \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// ***** /////// \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// ********** ///////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["7b7a436d1bdd853f4f37fd54decabc2d1217350c"], "id": "vinsol/expense-tracker\u000078a44e8988bd6c8069cb256c490b6bb5fbefda79\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.widget.TextView.setText(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.app.Activity.finish()#java.io.File.File(java.lang.String)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#<unknown>.getLastLocation()#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#<unknown>.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#android.widget.TextView.getText()#<unknown>.DisplayTime()#android.view.KeyEvent.getRepeatCount()#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#<unknown>.isRecording()#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.widget.TextView.setText(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.lang.Long.toString(long) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.app.Activity.finish() java.io.File.File(java.lang.String) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) <unknown>.getLastLocation() android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) <unknown>.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() android.widget.TextView.getText() <unknown>.DisplayTime() android.view.KeyEvent.getRepeatCount() android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) <unknown>.isRecording() android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.util.Log android.app.Activity java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate static final int EDIT_RESULT = 35;\n\tprivate RelativeLayout dateBarRelativeLayout;\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprotected static String favID = null;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\t\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\t\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t}\n\t\t\t\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\n\t\t\tif(mShowList.get(7) != null)\n\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\n\t\t\tif(mShowList.get(6) != null)\n\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\telse {\n\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tnew FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n\n\t\t\tmShowList.set(4, favID);\n\t\t\tintentExtras.remove(\"mDisplayList\");\n\t\t\tintentExtras.putStringArrayList(\"mDisplayList\", mShowList);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivityForResult(editIntent, EDIT_RESULT);\n//\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t\t\n\t\tsuper.onActivityResult(requestCode, resultCode, data);\n\t\tif (EDIT_RESULT == requestCode) {\n\t\t\tif(Activity.RESULT_OK == resultCode) {\n\t\t\t\t\n\t\t\t\tintentExtras = data.getBundleExtra(\"voiceShowBundle\");\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tLog.v(\"yo true\", true+\"\");\n\t\t\t\t\tmShowList = new ArrayList<String>();\n\t\t\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t\t\tLog.v(\"mShowListOnResult\", mShowList.toString());\n\t\t\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\t\t\tString amount = mShowList.get(2);\n\t\t\t\t\tString tag = mShowList.get(1);\n\t\t\t\t\t\n\t\t\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(7) != null)\n\t\t\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(6) != null)\n\t\t\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\t\t\telse {\n\t\t\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\t\tupdateUI();\n\t\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnew FavoriteHelper(this, mShowList);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-11T10:10:42Z", "hash_sni": "29f018f40b1337ce920cf44e40d0160eba160835", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" \tprivate Bundle intentExtras;\n \tprivate ArrayList<String> mShowList;\n \tprivate DatabaseAdapter mDatabaseAdapter;\n+\tprotected static String favID = null;\n \n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n@@ -85,8 +86,8 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t\t}\n \t\t\t\n \t\t\tCalendar mCalendar = Calendar.getInstance();\n-\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n \t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n+\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n \t\t\t\n \t\t\tif(mShowList.get(7) != null)\n \t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n@@ -212,6 +213,10 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n \t\t\tIntent editIntent = new Intent(this, Voice.class);\n \t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n+\n+\t\t\tmShowList.set(4, favID);\n+\t\t\tintentExtras.remove(\"mDisplayList\");\n+\t\t\tintentExtras.putStringArrayList(\"mDisplayList\", mShowList);\n \t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n \t\t\tstartActivityForResult(editIntent, EDIT_RESULT);\n //\t\t\tfinish();\n@@ -287,8 +292,8 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t\t\t\t}\n \t\t\t\t\t\n \t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n-\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n \t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n+\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n \t\t\t\t\t\n \t\t\t\t\tif(mShowList.get(7) != null)\n \t\t\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler ShowLocationHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getDrawable getExternalStorageState getId getInstance getIntent getPlayBackTime getResources getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putBoolean putExtra putStringArrayList remove set setBackgroundDrawable setContentView setFirstDayOfWeek setOnClickListener setText setTimeInMillis setVisibility show start startActivityForResult startPlayBack stop stopPlayBack toString updateUI v"], "_version_": 1526725600761348096, "subject_t": ["Removed Lots of bugs"], "comments_t": ["\t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** //\t\t\tfinish(); \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ****** If audio recording started then stop recording audio ***** /////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["4561ad12c07a0d789d418a794ce568eb1a0249d3"], "id": "vinsol/expense-tracker\u000029f018f40b1337ce920cf44e40d0160eba160835\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "android.os.Bundle.remove(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.startActivityForResult(android.content.Intent, int)#android.util.Log.v(java.lang.String, java.lang.String)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.io.File.canRead()#android.widget.Toast.show()#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getPlayBackTime()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#<unknown>.open()#android.content.Context.getString(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#java.util.AbstractCollection<java.lang.String>.toString()#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.Toast.show()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.view.View.setVisibility(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#java.io.File.File(java.lang.String)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.view.ContextThemeWrapper.getResources()#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.content.Context.getString(<unknown>)#android.util.Log.v(java.lang.String, java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#java.lang.String.contains(java.lang.String)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#java.lang.String.equals(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.os.Environment.getExternalStorageState()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#java.lang.Long.toString(java.lang.Long)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#<unknown>.getDisplayTime(<unknown>)#android.os.CountDownTimer.cancel()#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setBackgroundDrawable(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.util.ArrayList<java.lang.String>.ArrayList, String()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.Toast.show()#java.util.Calendar.setFirstDayOfWeek(int)#java.util.Calendar.setTimeInMillis(long)#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.res.Resources.getDrawable(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#<unknown>.DisplayTime()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.os.Bundle.putBoolean(java.lang.String, boolean)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.getInstance()#android.view.View.setVisibility(int)", "callsites_t": ["android.os.Bundle.remove(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.startActivityForResult(android.content.Intent, int) android.util.Log.v(java.lang.String, java.lang.String) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.io.File.canRead() android.widget.Toast.show() java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getPlayBackTime() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) <unknown>.open() android.content.Context.getString(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) java.util.AbstractCollection<java.lang.String>.toString() <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.Toast.show() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.widget.TextView.setText(java.lang.String) android.view.View.setVisibility(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) java.io.File.File(java.lang.String) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.view.ContextThemeWrapper.getResources() android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.content.Context.getString(<unknown>) android.util.Log.v(java.lang.String, java.lang.String) android.widget.TextView.setText(java.lang.String) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) java.lang.String.contains(java.lang.String) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) java.lang.String.equals(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.os.Environment.getExternalStorageState() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() java.io.File.File(java.lang.String) android.widget.Toast.show() java.lang.Long.toString(java.lang.Long) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() <unknown>.getDisplayTime(<unknown>) android.os.CountDownTimer.cancel() java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setBackgroundDrawable(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.util.ArrayList<java.lang.String>.ArrayList, String() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.Toast.show() java.util.Calendar.setFirstDayOfWeek(int) java.util.Calendar.setTimeInMillis(long) java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.content.res.Resources.getDrawable(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) <unknown>.getPlayBackTime() android.app.Activity.finish() <unknown>.DisplayTime() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) android.content.Intent.getBundleExtra(java.lang.String) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.os.Bundle.putBoolean(java.lang.String, boolean) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) java.util.Calendar.getInstance() android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener com.vinsol.expensetracker.utils.DisplayDate android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayDate;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\")) {\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n\t\t\t\t//TODO \n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ******\n\t\t// ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif(mRecordingHelper != null)\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,mDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\t\t ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\t\n\t\t\n\t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t} else {\n\t\t\t\n\t\t\tIntent mIntent = new Intent(this, ShowVoiceActivity.class);\n\t\t\tBundle tempBundle = new Bundle();\n\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\tlistOnResult.add(mEditList.get(0));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_TAG));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_AMOUNT));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n\t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDateDate(_list.get(DatabaseAdapter.KEY_DATE_TIME)));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(3));\n\t\t\t}\t\t\t\t\n\t\t\tlistOnResult.add(mEditList.get(4));\n\t\t\tlistOnResult.add(mEditList.get(5));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n\t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(6));\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(7));\n\t\t\tlistOnResult.add(mEditList.get(8));\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList.addAll(listOnResult);\n\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\tmIntent.putExtra(\"voiceShowBundle\", tempBundle);\n\t\t\tsetResult(Activity.RESULT_OK, mIntent);\n\t\t}\n\t\tfinish();\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-11T10:10:42Z", "hash_sni": "29f018f40b1337ce920cf44e40d0160eba160835", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n \t\t\t\t\t} else {\n \t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n-\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n \t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n+\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n \t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n \t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n \t\t\t\t\t}"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay Bundle DatabaseAdapter DateHandler DateHelper DisplayDate DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper add addAll addFlags canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLocationDate getLocationDateDate getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put putExtra putStringArrayList saveEntry setBase setClickListeners setContentView setFirstDayOfWeek setGraphicsVoice setOnChronometerTickListener setOnClickListener setResult setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim"], "_version_": 1526725600789659648, "subject_t": ["Removed Lots of bugs"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// /////// \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items ********** ///////// \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// //// ****** If audio recording started then stop recording audio \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// //// ******* Update database if user added additional info *******\t\t /////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t\t//TODO  \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// ////// ******** Starts Recording each time activity starts ****** \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// ***** /////// \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["4561ad12c07a0d789d418a794ce568eb1a0249d3"], "id": "vinsol/expense-tracker\u000029f018f40b1337ce920cf44e40d0160eba160835\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.isRecording()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#<unknown>.getLocationDateDate(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.setContentView(<unknown>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#<unknown>.getLocationDate(<unknown>, java.lang.String)#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.Bundle()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.DisplayDate()#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Intent.addFlags(int)#android.os.SystemClock.elapsedRealtime()#android.widget.TextView.getText()#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.view.KeyEvent.getRepeatCount()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.app.Activity.setResult(int, android.content.Intent)#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#<unknown>.isRecording()#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.isRecording() java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) <unknown>.getLocationDateDate(<unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.setContentView(<unknown>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() <unknown>.getLocationDate(<unknown>, java.lang.String) android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.Bundle() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.DisplayDate() <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Intent.addFlags(int) android.os.SystemClock.elapsedRealtime() android.widget.TextView.getText() <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.add(java.lang.String) android.view.KeyEvent.getRepeatCount() java.util.ArrayList<java.lang.String>.add(<unknown>) android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.app.Activity.setResult(int, android.content.Intent) android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) <unknown>.isRecording() android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.content.Context android.content.DialogInterface android.widget.Button android.view.View android.util.Log android.app.Dialog android.view.Window com.vinsol.expensetracker.utils.AudioPlay"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\n\nimport android.app.Dialog;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\n\npublic class AudioPlayDialog extends Dialog implements\n\t\tandroid.view.View.OnClickListener,\n\t\tandroid.content.DialogInterface.OnDismissListener,\n\t\tandroid.content.DialogInterface.OnCancelListener {\n\n\tprivate Button audio_play_dialog_stop_button;\n\tprivate Button audio_play_dialog_play_button;\n\tprivate Button audio_play_dialog_cancel_button;\n\tprivate Chronometer audio_play_dialog_time_details_chronometer;\n\tprivate AudioPlay mAudioPlay;\n\tprivate MyCount countDownTimer;\n\tprivate String mFile;\n\tprivate Context mContext;\n\n\tpublic AudioPlayDialog(Context context, String id) {\n\t\tsuper(context);\n\t\tmContext = context;\n\t\tmFile = id;\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.audio_play_dialog);\n\t\tmAudioPlay = new AudioPlay(id, context);\n\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\taudio_play_dialog_stop_button = (Button) findViewById(R.id.audio_play_dialog_stop_button);\n\t\taudio_play_dialog_play_button = (Button) findViewById(R.id.audio_play_dialog_play_button);\n\t\taudio_play_dialog_cancel_button = (Button) findViewById(R.id.audio_play_dialog_cancel_button);\n\t\taudio_play_dialog_time_details_chronometer = (Chronometer) findViewById(R.id.audio_play_dialog_time_details_chronometer);\n\t\taudio_play_dialog_cancel_button.setOnClickListener(this);\n\t\taudio_play_dialog_play_button.setOnClickListener(this);\n\t\taudio_play_dialog_stop_button.setOnClickListener(this);\n\t\tsetOnDismissListener(this);\n\t\tsetOnCancelListener(this);\n\t\tmAudioPlay.startPlayBack();\n\t\tcountDownTimer.start();\n\t\tshow();\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.audio_play_dialog_cancel_button) {\n\t\t\tcountDownTimer.cancel();\n\t\t\tmAudioPlay.stopPlayBack();\n\t\t\tdismiss();\n\t\t}\n\n\t\tif (v.getId() == R.id.audio_play_dialog_play_button) {\n\t\t\taudio_play_dialog_play_button.setVisibility(View.GONE);\n\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t}\n\t\t\tmAudioPlay = new AudioPlay(mFile, mContext);\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\tcountDownTimer.start();\n\t\t\tmAudioPlay.startPlayBack();\n\t\t\taudio_play_dialog_stop_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\tif (v.getId() == R.id.audio_play_dialog_stop_button) {\n\n\t\t\taudio_play_dialog_stop_button.setVisibility(View.GONE);\n\t\t\tmAudioPlay.stopPlayBack();\n\t\t\tcountDownTimer.cancel();\n\t\t\taudio_play_dialog_time_details_chronometer\n\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\taudio_play_dialog_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\taudio_play_dialog_stop_button.setVisibility(View.GONE);\n\t\t\taudio_play_dialog_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onDismiss(DialogInterface dialog) {\n\t\tLog.v(\"mAudioPlay.isAudioPlaying() dismiss\",\n\t\t\t\tmAudioPlay.isAudioPlaying() + \"\");\n\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\tmAudioPlay.stopPlayBack();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onCancel(DialogInterface dialog) {\n\t\tLog.v(\"mAudioPlay.isAudioPlaying() cancel\", mAudioPlay.isAudioPlaying()\n\t\t\t\t+ \"\");\n\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\tmAudioPlay.stopPlayBack();\n\t\t}\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-28T11:23:27Z", "hash_sni": "30407e4f50f30f445adc6a44d63392b91a6865f5", "name_sni": "src/com/vinsol/expensetracker/AudioPlayDialog.java", "patch_t": [" import android.widget.Button;\n import android.widget.Chronometer;\n \n-public class AudioPlayDialog extends Dialog implements android.view.View.OnClickListener,android.content.DialogInterface.OnDismissListener,android.content.DialogInterface.OnCancelListener{\n+public class AudioPlayDialog extends Dialog implements\n+\t\tandroid.view.View.OnClickListener,\n+\t\tandroid.content.DialogInterface.OnDismissListener,\n+\t\tandroid.content.DialogInterface.OnCancelListener {\n \n \tprivate Button audio_play_dialog_stop_button;\n \tprivate Button audio_play_dialog_play_button;\n@@ -21,14 +24,14 @@ public class AudioPlayDialog extends Dialog implements android.view.View.OnClick\n \tprivate Chronometer audio_play_dialog_time_details_chronometer;\n \tprivate AudioPlay mAudioPlay;\n \tprivate MyCount countDownTimer;\n-\tprivate String mFile ;\n+\tprivate String mFile;\n \tprivate Context mContext;\n-\t\n-\tpublic AudioPlayDialog(Context context,String id) {\n+\n+\tpublic AudioPlayDialog(Context context, String id) {\n \t\tsuper(context);\n \t\tmContext = context;\n \t\tmFile = id;\n-\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\t\n+\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n \t\tsetContentView(R.layout.audio_play_dialog);\n \t\tmAudioPlay = new AudioPlay(id, context);\n \t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n@@ -49,15 +52,15 @@ public class AudioPlayDialog extends Dialog implements android.view.View.OnClick\n \t@Override\n \tpublic void onClick(View v) {\n \n-\t\tif(v.getId() == R.id.audio_play_dialog_cancel_button){\n+\t\tif (v.getId() == R.id.audio_play_dialog_cancel_button) {\n \t\t\tcountDownTimer.cancel();\n \t\t\tmAudioPlay.stopPlayBack();\n \t\t\tdismiss();\n \t\t}\n-\t\t\n-\t\tif(v.getId() == R.id.audio_play_dialog_play_button){\n+\n+\t\tif (v.getId() == R.id.audio_play_dialog_play_button) {\n \t\t\taudio_play_dialog_play_button.setVisibility(View.GONE);\n-\t\t\tif(mAudioPlay.isAudioPlaying()){\n+\t\t\tif (mAudioPlay.isAudioPlaying()) {\n \t\t\t\tcountDownTimer.cancel();\n \t\t\t\tmAudioPlay.stopPlayBack();\n \t\t\t}\n@@ -67,26 +70,26 @@ public class AudioPlayDialog extends Dialog implements android.view.View.OnClick\n \t\t\tmAudioPlay.startPlayBack();\n \t\t\taudio_play_dialog_stop_button.setVisibility(View.VISIBLE);\n \t\t}\n-\t\t\n-\t\tif(v.getId() == R.id.audio_play_dialog_stop_button){\n-\t\t\t\n+\n+\t\tif (v.getId() == R.id.audio_play_dialog_stop_button) {\n+\n \t\t\taudio_play_dialog_stop_button.setVisibility(View.GONE);\n \t\t\tmAudioPlay.stopPlayBack();\n \t\t\tcountDownTimer.cancel();\n-\t\t\taudio_play_dialog_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n+\t\t\taudio_play_dialog_time_details_chronometer\n+\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n+\t\t\t\t\t\t\t.getPlayBackTime()));\n \t\t\taudio_play_dialog_play_button.setVisibility(View.VISIBLE);\n \t\t}\n-\t\t\n+\n \t}\n-\t\n-\t\n-\t\n-\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n-\t//countdowntimer is an abstract class, so extend it and fill in methods\n-\tprivate class MyCount extends CountDownTimer{\n+\n+\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n+\t// countdowntimer is an abstract class, so extend it and fill in methods\n+\tprivate class MyCount extends CountDownTimer {\n \n \t\tDisplayTime mDisplayTime;\n-\t\t\n+\n \t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n \t\t\tsuper(millisInFuture, countDownInterval);\n \t\t\tmDisplayTime = new DisplayTime();\n@@ -94,31 +97,33 @@ public class AudioPlayDialog extends Dialog implements android.view.View.OnClick\n \n \t\t@Override\n \t\tpublic void onFinish() {\n-\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n+\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime\n+\t\t\t\t\t.getDisplayTime(mAudioPlay.getPlayBackTime()));\n \t\t\taudio_play_dialog_stop_button.setVisibility(View.GONE);\n \t\t\taudio_play_dialog_play_button.setVisibility(View.VISIBLE);\n \t\t}\n \n \t\t@Override\n \t\tpublic void onTick(long millisUntilFinished) {\n-\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n+\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime\n+\t\t\t\t\t.getDisplayTime(millisUntilFinished));\n \t\t}\n \t}\n \n-\n-\n \t@Override\n \tpublic void onDismiss(DialogInterface dialog) {\n-\t\tLog.v(\"mAudioPlay.isAudioPlaying() dismiss\", mAudioPlay.isAudioPlaying()+\"\");\n-\t\tif(mAudioPlay.isAudioPlaying()){\n+\t\tLog.v(\"mAudioPlay.isAudioPlaying() dismiss\",\n+\t\t\t\tmAudioPlay.isAudioPlaying() + \"\");\n+\t\tif (mAudioPlay.isAudioPlaying()) {\n \t\t\tmAudioPlay.stopPlayBack();\n \t\t}\n \t}\n \n \t@Override\n \tpublic void onCancel(DialogInterface dialog) {\n-\t\tLog.v(\"mAudioPlay.isAudioPlaying() cancel\", mAudioPlay.isAudioPlaying()+\"\");\n-\t\tif(mAudioPlay.isAudioPlaying()){\n+\t\tLog.v(\"mAudioPlay.isAudioPlaying() cancel\", mAudioPlay.isAudioPlaying()\n+\t\t\t\t+ \"\");\n+\t\tif (mAudioPlay.isAudioPlaying()) {\n \t\t\tmAudioPlay.stopPlayBack();\n \t\t}\n \t}"], "score": 1.0, "methods_t": ["AudioPlay DisplayTime MyCount cancel dismiss findViewById getDisplayTime getId getPlayBackTime isAudioPlaying requestWindowFeature setContentView setOnCancelListener setOnClickListener setOnDismissListener setText setVisibility show start startPlayBack stopPlayBack v"], "_version_": 1526729942566436864, "subject_t": ["Code Proper aligned"], "comments_t": ["\t// countdowntimer is an abstract class, so extend it and fill in methods \t// /////// ********* CountdownTimer for Chronometer ********* //////////"], "parents_ss": ["68951a9cc591d45e5125b2630e69c80c321acca4"], "id": "vinsol/expense-tracker\u000030407e4f50f30f445adc6a44d63392b91a6865f5\u0000src/com/vinsol/expensetracker/AudioPlayDialog.java", "callsites_cs": "<unknown>.startPlayBack()#<unknown>.isAudioPlaying()#com.vinsol.expensetracker.AudioPlayDialog.MyCount.MyCount(<unknown>, int)#android.app.Dialog.findViewById(<unknown>)#android.app.Dialog.setContentView(<unknown>)#android.os.CountDownTimer.start()#<unknown>.getDisplayTime(<unknown>)#android.util.Log.v(java.lang.String, <unknown>)#<unknown>.DisplayTime()#<unknown>.AudioPlay(java.lang.String, android.content.Context)#<unknown>.stopPlayBack()#android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog)#android.view.View.setVisibility(int)#<unknown>.getPlayBackTime()#<unknown>.getPlayBackTime()#android.view.View.getId()#android.view.View.setVisibility(int)#android.app.Dialog.setOnCancelListener(com.vinsol.expensetracker.AudioPlayDialog)#<unknown>.getDisplayTime(long)#android.app.Dialog.dismiss()#android.util.Log.v(java.lang.String, <unknown>)#android.os.CountDownTimer.start()#android.app.Dialog.findViewById(<unknown>)#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog)#<unknown>.startPlayBack()#android.view.View.setVisibility(int)#com.vinsol.expensetracker.AudioPlayDialog.MyCount.MyCount(<unknown>, int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog)#<unknown>.getPlayBackTime()#<unknown>.stopPlayBack()#android.os.CountDownTimer.cancel()#android.widget.TextView.setText(<unknown>)#<unknown>.stopPlayBack()#android.app.Dialog.show()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.app.Dialog.findViewById(<unknown>)#android.app.Dialog.setOnDismissListener(com.vinsol.expensetracker.AudioPlayDialog)#android.view.View.setVisibility(int)#android.app.Dialog.findViewById(<unknown>)#android.app.Dialog.requestWindowFeature(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.AudioPlay(java.lang.String, android.content.Context)", "callsites_t": ["<unknown>.startPlayBack() <unknown>.isAudioPlaying() com.vinsol.expensetracker.AudioPlayDialog.MyCount.MyCount(<unknown>, int) android.app.Dialog.findViewById(<unknown>) android.app.Dialog.setContentView(<unknown>) android.os.CountDownTimer.start() <unknown>.getDisplayTime(<unknown>) android.util.Log.v(java.lang.String, <unknown>) <unknown>.DisplayTime() <unknown>.AudioPlay(java.lang.String, android.content.Context) <unknown>.stopPlayBack() android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog) android.view.View.setVisibility(int) <unknown>.getPlayBackTime() <unknown>.getPlayBackTime() android.view.View.getId() android.view.View.setVisibility(int) android.app.Dialog.setOnCancelListener(com.vinsol.expensetracker.AudioPlayDialog) <unknown>.getDisplayTime(long) android.app.Dialog.dismiss() android.util.Log.v(java.lang.String, <unknown>) android.os.CountDownTimer.start() android.app.Dialog.findViewById(<unknown>) <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog) <unknown>.startPlayBack() android.view.View.setVisibility(int) com.vinsol.expensetracker.AudioPlayDialog.MyCount.MyCount(<unknown>, int) android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog) <unknown>.getPlayBackTime() <unknown>.stopPlayBack() android.os.CountDownTimer.cancel() android.widget.TextView.setText(<unknown>) <unknown>.stopPlayBack() android.app.Dialog.show() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.app.Dialog.findViewById(<unknown>) android.app.Dialog.setOnDismissListener(com.vinsol.expensetracker.AudioPlayDialog) android.view.View.setVisibility(int) android.app.Dialog.findViewById(<unknown>) android.app.Dialog.requestWindowFeature(int) <unknown>.getDisplayTime(<unknown>) <unknown>.AudioPlay(java.lang.String, android.content.Context)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button java.io.File android.view.Window com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity android.widget.ImageView java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate ImageView show_text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate EditText show_text_voice_camera_tag;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate View show_text_voice_camera_divider_amount_desc;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_update_entry;\n\tprivate TextView show_text_voice_camera_description_show;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.show_text_voice_camera_voice_details_separator);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag = (EditText) findViewById(R.id.show_text_voice_camera_tag);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_divider_amount_desc = findViewById(R.id.show_text_voice_camera_divider_amount_desc);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_update_entry = (Button) findViewById(R.id.show_text_voice_camera_update_entry);\n\t\tshow_text_voice_camera_description_show = (TextView) findViewById(R.id.show_text_voice_camera_description_show);\n\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_description_show\n\t\t\t\t\t\t.setVisibility(View.GONE);\n\t\t\t\tshow_text_voice_camera_tag_textview.setVisibility(View.GONE);\n\t\t\t\tshow_text_voice_camera_tag.setVisibility(View.VISIBLE);\n\t\t\t\tshow_text_voice_camera_divider_amount_desc\n\t\t\t\t\t\t.setVisibility(View.GONE);\n\t\t\t\tshow_text_voice_camera_update_entry.setVisibility(View.VISIBLE);\n\t\t\t}\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tnew ShowDateHandler(this, mCalendar);\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_update_entry.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id\n\t\t\t\t\t\t+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button\n\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(new DisplayTime()\n\t\t\t\t\t\t\t\t\t.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG)\n\t\t\t\t\t.show();\n\t\t}\n\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_voice_details_separator\n\t\t\t\t.setVisibility(View.VISIBLE);\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_update_entry) {\n\t\t\tif (show_text_voice_camera_tag.isShown()) {\n\t\t\t\tif (show_text_voice_camera_tag.getText().toString() != \"\")\n\t\t\t\t\tsaveEntry();\n\t\t\t}\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn super.onKeyDown(keyCode, event);\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tif (show_text_voice_camera_tag.isShown()) {\n\t\t\tif (show_text_voice_camera_tag.getText().toString() != \"\")\n\t\t\t\tsaveEntry();\n\t\t}\n\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\tfinish();\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void saveEntry() {\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (show_text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, show_text_voice_camera_tag\n\t\t\t\t\t.getText().toString());\n\t\t}\n\n\t\t// //// ******* Update database if user added additional info *******\n\t\t// ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-28T11:23:27Z", "hash_sni": "30407e4f50f30f445adc6a44d63392b91a6865f5", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" import android.widget.TextView;\n import android.widget.Toast;\n \n-public class ShowVoiceActivity extends Activity implements OnClickListener{\n+public class ShowVoiceActivity extends Activity implements OnClickListener {\n \n \tprivate TextView show_text_voice_camera_header_title;\n \tprivate ImageView show_text_voice_camera_voice_details_separator;\n@@ -40,19 +40,19 @@ public class ShowVoiceActivity extends Activity implements OnClickListener{\n \tprivate MyCount countDownTimer;\n \tprivate Button show_text_voice_camera_update_entry;\n \tprivate TextView show_text_voice_camera_description_show;\n-\t\n+\n \tprivate AudioPlay mAudioPlay;\n \tprivate Long _id = null;\n \tprivate Bundle intentExtras;\n \tprivate ArrayList<String> mShowList;\n \tprivate DatabaseAdapter mDatabaseAdapter;\n-\t\n+\n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n \t\tsuper.onCreate(savedInstanceState);\n \t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n \t\tsetContentView(R.layout.show_text_voice_camera);\n-\t\t\n+\n \t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n \t\tshow_text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.show_text_voice_camera_voice_details_separator);\n \t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n@@ -65,94 +65,105 @@ public class ShowVoiceActivity extends Activity implements OnClickListener{\n \t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n \t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n \t\tshow_text_voice_camera_update_entry = (Button) findViewById(R.id.show_text_voice_camera_update_entry);\n-\t\tshow_text_voice_camera_description_show= (TextView) findViewById(R.id.show_text_voice_camera_description_show);\n-\t\t\n+\t\tshow_text_voice_camera_description_show = (TextView) findViewById(R.id.show_text_voice_camera_description_show);\n+\n \t\tmDatabaseAdapter = new DatabaseAdapter(this);\n-\t\t\n+\n \t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n-\t\t\n-\t\tif(intentExtras.containsKey(\"mDisplayList\")){\n-        \tmShowList = new ArrayList<String>();\n-        \tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n-        \t_id = Long.parseLong(mShowList.get(0));\n-        \tString amount = mShowList.get(2);\n-        \tString tag = mShowList.get(1);\n-        \tif(!(amount.equals(\"\") || amount == null)){\n-        \t\tif(!amount.contains(\"?\"))\n-        \t\t\tshow_text_voice_camera_amount.setText(amount);\n-        \t}\n-        \tif(!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))){\n-        \t\tshow_text_voice_camera_tag_textview.setText(tag);\n-        \t} else {\n-        \t\tshow_text_voice_camera_description_show.setVisibility(View.GONE);\n-        \t\tshow_text_voice_camera_tag_textview.setVisibility(View.GONE);\n-        \t\tshow_text_voice_camera_tag.setVisibility(View.VISIBLE);\n-        \t\tshow_text_voice_camera_divider_amount_desc.setVisibility(View.GONE);\n-        \t\tshow_text_voice_camera_update_entry.setVisibility(View.VISIBLE);\n-        \t}\n-        \tCalendar mCalendar = Calendar.getInstance();\n-        \tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n-        \tnew ShowDateHandler(this, mCalendar);\n-        }\n+\n+\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n+\t\t\tmShowList = new ArrayList<String>();\n+\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n+\t\t\t_id = Long.parseLong(mShowList.get(0));\n+\t\t\tString amount = mShowList.get(2);\n+\t\t\tString tag = mShowList.get(1);\n+\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n+\t\t\t\tif (!amount.contains(\"?\"))\n+\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n+\t\t\t}\n+\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n+\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n+\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n+\t\t\t} else {\n+\t\t\t\tshow_text_voice_camera_description_show\n+\t\t\t\t\t\t.setVisibility(View.GONE);\n+\t\t\t\tshow_text_voice_camera_tag_textview.setVisibility(View.GONE);\n+\t\t\t\tshow_text_voice_camera_tag.setVisibility(View.VISIBLE);\n+\t\t\t\tshow_text_voice_camera_divider_amount_desc\n+\t\t\t\t\t\t.setVisibility(View.GONE);\n+\t\t\t\tshow_text_voice_camera_update_entry.setVisibility(View.VISIBLE);\n+\t\t\t}\n+\t\t\tCalendar mCalendar = Calendar.getInstance();\n+\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n+\t\t\tnew ShowDateHandler(this, mCalendar);\n+\t\t}\n \t\tshow_text_voice_camera_delete.setOnClickListener(this);\n \t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n \t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n \t\tshow_text_voice_camera_update_entry.setOnClickListener(this);\n-\t\t\n-\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n+\n+\t\tif (android.os.Environment.getExternalStorageState().equals(\n+\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n \t\t\tupdateUI();\n-        \tif(intentExtras.containsKey(\"mDisplayList\")){\n-        \t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\"+_id+\".amr\");\n-        \t\t\n-        \t\tif(tempFile.canRead()){\n-        \t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n-        \t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n-        \t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n-        \t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n-        \t\t} else {\n-        \t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n-        \t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n-        \t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n-        \t\t}\n-        \t}\n-        } \n-        else {\n-        \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n-        }\n-\t\t\n-\t\t\n+\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n+\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id\n+\t\t\t\t\t\t+ \".amr\");\n+\n+\t\t\t\tif (tempFile.canRead()) {\n+\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n+\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n+\t\t\t\t\tshow_text_voice_camera_play_button\n+\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n+\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n+\t\t\t\t\t\t\t.setText(new DisplayTime()\n+\t\t\t\t\t\t\t\t\t.getDisplayTime(mAudioPlay\n+\t\t\t\t\t\t\t\t\t\t\t.getPlayBackTime()));\n+\t\t\t\t} else {\n+\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n+\t\t\t\t\t\t\t.setText(\"Audio File Missing\");\n+\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n+\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG)\n+\t\t\t\t\t.show();\n+\t\t}\n+\n \t}\n \n \tprivate void updateUI() {\n-\t///////   ***** Sets Title Voice Entry *********///////\n-        show_text_voice_camera_header_title.setText(\"Voice Entry\");\n-        \n-        ///////   ***** Sets Title Voice Entry *********///////\n-        show_text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n-        \n-        //////   ******  Shows Voice Details ********////////\n-        show_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n+\t\t// ///// ***** Sets Title Voice Entry *********///////\n+\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n+\n+\t\t// ///// ***** Sets Title Voice Entry *********///////\n+\t\tshow_text_voice_camera_voice_details_separator\n+\t\t\t\t.setVisibility(View.VISIBLE);\n+\n+\t\t// //// ****** Shows Voice Details ********////////\n+\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n \t}\n \n \t@Override\n \tpublic void onClick(View v) {\n-\t\t\n-\t\tif(v.getId() == R.id.show_text_voice_camera_delete){\n-\t\t\t\n-\t\t\tif(_id != null){\n-\t\t\t\t\n-\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n-\t\t\t\ttry{\n-\t\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n+\n+\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n+\n+\t\t\tif (_id != null) {\n+\n+\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n+\t\t\t\t// *******//////\n+\t\t\t\ttry {\n+\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n \t\t\t\t\t\tmAudioPlay.stopPlayBack();\n \t\t\t\t\t}\n-\t\t\t\t}catch(NullPointerException e){\n+\t\t\t\t} catch (NullPointerException e) {\n \t\t\t\t\te.printStackTrace();\n \t\t\t\t}\n \t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n-\t\t\t\t\n+\n \t\t\t\tnew FileDelete(_id);\n-\t\t\t\t\n+\n \t\t\t\tmDatabaseAdapter.open();\n \t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n \t\t\t\tmDatabaseAdapter.close();\n@@ -162,20 +173,22 @@ public class ShowVoiceActivity extends Activity implements OnClickListener{\n \t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n \t\t\t}\n \t\t}\n-\t\t\n-\t\tif(v.getId() == R.id.show_text_voice_camera_play_button){\n-\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n-\t\t\tmAudioPlay = new AudioPlay(_id+\"\",this);\n-\t\t\t\n-\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n+\n+\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n+\t\t\t// //// ******** to handle playback of recorded file *********\n+\t\t\t// ////////\n+\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n+\n+\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n \t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n-\t\t\t\n-\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n+\n+\t\t\t// //// ****** Handles UI items on button click ****** ///////\n \t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n \t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n-\t\t\t\n-\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n-\t\t\tif(!mAudioPlay.isAudioPlaying()){\n+\n+\t\t\t// /// ******** Start Audio Playback and counter to play audio\n+\t\t\t// ****** ///////\n+\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n \t\t\t\tmAudioPlay.startPlayBack();\n \t\t\t} else {\n \t\t\t\tmAudioPlay.stopPlayBack();\n@@ -183,39 +196,45 @@ public class ShowVoiceActivity extends Activity implements OnClickListener{\n \t\t\t}\n \t\t\tcountDownTimer.start();\n \t\t}\n-\t\t\n-\t\tif(v.getId() == R.id.show_text_voice_camera_stop_button){\n-\t\t\ttry{\n+\n+\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n+\t\t\ttry {\n \t\t\t\tcountDownTimer.cancel();\n-\t\t\t}catch(NullPointerException e){};\n-\t\t\t\n-\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n+\t\t\t} catch (NullPointerException e) {\n+\t\t\t}\n+\t\t\t;\n+\n+\t\t\t// //// ****** Handles UI items on button click ****** ///////\n \t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n \t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n-\t\t\t\n-\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n+\n+\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n+\t\t\t// ////////\n \t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n-\t\t\ttry{\n-\t\t\t\tif(mAudioPlay.isAudioPlaying())\n+\t\t\ttry {\n+\t\t\t\tif (mAudioPlay.isAudioPlaying())\n \t\t\t\t\tmAudioPlay.stopPlayBack();\n-\t\t\t} catch(Exception e){}\n-\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n-\t\t}\t\n-\t\t\n-\t\tif(v.getId() == R.id.show_text_voice_camera_update_entry){\n-\t\t\tif(show_text_voice_camera_tag.isShown()){\n-\t\t\t\tif(show_text_voice_camera_tag.getText().toString() != \"\")\n+\t\t\t} catch (Exception e) {\n+\t\t\t}\n+\t\t\tshow_text_voice_camera_time_details_chronometer\n+\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n+\t\t\t\t\t\t\t.getPlayBackTime()));\n+\t\t}\n+\n+\t\tif (v.getId() == R.id.show_text_voice_camera_update_entry) {\n+\t\t\tif (show_text_voice_camera_tag.isShown()) {\n+\t\t\t\tif (show_text_voice_camera_tag.getText().toString() != \"\")\n \t\t\t\t\tsaveEntry();\n \t\t\t}\n \t\t}\n \t}\n-\t\n-\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n-\t//countdowntimer is an abstract class, so extend it and fill in methods\n-\tprivate class MyCount extends CountDownTimer{\n+\n+\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n+\t// countdowntimer is an abstract class, so extend it and fill in methods\n+\tprivate class MyCount extends CountDownTimer {\n \n \t\tDisplayTime mDisplayTime;\n-\t\t\n+\n \t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n \t\t\tsuper(millisInFuture, countDownInterval);\n \t\t\tmDisplayTime = new DisplayTime();\n@@ -223,65 +242,72 @@ public class ShowVoiceActivity extends Activity implements OnClickListener{\n \n \t\t@Override\n \t\tpublic void onFinish() {\n-\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n+\t\t\tshow_text_voice_camera_time_details_chronometer\n+\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(mAudioPlay\n+\t\t\t\t\t\t\t.getPlayBackTime()));\n \t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n \t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n \t\t}\n \n \t\t@Override\n \t\tpublic void onTick(long millisUntilFinished) {\n-\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n+\t\t\tshow_text_voice_camera_time_details_chronometer\n+\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n \t\t}\n \t}\n-\t\n-\t///// ******************  Handling back press of key   ********** ///////////\n-\tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n-\t     if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n-\t    \t onBackPressed();\n-\t    \t return super.onKeyDown(keyCode, event);\n-\t      }\n-\t    return super.onKeyDown(keyCode, event);\n+\n+\t// /// ****************** Handling back press of key ********** ///////////\n+\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n+\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n+\t\t\tonBackPressed();\n+\t\t\treturn super.onKeyDown(keyCode, event);\n+\t\t}\n+\t\treturn super.onKeyDown(keyCode, event);\n \t}\n \n \tpublic void onBackPressed() {\n-\t    // This will be called either automatically for you on 2.0    \n-\t    // or later, or by the code above on earlier versions of the platform.\n-\t\tif(show_text_voice_camera_tag.isShown()){\n-\t\t\tif(show_text_voice_camera_tag.getText().toString() != \"\")\n+\t\t// This will be called either automatically for you on 2.0\n+\t\t// or later, or by the code above on earlier versions of the platform.\n+\t\tif (show_text_voice_camera_tag.isShown()) {\n+\t\t\tif (show_text_voice_camera_tag.getText().toString() != \"\")\n \t\t\t\tsaveEntry();\n \t\t}\n-\t\t\n-\t\ttry{\n-\t\t\tif(mAudioPlay.isAudioPlaying())\n+\n+\t\ttry {\n+\t\t\tif (mAudioPlay.isAudioPlaying())\n \t\t\t\tmAudioPlay.stopPlayBack();\n-\t\t}catch(Exception e){}\n-\t    finish();\n+\t\t} catch (Exception e) {\n+\t\t}\n+\t\tfinish();\n \t}\n-\t\n+\n \t@Override\n \tprotected void onPause() {\n-\t\t\n-\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n-\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n-\t\ttry{\n-\t\t\tif(mAudioPlay.isAudioPlaying())\n+\n+\t\t// //// ***** Check whether audio is recording or not ******* ///////\n+\t\t// //// ****** If audio recording started then stop recording audio\n+\t\t// ***** ///////\n+\t\ttry {\n+\t\t\tif (mAudioPlay.isAudioPlaying())\n \t\t\t\tmAudioPlay.stopPlayBack();\n-\t\t} catch(Exception e){\n-\t\t\t\n+\t\t} catch (Exception e) {\n+\n \t\t}\n \t\tsuper.onPause();\n \t}\n-\t\n+\n \tprivate void saveEntry() {\n-\t\t///////    *******  Creating HashMap to update info   *******  ////////\n+\t\t// ///// ******* Creating HashMap to update info ******* ////////\n \t\tHashMap<String, String> _list = new HashMap<String, String>();\n \t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n-\t\t\n-\t\tif(show_text_voice_camera_tag.getText().toString() != \"\"){\n-\t\t\t_list.put(DatabaseAdapter.KEY_TAG, show_text_voice_camera_tag.getText().toString());\n+\n+\t\tif (show_text_voice_camera_tag.getText().toString() != \"\") {\n+\t\t\t_list.put(DatabaseAdapter.KEY_TAG, show_text_voice_camera_tag\n+\t\t\t\t\t.getText().toString());\n \t\t}\n-\t\t\n-\t\t//////    *******   Update database if user added additional info   *******  ///////\n+\n+\t\t// //// ******* Update database if user added additional info *******\n+\t\t// ///////\n \t\tmDatabaseAdapter.open();\n \t\tmDatabaseAdapter.editDatabase(_list);\n \t\tmDatabaseAdapter.close();"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime File FileDelete HashMap, StringString MyCount ShowDateHandler canRead cancel close contains containsKey deleteDatabaseEntryID editDatabase equals findViewById finish get getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getPlayBackTime getRepeatCount getString getStringArrayList getText isAudioPlaying isShown makeText onBackPressed open parseLong printStackTrace put requestWindowFeature saveEntry setContentView setOnClickListener setText setTimeInMillis setVisibility show start startPlayBack stop stopPlayBack toString updateUI"], "_version_": 1526729942573776896, "subject_t": ["Code Proper aligned"], "comments_t": ["\t\t// //// ****** If audio recording started then stop recording audio \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// or later, or by the code above on earlier versions of the platform. \t\t\t\t// *******////// \t\t// /////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// //// ******* Update database if user added additional info ******* \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t// ***** /////// \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file ********* \t// /// ****************** Handling back press of key ********** ///////////"], "parents_ss": ["2eb47b0e1acf769cc7d926d64a5e6b90df214c46"], "id": "vinsol/expense-tracker\u000030407e4f50f30f445adc6a44d63392b91a6865f5\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#com.vinsol.expensetracker.ShowVoiceActivity.saveEntry()#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.widget.Toast.show()#android.view.KeyEvent.getRepeatCount()#<unknown>.isAudioPlaying()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.open()#android.content.Context.getString(<unknown>)#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.lang.String.contains(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#android.app.Activity.finish()#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.view.View.setVisibility(int)#<unknown>.isAudioPlaying()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.lang.Throwable.printStackTrace()#android.app.Activity.findViewById(<unknown>)#java.io.File.File(java.lang.String)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.widget.Toast.show()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.app.Activity.requestWindowFeature(int)#android.os.CountDownTimer.cancel()#java.lang.CharSequence.toString()#java.lang.CharSequence.toString()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.EditText.getText()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#<unknown>.stopPlayBack()#java.util.Calendar.getInstance()#android.view.View.setVisibility(int)#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.ShowVoiceActivity.onBackPressed()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#android.view.View.setVisibility(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.show()#java.lang.Long.parseLong(java.lang.String)#android.widget.EditText.getText()#<unknown>.getDisplayTime(<unknown>)#android.widget.EditText.getText()#java.lang.String.equals(java.lang.String)#<unknown>.open()#android.view.View.setVisibility(int)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#android.app.Activity.findViewById(<unknown>)#com.vinsol.expensetracker.ShowVoiceActivity.saveEntry()#android.app.Activity.finish()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.view.View.isShown()#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#<unknown>.close()#android.widget.ImageView.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.view.View.isShown()#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.lang.Long.toString(java.lang.Long)#java.lang.CharSequence.toString()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)", "callsites_t": ["java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) com.vinsol.expensetracker.ShowVoiceActivity.saveEntry() android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) android.widget.Toast.show() android.view.KeyEvent.getRepeatCount() <unknown>.isAudioPlaying() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.open() android.content.Context.getString(<unknown>) <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.lang.String.contains(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) android.app.Activity.finish() <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.view.View.setVisibility(int) <unknown>.isAudioPlaying() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.lang.Throwable.printStackTrace() android.app.Activity.findViewById(<unknown>) java.io.File.File(java.lang.String) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.widget.Toast.show() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.app.Activity.requestWindowFeature(int) android.os.CountDownTimer.cancel() java.lang.CharSequence.toString() java.lang.CharSequence.toString() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.EditText.getText() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) <unknown>.stopPlayBack() java.util.Calendar.getInstance() android.view.View.setVisibility(int) java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.ShowVoiceActivity.onBackPressed() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() android.view.View.setVisibility(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.show() java.lang.Long.parseLong(java.lang.String) android.widget.EditText.getText() <unknown>.getDisplayTime(<unknown>) android.widget.EditText.getText() java.lang.String.equals(java.lang.String) <unknown>.open() android.view.View.setVisibility(int) <unknown>.getPlayBackTime() android.app.Activity.finish() android.app.Activity.findViewById(<unknown>) com.vinsol.expensetracker.ShowVoiceActivity.saveEntry() android.app.Activity.finish() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.view.View.isShown() java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) <unknown>.close() android.widget.ImageView.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.view.View.isShown() android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.lang.Long.toString(java.lang.Long) java.lang.CharSequence.toString() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener android.os.Bundle android.view.Window java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\t// ///// ****** No Title Bar ********* /////////\n\n\t\tthis.requestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items\n\t\t// ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\t_id = intentExtras.getLong(\"_id\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ******\n\t\t// ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id\n\t\t\t\t\t\t+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button\n\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(new DisplayTime()\n\t\t\t\t\t\t\t\t\t.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button\n\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG)\n\t\t\t\t\t.show();\n\t\t}\n\t\tsetClickListeners();\n\n\t\t// //////********* Get Last most accurate location info *********\n\t\t// /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText()\n\t\t\t\t.toString();\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t\t.getText().length() > 5) {\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock\n\t\t\t\t\t.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\")\n\t\t\t\t&& !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount\n\t\t\t\t\t.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText()\n\t\t\t\t\t.toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString()\n\t\t\t\t.equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(\n\t\t\t\t\t\t\ttext_voice_camera_date_bar_dateview.getText()\n\t\t\t\t\t\t\t\t\t.toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,\n\t\t\t\t\t\t\tmDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mEditList.get(6)));\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(\n\t\t\t\t\t\t\ttext_voice_camera_date_bar_dateview.getText()\n\t\t\t\t\t\t\t\t\t.toString(), mCalendar);\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,\n\t\t\t\t\t\t\tmDateHelper.getTimeMillis() + \"\");\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t// //// ******* Update database if user added additional info *******\n\t\t// ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tif (!intentExtras.containsKey(\"timeInMillis\")\n\t\t\t\t&& !intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-28T11:23:27Z", "hash_sni": "30407e4f50f30f445adc6a44d63392b91a6865f5", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" import android.widget.TextView;\n import android.widget.Toast;\n \n-public class Voice extends Activity implements OnClickListener{\n-\t\n+public class Voice extends Activity implements OnClickListener {\n+\n \tprivate TextView text_voice_camera_header_title;\n \tprivate ImageView text_voice_camera_voice_details_separator;\n \tprivate RelativeLayout text_voice_camera_voice_details;\n@@ -50,212 +50,236 @@ public class Voice extends Activity implements OnClickListener{\n \tprivate TextView text_voice_camera_date_bar_dateview;\n \tprivate String dateViewString;\n \tprivate ArrayList<String> mEditList;\n-\t\n+\n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n \t\tsuper.onCreate(savedInstanceState);\n-\t\t\n-\t\t///////   ****** No Title Bar   ********* /////////\n-        \n-        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n-        setContentView(R.layout.text_voice_camera);\n-        \n-        \n-        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n-        \n-        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n-        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n-        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n-        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n-        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n-        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n-        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n-    \ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n-    \ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n-    \ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n-    \tmDatabaseAdapter = new DatabaseAdapter(this);\n-    \t\n-    \t////////*********     Get id from intent extras     ********   ////////////\n-        intentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n-        _id = intentExtras.getLong(\"_id\");\n-    \t\n-        if(intentExtras.containsKey(\"mDisplayList\")){\n-        \tmEditList = new ArrayList<String>();\n-        \tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n-        \t_id = Long.parseLong(mEditList.get(0));\n-        \tString amount = mEditList.get(2);\n-        \tString tag = mEditList.get(1);\n-        \tif(!(amount.equals(\"\") || amount == null)){\n-        \t\tif(!amount.contains(\"?\"))\n-        \t\t\ttext_voice_camera_amount.setText(amount);\n-        \t}\n-        \tif(!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))){\n-        \t\ttext_voice_camera_tag.setText(tag);\n-        \t}\n-        }\n-        \n-        \n-        ////////   ********  Handle Date Bar   *********   ////////\n-        if(intentExtras.containsKey(\"mDisplayList\")){\n-        \tnew DateHandler(this , Long.parseLong(mEditList.get(6)));\n-        } else if(intentExtras.containsKey(\"timeInMillis\")) {\n-        \tnew DateHandler(this ,intentExtras.getLong(\"timeInMillis\"));\n-        } else {\n-        \tnew DateHandler(this);\n-        }\n-        \n-        \n-        ////////   ********   Starts Recording each time activity starts   ******   ///////\n-        if(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n-        \tsetGraphicsVoice();\n-        \t\n-        \tif(intentExtras.containsKey(\"mDisplayList\")){\n-        \t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\"+_id+\".amr\");\n-        \t\t\n-        \t\tif(tempFile.canRead()){\n-        \t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n-        \t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n-        \t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n-        \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n-        \t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n-        \t\t} else {\n-        \t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n-        \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n-        \t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n-        \t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n-        \t\t}\n-        \t} else {\n-        \t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n-        \t\tmRecordingHelper.startRecording();\n-        \t\tcontrolVoiceChronometer();\n-        \t}\n-        } \n-        else {\n-        \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n-        }\n-        setClickListeners();\n-\t\t\n-\t\t////////*********     Get Last most accurate location info   *********   /////////\n+\n+\t\t// ///// ****** No Title Bar ********* /////////\n+\n+\t\tthis.requestWindowFeature(Window.FEATURE_NO_TITLE);\n+\t\tsetContentView(R.layout.text_voice_camera);\n+\n+\t\t// ////// ******** Initializing and assigning memory to UI Items\n+\t\t// ********** /////////\n+\n+\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n+\t\ttext_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n+\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n+\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n+\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n+\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n+\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n+\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n+\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n+\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n+\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n+\n+\t\t// //////********* Get id from intent extras ******** ////////////\n+\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n+\t\t_id = intentExtras.getLong(\"_id\");\n+\n+\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n+\t\t\tmEditList = new ArrayList<String>();\n+\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n+\t\t\t_id = Long.parseLong(mEditList.get(0));\n+\t\t\tString amount = mEditList.get(2);\n+\t\t\tString tag = mEditList.get(1);\n+\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n+\t\t\t\tif (!amount.contains(\"?\"))\n+\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n+\t\t\t}\n+\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n+\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n+\t\t\t\ttext_voice_camera_tag.setText(tag);\n+\t\t\t}\n+\t\t}\n+\n+\t\t// ////// ******** Handle Date Bar ********* ////////\n+\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n+\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n+\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n+\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n+\t\t} else {\n+\t\t\tnew DateHandler(this);\n+\t\t}\n+\n+\t\t// ////// ******** Starts Recording each time activity starts ******\n+\t\t// ///////\n+\t\tif (android.os.Environment.getExternalStorageState().equals(\n+\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n+\t\t\tsetGraphicsVoice();\n+\n+\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n+\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id\n+\t\t\t\t\t\t+ \".amr\");\n+\n+\t\t\t\tif (tempFile.canRead()) {\n+\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n+\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n+\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n+\t\t\t\t\ttext_voice_camera_rerecord_button\n+\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n+\t\t\t\t\ttext_voice_camera_time_details_chronometer\n+\t\t\t\t\t\t\t.setText(new DisplayTime()\n+\t\t\t\t\t\t\t\t\t.getDisplayTime(mAudioPlay\n+\t\t\t\t\t\t\t\t\t\t\t.getPlayBackTime()));\n+\t\t\t\t} else {\n+\t\t\t\t\ttext_voice_camera_time_details_chronometer\n+\t\t\t\t\t\t\t.setText(\"Audio File Missing\");\n+\t\t\t\t\ttext_voice_camera_rerecord_button\n+\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n+\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n+\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n+\t\t\t\tmRecordingHelper.startRecording();\n+\t\t\t\tcontrolVoiceChronometer();\n+\t\t\t}\n+\t\t} else {\n+\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG)\n+\t\t\t\t\t.show();\n+\t\t}\n+\t\tsetClickListeners();\n+\n+\t\t// //////********* Get Last most accurate location info *********\n+\t\t// /////////\n \t\tLocationLast mLocationLast = new LocationLast(this);\n \t\tmLocationLast.getLastLocation();\n \t}\n-\t\n+\n \t@Override\n \tprotected void onResume() {\n \t\tsuper.onResume();\n-\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n+\t\tdateViewString = text_voice_camera_date_bar_dateview.getText()\n+\t\t\t\t.toString();\n \t}\n \n-\t\n \t@Override\n \tprotected void onPause() {\n-\t\t\n-\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n-\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n-\t\ttry{\n-\t\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n-\t\t\t\tif(mRecordingHelper.isRecording()){\n+\n+\t\t// //// ***** Check whether audio is recording or not ******* ///////\n+\t\t// //// ****** If audio recording started then stop recording audio\n+\t\t// ***** ///////\n+\t\ttry {\n+\t\t\tif (android.os.Environment.getExternalStorageState().equals(\n+\t\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n+\t\t\t\tif (mRecordingHelper.isRecording()) {\n \t\t\t\t\tmRecordingHelper.stopRecording();\n \t\t\t\t}\n \t\t\t}\n-\t\t\tif(mAudioPlay.isAudioPlaying())\n+\t\t\tif (mAudioPlay.isAudioPlaying())\n \t\t\t\tmAudioPlay.stopPlayBack();\n-\t\t} catch(Exception e){\n-\t\t\t\n+\t\t} catch (Exception e) {\n+\n \t\t}\n \t\tsuper.onPause();\n \t}\n \n \tprivate void setClickListeners() {\n-\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n-\t\t\n+\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n+\n \t\ttext_voice_camera_stop_button.setOnClickListener(this);\n \t\ttext_voice_camera_play_button.setOnClickListener(this);\n \t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n-\t\t\n+\n \t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n \t\ttext_voice_camera_save_entry.setOnClickListener(this);\n-\t\t\n+\n \t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n \t\ttext_voice_camera_delete.setOnClickListener(this);\n \t}\n \n \tprivate void controlVoiceChronometer() {\n \t\ttext_voice_camera_time_details_chronometer.start();\n-\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n-\t\t\t\n-\t\t\t@Override\n-\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n-\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n-\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n-\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n-\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n-\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n+\t\ttext_voice_camera_time_details_chronometer\n+\t\t\t\t.setOnChronometerTickListener(new OnChronometerTickListener() {\n+\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n+\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer\n+\t\t\t\t\t\t\t\t.getText().length() > 5) {\n+\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n+\t\t\t\t\t\t\ttext_voice_camera_stop_button\n+\t\t\t\t\t\t\t\t\t.setVisibility(View.GONE);\n+\t\t\t\t\t\t\ttext_voice_camera_play_button\n+\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n+\t\t\t\t\t\t\ttext_voice_camera_rerecord_button\n+\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t});\n \t}\n \n \tprivate void setGraphicsVoice() {\n-\t\t///////   ***** Sets Title Voice Entry *********///////\n-        text_voice_camera_header_title.setText(\"Voice Entry\");\n-        \n-        ///////   ***** Sets Title Voice Entry *********///////\n-        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n-        \n-        //////   ******  Shows Voice Details ********////////\n-        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n+\t\t// ///// ***** Sets Title Voice Entry *********///////\n+\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n+\n+\t\t// ///// ***** Sets Title Voice Entry *********///////\n+\t\ttext_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n+\n+\t\t// //// ****** Shows Voice Details ********////////\n+\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n \t}\n \n \t@Override\n \tpublic void onClick(View v) {\n-\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n-\t\t\n-\t\t\n-\t\t////  ***** if stop button pressed ****** //////\n-\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n-\t\t\ttry{\n+\t\t// ///// ******** Adding On Click Actions to click listeners *********\n+\t\t// //////////\n+\n+\t\t// // ***** if stop button pressed ****** //////\n+\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n+\t\t\ttry {\n \t\t\t\tcountDownTimer.cancel();\n-\t\t\t}catch(NullPointerException e){};\n-\t\t\t\n-\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n+\t\t\t} catch (NullPointerException e) {\n+\t\t\t}\n+\t\t\t;\n+\n+\t\t\t// //// ****** Handles UI items on button click ****** ///////\n \t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n \t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n-\t\t\t\n-\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n-\t\t\ttry{\n-\t\t\t\tif(mRecordingHelper.isRecording())\n+\n+\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n+\t\t\t// ////////\n+\t\t\ttry {\n+\t\t\t\tif (mRecordingHelper.isRecording())\n \t\t\t\t\tmRecordingHelper.stopRecording();\n-\t\t\t} catch (Exception e){}\n+\t\t\t} catch (Exception e) {\n+\t\t\t}\n \t\t\ttext_voice_camera_time_details_chronometer.stop();\n-\t\t\ttry{\n-\t\t\t\tif(mAudioPlay.isAudioPlaying())\n+\t\t\ttry {\n+\t\t\t\tif (mAudioPlay.isAudioPlaying())\n \t\t\t\t\tmAudioPlay.stopPlayBack();\n-\t\t\t} catch(Exception e){}\n-\t\t\ttry{\n-\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n-\t\t\t}catch(NullPointerException e){\n-\t\t\t\t\n+\t\t\t} catch (Exception e) {\n+\t\t\t}\n+\t\t\ttry {\n+\t\t\t\ttext_voice_camera_time_details_chronometer\n+\t\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n+\t\t\t\t\t\t\t\t.getPlayBackTime()));\n+\t\t\t} catch (NullPointerException e) {\n+\n \t\t\t}\n \t\t}\n-\t\t\n-\t\t\n-\t\t////  ***** if play button pressed ****** //////\t\t\n-\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n-\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n-\t\t\tmAudioPlay = new AudioPlay(_id+\"\",this);\n-\t\t\t\n-\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n+\n+\t\t// // ***** if play button pressed ****** //////\n+\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n+\t\t\t// //// ******** to handle playback of recorded file *********\n+\t\t\t// ////////\n+\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n+\n+\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n \t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n-\t\t\t\n-\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n+\n+\t\t\t// //// ****** Handles UI items on button click ****** ///////\n \t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n \t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n-\t\t\t\n-\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n-\t\t\tif(!mAudioPlay.isAudioPlaying()){\n+\n+\t\t\t// /// ******** Start Audio Playback and counter to play audio\n+\t\t\t// ****** ///////\n+\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n \t\t\t\tmAudioPlay.startPlayBack();\n \t\t\t} else {\n \t\t\t\tmAudioPlay.stopPlayBack();\n@@ -263,124 +287,141 @@ public class Voice extends Activity implements OnClickListener{\n \t\t\t}\n \t\t\tcountDownTimer.start();\n \t\t}\n-\t\t\n-\t\t////  ***** if rerecord button pressed ****** //////\t\t\n-\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n-\t\t\ttry{\n+\n+\t\t// // ***** if rerecord button pressed ****** //////\n+\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n+\t\t\ttry {\n \t\t\t\tcountDownTimer.cancel();\n-\t\t\t}catch(NullPointerException e){};\n-\t\t\t\n-\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n-\t\t\ttry{\n-\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n+\t\t\t} catch (NullPointerException e) {\n+\t\t\t}\n+\t\t\t;\n+\n+\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n+\t\t\t// *******//////\n+\t\t\ttry {\n+\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n \t\t\t\t\tmAudioPlay.stopPlayBack();\n \t\t\t\t}\n-\t\t\t}catch(NullPointerException e){}\n-\t\t\t\n-\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n+\t\t\t} catch (NullPointerException e) {\n+\t\t\t}\n+\n+\t\t\t// //// ****** Handles UI items on button click ****** ///////\n \t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n \t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n-\t\t\t\n-\t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n-\t\t\tif(mRecordingHelper.isRecording())\n+\n+\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n+\t\t\tif (mRecordingHelper.isRecording())\n \t\t\t\tmRecordingHelper.stopRecording();\n-\t\t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n+\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n \t\t\tmRecordingHelper.startRecording();\n-\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n+\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock\n+\t\t\t\t\t.elapsedRealtime());\n \t\t\ttext_voice_camera_time_details_chronometer.start();\n \t\t}\n-\t\t\n-\t\t////////********  Adding Action to save entry     *********    ///////////\n-\t\t\n-\t\tif(v.getId() == R.id.text_voice_camera_save_entry){\n+\n+\t\t// //////******** Adding Action to save entry ********* ///////////\n+\n+\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n \t\t\tsaveEntry();\n \t\t}\n-\t\n-\t\n-\t\t/////////     *********   Adding action if delete button **********  /////////\n-\t\n-\t\tif(v.getId() == R.id.text_voice_camera_delete){\n-\t\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n-\t\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n-\t\t\ttry{\n-\t\t\t\tif(mRecordingHelper.isRecording()){\n+\n+\t\t// /////// ********* Adding action if delete button ********** /////////\n+\n+\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n+\t\t\t// //// ***** Check whether audio is recording or not *******\n+\t\t\t// ///////\n+\t\t\t// //// ****** If audio recording started then stop recording audio\n+\t\t\t// ***** ///////\n+\t\t\ttry {\n+\t\t\t\tif (mRecordingHelper.isRecording()) {\n \t\t\t\t\tmRecordingHelper.stopRecording();\n \t\t\t\t}\n-\t\t\t}catch(NullPointerException e){\n+\t\t\t} catch (NullPointerException e) {\n \t\t\t\te.printStackTrace();\n \t\t\t}\n-\t\t\t\n-\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n-\t\t\ttry{\n-\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n+\n+\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n+\t\t\t// *******//////\n+\t\t\ttry {\n+\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n \t\t\t\t\tmAudioPlay.stopPlayBack();\n \t\t\t\t}\n-\t\t\t}catch(NullPointerException e){\n+\t\t\t} catch (NullPointerException e) {\n \t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t\ttext_voice_camera_time_details_chronometer.stop();\n-\t\t\t\n+\n \t\t\tnew FileDelete(_id);\n-\t\t\n-\t\t\t//////   *******   Delete entry from database ********   /////////\n+\n+\t\t\t// //// ******* Delete entry from database ******** /////////\n \t\t\tmDatabaseAdapter.open();\n \t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n \t\t\tmDatabaseAdapter.close();\n \t\t\tfinish();\n \t\t}\n \t}\n-\t\n-\t\n+\n \tprivate void saveEntry() {\n-\t\t///////    *******  Creating HashMap to update info   *******  ////////\n+\t\t// ///// ******* Creating HashMap to update info ******* ////////\n \t\tHashMap<String, String> _list = new HashMap<String, String>();\n \t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n-\t\t\n-\t\tif(!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")){\n-\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n-\t\t\tmAmount = (double)((int)((mAmount+0.005)*100.0)/100.0);\n+\n+\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\")\n+\t\t\t\t&& !text_voice_camera_amount.getText().toString().equals(\"\")) {\n+\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount\n+\t\t\t\t\t.getText().toString());\n+\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n \t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n \t\t} else {\n \t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n-\t\t}\t\n-\t\tif(text_voice_camera_tag.getText().toString() != \"\"){\n-\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n \t\t}\n-\t\t\n-\t\tif(!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)){\n-\t\t\ttry{\n-\t\t\t\tif(!intentExtras.containsKey(\"mDisplayList\")){\n-\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n-\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n+\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n+\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText()\n+\t\t\t\t\t.toString());\n+\t\t}\n+\n+\t\tif (!text_voice_camera_date_bar_dateview.getText().toString()\n+\t\t\t\t.equals(dateViewString)) {\n+\t\t\ttry {\n+\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n+\t\t\t\t\tDateHelper mDateHelper = new DateHelper(\n+\t\t\t\t\t\t\ttext_voice_camera_date_bar_dateview.getText()\n+\t\t\t\t\t\t\t\t\t.toString());\n+\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,\n+\t\t\t\t\t\t\tmDateHelper.getTimeMillis() + \"\");\n \t\t\t\t} else {\n \t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n \t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mEditList.get(6)));\n-\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n-\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n+\t\t\t\t\tDateHelper mDateHelper = new DateHelper(\n+\t\t\t\t\t\t\ttext_voice_camera_date_bar_dateview.getText()\n+\t\t\t\t\t\t\t\t\t.toString(), mCalendar);\n+\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,\n+\t\t\t\t\t\t\tmDateHelper.getTimeMillis() + \"\");\n \t\t\t\t}\n-\t\t\t} catch (Exception e){\n+\t\t\t} catch (Exception e) {\n \t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t}\n-\t\t//////    *******   Update database if user added additional info   *******  ///////\n+\t\t// //// ******* Update database if user added additional info *******\n+\t\t// ///////\n \t\tmDatabaseAdapter.open();\n \t\tmDatabaseAdapter.editDatabase(_list);\n \t\tmDatabaseAdapter.close();\n \t\tfinish();\n-\t\tif(!intentExtras.containsKey(\"timeInMillis\")  && !intentExtras.containsKey(\"mDisplayList\")){\n-\t\t\t Intent intentExpenseListing = new Intent(this, ExpenseListing.class);\n-\t\t\t startActivity(intentExpenseListing);\n+\t\tif (!intentExtras.containsKey(\"timeInMillis\")\n+\t\t\t\t&& !intentExtras.containsKey(\"mDisplayList\")) {\n+\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n+\t\t\tstartActivity(intentExpenseListing);\n \t\t}\n \t}\n \n-\n-\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n-\t//countdowntimer is an abstract class, so extend it and fill in methods\n-\tprivate class MyCount extends CountDownTimer{\n+\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n+\t// countdowntimer is an abstract class, so extend it and fill in methods\n+\tprivate class MyCount extends CountDownTimer {\n \n \t\tDisplayTime mDisplayTime;\n-\t\t\n+\n \t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n \t\t\tsuper(millisInFuture, countDownInterval);\n \t\t\tmDisplayTime = new DisplayTime();\n@@ -388,35 +429,37 @@ public class Voice extends Activity implements OnClickListener{\n \n \t\t@Override\n \t\tpublic void onFinish() {\n-\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n+\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n+\t\t\t\t\t.getDisplayTime(mAudioPlay.getPlayBackTime()));\n \t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n \t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n \t\t}\n \n \t\t@Override\n \t\tpublic void onTick(long millisUntilFinished) {\n-\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n+\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n+\t\t\t\t\t.getDisplayTime(millisUntilFinished));\n \t\t}\n \t}\n-\t\n-\t\n-\t///// ******************  Handling back press of key   ********** ///////////\n-\tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n-\t     if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n-\t    \t onBackPressed();\n-\t    \t return true;\n-\t      }\n-\t    return super.onKeyDown(keyCode, event);\n+\n+\t// /// ****************** Handling back press of key ********** ///////////\n+\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n+\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n+\t\t\tonBackPressed();\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn super.onKeyDown(keyCode, event);\n \t}\n \n \tpublic void onBackPressed() {\n-\t    // This will be called either automatically for you on 2.0    \n-\t    // or later, or by the code above on earlier versions of the platform.\n+\t\t// This will be called either automatically for you on 2.0\n+\t\t// or later, or by the code above on earlier versions of the platform.\n \t\tsaveEntry();\n-\t\ttry{\n-\t\t\tif(mAudioPlay.isAudioPlaying())\n+\t\ttry {\n+\t\t\tif (mAudioPlay.isAudioPlaying())\n \t\t\t\tmAudioPlay.stopPlayBack();\n-\t\t}catch(Exception e){}\n-\t    return;\n+\t\t} catch (Exception e) {\n+\t\t}\n+\t\treturn;\n \t}\n }"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime File FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLastLocation getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put requestWindowFeature saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526729942652420096, "subject_t": ["Code Proper aligned"], "comments_t": ["\t\t// ///// ****** No Title Bar ********* ///////// \t\t// or later, or by the code above on earlier versions of the platform. \t\t// /////// \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// //// ******* Update database if user added additional info ******* \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //////********* Get Last most accurate location info ********* \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// //// ****** If audio recording started then stop recording audio \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// ////// ******** Starts Recording each time activity starts ****** \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// ***** /////// \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// ********** ///////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["541702b3ee44e9bc211d6aa123f76410add5f0bb"], "id": "vinsol/expense-tracker\u000030407e4f50f30f445adc6a44d63392b91a6865f5\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.widget.TextView.setText(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#<unknown>.deleteDatabaseEntryID(java.lang.String)#java.util.Calendar.setTimeInMillis(long)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.app.Activity.finish()#java.io.File.File(java.lang.String)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#<unknown>.getLastLocation()#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#android.widget.TextView.getText()#<unknown>.DisplayTime()#android.view.KeyEvent.getRepeatCount()#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.requestWindowFeature(int)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#<unknown>.isRecording()#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() java.lang.Long.parseLong(java.lang.String) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.widget.TextView.setText(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.lang.Long.toString(long) <unknown>.deleteDatabaseEntryID(java.lang.String) java.util.Calendar.setTimeInMillis(long) <unknown>.getTimeMillis() android.app.Activity.getIntent() android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.app.Activity.finish() java.io.File.File(java.lang.String) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) <unknown>.getLastLocation() android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() android.widget.TextView.getText() <unknown>.DisplayTime() android.view.KeyEvent.getRepeatCount() <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.requestWindowFeature(int) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) <unknown>.isRecording() android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Tyler Holland", "repo_sni": "Tywholland/SimpleTimer", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent android.view.Menu com.tywholland.simpletimer.SimpleTimerApplication android.widget.EditText android.view.MenuItem android.content.SharedPreferences com.tywholland.simpletimer.Settings android.widget.TextView android.preference.PreferenceManager android.view.View com.tywholland.simpletimer.R android.app.Activity java.util.Calendar"], "email_sni": "tywholland@gmail.com", "contents_t": ["package com.tywholland.simpletimer.timer;\n\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.preference.PreferenceManager;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.tywholland.simpletimer.R;\nimport com.tywholland.simpletimer.Settings;\nimport com.tywholland.simpletimer.SimpleTimerApplication;\n\npublic class TimerActivity extends Activity {\n\tprivate static final String ALARM_TIME = \"alarmkey\";\n\tprivate static final String ALARM_NAME = \"alarmnamekey\";\n\tprivate static final int TIME_MAX_LENGTH = 6;\n\n\tprivate Button mStartButton;\n\tprivate Button mNumpad1;\n\tprivate Button mNumpad2;\n\tprivate Button mNumpad3;\n\tprivate Button mNumpad4;\n\tprivate Button mNumpad5;\n\tprivate Button mNumpad6;\n\tprivate Button mNumpad7;\n\tprivate Button mNumpad8;\n\tprivate Button mNumpad9;\n\tprivate Button mNumpad0;\n\tprivate Button mStopButton;\n\tprivate TextView mTimeView;\n\tprivate EditText mAlarmNameView;\n\tprivate SimpleTimerApplication mAlarmApplication;\n\tprivate CountDownTimer mCountDownTimer;\n\tprivate boolean mCountingDown;\n\n\t@Override\n\tpublic boolean onCreateOptionsMenu(Menu menu) {\n\t\tgetMenuInflater().inflate(R.menu.menu, menu);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic boolean onOptionsItemSelected(MenuItem item) {\n\t\tswitch (item.getItemId()) {\n\t\tcase R.id.menu_settings:\n\t\t\tstartActivity(new Intent(getApplicationContext(), Settings.class));\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn super.onOptionsItemSelected(item);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tmAlarmApplication = (SimpleTimerApplication) getApplicationContext();\n\t\tif (PreferenceManager.getDefaultSharedPreferences(\n\t\t\t\tgetApplicationContext()).getBoolean(\n\t\t\t\tgetString(R.string.key_button_placement), true)) {\n\t\t\tsetContentView(R.layout.activity_main);\n\t\t} else {\n\t\t\tsetContentView(R.layout.activity_main_bottom_start);\n\t\t}\n\t\tmCountingDown = false;\n\n\t\trestoreText();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tif (PreferenceManager.getDefaultSharedPreferences(\n\t\t\t\tgetApplicationContext()).getBoolean(\n\t\t\t\tgetString(R.string.key_button_placement), true)) {\n\t\t\tsetContentView(R.layout.activity_main);\n\t\t} else {\n\t\t\tsetContentView(R.layout.activity_main_bottom_start);\n\t\t}\n\t\tmStartButton = (Button) findViewById(R.id.startbutton);\n\t\tmStartButton.setOnClickListener(new OnClickListener() {\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmAlarmApplication.stopTimer();\n\t\t\t\tmAlarmApplication.setAlarmName(mAlarmNameView.getText()\n\t\t\t\t\t\t.toString());\n\t\t\t\tmAlarmApplication.startTimer(TimeConversionUtil\n\t\t\t\t\t\t.convertStringToMilliseconds(mAlarmApplication\n\t\t\t\t\t\t\t\t.getTimeString()));\n\t\t\t\tstopTextCountdown();\n\t\t\t\tstartTextCountdown();\n\t\t\t\tmAlarmApplication.setTimeString(\"\");\n\t\t\t\tmCountingDown = true;\n\t\t\t\tupdateButtons();\n\t\t\t}\n\t\t});\n\t\tmStopButton = (Button) findViewById(R.id.stopbutton);\n\t\tmStopButton.setOnClickListener(new OnClickListener() {\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmAlarmApplication.setTimeString(\"\");\n\t\t\t\tmAlarmApplication.setAlarmName(\"\");\n\t\t\t\tmAlarmNameView.setText(\"\");\n\t\t\t\tmTimeView.setText(R.string.default_time);\n\t\t\t\tmAlarmApplication.stopTimer();\n\t\t\t\tstopTextCountdown();\n\t\t\t\tmCountingDown = false;\n\t\t\t\tupdateButtons();\n\t\t\t}\n\t\t});\n\t\tmAlarmNameView = (EditText) findViewById(R.id.alarmNameEditText);\n\t\tmAlarmNameView.setText(mAlarmApplication.getAlarmName());\n\t\tmAlarmNameView.clearFocus();\n\t\tmTimeView = (TextView) findViewById(R.id.timerTextView);\n\t\tmNumpad0 = (Button) findViewById(R.id.numpad0);\n\t\tmNumpad1 = (Button) findViewById(R.id.numpad1);\n\t\tmNumpad2 = (Button) findViewById(R.id.numpad2);\n\t\tmNumpad3 = (Button) findViewById(R.id.numpad3);\n\t\tmNumpad4 = (Button) findViewById(R.id.numpad4);\n\t\tmNumpad5 = (Button) findViewById(R.id.numpad5);\n\t\tmNumpad6 = (Button) findViewById(R.id.numpad6);\n\t\tmNumpad7 = (Button) findViewById(R.id.numpad7);\n\t\tmNumpad8 = (Button) findViewById(R.id.numpad8);\n\t\tmNumpad9 = (Button) findViewById(R.id.numpad9);\n\t\tmNumpad0.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad1.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad2.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad3.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad4.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad5.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad6.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad7.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad8.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad9.setOnClickListener(numpadButtonClickListener());\n\t\tupdateTimeView();\n\t\tupdateButtons();\n\t\tif (mCountDownTimer != null) {\n\t\t\tmCountDownTimer.cancel();\n\t\t}\n\t\tstartTextCountdown();\n\t\tif (!mCountingDown) {\n\t\t\t// Stop timer when app is launched if timer is not active\n\t\t\tmAlarmApplication.stopTimer();\n\t\t}\n\t}\n\n\tprivate void restoreText() {\n\t\tSharedPreferences settings = getPreferences(0);\n\t\tif (settings != null) {\n\t\t\tlong milliseconds = settings.getLong(ALARM_TIME, 0);\n\t\t\tCalendar c = Calendar.getInstance();\n\t\t\tc.setTimeInMillis(milliseconds);\n\t\t\tmAlarmApplication.setCurrentAlarmCalendar(c);\n\t\t\tString alarmName = settings.getString(ALARM_NAME, \"\");\n\t\t\tmAlarmApplication.setAlarmName(alarmName);\n\t\t}\n\t}\n\n\tprivate void startTextCountdown() {\n\t\tCalendar c = mAlarmApplication.getCurrentAlarmCalendar();\n\t\tif (c != null && c.getTimeInMillis() != 0) {\n\t\t\tlong alarmTime = c.getTimeInMillis();\n\t\t\tlong currentTime = Calendar.getInstance().getTimeInMillis();\n\t\t\tlong timeDifference = alarmTime - currentTime;\n\t\t\tif (timeDifference > 0) {\n\t\t\t\tmCountingDown = true;\n\t\t\t} else {\n\t\t\t\tmCountingDown = false;\n\t\t\t}\n\t\t\tmCountDownTimer = new CountDownTimer(timeDifference, 1000) {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\t\t\tmTimeView\n\t\t\t\t\t\t\t.setText(TimeConversionUtil\n\t\t\t\t\t\t\t\t\t.getTimeStringFromMilliseconds(millisUntilFinished));\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onFinish() {\n\t\t\t\t\tmTimeView.setText(R.string.default_time);\n\t\t\t\t\tmCountingDown = false;\n\t\t\t\t}\n\t\t\t};\n\t\t\tmCountDownTimer.start();\n\t\t} else {\n\t\t\tmCountingDown = false;\n\t\t}\n\t\tupdateButtons();\n\t}\n\n\tprivate void stopTextCountdown() {\n\t\tif (mCountDownTimer != null) {\n\t\t\tmCountDownTimer.cancel();\n\t\t}\n\t}\n\n\tprivate OnClickListener numpadButtonClickListener() {\n\t\treturn new OnClickListener() {\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tif (!mCountingDown) {\n\t\t\t\t\tif (mAlarmApplication.getTimeString().length() < TIME_MAX_LENGTH) {\n\t\t\t\t\t\tmAlarmApplication.appendToTimeString(((Button) v)\n\t\t\t\t\t\t\t\t.getText().toString());\n\t\t\t\t\t\tupdateTimeView();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tToast.makeText(getApplicationContext(),\n\t\t\t\t\t\t\t\tR.string.time_too_long_warning,\n\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate void updateButtons() {\n\t\tmStartButton.setEnabled(!mCountingDown);\n\t\tmNumpad0.setEnabled(!mCountingDown);\n\t\tmNumpad1.setEnabled(!mCountingDown);\n\t\tmNumpad2.setEnabled(!mCountingDown);\n\t\tmNumpad3.setEnabled(!mCountingDown);\n\t\tmNumpad4.setEnabled(!mCountingDown);\n\t\tmNumpad5.setEnabled(!mCountingDown);\n\t\tmNumpad6.setEnabled(!mCountingDown);\n\t\tmNumpad7.setEnabled(!mCountingDown);\n\t\tmNumpad8.setEnabled(!mCountingDown);\n\t\tmNumpad9.setEnabled(!mCountingDown);\n\t}\n\n\tprivate void updateTimeView() {\n\t\tInteger hours = TimeConversionUtil.getHoursFromTimeString(mAlarmApplication\n\t\t\t\t.getTimeString());\n\t\tInteger minutes = TimeConversionUtil.getMinutesFromTimeString(mAlarmApplication\n\t\t\t\t.getTimeString());\n\t\tInteger seconds = TimeConversionUtil.getSecondsFromTimeString(mAlarmApplication\n\t\t\t\t.getTimeString());\n\t\tmTimeView.setText(String.format(\"%02d\", hours) + \":\"\n\t\t\t\t+ String.format(\"%02d\", minutes) + \":\"\n\t\t\t\t+ String.format(\"%02d\", seconds));\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\t\tsuper.onPause();\n\t\tSharedPreferences settings = getPreferences(0);\n\t\tSharedPreferences.Editor editor = settings.edit();\n\t\teditor.putString(ALARM_NAME, mAlarmNameView.getText().toString());\n\t\teditor.commit();\n\t}\n\n\t@Override\n\tprotected void onStop() {\n\t\tsuper.onStop();\n\t\tSharedPreferences settings = getPreferences(0);\n\t\tSharedPreferences.Editor editor = settings.edit();\n\t\teditor.putLong(ALARM_TIME, mAlarmApplication.getCurrentAlarmCalendar()\n\t\t\t\t.getTimeInMillis());\n\t\teditor.commit();\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2012-11-21T06:04:39Z", "hash_sni": "e8c1a792b35a2de8c5353ee4ea12021f9807392f", "name_sni": "src/com/tywholland/simpletimer/timer/TimerActivity.java", "patch_t": [" \t\t\t\tmAlarmApplication.stopTimer();\n \t\t\t\tmAlarmApplication.setAlarmName(mAlarmNameView.getText()\n \t\t\t\t\t\t.toString());\n-\t\t\t\tmAlarmApplication.startTimer(TimerUtil\n+\t\t\t\tmAlarmApplication.startTimer(TimeConversionUtil\n \t\t\t\t\t\t.convertStringToMilliseconds(mAlarmApplication\n \t\t\t\t\t\t\t\t.getTimeString()));\n \t\t\t\tstopTextCountdown();\n@@ -180,7 +180,7 @@ public class TimerActivity extends Activity {\n \t\t\t\t@Override\n \t\t\t\tpublic void onTick(long millisUntilFinished) {\n \t\t\t\t\tmTimeView\n-\t\t\t\t\t\t\t.setText(TimerUtil\n+\t\t\t\t\t\t\t.setText(TimeConversionUtil\n \t\t\t\t\t\t\t\t\t.getTimeStringFromMilliseconds(millisUntilFinished));\n \t\t\t\t}\n \n@@ -236,11 +236,11 @@ public class TimerActivity extends Activity {\n \t}\n \n \tprivate void updateTimeView() {\n-\t\tInteger hours = TimerUtil.getHoursFromTimeString(mAlarmApplication\n+\t\tInteger hours = TimeConversionUtil.getHoursFromTimeString(mAlarmApplication\n \t\t\t\t.getTimeString());\n-\t\tInteger minutes = TimerUtil.getMinutesFromTimeString(mAlarmApplication\n+\t\tInteger minutes = TimeConversionUtil.getMinutesFromTimeString(mAlarmApplication\n \t\t\t\t.getTimeString());\n-\t\tInteger seconds = TimerUtil.getSecondsFromTimeString(mAlarmApplication\n+\t\tInteger seconds = TimeConversionUtil.getSecondsFromTimeString(mAlarmApplication\n \t\t\t\t.getTimeString());\n \t\tmTimeView.setText(String.format(\"%02d\", hours) + \":\"\n \t\t\t\t+ String.format(\"%02d\", minutes) + \":\""], "score": 1.0, "methods_t": ["CountDownTimer Intent OnClickListener appendToTimeString cancel clearFocus commit convertStringToMilliseconds edit findViewById format getAlarmName getApplicationContext getBoolean getCurrentAlarmCalendar getDefaultSharedPreferences getHoursFromTimeString getInstance getItemId getLong getMenuInflater getMinutesFromTimeString getPreferences getSecondsFromTimeString getString getText getTimeInMillis getTimeString getTimeStringFromMilliseconds inflate length makeText numpadButtonClickListener putLong putString restoreText setAlarmName setContentView setCurrentAlarmCalendar setEnabled setOnClickListener setText setTimeInMillis setTimeString show start startActivity startTextCountdown startTimer stopTextCountdown stopTimer toString updateButtons updateTimeView"], "_version_": 1526729234118082560, "subject_t": ["Fixed bug"], "comments_t": ["\t\t\t// Stop timer when app is launched if timer is not active"], "parents_ss": ["7017ecd6562e031a6d39af2f89e36af22d0e82b6"], "id": "Tywholland/SimpleTimer\u0000e8c1a792b35a2de8c5353ee4ea12021f9807392f\u0000src/com/tywholland/simpletimer/timer/TimerActivity.java", "callsites_cs": "android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#com.tywholland.simpletimer.timer.TimerActivity.stopTextCountdown()#android.content.Intent.Intent(android.content.Context, java.lang.Class)#android.app.Activity.findViewById(<unknown>)#android.content.SharedPreferences.edit()#android.widget.TextView.setEnabled(boolean)#<unknown>.convertStringToMilliseconds(<unknown>)#java.util.Calendar.setTimeInMillis(long)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.content.ContextWrapper.getApplicationContext()#android.os.CountDownTimer.cancel()#android.view.View.setOnClickListener(android.view.View.OnClickListener)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#android.app.Activity.findViewById(<unknown>)#com.tywholland.simpletimer.timer.TimerActivity.startTextCountdown()#android.widget.TextView.setEnabled(boolean)#android.app.Activity.findViewById(<unknown>)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#<unknown>.getTimeInMillis()#android.widget.TextView.setEnabled(boolean)#android.content.Context.getString(<unknown>)#com.tywholland.simpletimer.timer.TimerActivity.restoreText()#android.widget.TextView.setText(<unknown>)#android.app.Activity.getPreferences(int)#android.app.Activity.findViewById(<unknown>)#android.content.SharedPreferences.getLong(java.lang.String, int)#<unknown>.stopTimer()#android.content.SharedPreferences.Editor.putString(java.lang.String, java.lang.String)#android.content.ContextWrapper.getApplicationContext()#android.content.Context.getString(<unknown>)#android.os.CountDownTimer.cancel()#com.tywholland.simpletimer.timer.TimerActivity.updateButtons()#android.app.Activity.findViewById(<unknown>)#android.os.CountDownTimer.start()#<unknown>.getCurrentAlarmCalendar()#android.app.Activity.findViewById(<unknown>)#java.lang.String.format(java.lang.String, java.lang.Integer)#android.content.SharedPreferences.edit()#java.util.Calendar.getTimeInMillis()#java.lang.CharSequence.toString()#android.widget.TextView.getText()#<unknown>.getTimeString()#android.app.Activity.setContentView(<unknown>)#android.widget.Toast.makeText(android.content.Context, <unknown>, int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.getPreferences(int)#android.app.Activity.startActivity(android.content.Intent)#.OnClickListener()#java.lang.String.format(java.lang.String, java.lang.Integer)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#<unknown>.getTimeString()#android.view.View.setOnClickListener(android.view.View.OnClickListener)#android.app.Activity.setContentView(<unknown>)#android.widget.TextView.setEnabled(boolean)#android.content.SharedPreferences.getBoolean(<unknown>, boolean)#java.util.Calendar.getInstance()#android.app.Activity.getMenuInflater()#android.content.ContextWrapper.getApplicationContext()#java.lang.CharSequence.toString()#<unknown>.getAlarmName()#<unknown>.getTimeStringFromMilliseconds(long)#android.widget.TextView.setEnabled(boolean)#com.tywholland.simpletimer.timer.TimerActivity.updateButtons()#android.widget.TextView.setEnabled(boolean)#android.content.ContextWrapper.getApplicationContext()#android.view.MenuItem.getItemId()#<unknown>.setTimeString(java.lang.String)#<unknown>.appendToTimeString(java.lang.String)#android.widget.TextView.setEnabled(boolean)#com.tywholland.simpletimer.timer.TimerActivity.numpadButtonClickListener()#com.tywholland.simpletimer.timer.TimerActivity.startTextCountdown()#android.view.View.setOnClickListener()#android.app.Activity.findViewById(<unknown>)#android.view.View.clearFocus()#android.view.MenuInflater.inflate(<unknown>, android.view.Menu)#.OnClickListener()#com.tywholland.simpletimer.timer.TimerActivity.updateTimeView()#android.widget.EditText.getText()#android.widget.TextView.setEnabled(boolean)#java.util.Calendar.getInstance()#java.lang.CharSequence.toString()#android.app.Activity.findViewById(<unknown>)#<unknown>.startTimer(<unknown>)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#<unknown>.setCurrentAlarmCalendar(java.util.Calendar)#android.widget.TextView.setEnabled(boolean)#<unknown>.setAlarmName(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.getPreferences(int)#com.tywholland.simpletimer.timer.TimerActivity.updateButtons()#android.app.Activity.setContentView(<unknown>)#<unknown>.getTimeString()#android.app.Activity.setContentView(<unknown>)#<unknown>.getSecondsFromTimeString(<unknown>)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.stopTimer()#android.app.Activity.findViewById(<unknown>)#java.util.Calendar.getTimeInMillis()#android.content.SharedPreferences.Editor.commit()#<unknown>.getCurrentAlarmCalendar()#android.widget.TextView.setText(<unknown>)#com.tywholland.simpletimer.timer.TimerActivity.updateTimeView()#android.widget.EditText.getText()#android.widget.TextView.setEnabled(boolean)#android.app.Activity.findViewById(<unknown>)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#android.view.View.setOnClickListener()#<unknown>.show()#android.view.View.setOnClickListener(android.view.View.OnClickListener)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setEnabled(boolean)#android.content.SharedPreferences.Editor.commit()#<unknown>.getHoursFromTimeString(<unknown>)#<unknown>.length()#.CountDownTimer(long, int)#android.content.SharedPreferences.Editor.putLong(java.lang.String, <unknown>)#android.content.SharedPreferences.getBoolean(<unknown>, boolean)#<unknown>.setAlarmName(java.lang.String)#android.widget.TextView.setText(<unknown>)#java.lang.String.format(java.lang.String, java.lang.Integer)#<unknown>.getMinutesFromTimeString(<unknown>)#<unknown>.setAlarmName(java.lang.String)", "callsites_t": ["android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) com.tywholland.simpletimer.timer.TimerActivity.stopTextCountdown() android.content.Intent.Intent(android.content.Context, java.lang.Class) android.app.Activity.findViewById(<unknown>) android.content.SharedPreferences.edit() android.widget.TextView.setEnabled(boolean) <unknown>.convertStringToMilliseconds(<unknown>) java.util.Calendar.setTimeInMillis(long) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.app.Activity.findViewById(<unknown>) android.content.ContextWrapper.getApplicationContext() android.os.CountDownTimer.cancel() android.view.View.setOnClickListener(android.view.View.OnClickListener) android.view.View.setOnClickListener(android.view.View.OnClickListener) android.app.Activity.findViewById(<unknown>) com.tywholland.simpletimer.timer.TimerActivity.startTextCountdown() android.widget.TextView.setEnabled(boolean) android.app.Activity.findViewById(<unknown>) android.view.View.setOnClickListener(android.view.View.OnClickListener) <unknown>.getTimeInMillis() android.widget.TextView.setEnabled(boolean) android.content.Context.getString(<unknown>) com.tywholland.simpletimer.timer.TimerActivity.restoreText() android.widget.TextView.setText(<unknown>) android.app.Activity.getPreferences(int) android.app.Activity.findViewById(<unknown>) android.content.SharedPreferences.getLong(java.lang.String, int) <unknown>.stopTimer() android.content.SharedPreferences.Editor.putString(java.lang.String, java.lang.String) android.content.ContextWrapper.getApplicationContext() android.content.Context.getString(<unknown>) android.os.CountDownTimer.cancel() com.tywholland.simpletimer.timer.TimerActivity.updateButtons() android.app.Activity.findViewById(<unknown>) android.os.CountDownTimer.start() <unknown>.getCurrentAlarmCalendar() android.app.Activity.findViewById(<unknown>) java.lang.String.format(java.lang.String, java.lang.Integer) android.content.SharedPreferences.edit() java.util.Calendar.getTimeInMillis() java.lang.CharSequence.toString() android.widget.TextView.getText() <unknown>.getTimeString() android.app.Activity.setContentView(<unknown>) android.widget.Toast.makeText(android.content.Context, <unknown>, int) android.widget.TextView.setText(java.lang.String) android.app.Activity.getPreferences(int) android.app.Activity.startActivity(android.content.Intent) .OnClickListener() java.lang.String.format(java.lang.String, java.lang.Integer) android.view.View.setOnClickListener(android.view.View.OnClickListener) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setOnClickListener(android.view.View.OnClickListener) <unknown>.getTimeString() android.view.View.setOnClickListener(android.view.View.OnClickListener) android.app.Activity.setContentView(<unknown>) android.widget.TextView.setEnabled(boolean) android.content.SharedPreferences.getBoolean(<unknown>, boolean) java.util.Calendar.getInstance() android.app.Activity.getMenuInflater() android.content.ContextWrapper.getApplicationContext() java.lang.CharSequence.toString() <unknown>.getAlarmName() <unknown>.getTimeStringFromMilliseconds(long) android.widget.TextView.setEnabled(boolean) com.tywholland.simpletimer.timer.TimerActivity.updateButtons() android.widget.TextView.setEnabled(boolean) android.content.ContextWrapper.getApplicationContext() android.view.MenuItem.getItemId() <unknown>.setTimeString(java.lang.String) <unknown>.appendToTimeString(java.lang.String) android.widget.TextView.setEnabled(boolean) com.tywholland.simpletimer.timer.TimerActivity.numpadButtonClickListener() com.tywholland.simpletimer.timer.TimerActivity.startTextCountdown() android.view.View.setOnClickListener() android.app.Activity.findViewById(<unknown>) android.view.View.clearFocus() android.view.MenuInflater.inflate(<unknown>, android.view.Menu) .OnClickListener() com.tywholland.simpletimer.timer.TimerActivity.updateTimeView() android.widget.EditText.getText() android.widget.TextView.setEnabled(boolean) java.util.Calendar.getInstance() java.lang.CharSequence.toString() android.app.Activity.findViewById(<unknown>) <unknown>.startTimer(<unknown>) android.view.View.setOnClickListener(android.view.View.OnClickListener) <unknown>.setCurrentAlarmCalendar(java.util.Calendar) android.widget.TextView.setEnabled(boolean) <unknown>.setAlarmName(java.lang.String) android.app.Activity.findViewById(<unknown>) android.app.Activity.getPreferences(int) com.tywholland.simpletimer.timer.TimerActivity.updateButtons() android.app.Activity.setContentView(<unknown>) <unknown>.getTimeString() android.app.Activity.setContentView(<unknown>) <unknown>.getSecondsFromTimeString(<unknown>) android.view.View.setOnClickListener(android.view.View.OnClickListener) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.stopTimer() android.app.Activity.findViewById(<unknown>) java.util.Calendar.getTimeInMillis() android.content.SharedPreferences.Editor.commit() <unknown>.getCurrentAlarmCalendar() android.widget.TextView.setText(<unknown>) com.tywholland.simpletimer.timer.TimerActivity.updateTimeView() android.widget.EditText.getText() android.widget.TextView.setEnabled(boolean) android.app.Activity.findViewById(<unknown>) android.view.View.setOnClickListener(android.view.View.OnClickListener) android.view.View.setOnClickListener() <unknown>.show() android.view.View.setOnClickListener(android.view.View.OnClickListener) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) android.widget.TextView.setEnabled(boolean) android.content.SharedPreferences.Editor.commit() <unknown>.getHoursFromTimeString(<unknown>) <unknown>.length() .CountDownTimer(long, int) android.content.SharedPreferences.Editor.putLong(java.lang.String, <unknown>) android.content.SharedPreferences.getBoolean(<unknown>, boolean) <unknown>.setAlarmName(java.lang.String) android.widget.TextView.setText(<unknown>) java.lang.String.format(java.lang.String, java.lang.Integer) <unknown>.getMinutesFromTimeString(<unknown>) <unknown>.setAlarmName(java.lang.String)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener android.os.Bundle android.view.Window java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\t// ///// ****** No Title Bar ********* /////////\n\n\t\tthis.requestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items\n\t\t// ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n\t\t\t\t//TODO \n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ******\n\t\t// ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\n\t\t// //////********* Get Last most accurate location info *********\n\t\t// /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText()\n\t\t\t\t.toString();\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t\t.getText().length() > 5) {\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock\n\t\t\t\t\t.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\")\n\t\t\t\t&& !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount\n\t\t\t\t\t.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText()\n\t\t\t\t\t.toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString()\n\t\t\t\t.equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(\n\t\t\t\t\t\t\ttext_voice_camera_date_bar_dateview.getText()\n\t\t\t\t\t\t\t\t\t.toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,\n\t\t\t\t\t\t\tmDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(MainActivity.mCurrentLocation != null  && setLocation == true){\n\t\t\tif (!MainActivity.mCurrentLocation.equals(\"\")) {\n\t\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION,MainActivity.mCurrentLocation);\n\t\t\t}\n\t\t}\n\t\t// //// ******* Update database if user added additional info *******\n\t\t// ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tif (!intentExtras.containsKey(\"timeInMillis\")\n\t\t\t\t&& !intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-02T12:39:59Z", "hash_sni": "05689e77b163674f35512e9c1edb00ac3a717793", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" import android.widget.Chronometer;\n import android.widget.Chronometer.OnChronometerTickListener;\n import android.widget.EditText;\n-import android.widget.ImageView;\n import android.widget.RelativeLayout;\n import android.widget.TextView;\n import android.widget.Toast;"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime File FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLastLocation getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put requestWindowFeature saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526730421656616960, "subject_t": ["BarGraph Integrated"], "comments_t": ["\t\t// ///// ****** No Title Bar ********* ///////// \t\t// or later, or by the code above on earlier versions of the platform. \t\t// /////// \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// //// ******* Update database if user added additional info ******* \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //////********* Get Last most accurate location info ********* \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// //// ****** If audio recording started then stop recording audio \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t\t//TODO  \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// ////// ******** Starts Recording each time activity starts ****** \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// ***** /////// \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// ********** ///////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["beaf7fe9b520d580ed5fa85e5ff296a3bcceb003"], "id": "vinsol/expense-tracker\u000005689e77b163674f35512e9c1edb00ac3a717793\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.widget.TextView.setText(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.app.Activity.finish()#java.io.File.File(java.lang.String)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#<unknown>.getLastLocation()#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#<unknown>.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#android.widget.TextView.getText()#<unknown>.DisplayTime()#android.view.KeyEvent.getRepeatCount()#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.requestWindowFeature(int)#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#<unknown>.isRecording()#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.widget.TextView.setText(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.lang.Long.toString(long) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.app.Activity.finish() java.io.File.File(java.lang.String) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) <unknown>.getLastLocation() android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) <unknown>.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() android.widget.TextView.getText() <unknown>.DisplayTime() android.view.KeyEvent.getRepeatCount() <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.requestWindowFeature(int) android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) <unknown>.isRecording() android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener com.vinsol.expensetracker.utils.DisplayDate android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.StringProcessing com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.util.Log android.app.Activity"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.util.Log;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayDate;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\nimport com.vinsol.expensetracker.utils.StringProcessing;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\tprivate Boolean isChanged = false;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\")) {\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry)) || mEditList.get(5).equals(getString(R.string.unknown))){\n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ****** ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio  ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\tisChanged = true;\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif(mRecordingHelper != null)\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\t\n\t\t\tif(intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\t\tIntent mIntent = new Intent(this, ShowTextActivity.class);\n\t\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t\tBundle tempBundle = new Bundle();\n\t\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\t\tmEditList = new ArrayList<String>();\n\t\t\t\tmEditList.addAll(listOnResult);\n\t\t\t\tmIntent.putExtra(\"textShowBundle\", tempBundle);\n\t\t\t\tsetResult(Activity.RESULT_CANCELED, mIntent);\n\t\t\t}\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, \"\");\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\n\t\t\n\t\t\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,mDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\t\t ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\t\n\t\t\n\t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tBundle mToHighLight = new Bundle();\n\t\t\tmToHighLight.putString(\"toHighLight\", _list.get(DatabaseAdapter.KEY_ID));\n\t\t\tintentExpenseListing.putExtras(mToHighLight);\n\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t} else {\n\t\t\t\n\t\t\tIntent mIntent = new Intent(this, ShowVoiceActivity.class);\n\t\t\tBundle tempBundle = new Bundle();\n\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\tlistOnResult.add(mEditList.get(0));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_TAG));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_AMOUNT));\n\t\t\tif(listOnResult.get(2) == null || listOnResult.get(2) == \"\"){\n\t\t\t\tlistOnResult.set(2, \"?\");\n\t\t\t}\n\t\t\t\n\t\t\tif(!mEditList.get(1).equals(listOnResult.get(1))) {\n\t\t\t\n\t\t\t\tif (listOnResult.get(1) == null || listOnResult.get(1).equals(\"\") || listOnResult.get(1).equals(getString(R.string.unfinished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.finished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.unknown_entry))) {\n\t\t\t\t\tlistOnResult.set(1, getString(R.string.finished_voiceentry));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (mEditList.get(1) == null || mEditList.get(1).equals(\"\") || mEditList.get(1).equals(getString(R.string.unfinished_voiceentry)) || mEditList.get(1).equals(getString(R.string.finished_voiceentry)) || mEditList.get(1).equals(getString(R.string.unknown_entry))) {\n\t\t\t\t\tmEditList.set(1, getString(R.string.finished_voiceentry));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n\t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDateDate(_list.get(DatabaseAdapter.KEY_DATE_TIME)));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(3));\n\t\t\t}\n\t\t\tBoolean isAmountNotEqual = false;\n\t\t\ttry{\n\t\t\t\tisAmountNotEqual = Double.parseDouble(new StringProcessing().getStringDoubleDecimal(listOnResult.get(2))) != Double.parseDouble(mEditList.get(2));\n\t\t\t}catch(Exception e){\n\t\t\t\tisAmountNotEqual = true;\n\t\t\t}\n\t\t\tif((!mEditList.get(1).equals(listOnResult.get(1))) || isAmountNotEqual || isChanged ) {\n\t\t\t\tisChanged = false;\n\t\t\t\tShowVoiceActivity.favID = null;\n\t\t\t\tLog.v(\"isChanged\", isChanged+\" \"+ShowVoiceActivity.favID);\n\t\t\t\tHashMap<String, String> listForFav = new HashMap<String, String>();\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_FAVORITE, \"\");\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_ID, mEditList.get(0));\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.editDatabase(listForFav);\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t} else \n\t\t\t\tif(ShowVoiceActivity.favID == null) {\n\t\t\t\t\tlistOnResult.add(mEditList.get(4));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tLog.v(\"ShowVoiceActivity.favID\", ShowVoiceActivity.favID+\" fav\");\n\t\t\t\t\tlistOnResult.add(ShowVoiceActivity.favID);\n\t\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(5));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n\t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(6));\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(7));\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList.addAll(listOnResult);\n\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\tmIntent.putExtra(\"voiceShowBundle\", tempBundle);\n\t\t\tsetResult(Activity.RESULT_OK, mIntent);\n\t\t}\n\t\tfinish();\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-14T12:38:56Z", "hash_sni": "fb336e9a1af83b45bba8d95fa92a02e8ae030615", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \t\t\t\t\tlistOnResult.add(mEditList.get(4));\n \t\t\t\t}\n \t\t\t\telse {\n+\t\t\t\t\tLog.v(\"ShowVoiceActivity.favID\", ShowVoiceActivity.favID+\" fav\");\n \t\t\t\t\tlistOnResult.add(ShowVoiceActivity.favID);\n-\t\t\t}\n+\t\t\t\t}\n \t\t\tlistOnResult.add(mEditList.get(5));\n \t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n \t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay Bundle DatabaseAdapter DateHandler DateHelper DisplayDate DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper StringProcessing add addAll addFlags canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLocationDate getLocationDateDate getLong getPlayBackTime getRepeatCount getString getStringArrayList getStringDoubleDecimal getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put putExtra putExtras putString putStringArrayList saveEntry set setBase setClickListeners setContentView setFirstDayOfWeek setGraphicsVoice setOnChronometerTickListener setOnClickListener setResult setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim v"], "_version_": 1526730193043980288, "subject_t": ["Removed bug from favorites and changed view for favorites in show layout"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// ////// ******** Starts Recording each time activity starts ****** /////// \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items ********** ///////// \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// //// ******* Update database if user added additional info *******\t\t /////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t// //// ****** If audio recording started then stop recording audio  ***** /////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["01ff50fd300f5fe2f5d3da40c48da70c176965bc"], "id": "vinsol/expense-tracker\u0000fb336e9a1af83b45bba8d95fa92a02e8ae030615\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.util.Log.v(java.lang.String, <unknown>)#java.util.Calendar.setFirstDayOfWeek(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#java.lang.String.equals(<unknown>)#android.util.Log.v(java.lang.String, <unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#java.lang.Double.parseDouble(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.lang.String.equals(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#<unknown>.getLocationDateDate(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.content.Context.getString(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.set(int, <unknown>)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.Double.parseDouble(<unknown>)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.os.Bundle.putString(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#<unknown>.getLocationDate(<unknown>, java.lang.String)#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.content.Context.getString(<unknown>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#java.lang.String.equals(<unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.Bundle()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#java.lang.String.equals(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setResult(int, android.content.Intent)#android.widget.TextView.getText()#android.content.Intent.putExtras(android.os.Bundle)#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#java.lang.String.equals(java.lang.String)#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.StringProcessing()#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#java.lang.String.equals(java.lang.String)#java.util.ArrayList<java.lang.String>.set(int, <unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.DisplayDate()#<unknown>.isAudioPlaying()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#java.lang.String.equals(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.widget.TextView.getText()#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.view.KeyEvent.getRepeatCount()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.content.Intent.addFlags(int)#android.os.Bundle.Bundle()#android.app.Activity.setResult(int, android.content.Intent)#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#<unknown>.isRecording()#<unknown>.getStringDoubleDecimal(java.lang.String)#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() java.util.ArrayList<java.lang.String>.add(java.lang.String) android.util.Log.v(java.lang.String, <unknown>) java.util.Calendar.setFirstDayOfWeek(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) java.lang.String.equals(<unknown>) android.util.Log.v(java.lang.String, <unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() java.lang.Double.parseDouble(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.add(<unknown>) java.lang.String.equals(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) <unknown>.getLocationDateDate(<unknown>) android.app.Activity.findViewById(<unknown>) android.content.Context.getString(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.set(int, <unknown>) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.Double.parseDouble(<unknown>) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.os.Bundle.putString(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.util.ArrayList<java.lang.String>.get(int) java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() <unknown>.getLocationDate(<unknown>, java.lang.String) android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) java.lang.String.equals(<unknown>) android.widget.TextView.setText(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.content.Context.getString(<unknown>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) java.lang.String.equals(<unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.Bundle() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) java.lang.String.equals(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setResult(int, android.content.Intent) android.widget.TextView.getText() android.content.Intent.putExtras(android.os.Bundle) <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() java.lang.String.equals(java.lang.String) android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.StringProcessing() android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.util.ArrayList<java.lang.String>.get(int) java.lang.String.equals(java.lang.String) java.util.ArrayList<java.lang.String>.set(int, <unknown>) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.DisplayDate() <unknown>.isAudioPlaying() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() java.lang.String.equals(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) android.widget.TextView.getText() <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.add(java.lang.String) android.view.KeyEvent.getRepeatCount() java.util.ArrayList<java.lang.String>.add(<unknown>) android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.ArrayList<java.lang.String>.ArrayList, String() android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.content.Intent.addFlags(int) android.os.Bundle.Bundle() android.app.Activity.setResult(int, android.content.Intent) android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) <unknown>.isRecording() <unknown>.getStringDoubleDecimal(java.lang.String) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "songbo", "repo_sni": "problemo55/Multiwii-Remote", "imports_t": ["com.multiwii.Utilities.Utilities android.os.CountDownTimer com.multiwii.communication.CommunicationMode android.os.Message android.os.Handler android.util.Log java.lang.ref.WeakReference com.multiwii.communication.Communication"], "email_sni": "sbo@zju.edu.cn", "contents_t": ["package com.multiwii.multiwiiremote;\n\nimport java.lang.ref.WeakReference;\n\nimport com.multiwii.Utilities.Utilities;\nimport com.multiwii.communication.Communication;\nimport com.multiwii.communication.CommunicationMode;\n\nimport android.os.CountDownTimer;\nimport android.os.Handler;\nimport android.os.Message;\nimport android.util.Log;\n\npublic class MainActivityCommunicationHandler extends Handler {\n\t    private final WeakReference<MainActivity> mActivity;\n\n\t    public MainActivityCommunicationHandler(MainActivity activity) {\n\t      mActivity = new WeakReference<MainActivity>(activity);\n\t    }\n\t\t@Override\n\t\tpublic void handleMessage(Message msg) {\n\t\t\tfinal MainActivity myNewActivity = mActivity.get();\n\t\t\tif(myNewActivity != null)\n\t\t\tswitch (msg.what) {\n\t\t\tcase Communication.MESSAGE_STATE_CHANGE:\n\t\t\t\tswitch (msg.arg1) {\n\t\t\t\t\tcase Communication.STATE_CONNECTED:\n\t\t\t\t\t\tmyNewActivity.setStatus(\"Connected\");\n\t\t\t\t\t\tif(myNewActivity.app.comMode == CommunicationMode.WIFI)\n\t\t\t\t\t\t\t new CountDownTimer(5000, 10) {\n\t\t\t\t\t\t\t     public void onTick(long millisUntilFinished ) {\n\t\t\t\t\t\t\t    \t myNewActivity.setStatus(millisUntilFinished + \"\");\n\t\t\t\t\t\t\t         }\n\t\t\t\t\t\t\t     public void onFinish() {\n\t\t\t\t\t\t\t    \t /*if(myNewActivity.isCamera)\n\t\t\t\t\t\t\t    \t myNewActivity.startWebCam();*/\n\t\t\t\t\t\t\t    \t myNewActivity.setStatus(\"Connected\");\n\t\t\t\t\t\t\t     }\n\t\t\t\t\t\t\t  }.start();\n\t\t\t\t\t break;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase App.SENSORSCHANGED:\n\t\t\t\tmyNewActivity.onSensorsStateChangeRotate();\n\t\t\t\tbreak;\n\t\t\tcase Communication.MESSAGE_TOAST:\n\t\t\t\tUtilities.showToast(msg.getData().getString(Communication.TOAST), myNewActivity);\n\t\t\t\tbreak;\n\t\t\tcase 7: //Update UI\n\t\t\t\tmyNewActivity.UpdateUI();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t};\n"], "body_t": ["<empty>"], "date_tdt": "2015-05-02T15:48:00Z", "hash_sni": "4c637223fe2439795e31cf64292b8872690f1ee0", "name_sni": "MultiwiiRemote/src/com/multiwii/multiwiiremote/MainActivityCommunicationHandler.java", "patch_t": [" import android.os.CountDownTimer;\n import android.os.Handler;\n import android.os.Message;\n+import android.util.Log;\n \n public class MainActivityCommunicationHandler extends Handler {\n \t    private final WeakReference<MainActivity> mActivity;\n@@ -40,7 +41,7 @@ public class MainActivityCommunicationHandler extends Handler {\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase App.SENSORSCHANGED:\n-\t\t\t\tmyNewActivity.onSensorsStateChangeMagAcc();\n+\t\t\t\tmyNewActivity.onSensorsStateChangeRotate();\n \t\t\t\tbreak;\n \t\t\tcase Communication.MESSAGE_TOAST:\n \t\t\t\tUtilities.showToast(msg.getData().getString(Communication.TOAST), myNewActivity);"], "score": 1.0, "methods_t": ["CountDownTimer UpdateUI WeakReference, MainActivity get getData getString onSensorsStateChangeRotate setStatus showToast start"], "_version_": 1526728975130296320, "subject_t": ["control UVA via phone attitude"], "comments_t": ["/*if(myNewActivity.isCamera)\nmyNewActivity.startWebCam();*/\n \t\t\tcase 7: //Update UI"], "parents_ss": ["33ef959c49b6f74c0ed9fd85e8d472c7ccbe3cda"], "id": "problemo55/Multiwii-Remote\u00004c637223fe2439795e31cf64292b8872690f1ee0\u0000MultiwiiRemote/src/com/multiwii/multiwiiremote/MainActivityCommunicationHandler.java", "callsites_cs": "<unknown>.setStatus(java.lang.String)#java.lang.ref.WeakReference<com.multiwii.multiwiiremote.MainActivity>.WeakReference, MainActivity(com.multiwii.multiwiiremote.MainActivity)#<unknown>.showToast(<unknown>, com.multiwii.multiwiiremote.MainActivity)#.CountDownTimer(int, int)#android.os.Bundle.getString(<unknown>)#android.os.CountDownTimer.start()#<unknown>.setStatus(java.lang.String)#<unknown>.UpdateUI()#android.os.Message.getData()#<unknown>.setStatus(java.lang.String)#<unknown>.get()#<unknown>.onSensorsStateChangeRotate()", "callsites_t": ["<unknown>.setStatus(java.lang.String) java.lang.ref.WeakReference<com.multiwii.multiwiiremote.MainActivity>.WeakReference, MainActivity(com.multiwii.multiwiiremote.MainActivity) <unknown>.showToast(<unknown>, com.multiwii.multiwiiremote.MainActivity) .CountDownTimer(int, int) android.os.Bundle.getString(<unknown>) android.os.CountDownTimer.start() <unknown>.setStatus(java.lang.String) <unknown>.UpdateUI() android.os.Message.getData() <unknown>.setStatus(java.lang.String) <unknown>.get() <unknown>.onSensorsStateChangeRotate()"]}, {"user_sni": "Alberto Salmer\u00f3n Moreno", "repo_sni": "berti/CherryBerry", "imports_t": ["android.os.CountDownTimer android.content.res.Resources android.app.AlarmManager android.app.Notification android.content.Context android.os.IBinder android.content.Intent android.app.NotificationManager android.app.Service java.util.Date android.app.PendingIntent android.text.format.DateFormat android.os.Binder android.content.SharedPreferences android.util.Log"], "email_sni": "alberto.salmeron@gmail.com", "contents_t": ["/*\n * Copyright 2012 Alberto Salmer\u00f3n Moreno\n * \n * This file is part of CherryBerry - https://github.com/berti/CherryBerry.\n * \n * \u201cPomodoro Technique\u00ae is a registered trademark of Francesco Cirillo. This\n * application is not affiliated by, associated with nor endorsed by the\n * Pomodoro Technique\u00ae or Francesco Cirillo.\n * \n * CherryBerry is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CherryBerry is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with CherryBerry.  If not, see <http://www.gnu.org/licenses/>.\n */\n\npackage com.primoberti.cherryberry;\n\nimport java.util.Date;\n\nimport android.app.AlarmManager;\nimport android.app.Notification;\nimport android.app.NotificationManager;\nimport android.app.PendingIntent;\nimport android.app.Service;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.content.res.Resources;\nimport android.os.Binder;\nimport android.os.CountDownTimer;\nimport android.os.IBinder;\nimport android.text.format.DateFormat;\nimport android.util.Log;\n\n/**\n * Timer-related functionality to control a pomodoro.\n * \n * @author berti\n */\npublic class PomodoroTimerService extends Service {\n\n\t/* Public enumerations ********************* */\n\n\tpublic enum Status {\n\t\tIDLE, POMODORO_RUNNING, POMODORO_FINISHED, BREAK_RUNNING, BREAK_FINISHED\n\t};\n\n\t/* Public constants ************************ */\n\n\tpublic final static String BREAK_FINISHED = \"com.primoberti.cherryberry.BREAK_FINISHED\";\n\n\tpublic final static String POMODORO_FINISHED = \"com.primoberti.cherryberry.POMODORO_FINISHED\";\n\n\t/* Private constants *********************** */\n\n\tprivate final static String SHARED_PREFS = PomodoroTimerService.class\n\t\t\t+ \"_SHARED_PREFS\";\n\n\tprivate final static String PREF_STATUS = \"status\";\n\n\tprivate final static String PREF_TIMER_START = \"timerStart\";\n\n\tprivate final static String PREF_TIMER_END = \"timerEnd\";\n\n\t/* Private fields ************************** */\n\n\tprivate Status status;\n\n\tprivate InternalTimer timer;\n\n\tprivate long timerStart;\n\n\tprivate long timerEnd;\n\n\tprivate PomodoroTimerListener listener;\n\n\tprivate IBinder binder = new LocalBinder();\n\n\t/* Public methods ************************** */\n\n\t@Override\n\tpublic IBinder onBind(Intent intent) {\n\t\tLog.d(\"PomodoroTimerService\", \"onBind\");\n\n\t\treturn binder;\n\t}\n\n\t@Override\n\tpublic void onCreate() {\n\t\tLog.d(\"PomodoroTimerService\", \"onCreate\");\n\n\t\trestoreState();\n\t}\n\n\t@Override\n\tpublic void onDestroy() {\n\t\tLog.d(\"PomodoroTimerService\", \"onDestroy\");\n\n\t\tcancelTimer();\n\n\t\tsuper.onDestroy();\n\t}\n\n\t/**\n\t * Start a pomodoro with the default pomodoro duration.\n\t * \n\t * @see #setPomodoroDuration(long)\n\t */\n\tpublic void startPomodoro() {\n\t\tstartPomodoro(PreferencesHelper.getPomodoroDuration(this));\n\t}\n\n\t/**\n\t * Start a pomodoro count down timer with the remaining time, but don't set\n\t * any alarm. Use this to continue an existing count down after the timer\n\t * was shutdown.\n\t * \n\t * @param millis the remaining duration of the pomodoro\n\t */\n\tpublic void continuePomodoro(long millis) {\n\t\tstartPomodoroTimer(millis);\n\t}\n\n\t/**\n\t * Start a break with the default break duration.\n\t * \n\t * @see #setBreakDuration(long)\n\t */\n\tpublic void startBreak() {\n\t\tstartBreak(PreferencesHelper.getBreakDuration(this));\n\t}\n\n\t/**\n\t * Start a break count down timer with the remaining time, but don't set any\n\t * alarm. Use this to continue an existing count down after the timer was\n\t * shutdown.\n\t * \n\t * @param millis the remaining duration of the break\n\t */\n\tpublic void continueBreak(long millis) {\n\t\tstartBreakTimer(millis);\n\t}\n\n\t/**\n\t * Cancels the current count down timer.\n\t */\n\tpublic void stop() {\n\t\tcancelTimer();\n\t\tcancelAlarms();\n\t\thidePersistentNotification();\n\n\t\tsetIdle();\n\t}\n\n\tpublic void skip() {\n\t\tstop();\n\t}\n\n\tpublic Status getStatus() {\n\t\treturn status;\n\t}\n\n\tpublic boolean isRunning() {\n\t\treturn status == Status.POMODORO_RUNNING\n\t\t\t\t|| status == Status.BREAK_RUNNING;\n\t}\n\n\t/**\n\t * Returns the start time of the current count down timer.\n\t * \n\t * @return start time of the current count down timer\n\t */\n\tpublic long getTimerStart() {\n\t\treturn timerStart;\n\t}\n\n\t/**\n\t * Returns the end time of the current count down timer.\n\t * \n\t * @return start time of the current count down timer\n\t */\n\tpublic long getTimerEnd() {\n\t\treturn timerEnd;\n\t}\n\n\tpublic PomodoroTimerListener getListener() {\n\t\treturn listener;\n\t}\n\n\tpublic void setListener(PomodoroTimerListener listener) {\n\t\tthis.listener = listener;\n\n\t\tif (timer != null) {\n\t\t\ttimer.setListener(listener);\n\t\t}\n\t}\n\n\t/* Private methods ************************* */\n\n\t/**\n\t * Start a pomodoro count down timer.\n\t * \n\t * @param millis the duration of the pomodoro\n\t */\n\tprivate void startPomodoro(long millis) {\n\t\tstartPomodoroTimer(millis);\n\t\tsetPomodoroAlarm(millis);\n\t\tshowPersistentPomodoroNotification(millis);\n\t}\n\n\t/**\n\t * Start a break countdown timer.\n\t * \n\t * @param millis the duration of the break\n\t */\n\tprivate void startBreak(long millis) {\n\t\tif (status != Status.POMODORO_FINISHED) {\n\t\t\tthrow new IllegalStateException(\"Can't start break in \" + status\n\t\t\t\t\t+ \" state\");\n\t\t}\n\n\t\tstartBreakTimer(millis);\n\t\tsetBreakAlarm(millis);\n\t\tshowPersistentBreakNotification(millis);\n\t}\n\n\tprivate void saveState() {\n\t\tLog.d(\"PomodoroTimerService\", \"saveState \" + status.toString());\n\n\t\tSharedPreferences preferences = getSharedPreferences(SHARED_PREFS,\n\t\t\t\tMODE_PRIVATE);\n\t\tSharedPreferences.Editor editor = preferences.edit();\n\n\t\teditor.putInt(PREF_STATUS, status.ordinal());\n\t\teditor.putLong(PREF_TIMER_START, timerStart);\n\t\teditor.putLong(PREF_TIMER_END, timerEnd);\n\n\t\teditor.commit();\n\t}\n\n\tprivate void restoreState() {\n\t\tSharedPreferences preferences = getSharedPreferences(SHARED_PREFS,\n\t\t\t\tMODE_PRIVATE);\n\n\t\tstatus = Status.values()[preferences.getInt(PREF_STATUS,\n\t\t\t\tStatus.IDLE.ordinal())];\n\t\ttimerStart = preferences.getLong(PREF_TIMER_START, 0);\n\t\ttimerEnd = preferences.getLong(PREF_TIMER_END, 0);\n\n\t\tLog.d(\"PomodoroTimerService\", \"restoreState \" + status.toString());\n\n\t\tif (status == Status.POMODORO_RUNNING) {\n\t\t\tif (timerEnd > System.currentTimeMillis()) {\n\t\t\t\tcontinuePomodoro(timerEnd - System.currentTimeMillis());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstatus = Status.POMODORO_FINISHED;\n\t\t\t}\n\t\t}\n\t\telse if (status == Status.BREAK_RUNNING) {\n\t\t\tif (timerEnd > System.currentTimeMillis()) {\n\t\t\t\tcontinueBreak(timerEnd - System.currentTimeMillis());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstatus = Status.BREAK_FINISHED;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void cancelTimer() {\n\t\tif (timer != null) {\n\t\t\ttimer.cancel();\n\t\t\ttimer = null;\n\t\t}\n\t}\n\n\tprivate void startPomodoroTimer(long millis) {\n\t\tif (millis > 0) {\n\t\t\tstartTimer(millis);\n\t\t\tstatus = Status.POMODORO_RUNNING;\n\n\t\t\tsaveState();\n\t\t}\n\t}\n\n\tprivate void startBreakTimer(long millis) {\n\t\tif (millis > 0) {\n\t\t\tstartTimer(millis);\n\t\t\tstatus = Status.BREAK_RUNNING;\n\n\t\t\tsaveState();\n\t\t}\n\t}\n\n\tprivate void startTimer(long millis) {\n\t\tif (isRunning()) {\n\t\t\tcancelTimer();\n\t\t}\n\n\t\ttimer = new InternalTimer(millis, 1000, listener);\n\t\ttimer.start();\n\n\t\ttimerStart = System.currentTimeMillis();\n\t\ttimerEnd = timerStart + millis;\n\t}\n\n\t/**\n\t * Sets an alarm to notify {@link NotificationService} of a finished\n\t * pomodoro.\n\t * \n\t * @param millis duration of the pomodoro\n\t */\n\tprivate void setPomodoroAlarm(long millis) {\n\t\tsetAlarm(millis, PomodoroTimerService.POMODORO_FINISHED);\n\t}\n\n\t/**\n\t * Sets an alarm to notify {@link NotificationService} of a finished break.\n\t * \n\t * @param millis duration of the break\n\t */\n\tprivate void setBreakAlarm(long millis) {\n\t\tsetAlarm(millis, PomodoroTimerService.BREAK_FINISHED);\n\t}\n\n\t/**\n\t * Sets an alarm to send the given action to {@link NotificationService}.\n\t * \n\t * @param millis duration of the pomodoro\n\t * @param action action to send to NotificationService\n\t */\n\tprivate void setAlarm(long millis, String action) {\n\t\tlong finishTime = System.currentTimeMillis() + millis;\n\n\t\tIntent intent = new Intent(this, NotificationService.class);\n\t\tintent.setAction(action);\n\t\tPendingIntent pendingIntent = PendingIntent.getService(this, 0, intent,\n\t\t\t\t0);\n\n\t\tAlarmManager alarmManager = (AlarmManager) this\n\t\t\t\t.getSystemService(Context.ALARM_SERVICE);\n\t\talarmManager.set(AlarmManager.RTC_WAKEUP, finishTime, pendingIntent);\n\t}\n\n\tprivate void cancelAlarms() {\n\t\tcancelAlarm(POMODORO_FINISHED);\n\t\tcancelAlarm(BREAK_FINISHED);\n\t}\n\n\tprivate void cancelAlarm(String action) {\n\t\tIntent intent = new Intent(this, NotificationService.class);\n\t\tintent.setAction(action);\n\t\tPendingIntent pendingIntent = PendingIntent.getService(this, 0, intent,\n\t\t\t\t0);\n\n\t\tAlarmManager alarmManager = (AlarmManager) this\n\t\t\t\t.getSystemService(Context.ALARM_SERVICE);\n\t\talarmManager.cancel(pendingIntent);\n\t}\n\n\tprivate void showPersistentPomodoroNotification(long millis) {\n\t\tshowPersistentNotification(NotificationService.NOTIFICATION_ID,\n\t\t\t\tR.string.notification_title_pomodoro_running,\n\t\t\t\tR.string.app_name,\n\t\t\t\tR.string.notification_text_pomodoro_running, millis);\n\t}\n\n\tprivate void showPersistentBreakNotification(long millis) {\n\t\tshowPersistentNotification(NotificationService.NOTIFICATION_ID,\n\t\t\t\tR.string.notification_title_break_running, R.string.app_name,\n\t\t\t\tR.string.notification_text_break_running, millis);\n\t}\n\n\tprivate void showPersistentNotification(int id, int tickerTextId,\n\t\t\tint contentTitleId, int contentTextId, long millis) {\n\t\tlong finishTime = System.currentTimeMillis() + millis;\n\n\t\tResources resources = getResources();\n\n\t\tString ns = Context.NOTIFICATION_SERVICE;\n\t\tNotificationManager mNotificationManager = (NotificationManager) getSystemService(ns);\n\n\t\tint icon = R.drawable.ic_stat_generic;\n\t\tlong when = System.currentTimeMillis();\n\t\tNotification notification = new Notification(icon,\n\t\t\t\tresources.getString(tickerTextId), when);\n\t\tnotification.flags |= Notification.FLAG_ONGOING_EVENT;\n\n\t\tDate date = new Date(finishTime);\n\t\tjava.text.DateFormat dateFormat = DateFormat\n\t\t\t\t.getTimeFormat(getApplicationContext());\n\t\tString contentTextFormat = getResources().getString(contentTextId);\n\t\tString contentText2 = String.format(contentTextFormat,\n\t\t\t\tdateFormat.format(date));\n\n\t\tContext context = getApplicationContext();\n\t\tIntent notificationIntent = new Intent(this, CherryBerryActivity.class);\n\t\tPendingIntent contentIntent = PendingIntent.getActivity(this, 0,\n\t\t\t\tnotificationIntent, 0);\n\t\tnotification.setLatestEventInfo(context,\n\t\t\t\tresources.getString(contentTitleId), contentText2,\n\t\t\t\tcontentIntent);\n\n\t\tmNotificationManager.notify(id, notification);\n\t}\n\n\tprivate void hidePersistentNotification() {\n\t\tString ns = Context.NOTIFICATION_SERVICE;\n\t\tNotificationManager mNotificationManager = (NotificationManager) getSystemService(ns);\n\n\t\tmNotificationManager.cancel(NotificationService.NOTIFICATION_ID);\n\t}\n\n\tprivate void setIdle() {\n\t\tLog.d(\"PomodoroTimerService\", \"setIdle\");\n\n\t\tstatus = Status.IDLE;\n\t\ttimerStart = 0;\n\t\ttimerEnd = 0;\n\n\t\tsaveState();\n\t}\n\n\t/**\n\t * Returns the time instant in which the period with the given duration will\n\t * end. Usefull for setting the timer expire time based on its duration.\n\t */\n\tprivate long finishTime(long duration) {\n\t\treturn System.currentTimeMillis() + duration;\n\t}\n\n\t/* Public inner classes ******************** */\n\n\tpublic class LocalBinder extends Binder {\n\n\t\tPomodoroTimerService getService() {\n\t\t\treturn PomodoroTimerService.this;\n\t\t}\n\n\t}\n\n\t/* Private inner classes ******************* */\n\n\tprivate class InternalTimer extends CountDownTimer {\n\n\t\tprivate PomodoroTimerListener listener;\n\n\t\tpublic InternalTimer(long millisInFuture, long countDownInterval,\n\t\t\t\tPomodoroTimerListener listener) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\n\t\t\tthis.listener = listener;\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tif (status == Status.POMODORO_RUNNING) {\n\t\t\t\tstatus = Status.POMODORO_FINISHED;\n\t\t\t\tif (listener != null) {\n\t\t\t\t\tlistener.onPomodoroFinish(PomodoroTimerService.this);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (status == Status.BREAK_RUNNING) {\n\t\t\t\tstatus = Status.BREAK_FINISHED;\n\t\t\t\tif (listener != null) {\n\t\t\t\t\tlistener.onBreakFinish(PomodoroTimerService.this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tif (listener != null) {\n\t\t\t\tlistener.onTick(PomodoroTimerService.this, millisUntilFinished);\n\t\t\t}\n\t\t}\n\n\t\tpublic PomodoroTimerListener getListener() {\n\t\t\treturn listener;\n\t\t}\n\n\t\tpublic void setListener(PomodoroTimerListener listener) {\n\t\t\tthis.listener = listener;\n\t\t}\n\n\t}\n\n}\n"], "body_t": ["<empty>"], "date_tdt": "2012-07-30T22:53:03Z", "hash_sni": "7f175d9b042d75b21c0246b1211b3232150beb36", "name_sni": "src/com/primoberti/cherryberry/PomodoroTimerService.java", "patch_t": [" \t\tString ns = Context.NOTIFICATION_SERVICE;\n \t\tNotificationManager mNotificationManager = (NotificationManager) getSystemService(ns);\n \n-\t\tint icon = R.drawable.ic_notification;\n+\t\tint icon = R.drawable.ic_stat_generic;\n \t\tlong when = System.currentTimeMillis();\n \t\tNotification notification = new Notification(icon,\n \t\t\t\tresources.getString(tickerTextId), when);"], "score": 1.0, "methods_t": ["Date IllegalStateException Intent InternalTimer LocalBinder Notification cancel cancelAlarm cancelAlarms cancelTimer commit continueBreak continuePomodoro currentTimeMillis d edit format getActivity getApplicationContext getBreakDuration getInt getLong getPomodoroDuration getResources getService getSharedPreferences getString getSystemService getTimeFormat hidePersistentNotification isRunning notify onBreakFinish onPomodoroFinish onTick ordinal putInt putLong restoreState saveState set setAction setAlarm setBreakAlarm setIdle setLatestEventInfo setListener setPomodoroAlarm showPersistentBreakNotification showPersistentNotification showPersistentPomodoroNotification start startBreak startBreakTimer startPomodoro startPomodoroTimer startTimer stop toString values"], "_version_": 1526728416509820928, "subject_t": ["Updated notification icon, with new styles, sizes"], "comments_t": ["/** \n * Start a break countdown timer.\n * @param millis the duration of the break\n */\n /* Public methods ************************** */\n /** \n * Sets an alarm to send the given action to  {@link NotificationService}.\n * @param millis duration of the pomodoro\n * @param action action to send to NotificationService\n */\n /* Private constants *********************** */\n /* Private methods ************************* */\n /** \n * Start a pomodoro count down timer with the remaining time, but don't set any alarm. Use this to continue an existing count down after the timer was shutdown.\n * @param millis the remaining duration of the pomodoro\n */\n /* Public constants ************************ */\n /** \n * Start a pomodoro with the default pomodoro duration.\n * @see #setPomodoroDuration(long)\n */\n /* Private inner classes ******************* */\n /** \n * Returns the time instant in which the period with the given duration will end. Usefull for setting the timer expire time based on its duration.\n */\n /* Public inner classes ******************** */\n /** \n * Cancels the current count down timer.\n */\n /*\n* Copyright 2012 Alberto Salmer\u00f3n Moreno\n*\n* This file is part of CherryBerry - https://github.com/berti/CherryBerry.\n*\n* \u201cPomodoro Technique\u00ae is a registered trademark of Francesco Cirillo. This\n* application is not affiliated by, associated with nor endorsed by the\n* Pomodoro Technique\u00ae or Francesco Cirillo.\n*\n* CherryBerry is free software: you can redistribute it and/or modify\n* it under the terms of the GNU General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* CherryBerry is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU General Public License for more details.\n*\n* You should have received a copy of the GNU General Public License\n* along with CherryBerry.  If not, see <http://www.gnu.org/licenses/>.\n*/\n /** \n * Returns the start time of the current count down timer.\n * @return start time of the current count down timer\n */\n /** \n * Sets an alarm to notify  {@link NotificationService} of a finished break.\n * @param millis duration of the break\n */\n /** \n * Returns the end time of the current count down timer.\n * @return start time of the current count down timer\n */\n /** \n * Sets an alarm to notify  {@link NotificationService} of a finishedpomodoro.\n * @param millis duration of the pomodoro\n */\n /** \n * Timer-related functionality to control a pomodoro.\n * @author berti\n */\n /* Public enumerations ********************* */\n /** \n * Start a pomodoro count down timer.\n * @param millis the duration of the pomodoro\n */\n /* Private fields ************************** */\n /** \n * Start a break count down timer with the remaining time, but don't set any alarm. Use this to continue an existing count down after the timer was shutdown.\n * @param millis the remaining duration of the break\n */\n /** \n * Start a break with the default break duration.\n * @see #setBreakDuration(long)\n */\n"], "parents_ss": ["2e2c5e0097e0a119e7343683e4b1e8cb83d1cb3a"], "id": "berti/CherryBerry\u00007f175d9b042d75b21c0246b1211b3232150beb36\u0000src/com/primoberti/cherryberry/PomodoroTimerService.java", "callsites_cs": "android.content.res.Resources.getString(int)#android.content.SharedPreferences.edit()#android.content.ContextWrapper.getSystemService(java.lang.String)#com.primoberti.cherryberry.PomodoroTimerService.restoreState()#android.content.SharedPreferences.getLong(java.lang.String, int)#<unknown>.values()#<unknown>.ordinal()#<unknown>.ordinal()#<unknown>.toString()#com.primoberti.cherryberry.PomodoroTimerService.continuePomodoro(long)#com.primoberti.cherryberry.PomodoroTimerService.startBreak(<unknown>)#com.primoberti.cherryberry.PomodoroTimerService.startTimer(long)#com.primoberti.cherryberry.PomodoroTimerService.cancelAlarm(java.lang.String)#com.primoberti.cherryberry.PomodoroTimerService.saveState()#com.primoberti.cherryberry.PomodoroTimerService.showPersistentNotification(<unknown>, <unknown>, <unknown>, <unknown>, long)#java.lang.System.currentTimeMillis()#com.primoberti.cherryberry.PomodoroTimerService.startBreakTimer(long)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.System.currentTimeMillis()#java.lang.System.currentTimeMillis()#<unknown>.onPomodoroFinish(com.primoberti.cherryberry.PomodoroTimerService)#android.content.ContextWrapper.getSystemService(java.lang.String)#android.content.Intent.Intent(com.primoberti.cherryberry.PomodoroTimerService, java.lang.Class)#android.content.SharedPreferences.getLong(java.lang.String, int)#android.content.Intent.Intent(com.primoberti.cherryberry.PomodoroTimerService, java.lang.Class)#android.content.Intent.setAction(java.lang.String)#com.primoberti.cherryberry.PomodoroTimerService.setAlarm(long, java.lang.String)#android.content.ContextWrapper.getApplicationContext()#com.primoberti.cherryberry.PomodoroTimerService.isRunning()#<unknown>.getBreakDuration(com.primoberti.cherryberry.PomodoroTimerService)#android.util.Log.d(java.lang.String, <unknown>)#com.primoberti.cherryberry.PomodoroTimerService.showPersistentNotification(<unknown>, <unknown>, <unknown>, <unknown>, long)#java.lang.String.format(java.lang.String, java.lang.String)#com.primoberti.cherryberry.PomodoroTimerService.saveState()#com.primoberti.cherryberry.PomodoroTimerService.showPersistentPomodoroNotification(long)#com.primoberti.cherryberry.PomodoroTimerService.cancelAlarms()#android.app.NotificationManager.notify(int, android.app.Notification)#android.content.ContextWrapper.getSystemService(java.lang.String)#android.os.CountDownTimer.cancel()#com.primoberti.cherryberry.PomodoroTimerService.setBreakAlarm(long)#android.app.Notification.Notification(int, java.lang.String, long)#android.app.AlarmManager.set(int, long, android.app.PendingIntent)#android.text.format.DateFormat.getTimeFormat(android.content.Context)#android.content.SharedPreferences.Editor.commit()#android.util.Log.d(java.lang.String, java.lang.String)#android.util.Log.d(java.lang.String, <unknown>)#java.lang.System.currentTimeMillis()#com.primoberti.cherryberry.PomodoroTimerService.cancelTimer()#android.app.Notification.setLatestEventInfo(android.content.Context, java.lang.String, java.lang.String, android.app.PendingIntent)#<unknown>.toString()#android.content.SharedPreferences.getInt(java.lang.String, <unknown>)#android.content.SharedPreferences.Editor.putLong(java.lang.String, long)#com.primoberti.cherryberry.PomodoroTimerService.startTimer(long)#java.lang.System.currentTimeMillis()#android.app.PendingIntent.getActivity(com.primoberti.cherryberry.PomodoroTimerService, int, android.content.Intent, int)#com.primoberti.cherryberry.PomodoroTimerService.setPomodoroAlarm(long)#<unknown>.onTick(com.primoberti.cherryberry.PomodoroTimerService, long)#android.app.PendingIntent.getService(com.primoberti.cherryberry.PomodoroTimerService, int, android.content.Intent, int)#com.primoberti.cherryberry.PomodoroTimerService.saveState()#com.primoberti.cherryberry.PomodoroTimerService.hidePersistentNotification()#android.app.NotificationManager.cancel(<unknown>)#com.primoberti.cherryberry.PomodoroTimerService.InternalTimer.InternalTimer(long, int, com.primoberti.cherryberry.PomodoroTimerListener)#android.content.ContextWrapper.getSystemService(java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#com.primoberti.cherryberry.PomodoroTimerService.stop()#android.content.res.Resources.getString(int)#java.text.DateFormat.format(java.util.Date)#com.primoberti.cherryberry.PomodoroTimerService.InternalTimer.setListener(com.primoberti.cherryberry.PomodoroTimerListener)#<unknown>.getPomodoroDuration(com.primoberti.cherryberry.PomodoroTimerService)#android.content.ContextWrapper.getSharedPreferences(java.lang.String, int)#com.primoberti.cherryberry.PomodoroTimerService.showPersistentBreakNotification(long)#com.primoberti.cherryberry.PomodoroTimerService.continueBreak(long)#com.primoberti.cherryberry.PomodoroTimerService.cancelTimer()#com.primoberti.cherryberry.PomodoroTimerService.LocalBinder.LocalBinder()#android.os.CountDownTimer.start()#com.primoberti.cherryberry.PomodoroTimerService.cancelAlarm(java.lang.String)#com.primoberti.cherryberry.PomodoroTimerService.startPomodoro(<unknown>)#android.content.ContextWrapper.getSharedPreferences(java.lang.String, int)#android.content.SharedPreferences.Editor.putInt(java.lang.String, <unknown>)#com.primoberti.cherryberry.PomodoroTimerService.startBreakTimer(long)#com.primoberti.cherryberry.PomodoroTimerService.cancelTimer()#android.content.SharedPreferences.Editor.putLong(java.lang.String, long)#java.util.Date.Date(long)#android.util.Log.d(java.lang.String, java.lang.String)#com.primoberti.cherryberry.PomodoroTimerService.startPomodoroTimer(long)#android.content.Intent.setAction(java.lang.String)#android.content.Intent.Intent(com.primoberti.cherryberry.PomodoroTimerService, java.lang.Class)#android.content.res.Resources.getString(int)#com.primoberti.cherryberry.PomodoroTimerService.setIdle()#java.lang.IllegalStateException.IllegalStateException(<unknown>)#android.content.ContextWrapper.getResources()#com.primoberti.cherryberry.PomodoroTimerService.setAlarm(long, java.lang.String)#com.primoberti.cherryberry.PomodoroTimerService.startPomodoroTimer(long)#android.app.PendingIntent.getService(com.primoberti.cherryberry.PomodoroTimerService, int, android.content.Intent, int)#android.app.AlarmManager.cancel(android.app.PendingIntent)#<unknown>.onBreakFinish(com.primoberti.cherryberry.PomodoroTimerService)", "callsites_t": ["android.content.res.Resources.getString(int) android.content.SharedPreferences.edit() android.content.ContextWrapper.getSystemService(java.lang.String) com.primoberti.cherryberry.PomodoroTimerService.restoreState() android.content.SharedPreferences.getLong(java.lang.String, int) <unknown>.values() <unknown>.ordinal() <unknown>.ordinal() <unknown>.toString() com.primoberti.cherryberry.PomodoroTimerService.continuePomodoro(long) com.primoberti.cherryberry.PomodoroTimerService.startBreak(<unknown>) com.primoberti.cherryberry.PomodoroTimerService.startTimer(long) com.primoberti.cherryberry.PomodoroTimerService.cancelAlarm(java.lang.String) com.primoberti.cherryberry.PomodoroTimerService.saveState() com.primoberti.cherryberry.PomodoroTimerService.showPersistentNotification(<unknown>, <unknown>, <unknown>, <unknown>, long) java.lang.System.currentTimeMillis() com.primoberti.cherryberry.PomodoroTimerService.startBreakTimer(long) android.util.Log.d(java.lang.String, java.lang.String) java.lang.System.currentTimeMillis() java.lang.System.currentTimeMillis() <unknown>.onPomodoroFinish(com.primoberti.cherryberry.PomodoroTimerService) android.content.ContextWrapper.getSystemService(java.lang.String) android.content.Intent.Intent(com.primoberti.cherryberry.PomodoroTimerService, java.lang.Class) android.content.SharedPreferences.getLong(java.lang.String, int) android.content.Intent.Intent(com.primoberti.cherryberry.PomodoroTimerService, java.lang.Class) android.content.Intent.setAction(java.lang.String) com.primoberti.cherryberry.PomodoroTimerService.setAlarm(long, java.lang.String) android.content.ContextWrapper.getApplicationContext() com.primoberti.cherryberry.PomodoroTimerService.isRunning() <unknown>.getBreakDuration(com.primoberti.cherryberry.PomodoroTimerService) android.util.Log.d(java.lang.String, <unknown>) com.primoberti.cherryberry.PomodoroTimerService.showPersistentNotification(<unknown>, <unknown>, <unknown>, <unknown>, long) java.lang.String.format(java.lang.String, java.lang.String) com.primoberti.cherryberry.PomodoroTimerService.saveState() com.primoberti.cherryberry.PomodoroTimerService.showPersistentPomodoroNotification(long) com.primoberti.cherryberry.PomodoroTimerService.cancelAlarms() android.app.NotificationManager.notify(int, android.app.Notification) android.content.ContextWrapper.getSystemService(java.lang.String) android.os.CountDownTimer.cancel() com.primoberti.cherryberry.PomodoroTimerService.setBreakAlarm(long) android.app.Notification.Notification(int, java.lang.String, long) android.app.AlarmManager.set(int, long, android.app.PendingIntent) android.text.format.DateFormat.getTimeFormat(android.content.Context) android.content.SharedPreferences.Editor.commit() android.util.Log.d(java.lang.String, java.lang.String) android.util.Log.d(java.lang.String, <unknown>) java.lang.System.currentTimeMillis() com.primoberti.cherryberry.PomodoroTimerService.cancelTimer() android.app.Notification.setLatestEventInfo(android.content.Context, java.lang.String, java.lang.String, android.app.PendingIntent) <unknown>.toString() android.content.SharedPreferences.getInt(java.lang.String, <unknown>) android.content.SharedPreferences.Editor.putLong(java.lang.String, long) com.primoberti.cherryberry.PomodoroTimerService.startTimer(long) java.lang.System.currentTimeMillis() android.app.PendingIntent.getActivity(com.primoberti.cherryberry.PomodoroTimerService, int, android.content.Intent, int) com.primoberti.cherryberry.PomodoroTimerService.setPomodoroAlarm(long) <unknown>.onTick(com.primoberti.cherryberry.PomodoroTimerService, long) android.app.PendingIntent.getService(com.primoberti.cherryberry.PomodoroTimerService, int, android.content.Intent, int) com.primoberti.cherryberry.PomodoroTimerService.saveState() com.primoberti.cherryberry.PomodoroTimerService.hidePersistentNotification() android.app.NotificationManager.cancel(<unknown>) com.primoberti.cherryberry.PomodoroTimerService.InternalTimer.InternalTimer(long, int, com.primoberti.cherryberry.PomodoroTimerListener) android.content.ContextWrapper.getSystemService(java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) com.primoberti.cherryberry.PomodoroTimerService.stop() android.content.res.Resources.getString(int) java.text.DateFormat.format(java.util.Date) com.primoberti.cherryberry.PomodoroTimerService.InternalTimer.setListener(com.primoberti.cherryberry.PomodoroTimerListener) <unknown>.getPomodoroDuration(com.primoberti.cherryberry.PomodoroTimerService) android.content.ContextWrapper.getSharedPreferences(java.lang.String, int) com.primoberti.cherryberry.PomodoroTimerService.showPersistentBreakNotification(long) com.primoberti.cherryberry.PomodoroTimerService.continueBreak(long) com.primoberti.cherryberry.PomodoroTimerService.cancelTimer() com.primoberti.cherryberry.PomodoroTimerService.LocalBinder.LocalBinder() android.os.CountDownTimer.start() com.primoberti.cherryberry.PomodoroTimerService.cancelAlarm(java.lang.String) com.primoberti.cherryberry.PomodoroTimerService.startPomodoro(<unknown>) android.content.ContextWrapper.getSharedPreferences(java.lang.String, int) android.content.SharedPreferences.Editor.putInt(java.lang.String, <unknown>) com.primoberti.cherryberry.PomodoroTimerService.startBreakTimer(long) com.primoberti.cherryberry.PomodoroTimerService.cancelTimer() android.content.SharedPreferences.Editor.putLong(java.lang.String, long) java.util.Date.Date(long) android.util.Log.d(java.lang.String, java.lang.String) com.primoberti.cherryberry.PomodoroTimerService.startPomodoroTimer(long) android.content.Intent.setAction(java.lang.String) android.content.Intent.Intent(com.primoberti.cherryberry.PomodoroTimerService, java.lang.Class) android.content.res.Resources.getString(int) com.primoberti.cherryberry.PomodoroTimerService.setIdle() java.lang.IllegalStateException.IllegalStateException(<unknown>) android.content.ContextWrapper.getResources() com.primoberti.cherryberry.PomodoroTimerService.setAlarm(long, java.lang.String) com.primoberti.cherryberry.PomodoroTimerService.startPomodoroTimer(long) android.app.PendingIntent.getService(com.primoberti.cherryberry.PomodoroTimerService, int, android.content.Intent, int) android.app.AlarmManager.cancel(android.app.PendingIntent) <unknown>.onBreakFinish(com.primoberti.cherryberry.PomodoroTimerService)"]}, {"user_sni": "Alok Vaish", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File android.view.Window com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity android.widget.ImageView java.util.Calendar"], "email_sni": "alok@alok-PC.(none)", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate ImageView show_text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.show_text_voice_camera_voice_details_separator);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t}\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tnew ShowDateHandler(this, mCalendar);\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id\n\t\t\t\t\t\t+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button\n\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(new DisplayTime()\n\t\t\t\t\t\t\t\t\t.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tnew FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG)\n\t\t\t\t\t.show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_voice_details_separator\n\t\t\t\t.setVisibility(View.VISIBLE);\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivity(editIntent);\n\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-05T10:06:43Z", "hash_sni": "7b3bcf773839728f143405476891b1e8237cd2f1", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" \tprivate Button show_text_voice_camera_stop_button;\n \tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n \tprivate MyCount countDownTimer;\n-\tprivate ImageView show_text_voice_camera_edit;\n+\tprivate Button show_text_voice_camera_edit;\n \n \tprivate AudioPlay mAudioPlay;\n \tprivate Long _id = null;\n@@ -57,7 +57,7 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n \t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n \t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n-\t\tshow_text_voice_camera_edit = (ImageView) findViewById(R.id.show_text_voice_camera_edit);\n+\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n \n \t\tmDatabaseAdapter = new DatabaseAdapter(this);\n "], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getPlayBackTime getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putExtra requestWindowFeature setContentView setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack stop stopPlayBack toString updateUI"], "_version_": 1526729502869159936, "subject_t": ["Show Page: Update button and related code removed"], "comments_t": ["\t\t// //// ****** If audio recording started then stop recording audio \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t// ***** /////// \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["d7419a803b011b4b026bab3eac20e3865f43a8ca"], "id": "vinsol/expense-tracker\u00007b3bcf773839728f143405476891b1e8237cd2f1\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.widget.Toast.show()#<unknown>.isAudioPlaying()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.open()#android.content.Context.getString(<unknown>)#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#android.app.Activity.requestWindowFeature(int)#android.os.CountDownTimer.cancel()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#android.view.View.setVisibility(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.show()#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#android.widget.ImageView.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.app.Activity.startActivity(android.content.Intent)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#android.view.View.setVisibility(int)", "callsites_t": ["java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) android.widget.Toast.show() <unknown>.isAudioPlaying() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.open() android.content.Context.getString(<unknown>) <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() java.io.File.File(java.lang.String) android.widget.Toast.show() android.app.Activity.requestWindowFeature(int) android.os.CountDownTimer.cancel() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() android.view.View.setVisibility(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.show() java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) <unknown>.getPlayBackTime() android.app.Activity.finish() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) android.widget.ImageView.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.app.Activity.startActivity(android.content.Intent) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate static final int EDIT_RESULT = 35;\n\tprivate RelativeLayout dateBarRelativeLayout;\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprotected static String favID = null;\n\tprivate FavoriteHelper mFavoriteHelper;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tshow_text_voice_camera_header_title.setText(getString(R.string.finished_voiceentry));\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\t\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\t\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(getString(R.string.finished_voiceentry));\n\t\t\t}\n\t\t\t\n\t\t\tif(mShowList.get(4) != null){\n\t\t\t\tif(!mShowList.get(4).equals(\"\")){\n\t\t\t\t\tfavID = mShowList.get(4);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\n\t\t\tif(mShowList.get(7) != null)\n\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\n\t\t\t\n\t\t\tif(mShowList.get(6) != null) {\n\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tmFavoriteHelper = new FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n\n\t\t\tmShowList.set(4, favID);\n\t\t\tintentExtras.remove(\"mDisplayList\");\n\t\t\tintentExtras.putStringArrayList(\"mDisplayList\", mShowList);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivityForResult(editIntent, EDIT_RESULT);\n//\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t\t\n\t\tsuper.onActivityResult(requestCode, resultCode, data);\n\t\tif (EDIT_RESULT == requestCode) {\n\t\t\tif(Activity.RESULT_OK == resultCode) {\n\t\t\t\t\n\t\t\t\tintentExtras = data.getBundleExtra(\"voiceShowBundle\");\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tmShowList = new ArrayList<String>();\n\t\t\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(0) != null){\n\t\t\t\t\t\tif(mShowList.get(0) != \"\"){\n\t\t\t\t\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfinish();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfinish();\n\t\t\t\t\t}\n\t\t\t\t\tString amount = mShowList.get(2);\n\t\t\t\t\tString tag = mShowList.get(1);\n\n\t\t\t\t\tif (amount != null) {\n\t\t\t\t\t\tif(!amount.equals(\"\") && !amount.equals(\"?\")){\n\t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfinish();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfinish();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)))) {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(getString(R.string.finished_voiceentry));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(7) != null)\n\t\t\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(6) != null)\n\t\t\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\t\t\telse {\n\t\t\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\t\tupdateUI();\n\t\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmFavoriteHelper.setShowList(mShowList);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\n\t\tif(resultCode == Activity.RESULT_CANCELED){\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-13T19:03:04Z", "hash_sni": "956a349e51143fffa53562f6f975af721d4c172b", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" import android.content.Intent;\n import android.os.Bundle;\n import android.os.CountDownTimer;\n-import android.util.Log;\n import android.view.View;\n import android.view.View.OnClickListener;\n import android.widget.Button;\n@@ -67,6 +66,8 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \n \t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n \n+\t\tshow_text_voice_camera_header_title.setText(getString(R.string.finished_voiceentry));\n+\t\t\n \t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n \t\t\tmShowList = new ArrayList<String>();\n \t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n@@ -82,7 +83,7 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))) {\n \t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n \t\t\t} else {\n-\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n+\t\t\t\tshow_text_voice_camera_tag_textview.setText(getString(R.string.finished_voiceentry));\n \t\t\t}\n \t\t\t\n \t\t\tif(mShowList.get(4) != null){\n@@ -98,8 +99,10 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t\tif(mShowList.get(7) != null)\n \t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n \t\t\t\n-\t\t\tif(mShowList.get(6) != null)\n+\t\t\t\n+\t\t\tif(mShowList.get(6) != null) {\n \t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n+\t\t\t}\n \t\t\telse {\n \t\t\t\tnew ShowDateHandler(this,R.string.voice);\n \t\t\t}\n@@ -134,9 +137,6 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t}\n \n \tprivate void updateUI() {\n-\t\t// ///// ***** Sets Title Voice Entry *********///////\n-\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n-\n \t\t// //// ****** Shows Voice Details ********////////\n \t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n \t}\n@@ -293,7 +293,6 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t\t\t\tString amount = mShowList.get(2);\n \t\t\t\t\tString tag = mShowList.get(1);\n \n-\t\t\t\t\tLog.v(\"amount\", amount +\" am\");\n \t\t\t\t\tif (amount != null) {\n \t\t\t\t\t\tif(!amount.equals(\"\") && !amount.equals(\"?\")){\n \t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler ShowLocationHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getDrawable getExternalStorageState getId getInstance getIntent getPlayBackTime getResources getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putBoolean putExtra putStringArrayList remove set setBackgroundDrawable setContentView setFirstDayOfWeek setOnClickListener setShowList setText setTimeInMillis setVisibility show start startActivityForResult startPlayBack stop stopPlayBack toString updateUI"], "_version_": 1526726824633040896, "subject_t": ["App ready now"], "comments_t": ["\t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** //\t\t\tfinish(); \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ****** If audio recording started then stop recording audio ***** /////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["ff0c0fae601c35c5a2d9df62e8da71c9d956c278"], "id": "vinsol/expense-tracker\u0000956a349e51143fffa53562f6f975af721d4c172b\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "android.os.Bundle.remove(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.String.equals(java.lang.String)#android.content.Context.getString(<unknown>)#java.util.Calendar.setFirstDayOfWeek(int)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.startActivityForResult(android.content.Intent, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.io.File.canRead()#android.widget.Toast.show()#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getPlayBackTime()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#<unknown>.open()#android.content.Context.getString(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.Toast.show()#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.content.Context.getString(<unknown>)#android.view.View.setVisibility(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#java.io.File.File(java.lang.String)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.TextView.setText(<unknown>)#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#java.lang.String.equals(<unknown>)#android.view.ContextThemeWrapper.getResources()#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.content.Context.getString(<unknown>)#<unknown>.setShowList(java.util.ArrayList<java.lang.String>)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#java.lang.String.equals(<unknown>)#android.os.Environment.getExternalStorageState()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#android.app.Activity.finish()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#java.lang.Long.toString(java.lang.Long)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#<unknown>.getDisplayTime(<unknown>)#android.os.CountDownTimer.cancel()#android.widget.TextView.setText(<unknown>)#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setBackgroundDrawable(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.util.ArrayList<java.lang.String>.ArrayList, String()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.Toast.show()#java.lang.String.equals(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#java.util.Calendar.setTimeInMillis(long)#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.res.Resources.getDrawable(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#<unknown>.DisplayTime()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.content.Intent.getBundleExtra(java.lang.String)#android.view.View.getId()#android.view.View.setVisibility(int)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.os.Bundle.putBoolean(java.lang.String, boolean)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.getInstance()#android.view.View.setVisibility(int)", "callsites_t": ["android.os.Bundle.remove(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) java.lang.String.equals(java.lang.String) android.content.Context.getString(<unknown>) java.util.Calendar.setFirstDayOfWeek(int) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.startActivityForResult(android.content.Intent, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.io.File.canRead() android.widget.Toast.show() java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getPlayBackTime() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) <unknown>.open() android.content.Context.getString(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.Toast.show() <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.content.Context.getString(<unknown>) android.view.View.setVisibility(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) java.io.File.File(java.lang.String) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.TextView.setText(<unknown>) <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) java.lang.String.equals(<unknown>) android.view.ContextThemeWrapper.getResources() android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.content.Context.getString(<unknown>) <unknown>.setShowList(java.util.ArrayList<java.lang.String>) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) java.lang.String.equals(<unknown>) android.os.Environment.getExternalStorageState() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() android.app.Activity.finish() java.io.File.File(java.lang.String) android.widget.Toast.show() java.lang.Long.toString(java.lang.Long) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() <unknown>.getDisplayTime(<unknown>) android.os.CountDownTimer.cancel() android.widget.TextView.setText(<unknown>) java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setBackgroundDrawable(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.util.ArrayList<java.lang.String>.ArrayList, String() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.Toast.show() java.lang.String.equals(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) java.util.Calendar.setTimeInMillis(long) java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.content.res.Resources.getDrawable(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) <unknown>.getPlayBackTime() android.app.Activity.finish() <unknown>.DisplayTime() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.content.Intent.getBundleExtra(java.lang.String) android.view.View.getId() android.view.View.setVisibility(int) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.os.Bundle.putBoolean(java.lang.String, boolean) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) java.util.Calendar.getInstance() android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent android.view.Window com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class Voice extends Activity implements OnClickListener{\n\t\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\t\n\t\t///////   ****** No Title Bar   ********* /////////\n        \n        \n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        \n        setContentView(R.layout.text_voice_camera);\n        \n        \n        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n        \n        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n    \ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n    \ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n    \ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n    \tmDatabaseAdapter = new DatabaseAdapter(this);\n    \t\n    \t////////*********     Get id from intent extras     ********   ////////////\n        intentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n        _id = intentExtras.getLong(\"_id\");\n    \t\n        \n        \n        \n        ////////   ********  Handle Date Bar   *********   ////////\n        if(intentExtras.containsKey(\"timeInMillis\")){\n        \tnew DateHandler(this ,intentExtras.getLong(\"timeInMillis\"));\n        } else {\n        \tnew DateHandler(this);\n        }\n        \n        \n        ////////   ********   Starts Recording each time activity starts   ******   ///////\n        if(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n        \tsetGraphicsVoice();\n        \tcontrolVoiceChronometer();\n        \tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n        \tmRecordingHelper.startRecording();\n        } \n        else {\n        \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n        }\n        setClickListeners();\n\t\t\n\t\t////////*********     Get Last most accurate location info   *********   /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\t\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\n\t\n\t@Override\n\tprotected void onPause() {\n\t\t\n\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t}\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n\t\t\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n\t\t\n\t\t\n\t\t////  ***** if stop button pressed ****** //////\n\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n\t\t\tmRecordingHelper.stopRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t}\n\t\t\n\t\t\n\t\t////  ***** if play button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n\t\t\tmAudioPlay = new AudioPlay(_id+\"\",this);\n\t\t\t\n\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n\t\t\tif(!mAudioPlay.isAudioPlaying()){\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\t\t\n\t\t////  ***** if rerecord button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){}\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\t\t\t\n\t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n\t\t\tif(mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\t\t\n\t\t////////********  Adding Action to save entry     *********    ///////////\n\t\t\n\t\tif(v.getId() == R.id.text_voice_camera_save_entry){\n\t\t\tsaveEntry();\n\t\t}\n\t\n\t\n\t\t/////////     *********   Adding action if delete button **********  /////////\n\t\n\t\tif(v.getId() == R.id.text_voice_camera_delete){\n\t\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\t\ttry{\n\t\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\n\t\t\tnew FileDelete(_id);\n\t\t\n\t\t\t//////   *******   Delete entry from database ********   /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n\t\n\tprivate void saveEntry() {\n\t\t///////    *******  Creating HashMap to update info   *******  ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\t\t\n\t\tif(!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")){\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double)((int)((mAmount+0.005)*100.0)/100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\t\n\t\tif(text_voice_camera_tag.getText().toString() != \"\"){\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\t\t\n\t\tif(!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString))\t\n\t\ttry{\n\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\t//////    *******   Update database if user added additional info   *******  ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\tstartActivity(intentExpenseListing);\n\t}\n\n\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\t\n\t\n\t///// ******************  Handling back press of key   ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n\t     if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t    \t onBackPressed();\n\t         return true;\n\t      }\n\t    return super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t    // This will be called either automatically for you on 2.0    \n\t    // or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t    return;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-26T06:58:53Z", "hash_sni": "8a3ef60f98fd1263702e2bce8474b8084c3598e9", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": ["         \n         \n         ////////   ********  Handle Date Bar   *********   ////////\n-        new DateHandler(this);\n+        if(intentExtras.containsKey(\"timeInMillis\")){\n+        \tnew DateHandler(this ,intentExtras.getLong(\"timeInMillis\"));\n+        } else {\n+        \tnew DateHandler(this);\n+        }\n         \n         \n         ////////   ********   Starts Recording each time activity starts   ******   ///////"], "score": 1.0, "methods_t": ["AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper cancel close containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish getBundleExtra getDisplayTime getExternalStorageState getId getIntent getLastLocation getLong getPlayBackTime getRepeatCount getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble printStackTrace put requestWindowFeature saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526726824973828096, "subject_t": ["Done with all high priority tasks"], "comments_t": ["\t\t////////********  Adding Action to save entry     *********    /////////// \t//countdowntimer is an abstract class, so extend it and fill in methods         ///////   ***** Sets Title Voice Entry *********/////// \t\t///////   ****** No Title Bar   ********* /////////         ////////   ********    Initializing and assigning memory to UI Items **********    /////////     \t////////*********     Get id from intent extras     ********   //////////// \t    // This will be called either automatically for you on 2.0     \t\t\t///////   *******   Chronometer Starts Countdown   ******  /////// \t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** /////// \t\t\t//////  ******  Restarts chronometer and recording   *******  //////// \t\t////////    *******    Adding Click Listeners to UI Items ******** ////////// \t\t\t//////   *****  Check whether audio is recording or not   *******   /////// \t///// ******************  Handling back press of key   ********** /////////// \t\t////////*********     Get Last most accurate location info   *********   ///////// \t\t////  ***** if play button pressed ****** //////\t\t \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   //////// \t\t\t//////   *******   Delete entry from database ********   ///////// \t\t////  ***** if rerecord button pressed ****** //////\t\t \t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t//////    *******   Update database if user added additional info   *******  /////// \t\t///////   ********     Adding On Click Actions to click listeners *********    ////////// \t\t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////       \t\t////  ***** if stop button pressed ****** //////         ////////   ********   Starts Recording each time activity starts   ******   /////// \t    // or later, or by the code above on earlier versions of the platform. \t\t///////   ***** Sets Title Voice Entry *********/////// \t\t\t//////   ******   Handles UI items on button click  ******  ///////         //////   ******  Shows Voice Details ********//////// \t\t\t//////\t     ********   to handle playback of recorded file   *********   //////// \t\t///////    *******  Creating HashMap to update info   *******  ////////         ////////   ********  Handle Date Bar   *********   //////// \t\t/////////     *********   Adding action if delete button **********  /////////"], "parents_ss": ["71cf5cf3341812a83d21d1f9b8f9df86f8a3a1f7"], "id": "vinsol/expense-tracker\u00008a3ef60f98fd1263702e2bce8474b8084c3598e9\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.isRecording()#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.lang.Long.toString(long)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getLastLocation()#android.widget.TextView.getText()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#com.vinsol.expensetracker.Voice.onBackPressed()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.app.Activity.finish()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.lang.Long.toString(long)#com.vinsol.expensetracker.Voice.setGraphicsVoice()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getLong(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#android.view.View.setVisibility(int)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#android.os.SystemClock.elapsedRealtime()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.widget.TextView.getText()#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#android.view.KeyEvent.getRepeatCount()#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#android.os.Environment.getExternalStorageState()#android.widget.Chronometer.setOnChronometerTickListener()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.length()#<unknown>.getPlayBackTime()#.OnChronometerTickListener()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.requestWindowFeature(int)#<unknown>.open()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#android.view.View.setVisibility(int)#android.widget.Toast.show()#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.startPlayBack()#java.lang.CharSequence.toString()#<unknown>.close()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#java.lang.Double.toString()#android.widget.Chronometer.stop()#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#<unknown>.isRecording()#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)#android.app.Activity.finish()", "callsites_t": ["<unknown>.isRecording() <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.view.View.setVisibility(int) android.widget.Chronometer.start() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.lang.Long.toString(long) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) android.view.View.setVisibility(int) <unknown>.getLastLocation() android.widget.TextView.getText() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() com.vinsol.expensetracker.Voice.onBackPressed() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.app.Activity.finish() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.lang.Long.toString(long) com.vinsol.expensetracker.Voice.setGraphicsVoice() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getLong(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() android.view.View.setVisibility(int) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() android.os.SystemClock.elapsedRealtime() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.widget.TextView.getText() android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) android.view.KeyEvent.getRepeatCount() com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) android.os.Environment.getExternalStorageState() android.widget.Chronometer.setOnChronometerTickListener() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.length() <unknown>.getPlayBackTime() .OnChronometerTickListener() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.requestWindowFeature(int) <unknown>.open() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) android.view.View.setVisibility(int) android.widget.Toast.show() android.view.View.setVisibility(int) android.widget.Chronometer.start() android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.startPlayBack() java.lang.CharSequence.toString() <unknown>.close() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) java.lang.Double.toString() android.widget.Chronometer.stop() java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) android.view.View.getId() <unknown>.isRecording() android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long) android.app.Activity.finish()"]}, {"user_sni": "Ashwini Kumar Singh Chandel", "repo_sni": "ash242186/VideoStreaming", "imports_t": ["android.os.CountDownTimer android.view.View.OnClickListener android.os.Bundle android.widget.Button android.widget.CompoundButton android.media.MediaPlayer android.media.MediaPlayer.OnSeekCompleteListener android.media.MediaPlayer.OnPreparedListener android.content.pm.ActivityInfo android.widget.ToggleButton android.widget.ProgressBar android.widget.CompoundButton.OnCheckedChangeListener android.media.MediaPlayer.OnVideoSizeChangedListener android.media.MediaPlayer.OnBufferingUpdateListener android.widget.TextView android.media.MediaPlayer.OnErrorListener android.net.Uri android.view.View android.util.Log android.app.Activity"], "email_sni": "chandelashwini@gmail.com", "contents_t": ["package com.example.steaming;\n\n\nimport android.app.Activity;\nimport android.content.pm.ActivityInfo;\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnBufferingUpdateListener;\nimport android.media.MediaPlayer.OnErrorListener;\nimport android.media.MediaPlayer.OnPreparedListener;\nimport android.media.MediaPlayer.OnSeekCompleteListener;\nimport android.media.MediaPlayer.OnVideoSizeChangedListener;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.CompoundButton;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport android.widget.ToggleButton;\nimport android.widget.CompoundButton.OnCheckedChangeListener;\n\npublic class MainActivity extends Activity implements OnPreparedListener, OnErrorListener{\n\n\tprivate String TAG = getClass().getSimpleName();\n\tprivate Button stop;\n\tprivate ToggleButton playtogglebutton;\n\tprivate TextView timeEnd, timeElapsed;\n\tprivate ProgressBar progressBar;\n\tprivate MyVideoView videoviewer;\n\tprivate CountDownTimer timer;\n\t//private ProgressDialog loading;\n\tprivate int mVideoWidth, mVideoHeight;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n\t\tsetContentView(R.layout.activity_main);\n\t\t\n\t\t/*loading = new ProgressDialog(this);\n\t      loading.setMessage(\"Loading...\");*/\n\t     \n\t\tstop = (Button) findViewById(R.id.stop);\n\t\tplaytogglebutton = (ToggleButton) findViewById(R.id.playtogglebutton);\n\t\ttimeElapsed = (TextView) findViewById(R.id.timeElapsed);\n\t\ttimeEnd = (TextView) findViewById(R.id.timeEnd);\n\t\tprogressBar = (ProgressBar) findViewById(R.id.progressBar);\n\t    \n\t\tplaytogglebutton.setOnCheckedChangeListener(checkedchangelistener);\n\t\t\n\t\t\n\t\t\n\t\tvideoviewer = (MyVideoView) findViewById(R.id.videoviewer);\n\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v4.cache1.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYESARFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v5.cache5.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYDSANFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.youtube.com/v/OwMCw2VG04I\")); //not working\n\t\tvideoviewer.setVideoURI(Uri.parse(\"http://aamc.kleward.com/TMS/TMS/Files/UnderstandingCorporateStructuresandTrust.mp4\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://daily3gp.com/vids/747.3gp\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://commonsware.com/misc/test2.3gp\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.ooklnet.com/files/381/381489/video.mp4\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://184.72.239.149/vod/mp4:BigBuckBunny_115k.mov\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://dl.dropbox.com/u/80419/santa.mp4\"));\n\t\tvideoviewer.requestFocus();\n\t\tvideoviewer.requestFocus();\n\t\tvideoviewer.setKeepScreenOn(true);\n\t\tvideoviewer.setOnErrorListener(this);\n\t\tvideoviewer.setOnPreparedListener(this);\n\t\t//loading.show();\n\t\t\n\t\tstop.setOnClickListener(new OnClickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onClick(View arg0) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\tstopMedia();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate OnCheckedChangeListener checkedchangelistener =  new OnCheckedChangeListener(){\n\n\t\t@Override\n\t\tpublic void onCheckedChanged(CompoundButton arg0, boolean isChecked) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\t/*pause player*/\n\t\t\tif(isChecked){\n\t\t\t\tSystem.out.println(\"player pause\");\n\t\t\t\tplayMedia(false);\n\t\t\t}\n\t\t\t/*play player*/\n\t\t\telse{\n\t\t\t\tSystem.out.println(\"player play\");\n\t\t\t\tplayMedia(true);\n\t\t\t}\n\t\t}};\n\t\t\n\t\t@Override\n\t\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\t//loading.hide();\n\t\t\treturn false;\n\t\t}\n\t\t\n\t@Override\n\tpublic void onPrepared(MediaPlayer mp) {\n\t\t// TODO Auto-generated method stub\n\t\tLog.d(TAG, \"media player preparing.......\");\n\t\tmp.setLooping(true);\n\t\t//loading.hide();\n\n\t\tmVideoWidth = mp.getVideoWidth();\n        mVideoHeight = mp.getVideoHeight();\n\t\t//onVideoSizeChangedListener declaration\n\t\tmp.setOnVideoSizeChangedListener(new OnVideoSizeChangedListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onVideoSizeChanged(MediaPlayer mp, int width, int height) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\tLog.d(TAG, \"onVideoSizeChanged called \" + width + \":\" + height);\n\t\t\t\tif (width == 0 || height == 0) {\n\t\t            Log.e(TAG, \"invalid video width(\" + width + \") or height(\" + height + \")\");\n\t\t            return;\n\t\t        }\n\t\t        mVideoWidth = width;\n\t\t        mVideoHeight = height;\n\t\t        playMedia(true);\n\t\t\t}\n\t\t});\n\t\t// onSeekCompletionListener declaration\n\t\tmp.setOnSeekCompleteListener(new OnSeekCompleteListener() {\n\t\t\t// show current frame after changing the playback position\n\t\t\t@Override\n\t\t\tpublic void onSeekComplete(MediaPlayer mp) {\n\t\t\t\tif (!mp.isPlaying()) {\n\t\t\t\t\t//playMedia(true);\n\t\t\t\t\tSystem.out.println(\"inside the setOnSeekCompleteListener\");\n\t\t\t\t\tplayMedia(false);\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"inside------ the setOnSeekCompleteListener\");\n\t\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n\t\t\t}\n\t\t});\n\n\t\tmp.setOnCompletionListener(null);\n\t\t// onBufferingUpdateListener declaration\n\t\tmp.setOnBufferingUpdateListener(new OnBufferingUpdateListener() {\n\t\t\t// show updated information about the buffering progress\n\t\t\t@Override\n\t\t\tpublic void onBufferingUpdate(MediaPlayer mp, int percent) {\n\t\t\t\tLog.d(this.getClass().getName(), \"percent: \" + percent);\n\t\t\t\tprogressBar.setSecondaryProgress(percent);\n\t\t\t}\n\t\t});\n\t\t\n\n\t\tint time = videoviewer.getDuration();\n\t\tint time_elapsed = videoviewer.getCurrentPosition();\n\t\tprogressBar.setProgress(time_elapsed);\n\n\t\t// update current playback time every 500ms until stop\n\t\ttimer = new CountDownTimer(time, 500) {\n\n\t\t\t@Override\n\t\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n\t\t\t\tfloat a = videoviewer.getCurrentPosition();\n\t\t\t\tfloat b = videoviewer.getDuration();\n\t\t\t\tprogressBar.setProgress((int) (a / b * 100));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onFinish() {\n\t\t\t\tstopMedia();\n\t\t\t}\n\t\t};\n\n\t\t\n\t\t\n\t\ttimeEnd.setText(countTime(time));\n\t\ttimeElapsed.setText(countTime(time_elapsed));\n\t\tplayMedia(true);\n\t}\n\n\t/**\n     * Convert time from milliseconds into minutes and seconds, proper to media player\n     * \n     * @param miliseconds\tmedia content time in milliseconds\n     * @return\ttime in format minutes:seconds\n     */\n    public String countTime(int miliseconds) {\n    \tString timeInMinutes = new String();\n    \tint minutes = miliseconds / 60000;\n    \tint seconds = (miliseconds % 60000)/1000;\n    \ttimeInMinutes = minutes + \":\" + (seconds<10?\"0\" + seconds:seconds);\n\t\treturn timeInMinutes;\n    }\n    \n    /**\n     * Start or Pause playback of media content\n     * \n     * @param v\tView the touch event has been dispatched to\n     */\n\tpublic void playMedia(boolean isplay) {\n\t\tSystem.err.println(\"height:- \"+mVideoHeight);\n\t\tSystem.err.println(\"width:- \"+mVideoWidth);\n\t\t\tif (isplay) {\n\t\t\t\tvideoviewer.changeVideoSize(mVideoWidth, mVideoHeight);\n\t\t\t\tvideoviewer.start();\n\t\t\t\ttimer.start();\n\t\t\t} else {\n\t\t\t\tvideoviewer.pause();\n\t\t\t\ttimer.cancel();\n\t\t\t}\n\t\t\n    }\n    \n    /**\n     * Pause and rewind to beginning of the media content\n     * \n     * @param v\tView the touch event has been dispatched to\n     */\n\tpublic void stopMedia() {\n\t\tif (videoviewer.getCurrentPosition() != 0) {\n\t\t\t\n\t\t\tplaytogglebutton.setChecked(true);\n\t\t\t\n\t\t\tvideoviewer.pause();\n\t\t\tvideoviewer.seekTo(0);\n\t\t\ttimer.cancel();\n\n\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n\t\t\tprogressBar.setProgress(0);\n\t\t}\n\t}\n\n\n\t@Override\n\tprotected void onStop() {\n\t\t// TODO Auto-generated method stub\n\t\tif(videoviewer != null)\n\t\t\tvideoviewer.stopPlayback();\n\t\tif (timer != null) {\n\t\t\ttimer.cancel();\n\t\t}\n\t\tsuper.onStop();\n\t}\n\n\t\n\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2013-01-10T08:26:54Z", "hash_sni": "f19f7097ed28aa50857f3968b0ead75d462e411f", "name_sni": "src/com/example/steaming/MainActivity.java", "patch_t": ["-package com.example.steaming;\n-\n-\n-import android.app.Activity;\n-import android.content.pm.ActivityInfo;\n-import android.media.MediaPlayer;\n-import android.media.MediaPlayer.OnBufferingUpdateListener;\n-import android.media.MediaPlayer.OnErrorListener;\n-import android.media.MediaPlayer.OnPreparedListener;\n-import android.media.MediaPlayer.OnSeekCompleteListener;\n-import android.media.MediaPlayer.OnVideoSizeChangedListener;\n-import android.net.Uri;\n-import android.os.Bundle;\n-import android.os.CountDownTimer;\n-import android.util.Log;\n-import android.view.View;\n-import android.view.View.OnClickListener;\n-import android.widget.Button;\n-import android.widget.CompoundButton;\n-import android.widget.ProgressBar;\n-import android.widget.TextView;\n-import android.widget.ToggleButton;\n-import android.widget.CompoundButton.OnCheckedChangeListener;\n-\n-public class MainActivity extends Activity implements OnPreparedListener, OnErrorListener{\n-\n-\tprivate String TAG = getClass().getSimpleName();\n-\tprivate Button stop;\n-\tprivate ToggleButton playtogglebutton;\n-\tprivate TextView timeEnd, timeElapsed;\n-\tprivate ProgressBar progressBar;\n-\tprivate MyVideoView videoviewer;\n-\tprivate CountDownTimer timer;\n-\t//private ProgressDialog loading;\n-\tprivate int mVideoWidth, mVideoHeight;\n-\t\n-\t@Override\n-\tprotected void onCreate(Bundle savedInstanceState) {\n-\t\t// TODO Auto-generated method stub\n-\t\tsuper.onCreate(savedInstanceState);\n-\t\tsetRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n-\t\tsetContentView(R.layout.activity_main);\n-\t\t\n-\t\t/*loading = new ProgressDialog(this);\n-\t    loading.setMessage(\"Loading...\");*/\n-\t     \n-\t\tstop = (Button) findViewById(R.id.stop);\n-\t\tplaytogglebutton = (ToggleButton) findViewById(R.id.playtogglebutton);\n-\t\ttimeElapsed = (TextView) findViewById(R.id.timeElapsed);\n-\t\ttimeEnd = (TextView) findViewById(R.id.timeEnd);\n-\t\tprogressBar = (ProgressBar) findViewById(R.id.progressBar);\n-\t    \n-\t\tplaytogglebutton.setOnCheckedChangeListener(checkedchangelistener);\n-\t\t\n-\t\t\n-\t\t\n-\t\tvideoviewer = (MyVideoView) findViewById(R.id.videoviewer);\n-\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v4.cache1.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYESARFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n-\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v5.cache5.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYDSANFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n-\t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.youtube.com/v/OwMCw2VG04I\")); //not working\n-\t\t//videoviewer.setVideoURI(Uri.parse(\"http://aamc.kleward.com/TMS/TMS/Files/Saari_Saari_Raat_(Song Promo)_Khiladi_786_ft.mp4\"));//not working\n-\t\t//videoviewer.setVideoURI(Uri.parse(\"http://aamc.kleward.com/TMS/TMS/Files/iPad_Mini_Commercial.mp4\"));\n-\t\tvideoviewer.setVideoURI(Uri.parse(\"http://aamc.kleward.com/TMS/TMS/Files/UnderstandingCorporateStructuresandTrust.mp4\"));\n-\t\t//videoviewer.setVideoURI(Uri.parse(\"http://daily3gp.com/vids/747.3gp\"));\n-\t\t//videoviewer.setVideoURI(Uri.parse(\"http://commonsware.com/misc/test2.3gp\"));\n-\t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.ooklnet.com/files/381/381489/video.mp4\"));\n-\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://184.72.239.149/vod/mp4:BigBuckBunny_115k.mov\"));\n-\t\t//videoviewer.setVideoURI(Uri.parse(\"http://dl.dropbox.com/u/80419/santa.mp4\"));\n-\t\tvideoviewer.requestFocus();\n-\t\tvideoviewer.requestFocus();\n-\t\tvideoviewer.setKeepScreenOn(true);\n-\t\tvideoviewer.setOnErrorListener(this);\n-\t\tvideoviewer.setOnPreparedListener(this);\n-\t\t//loading.show();\n-\t\t\n-\t\tstop.setOnClickListener(new OnClickListener() {\n-\t\t\t\n-\t\t\t@Override\n-\t\t\tpublic void onClick(View arg0) {\n-\t\t\t\t// TODO Auto-generated method stub\n-\t\t\t\tstopMedia();\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\tprivate OnCheckedChangeListener checkedchangelistener =  new OnCheckedChangeListener(){\n-\n-\t\t@Override\n-\t\tpublic void onCheckedChanged(CompoundButton arg0, boolean isChecked) {\n-\t\t\t// TODO Auto-generated method stub\n-\t\t\t/*pause player*/\n-\t\t\tif(isChecked){\n-\t\t\t\tSystem.out.println(\"player pause\");\n-\t\t\t\tplayMedia(false);\n-\t\t\t}\n-\t\t\t/*play player*/\n-\t\t\telse{\n-\t\t\t\tSystem.out.println(\"player play\");\n-\t\t\t\tplayMedia(true);\n-\t\t\t}\n-\t\t}};\n-\t\t\n-\t\t@Override\n-\t\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n-\t\t\t// TODO Auto-generated method stub\n-\t\t\t//loading.hide();\n-\t\t\treturn false;\n-\t\t}\n-\t\t\n-\t@Override\n-\tpublic void onPrepared(MediaPlayer mp) {\n-\t\t// TODO Auto-generated method stub\n-\t\tLog.d(TAG, \"media player preparing.......\");\n-\t\tmp.setLooping(true);\n-\t\t//loading.hide();\n-\n-\t\tmVideoWidth = mp.getVideoWidth();\n-        mVideoHeight = mp.getVideoHeight();\n-\t\t//onVideoSizeChangedListener declaration\n-\t\tmp.setOnVideoSizeChangedListener(new OnVideoSizeChangedListener() {\n-\t\t\t\n-\t\t\t@Override\n-\t\t\tpublic void onVideoSizeChanged(MediaPlayer mp, int width, int height) {\n-\t\t\t\t// TODO Auto-generated method stub\n-\t\t\t\tLog.d(TAG, \"onVideoSizeChanged called \" + width + \":\" + height);\n-\t\t\t\tif (width == 0 || height == 0) {\n-\t\t            Log.e(TAG, \"invalid video width(\" + width + \") or height(\" + height + \")\");\n-\t\t            return;\n-\t\t        }\n-\t\t        mVideoWidth = width;\n-\t\t        mVideoHeight = height;\n-\t\t        playMedia(true);\n-\t\t\t}\n-\t\t});\n-\t\t// onSeekCompletionListener declaration\n-\t\tmp.setOnSeekCompleteListener(new OnSeekCompleteListener() {\n-\t\t\t// show current frame after changing the playback position\n-\t\t\t@Override\n-\t\t\tpublic void onSeekComplete(MediaPlayer mp) {\n-\t\t\t\tif (!mp.isPlaying()) {\n-\t\t\t\t\t//playMedia(true);\n-\t\t\t\t\tSystem.out.println(\"inside the setOnSeekCompleteListener\");\n-\t\t\t\t\tplayMedia(false);\n-\t\t\t\t}\n-\t\t\t\tSystem.out.println(\"inside------ the setOnSeekCompleteListener\");\n-\t\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n-\t\t\t}\n-\t\t});\n-\n-\t\tmp.setOnCompletionListener(null);\n-\t\t// onBufferingUpdateListener declaration\n-\t\tmp.setOnBufferingUpdateListener(new OnBufferingUpdateListener() {\n-\t\t\t// show updated information about the buffering progress\n-\t\t\t@Override\n-\t\t\tpublic void onBufferingUpdate(MediaPlayer mp, int percent) {\n-\t\t\t\tLog.d(this.getClass().getName(), \"percent: \" + percent);\n-\t\t\t\tprogressBar.setSecondaryProgress(percent);\n-\t\t\t}\n-\t\t});\n-\t\t\n-\n-\t\tint time = videoviewer.getDuration();\n-\t\tint time_elapsed = videoviewer.getCurrentPosition();\n-\t\tprogressBar.setProgress(time_elapsed);\n-\n-\t\t// update current playback time every 500ms until stop\n-\t\ttimer = new CountDownTimer(time, 500) {\n-\n-\t\t\t@Override\n-\t\t\tpublic void onTick(long millisUntilFinished) {\n-\t\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n-\t\t\t\tfloat a = videoviewer.getCurrentPosition();\n-\t\t\t\tfloat b = videoviewer.getDuration();\n-\t\t\t\tprogressBar.setProgress((int) (a / b * 100));\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void onFinish() {\n-\t\t\t\tstopMedia();\n-\t\t\t}\n-\t\t};\n-\n-\t\t\n-\t\t\n-\t\ttimeEnd.setText(countTime(time));\n-\t\ttimeElapsed.setText(countTime(time_elapsed));\n-\t\tplayMedia(true);\n-\t}\n-\n-\t/**\n-     * Convert time from milliseconds into minutes and seconds, proper to media player\n-     * \n-     * @param miliseconds\tmedia content time in milliseconds\n-     * @return\ttime in format minutes:seconds\n-     */\n-    public String countTime(int miliseconds) {\n-    \tString timeInMinutes = new String();\n-    \tint minutes = miliseconds / 60000;\n-    \tint seconds = (miliseconds % 60000)/1000;\n-    \ttimeInMinutes = minutes + \":\" + (seconds<10?\"0\" + seconds:seconds);\n-\t\treturn timeInMinutes;\n-    }\n-    \n-    /**\n-     * Start or Pause playback of media content\n-     * \n-     * @param v\tView the touch event has been dispatched to\n-     */\n-\tpublic void playMedia(boolean isplay) {\n-\t\tSystem.err.println(\"height:- \"+mVideoHeight);\n-\t\tSystem.err.println(\"width:- \"+mVideoWidth);\n-\t\t\tif (isplay) {\n-\t\t\t\tvideoviewer.changeVideoSize(mVideoWidth, mVideoHeight);\n-\t\t\t\tvideoviewer.start();\n-\t\t\t\ttimer.start();\n-\t\t\t} else {\n-\t\t\t\tvideoviewer.pause();\n-\t\t\t\ttimer.cancel();\n-\t\t\t}\n-\t\t\n-    }\n-    \n-    /**\n-     * Pause and rewind to beginning of the media content\n-     * \n-     * @param v\tView the touch event has been dispatched to\n-     */\n-\tpublic void stopMedia() {\n-\t\tif (videoviewer.getCurrentPosition() != 0) {\n-\t\t\t\n-\t\t\tplaytogglebutton.setChecked(true);\n-\t\t\t\n-\t\t\tvideoviewer.pause();\n-\t\t\tvideoviewer.seekTo(0);\n-\t\t\ttimer.cancel();\n-\n-\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n-\t\t\tprogressBar.setProgress(0);\n-\t\t}\n-\t}\n-\n-\n-\t@Override\n-\tprotected void onStop() {\n-\t\t// TODO Auto-generated method stub\n-\t\tif(videoviewer != null)\n-\t\t\tvideoviewer.stopPlayback();\n-\t\tif (timer != null) {\n-\t\t\ttimer.cancel();\n-\t\t}\n-\t\tsuper.onStop();\n-\t}\n-\n-\t\n-\n-\t\n+package com.example.steaming;\n+\n+\n+import android.app.Activity;\n+import android.content.pm.ActivityInfo;\n+import android.media.MediaPlayer;\n+import android.media.MediaPlayer.OnBufferingUpdateListener;\n+import android.media.MediaPlayer.OnErrorListener;\n+import android.media.MediaPlayer.OnPreparedListener;\n+import android.media.MediaPlayer.OnSeekCompleteListener;\n+import android.media.MediaPlayer.OnVideoSizeChangedListener;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.os.CountDownTimer;\n+import android.util.Log;\n+import android.view.View;\n+import android.view.View.OnClickListener;\n+import android.widget.Button;\n+import android.widget.CompoundButton;\n+import android.widget.ProgressBar;\n+import android.widget.TextView;\n+import android.widget.ToggleButton;\n+import android.widget.CompoundButton.OnCheckedChangeListener;\n+\n+public class MainActivity extends Activity implements OnPreparedListener, OnErrorListener{\n+\n+\tprivate String TAG = getClass().getSimpleName();\n+\tprivate Button stop;\n+\tprivate ToggleButton playtogglebutton;\n+\tprivate TextView timeEnd, timeElapsed;\n+\tprivate ProgressBar progressBar;\n+\tprivate MyVideoView videoviewer;\n+\tprivate CountDownTimer timer;\n+\t//private ProgressDialog loading;\n+\tprivate int mVideoWidth, mVideoHeight;\n+\t\n+\t@Override\n+\tprotected void onCreate(Bundle savedInstanceState) {\n+\t\t// TODO Auto-generated method stub\n+\t\tsuper.onCreate(savedInstanceState);\n+\t\tsetRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n+\t\tsetContentView(R.layout.activity_main);\n+\t\t\n+\t\t/*loading = new ProgressDialog(this);\n+\t      loading.setMessage(\"Loading...\");*/\n+\t     \n+\t\tstop = (Button) findViewById(R.id.stop);\n+\t\tplaytogglebutton = (ToggleButton) findViewById(R.id.playtogglebutton);\n+\t\ttimeElapsed = (TextView) findViewById(R.id.timeElapsed);\n+\t\ttimeEnd = (TextView) findViewById(R.id.timeEnd);\n+\t\tprogressBar = (ProgressBar) findViewById(R.id.progressBar);\n+\t    \n+\t\tplaytogglebutton.setOnCheckedChangeListener(checkedchangelistener);\n+\t\t\n+\t\t\n+\t\t\n+\t\tvideoviewer = (MyVideoView) findViewById(R.id.videoviewer);\n+\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v4.cache1.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYESARFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n+\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v5.cache5.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYDSANFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n+\t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.youtube.com/v/OwMCw2VG04I\")); //not working\n+\t\tvideoviewer.setVideoURI(Uri.parse(\"http://aamc.kleward.com/TMS/TMS/Files/UnderstandingCorporateStructuresandTrust.mp4\"));\n+\t\t//videoviewer.setVideoURI(Uri.parse(\"http://daily3gp.com/vids/747.3gp\"));\n+\t\t//videoviewer.setVideoURI(Uri.parse(\"http://commonsware.com/misc/test2.3gp\"));\n+\t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.ooklnet.com/files/381/381489/video.mp4\"));\n+\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://184.72.239.149/vod/mp4:BigBuckBunny_115k.mov\"));\n+\t\t//videoviewer.setVideoURI(Uri.parse(\"http://dl.dropbox.com/u/80419/santa.mp4\"));\n+\t\tvideoviewer.requestFocus();\n+\t\tvideoviewer.requestFocus();\n+\t\tvideoviewer.setKeepScreenOn(true);\n+\t\tvideoviewer.setOnErrorListener(this);\n+\t\tvideoviewer.setOnPreparedListener(this);\n+\t\t//loading.show();\n+\t\t\n+\t\tstop.setOnClickListener(new OnClickListener() {\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic void onClick(View arg0) {\n+\t\t\t\t// TODO Auto-generated method stub\n+\t\t\t\tstopMedia();\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tprivate OnCheckedChangeListener checkedchangelistener =  new OnCheckedChangeListener(){\n+\n+\t\t@Override\n+\t\tpublic void onCheckedChanged(CompoundButton arg0, boolean isChecked) {\n+\t\t\t// TODO Auto-generated method stub\n+\t\t\t/*pause player*/\n+\t\t\tif(isChecked){\n+\t\t\t\tSystem.out.println(\"player pause\");\n+\t\t\t\tplayMedia(false);\n+\t\t\t}\n+\t\t\t/*play player*/\n+\t\t\telse{\n+\t\t\t\tSystem.out.println(\"player play\");\n+\t\t\t\tplayMedia(true);\n+\t\t\t}\n+\t\t}};\n+\t\t\n+\t\t@Override\n+\t\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n+\t\t\t// TODO Auto-generated method stub\n+\t\t\t//loading.hide();\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t@Override\n+\tpublic void onPrepared(MediaPlayer mp) {\n+\t\t// TODO Auto-generated method stub\n+\t\tLog.d(TAG, \"media player preparing.......\");\n+\t\tmp.setLooping(true);\n+\t\t//loading.hide();\n+\n+\t\tmVideoWidth = mp.getVideoWidth();\n+        mVideoHeight = mp.getVideoHeight();\n+\t\t//onVideoSizeChangedListener declaration\n+\t\tmp.setOnVideoSizeChangedListener(new OnVideoSizeChangedListener() {\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic void onVideoSizeChanged(MediaPlayer mp, int width, int height) {\n+\t\t\t\t// TODO Auto-generated method stub\n+\t\t\t\tLog.d(TAG, \"onVideoSizeChanged called \" + width + \":\" + height);\n+\t\t\t\tif (width == 0 || height == 0) {\n+\t\t            Log.e(TAG, \"invalid video width(\" + width + \") or height(\" + height + \")\");\n+\t\t            return;\n+\t\t        }\n+\t\t        mVideoWidth = width;\n+\t\t        mVideoHeight = height;\n+\t\t        playMedia(true);\n+\t\t\t}\n+\t\t});\n+\t\t// onSeekCompletionListener declaration\n+\t\tmp.setOnSeekCompleteListener(new OnSeekCompleteListener() {\n+\t\t\t// show current frame after changing the playback position\n+\t\t\t@Override\n+\t\t\tpublic void onSeekComplete(MediaPlayer mp) {\n+\t\t\t\tif (!mp.isPlaying()) {\n+\t\t\t\t\t//playMedia(true);\n+\t\t\t\t\tSystem.out.println(\"inside the setOnSeekCompleteListener\");\n+\t\t\t\t\tplayMedia(false);\n+\t\t\t\t}\n+\t\t\t\tSystem.out.println(\"inside------ the setOnSeekCompleteListener\");\n+\t\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n+\t\t\t}\n+\t\t});\n+\n+\t\tmp.setOnCompletionListener(null);\n+\t\t// onBufferingUpdateListener declaration\n+\t\tmp.setOnBufferingUpdateListener(new OnBufferingUpdateListener() {\n+\t\t\t// show updated information about the buffering progress\n+\t\t\t@Override\n+\t\t\tpublic void onBufferingUpdate(MediaPlayer mp, int percent) {\n+\t\t\t\tLog.d(this.getClass().getName(), \"percent: \" + percent);\n+\t\t\t\tprogressBar.setSecondaryProgress(percent);\n+\t\t\t}\n+\t\t});\n+\t\t\n+\n+\t\tint time = videoviewer.getDuration();\n+\t\tint time_elapsed = videoviewer.getCurrentPosition();\n+\t\tprogressBar.setProgress(time_elapsed);\n+\n+\t\t// update current playback time every 500ms until stop\n+\t\ttimer = new CountDownTimer(time, 500) {\n+\n+\t\t\t@Override\n+\t\t\tpublic void onTick(long millisUntilFinished) {\n+\t\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n+\t\t\t\tfloat a = videoviewer.getCurrentPosition();\n+\t\t\t\tfloat b = videoviewer.getDuration();\n+\t\t\t\tprogressBar.setProgress((int) (a / b * 100));\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void onFinish() {\n+\t\t\t\tstopMedia();\n+\t\t\t}\n+\t\t};\n+\n+\t\t\n+\t\t\n+\t\ttimeEnd.setText(countTime(time));\n+\t\ttimeElapsed.setText(countTime(time_elapsed));\n+\t\tplayMedia(true);\n+\t}\n+\n+\t/**\n+     * Convert time from milliseconds into minutes and seconds, proper to media player\n+     * \n+     * @param miliseconds\tmedia content time in milliseconds\n+     * @return\ttime in format minutes:seconds\n+     */\n+    public String countTime(int miliseconds) {\n+    \tString timeInMinutes = new String();\n+    \tint minutes = miliseconds / 60000;\n+    \tint seconds = (miliseconds % 60000)/1000;\n+    \ttimeInMinutes = minutes + \":\" + (seconds<10?\"0\" + seconds:seconds);\n+\t\treturn timeInMinutes;\n+    }\n+    \n+    /**\n+     * Start or Pause playback of media content\n+     * \n+     * @param v\tView the touch event has been dispatched to\n+     */\n+\tpublic void playMedia(boolean isplay) {\n+\t\tSystem.err.println(\"height:- \"+mVideoHeight);\n+\t\tSystem.err.println(\"width:- \"+mVideoWidth);\n+\t\t\tif (isplay) {\n+\t\t\t\tvideoviewer.changeVideoSize(mVideoWidth, mVideoHeight);\n+\t\t\t\tvideoviewer.start();\n+\t\t\t\ttimer.start();\n+\t\t\t} else {\n+\t\t\t\tvideoviewer.pause();\n+\t\t\t\ttimer.cancel();\n+\t\t\t}\n+\t\t\n+    }\n+    \n+    /**\n+     * Pause and rewind to beginning of the media content\n+     * \n+     * @param v\tView the touch event has been dispatched to\n+     */\n+\tpublic void stopMedia() {\n+\t\tif (videoviewer.getCurrentPosition() != 0) {\n+\t\t\t\n+\t\t\tplaytogglebutton.setChecked(true);\n+\t\t\t\n+\t\t\tvideoviewer.pause();\n+\t\t\tvideoviewer.seekTo(0);\n+\t\t\ttimer.cancel();\n+\n+\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n+\t\t\tprogressBar.setProgress(0);\n+\t\t}\n+\t}\n+\n+\n+\t@Override\n+\tprotected void onStop() {\n+\t\t// TODO Auto-generated method stub\n+\t\tif(videoviewer != null)\n+\t\t\tvideoviewer.stopPlayback();\n+\t\tif (timer != null) {\n+\t\t\ttimer.cancel();\n+\t\t}\n+\t\tsuper.onStop();\n+\t}\n+\n+\t\n+\n+\t\n }\n\\ No newline at end of file"], "score": 1.0, "methods_t": ["CountDownTimer OnBufferingUpdateListener OnCheckedChangeListener OnClickListener OnSeekCompleteListener OnVideoSizeChangedListener String cancel changeVideoSize countTime d e findViewById getClass getCurrentPosition getDuration getName getSimpleName getVideoHeight getVideoWidth isPlaying parse pause playMedia println requestFocus seekTo setChecked setContentView setKeepScreenOn setLooping setOnBufferingUpdateListener setOnCheckedChangeListener setOnClickListener setOnCompletionListener setOnErrorListener setOnPreparedListener setOnSeekCompleteListener setOnVideoSizeChangedListener setProgress setRequestedOrientation setSecondaryProgress setText setVideoURI start stopMedia stopPlayback"], "_version_": 1526729485253083136, "subject_t": ["add"], "comments_t": ["\t//private ProgressDialog loading; \t\t\t//loading.hide(); \t\t//onVideoSizeChangedListener declaration \t\t// onBufferingUpdateListener declaration /*loading = new ProgressDialog(this);\nloading.setMessage(\"Loading...\");*/\n \t\t//loading.show(); /** \n * Convert time from milliseconds into minutes and seconds, proper to media player\n * @param miliseconds\tmedia content time in milliseconds\n * @return\ttime in format minutes:seconds\n */\n \t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.youtube.com/v/OwMCw2VG04I\")); //not working \t\t\t\t// TODO Auto-generated method stub \t\t\t// show updated information about the buffering progress \t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://184.72.239.149/vod/mp4:BigBuckBunny_115k.mov\")); \t\t// TODO Auto-generated method stub \t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.ooklnet.com/files/381/381489/video.mp4\")); /** \n * Pause and rewind to beginning of the media content\n * @param v\tView the touch event has been dispatched to\n */\n \t\t//loading.hide(); \t\t//videoviewer.setVideoURI(Uri.parse(\"http://daily3gp.com/vids/747.3gp\")); \t\t//videoviewer.setVideoURI(Uri.parse(\"http://commonsware.com/misc/test2.3gp\")); /** \n * Start or Pause playback of media content\n * @param v\tView the touch event has been dispatched to\n */\n /*play player*/\n /*pause player*/\n \t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v5.cache5.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYDSANFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\")); \t\t// update current playback time every 500ms until stop \t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v4.cache1.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYESARFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\")); \t\t// onSeekCompletionListener declaration \t\t//videoviewer.setVideoURI(Uri.parse(\"http://dl.dropbox.com/u/80419/santa.mp4\")); \t\t\t// TODO Auto-generated method stub \t\t\t// show current frame after changing the playback position \t\t\t\t\t//playMedia(true);"], "parents_ss": ["a13b9ef2d7c5c899324e1f9b81d3212f5546fbb3"], "id": "ash242186/VideoStreaming\u0000f19f7097ed28aa50857f3968b0ead75d462e411f\u0000src/com/example/steaming/MainActivity.java", "callsites_cs": "java.lang.Class.getSimpleName()#com.example.steaming.MainActivity.countTime(<unknown>)#com.example.steaming.MainActivity.playMedia(boolean)#java.lang.String.String()#<unknown>.getDuration()#com.example.steaming.MainActivity.countTime(<unknown>)#<unknown>.pause()#android.media.MediaPlayer.setLooping(boolean)#java.io.PrintStream.println(java.lang.String)#com.example.steaming.MainActivity.playMedia(boolean)#<unknown>.getCurrentPosition()#android.media.MediaPlayer.setOnSeekCompleteListener()#android.app.Activity.setRequestedOrientation(int)#android.media.MediaPlayer.setOnVideoSizeChangedListener()#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#android.widget.CompoundButton.setOnCheckedChangeListener(android.widget.CompoundButton.OnCheckedChangeListener)#com.example.steaming.MainActivity.countTime(int)#android.widget.TextView.setText(java.lang.String)#android.view.View.setOnClickListener()#<unknown>.start()#java.lang.Object.getClass()#android.util.Log.d(java.lang.String, java.lang.String)#android.os.CountDownTimer.cancel()#.OnBufferingUpdateListener()#<unknown>.getCurrentPosition()#com.example.steaming.MainActivity.stopMedia()#android.app.Activity.findViewById(<unknown>)#<unknown>.getDuration()#com.example.steaming.MainActivity.playMedia(boolean)#android.widget.ProgressBar.setProgress(int)#com.example.steaming.MainActivity.playMedia(boolean)#android.widget.ToggleButton.setChecked(boolean)#android.util.Log.d(java.lang.String, java.lang.String)#java.io.PrintStream.println(java.lang.String)#java.lang.Class.getName()#<unknown>.pause()#.CountDownTimer(int, int)#android.app.Activity.findViewById(<unknown>)#android.widget.ProgressBar.setSecondaryProgress(int)#android.net.Uri.parse(java.lang.String)#android.media.MediaPlayer.getVideoHeight()#android.util.Log.e(java.lang.String, java.lang.String)#android.app.Activity.findViewById(<unknown>)#com.example.steaming.MainActivity.stopMedia()#android.os.CountDownTimer.cancel()#<unknown>.setOnErrorListener(com.example.steaming.MainActivity)#android.widget.TextView.setText(java.lang.String)#<unknown>.requestFocus()#com.example.steaming.MainActivity.countTime(<unknown>)#.OnCheckedChangeListener()#android.widget.TextView.setText(<unknown>)#java.io.PrintStream.println(java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.stopPlayback()#<unknown>.changeVideoSize(int, int)#.OnClickListener()#android.media.MediaPlayer.isPlaying()#android.app.Activity.findViewById(<unknown>)#android.os.CountDownTimer.start()#android.media.MediaPlayer.setOnCompletionListener(null)#android.widget.TextView.setText(<unknown>)#android.os.CountDownTimer.cancel()#com.example.steaming.MainActivity.countTime(int)#java.io.PrintStream.println(java.lang.String)#.OnSeekCompleteListener()#android.app.Activity.setContentView(<unknown>)#java.lang.Object.getClass()#.OnVideoSizeChangedListener()#<unknown>.getCurrentPosition()#android.app.Activity.findViewById(<unknown>)#<unknown>.seekTo(int)#<unknown>.getCurrentPosition()#java.io.PrintStream.println(java.lang.String)#<unknown>.setVideoURI(android.net.Uri)#com.example.steaming.MainActivity.playMedia(boolean)#android.widget.ProgressBar.setProgress(int)#<unknown>.setKeepScreenOn(boolean)#android.widget.ProgressBar.setProgress(int)#java.io.PrintStream.println(java.lang.String)#<unknown>.setOnPreparedListener(com.example.steaming.MainActivity)#android.media.MediaPlayer.getVideoWidth()#android.media.MediaPlayer.setOnBufferingUpdateListener()", "callsites_t": ["java.lang.Class.getSimpleName() com.example.steaming.MainActivity.countTime(<unknown>) com.example.steaming.MainActivity.playMedia(boolean) java.lang.String.String() <unknown>.getDuration() com.example.steaming.MainActivity.countTime(<unknown>) <unknown>.pause() android.media.MediaPlayer.setLooping(boolean) java.io.PrintStream.println(java.lang.String) com.example.steaming.MainActivity.playMedia(boolean) <unknown>.getCurrentPosition() android.media.MediaPlayer.setOnSeekCompleteListener() android.app.Activity.setRequestedOrientation(int) android.media.MediaPlayer.setOnVideoSizeChangedListener() android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) android.widget.CompoundButton.setOnCheckedChangeListener(android.widget.CompoundButton.OnCheckedChangeListener) com.example.steaming.MainActivity.countTime(int) android.widget.TextView.setText(java.lang.String) android.view.View.setOnClickListener() <unknown>.start() java.lang.Object.getClass() android.util.Log.d(java.lang.String, java.lang.String) android.os.CountDownTimer.cancel() .OnBufferingUpdateListener() <unknown>.getCurrentPosition() com.example.steaming.MainActivity.stopMedia() android.app.Activity.findViewById(<unknown>) <unknown>.getDuration() com.example.steaming.MainActivity.playMedia(boolean) android.widget.ProgressBar.setProgress(int) com.example.steaming.MainActivity.playMedia(boolean) android.widget.ToggleButton.setChecked(boolean) android.util.Log.d(java.lang.String, java.lang.String) java.io.PrintStream.println(java.lang.String) java.lang.Class.getName() <unknown>.pause() .CountDownTimer(int, int) android.app.Activity.findViewById(<unknown>) android.widget.ProgressBar.setSecondaryProgress(int) android.net.Uri.parse(java.lang.String) android.media.MediaPlayer.getVideoHeight() android.util.Log.e(java.lang.String, java.lang.String) android.app.Activity.findViewById(<unknown>) com.example.steaming.MainActivity.stopMedia() android.os.CountDownTimer.cancel() <unknown>.setOnErrorListener(com.example.steaming.MainActivity) android.widget.TextView.setText(java.lang.String) <unknown>.requestFocus() com.example.steaming.MainActivity.countTime(<unknown>) .OnCheckedChangeListener() android.widget.TextView.setText(<unknown>) java.io.PrintStream.println(java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.stopPlayback() <unknown>.changeVideoSize(int, int) .OnClickListener() android.media.MediaPlayer.isPlaying() android.app.Activity.findViewById(<unknown>) android.os.CountDownTimer.start() android.media.MediaPlayer.setOnCompletionListener(null) android.widget.TextView.setText(<unknown>) android.os.CountDownTimer.cancel() com.example.steaming.MainActivity.countTime(int) java.io.PrintStream.println(java.lang.String) .OnSeekCompleteListener() android.app.Activity.setContentView(<unknown>) java.lang.Object.getClass() .OnVideoSizeChangedListener() <unknown>.getCurrentPosition() android.app.Activity.findViewById(<unknown>) <unknown>.seekTo(int) <unknown>.getCurrentPosition() java.io.PrintStream.println(java.lang.String) <unknown>.setVideoURI(android.net.Uri) com.example.steaming.MainActivity.playMedia(boolean) android.widget.ProgressBar.setProgress(int) <unknown>.setKeepScreenOn(boolean) android.widget.ProgressBar.setProgress(int) java.io.PrintStream.println(java.lang.String) <unknown>.setOnPreparedListener(com.example.steaming.MainActivity) android.media.MediaPlayer.getVideoWidth() android.media.MediaPlayer.setOnBufferingUpdateListener()"]}, {"user_sni": "Kris Skarbo", "repo_sni": "Skarbo/WifiMapper", "imports_t": ["java.util.List android.content.BroadcastReceiver android.os.CountDownTimer android.net.wifi.WifiManager android.net.NetworkInfo android.content.IntentFilter android.content.Context java.util.Timer android.content.Intent com.skarbo.wifimapper.listener.WifiListener android.util.Log android.net.ConnectivityManager android.net.wifi.ScanResult com.skarbo.wifimapper.model.WifiScan java.util.ArrayList java.util.TimerTask"], "email_sni": "kris.skarbo@gmail.com", "contents_t": ["package com.skarbo.wifimapper.handler;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Timer;\nimport java.util.TimerTask;\n\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.net.wifi.ScanResult;\nimport android.net.wifi.WifiManager;\nimport android.os.CountDownTimer;\nimport android.util.Log;\n\nimport com.skarbo.wifimapper.listener.WifiListener;\nimport com.skarbo.wifimapper.model.WifiScan;\n\npublic class WifiHandler extends BroadcastReceiver {\n\n\tprivate static final String TAG = \"WifiHandler\";\n\tprivate static final String WIFI_TIMER = \"wifi_timer\";\n\tprivate static final int DELAY_DEFAULT = 5000;\n\n\tprivate WifiListener wifiListener;\n\tprivate WifiManager wifiManager;\n\tprivate ConnectivityManager connectivityManager;\n\tprivate SDHandler sdHandler;\n\tprivate int delay = DELAY_DEFAULT;\n\tprivate Timer wifiTimer;\n\tprivate CountDownTimer wifiCountDownTimer;\n\n\tpublic WifiHandler(final WifiListener wifiListener) {\n\t\tthis.wifiListener = wifiListener;\n\t\tthis.wifiManager = (WifiManager) this.wifiListener.getContext().getSystemService(Context.WIFI_SERVICE);\n\t\tthis.connectivityManager = (ConnectivityManager) this.wifiListener.getContext().getSystemService(\n\t\t\t\tContext.CONNECTIVITY_SERVICE);\n\t\tthis.sdHandler = new SDHandler();\n\t\tthis.wifiTimer = new Timer(WIFI_TIMER);\n\t\t\n\t\tthis.wifiCountDownTimer = new CountDownTimer(delay, 100) {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\t\twifiListener.handleWifiTick(millisUntilFinished, delay);\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onFinish() {\n\t\t\t\ttry {\n\t\t\t\t\tdoWifiScan(delay);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tLog.e(TAG, e.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t// ... GET\n\n\tpublic WifiManager getWifiManager() {\n\t\treturn wifiManager;\n\t}\n\n\tpublic ConnectivityManager getConnectivityManager() {\n\t\treturn connectivityManager;\n\t}\n\n\tpublic SDHandler getSdHandler() {\n\t\treturn sdHandler;\n\t}\n\n\tpublic int getNextUniqueId() {\n\t\treturn sdHandler.getMapperDirectoryCount() + 1;\n\t}\n\n\t// ... /GET\n\n\t// ... SET\n\n\tpublic void setDelay(int delay) {\n\t\tthis.delay = delay;\n\t}\n\n\tpublic void setDelayDefault() {\n\t\tthis.delay = DELAY_DEFAULT;\n\t}\n\n\t// ... /SET\n\n\t// ... IS\n\n\tpublic boolean isWifiEnabled() {\n\t\treturn wifiManager.isWifiEnabled();\n\t}\n\n\tpublic boolean isWifiConnected() {\n\t\tNetworkInfo connectivityNetworkInfo = connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);\n\t\treturn connectivityNetworkInfo.isConnected();\n\t}\n\n\t// ... /IS\n\n\t// ... DO\n\n\tpublic void doWifiListen() {\n\t\t// Intent filter\n\t\tIntentFilter intentFilter = new IntentFilter();\n\t\tintentFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);\n\n\t\t// Register WiFi receiver\n\t\tthis.wifiListener.getContext().registerReceiver(this, intentFilter);\n\t}\n\n\tpublic void doWifiUnlisten() {\n\t\t// Unregister WiFio receiver\n\t\tthis.wifiListener.getContext().unregisterReceiver(this);\n\t}\n\n\tpublic void doWifiScan() throws Exception {\n\t\tdoWifiScan(DELAY_DEFAULT);\n\t}\n\n\tpublic void doWifiScan(int delay) throws Exception {\n\t\tthis.delay = delay;\n\t\tif (isWifiEnabled()) {\n\t\t\tif (isWifiConnected()) {\n\t\t\t\tthis.wifiManager.startScan();\n\t\t\t} else {\n\t\t\t\tthrow new Exception(\"Wifi is not connected\");\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Exception(\"Wifi is not enabled\");\n\t\t}\n\t}\n\n\t// ... /DO\n\n\t// ... ON\n\n\t@Override\n\tpublic void onReceive(Context context, Intent intent) {\n\t\tif (this.wifiListener != null) {\n\n\t\t\t// Generate list of WiFi scan\n\t\t\tList<WifiScan> wifiScans = new ArrayList<WifiScan>();\n\t\t\tString tag = \"\";\n\t\t\tfor (ScanResult scanResult : this.wifiManager.getScanResults()) {\n\t\t\t\ttry {\n\t\t\t\t\ttag = this.sdHandler.getTag(scanResult);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttag = \"\";\n\t\t\t\t\tLog.e(TAG, e.getMessage());\n\t\t\t\t}\n\t\t\t\twifiScans.add(new WifiScan(tag, scanResult));\n\t\t\t}\n\n\t\t\tthis.wifiListener.handleWifiScan(wifiScans);\n\n\t\t\t// Schedule new scan\n//\t\t\twifiTimer.schedule(new TimerTask() {\n//\n//\t\t\t\t@Override\n//\t\t\t\tpublic void run() {\n//\t\t\t\t\ttry {\n//\t\t\t\t\t\tdoWifiScan(delay);\n//\t\t\t\t\t} catch (Exception e) {\n//\t\t\t\t\t\tLog.e(TAG, e.getMessage());\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t}, delay);\n\t\t\tthis.wifiCountDownTimer.start();\n\t\t\t\n\t\t}\n\t}\n\n\t// ... /ON\n\n}\n"], "body_t": ["<empty>"], "date_tdt": "2013-06-06T12:35:31Z", "hash_sni": "c22604eea30ca0a1ab8007f9f9bf74f1ab268672", "name_sni": "src/com/skarbo/wifimapper/handler/WifiHandler.java", "patch_t": ["+package com.skarbo.wifimapper.handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.net.ConnectivityManager;\n+import android.net.NetworkInfo;\n+import android.net.wifi.ScanResult;\n+import android.net.wifi.WifiManager;\n+import android.os.CountDownTimer;\n+import android.util.Log;\n+\n+import com.skarbo.wifimapper.listener.WifiListener;\n+import com.skarbo.wifimapper.model.WifiScan;\n+\n+public class WifiHandler extends BroadcastReceiver {\n+\n+\tprivate static final String TAG = \"WifiHandler\";\n+\tprivate static final String WIFI_TIMER = \"wifi_timer\";\n+\tprivate static final int DELAY_DEFAULT = 5000;\n+\n+\tprivate WifiListener wifiListener;\n+\tprivate WifiManager wifiManager;\n+\tprivate ConnectivityManager connectivityManager;\n+\tprivate SDHandler sdHandler;\n+\tprivate int delay = DELAY_DEFAULT;\n+\tprivate Timer wifiTimer;\n+\tprivate CountDownTimer wifiCountDownTimer;\n+\n+\tpublic WifiHandler(final WifiListener wifiListener) {\n+\t\tthis.wifiListener = wifiListener;\n+\t\tthis.wifiManager = (WifiManager) this.wifiListener.getContext().getSystemService(Context.WIFI_SERVICE);\n+\t\tthis.connectivityManager = (ConnectivityManager) this.wifiListener.getContext().getSystemService(\n+\t\t\t\tContext.CONNECTIVITY_SERVICE);\n+\t\tthis.sdHandler = new SDHandler();\n+\t\tthis.wifiTimer = new Timer(WIFI_TIMER);\n+\t\t\n+\t\tthis.wifiCountDownTimer = new CountDownTimer(delay, 100) {\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic void onTick(long millisUntilFinished) {\n+\t\t\t\twifiListener.handleWifiTick(millisUntilFinished, delay);\n+\t\t\t}\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic void onFinish() {\n+\t\t\t\ttry {\n+\t\t\t\t\tdoWifiScan(delay);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tLog.e(TAG, e.getMessage());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\t// ... GET\n+\n+\tpublic WifiManager getWifiManager() {\n+\t\treturn wifiManager;\n+\t}\n+\n+\tpublic ConnectivityManager getConnectivityManager() {\n+\t\treturn connectivityManager;\n+\t}\n+\n+\tpublic SDHandler getSdHandler() {\n+\t\treturn sdHandler;\n+\t}\n+\n+\tpublic int getNextUniqueId() {\n+\t\treturn sdHandler.getMapperDirectoryCount() + 1;\n+\t}\n+\n+\t// ... /GET\n+\n+\t// ... SET\n+\n+\tpublic void setDelay(int delay) {\n+\t\tthis.delay = delay;\n+\t}\n+\n+\tpublic void setDelayDefault() {\n+\t\tthis.delay = DELAY_DEFAULT;\n+\t}\n+\n+\t// ... /SET\n+\n+\t// ... IS\n+\n+\tpublic boolean isWifiEnabled() {\n+\t\treturn wifiManager.isWifiEnabled();\n+\t}\n+\n+\tpublic boolean isWifiConnected() {\n+\t\tNetworkInfo connectivityNetworkInfo = connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);\n+\t\treturn connectivityNetworkInfo.isConnected();\n+\t}\n+\n+\t// ... /IS\n+\n+\t// ... DO\n+\n+\tpublic void doWifiListen() {\n+\t\t// Intent filter\n+\t\tIntentFilter intentFilter = new IntentFilter();\n+\t\tintentFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);\n+\n+\t\t// Register WiFi receiver\n+\t\tthis.wifiListener.getContext().registerReceiver(this, intentFilter);\n+\t}\n+\n+\tpublic void doWifiUnlisten() {\n+\t\t// Unregister WiFio receiver\n+\t\tthis.wifiListener.getContext().unregisterReceiver(this);\n+\t}\n+\n+\tpublic void doWifiScan() throws Exception {\n+\t\tdoWifiScan(DELAY_DEFAULT);\n+\t}\n+\n+\tpublic void doWifiScan(int delay) throws Exception {\n+\t\tthis.delay = delay;\n+\t\tif (isWifiEnabled()) {\n+\t\t\tif (isWifiConnected()) {\n+\t\t\t\tthis.wifiManager.startScan();\n+\t\t\t} else {\n+\t\t\t\tthrow new Exception(\"Wifi is not connected\");\n+\t\t\t}\n+\t\t} else {\n+\t\t\tthrow new Exception(\"Wifi is not enabled\");\n+\t\t}\n+\t}\n+\n+\t// ... /DO\n+\n+\t// ... ON\n+\n+\t@Override\n+\tpublic void onReceive(Context context, Intent intent) {\n+\t\tif (this.wifiListener != null) {\n+\n+\t\t\t// Generate list of WiFi scan\n+\t\t\tList<WifiScan> wifiScans = new ArrayList<WifiScan>();\n+\t\t\tString tag = \"\";\n+\t\t\tfor (ScanResult scanResult : this.wifiManager.getScanResults()) {\n+\t\t\t\ttry {\n+\t\t\t\t\ttag = this.sdHandler.getTag(scanResult);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\ttag = \"\";\n+\t\t\t\t\tLog.e(TAG, e.getMessage());\n+\t\t\t\t}\n+\t\t\t\twifiScans.add(new WifiScan(tag, scanResult));\n+\t\t\t}\n+\n+\t\t\tthis.wifiListener.handleWifiScan(wifiScans);\n+\n+\t\t\t// Schedule new scan\n+//\t\t\twifiTimer.schedule(new TimerTask() {\n+//\n+//\t\t\t\t@Override\n+//\t\t\t\tpublic void run() {\n+//\t\t\t\t\ttry {\n+//\t\t\t\t\t\tdoWifiScan(delay);\n+//\t\t\t\t\t} catch (Exception e) {\n+//\t\t\t\t\t\tLog.e(TAG, e.getMessage());\n+//\t\t\t\t\t}\n+//\t\t\t\t}\n+//\t\t\t}, delay);\n+\t\t\tthis.wifiCountDownTimer.start();\n+\t\t\t\n+\t\t}\n+\t}\n+\n+\t// ... /ON\n+\n+}"], "score": 1.0, "methods_t": ["ArrayList, WifiScan CountDownTimer Exception IntentFilter SDHandler Timer WifiScan add addAction doWifiScan e getContext getMapperDirectoryCount getMessage getNetworkInfo getScanResults getSystemService getTag handleWifiScan handleWifiTick isConnected isWifiConnected isWifiEnabled registerReceiver start startScan unregisterReceiver"], "_version_": 1526728978207866880, "subject_t": ["First commit"], "comments_t": ["//\t\t\t\t} \t// ... /DO \t// ... /IS \t\t// Register WiFi receiver \t\t\t// Generate list of WiFi scan \t\t// Intent filter \t// ... ON //\t\t\t\t\ttry { //\t\t\t\t\t} //\t\t\t\t\t\tLog.e(TAG, e.getMessage()); //\t\t\t\tpublic void run() { //\t\t\twifiTimer.schedule(new TimerTask() { //\t\t\t\t\t} catch (Exception e) { //\t\t\t}, delay); //\t\t\t\t\t\tdoWifiScan(delay); \t// ... /SET \t\t\t// Schedule new scan //\t\t\t\t@Override \t// ... SET // \t\t// Unregister WiFio receiver \t// ... IS \t// ... GET \t// ... /ON \t// ... /GET \t// ... DO"], "callsites_t": ["<unknown>.handleWifiScan(java.util.List<com.skarbo.wifimapper.handler.WifiScan>) java.lang.Exception.Exception(java.lang.String) <unknown>.getMapperDirectoryCount() java.util.Timer.Timer(java.lang.String) android.net.wifi.WifiManager.startScan() <unknown>.handleWifiTick(long, int) java.lang.Throwable.getMessage() android.content.IntentFilter.IntentFilter() android.net.NetworkInfo.isConnected() <unknown>.unregisterReceiver(com.skarbo.wifimapper.handler.WifiHandler) <unknown>.getTag(android.net.wifi.ScanResult) android.content.IntentFilter.addAction(java.lang.String) <unknown>.getContext() android.util.Log.e(java.lang.String, java.lang.String) <unknown>.getSystemService(java.lang.String) java.util.ArrayList<com.skarbo.wifimapper.handler.WifiScan>.ArrayList, WifiScan() .CountDownTimer(int, int) android.util.Log.e(java.lang.String, java.lang.String) java.lang.Exception.Exception(java.lang.String) <unknown>.getSystemService(java.lang.String) android.net.ConnectivityManager.getNetworkInfo(int) <unknown>.getContext() com.skarbo.wifimapper.handler.WifiHandler.isWifiConnected() java.lang.Throwable.getMessage() <unknown>.WifiScan(java.lang.String, android.net.wifi.ScanResult) com.skarbo.wifimapper.handler.WifiHandler.doWifiScan(int) <unknown>.SDHandler() android.os.CountDownTimer.start() com.skarbo.wifimapper.handler.WifiHandler.isWifiEnabled() com.skarbo.wifimapper.handler.WifiHandler.doWifiScan(int) <unknown>.registerReceiver(com.skarbo.wifimapper.handler.WifiHandler, android.content.IntentFilter) <unknown>.getContext() android.net.wifi.WifiManager.getScanResults() <unknown>.add(com.skarbo.wifimapper.handler.WifiScan) android.net.wifi.WifiManager.isWifiEnabled()"], "id": "Skarbo/WifiMapper\u0000c22604eea30ca0a1ab8007f9f9bf74f1ab268672\u0000src/com/skarbo/wifimapper/handler/WifiHandler.java", "callsites_cs": "<unknown>.handleWifiScan(java.util.List<com.skarbo.wifimapper.handler.WifiScan>)#java.lang.Exception.Exception(java.lang.String)#<unknown>.getMapperDirectoryCount()#java.util.Timer.Timer(java.lang.String)#android.net.wifi.WifiManager.startScan()#<unknown>.handleWifiTick(long, int)#java.lang.Throwable.getMessage()#android.content.IntentFilter.IntentFilter()#android.net.NetworkInfo.isConnected()#<unknown>.unregisterReceiver(com.skarbo.wifimapper.handler.WifiHandler)#<unknown>.getTag(android.net.wifi.ScanResult)#android.content.IntentFilter.addAction(java.lang.String)#<unknown>.getContext()#android.util.Log.e(java.lang.String, java.lang.String)#<unknown>.getSystemService(java.lang.String)#java.util.ArrayList<com.skarbo.wifimapper.handler.WifiScan>.ArrayList, WifiScan()#.CountDownTimer(int, int)#android.util.Log.e(java.lang.String, java.lang.String)#java.lang.Exception.Exception(java.lang.String)#<unknown>.getSystemService(java.lang.String)#android.net.ConnectivityManager.getNetworkInfo(int)#<unknown>.getContext()#com.skarbo.wifimapper.handler.WifiHandler.isWifiConnected()#java.lang.Throwable.getMessage()#<unknown>.WifiScan(java.lang.String, android.net.wifi.ScanResult)#com.skarbo.wifimapper.handler.WifiHandler.doWifiScan(int)#<unknown>.SDHandler()#android.os.CountDownTimer.start()#com.skarbo.wifimapper.handler.WifiHandler.isWifiEnabled()#com.skarbo.wifimapper.handler.WifiHandler.doWifiScan(int)#<unknown>.registerReceiver(com.skarbo.wifimapper.handler.WifiHandler, android.content.IntentFilter)#<unknown>.getContext()#android.net.wifi.WifiManager.getScanResults()#<unknown>.add(com.skarbo.wifimapper.handler.WifiScan)#android.net.wifi.WifiManager.isWifiEnabled()"}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Chronometer.OnChronometerTickListener android.widget.Chronometer android.view.View.OnClickListener android.os.Bundle android.widget.TextView android.widget.Button android.widget.RelativeLayout android.view.View android.util.Log android.view.Window android.app.Activity android.os.SystemClock android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\n\npublic class Voice extends Activity implements OnClickListener{\n\t\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate MyCount countDownTimer;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\t\n\t\t///////   ****** No Title Bar   ********* /////////\n        \n        \n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        \n        setContentView(R.layout.text_voice_camera);\n        \n        \n        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n        \n        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n        \n        setGraphicsVoice();\n        controlVoiceChronometer();\n        setClickListeners();\n        \n\t}\n\n\tprivate void setClickListeners() {\n\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n\t\t\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\t\t\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n\t\t\n\t\t\n\t\t\t\t\t\t////  ***** if stop button pressed ****** //////\n\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t}\n\t\t\t\t\t\t////  ***** if play button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n\t\t\tLog.v(\"hello\", text_voice_camera_time_details_chronometer.getText()+\"\");\n\t\t\tcountDownTimer = new MyCount(300000, 1000);\n\t\t\tcountDownTimer.start();\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t}\n\t\t\t\t\t\t////  ***** if rerecord button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\t\t}\n\t\t\n\t}\n\t\n\t\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(\"done!\");\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tString minutes = \"00\";\n\t\t\tif(millisUntilFinished >= 60000){\n\t\t\t\tLong temp = millisUntilFinished / 60000;\n\t\t\t\tif(temp < 10){\n\t\t\t\t\tminutes = \"0\"+temp;\n\t\t\t\t}else{\n\t\t\t\t\tminutes = temp+\"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tString seconds = (millisUntilFinished%60000)/1000+\"\";\n\t\t\tif((millisUntilFinished%60000)/1000 < 10){\n\t\t\t\t\tseconds = \"0\"+seconds;\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.setText(minutes +\":\" + seconds);\n\t\t}\n\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-09T12:13:50Z", "hash_sni": "1924418dfedb3f44c04e8038c40ed6783095ab81", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \n import android.app.Activity;\n import android.os.Bundle;\n+import android.os.CountDownTimer;\n import android.os.SystemClock;\n+import android.util.Log;\n import android.view.View;\n import android.view.View.OnClickListener;\n import android.view.Window;\n@@ -22,6 +24,7 @@ public class Voice extends Activity implements OnClickListener{\n \tprivate Button text_voice_camera_stop_button;\n \tprivate Button text_voice_camera_play_button;\n \tprivate Button text_voice_camera_rerecord_button;\n+\tprivate MyCount countDownTimer;\n \t\n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n@@ -62,6 +65,18 @@ public class Voice extends Activity implements OnClickListener{\n \n \tprivate void controlVoiceChronometer() {\n \t\ttext_voice_camera_time_details_chronometer.start();\n+\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n+\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n+\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n+\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n+\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n+\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n \t}\n \n \tprivate void setGraphicsVoice() {\n@@ -82,6 +97,10 @@ public class Voice extends Activity implements OnClickListener{\n \t\t\n \t\t\t\t\t\t////  ***** if stop button pressed ****** //////\n \t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n+\t\t\ttry{\n+\t\t\t\tcountDownTimer.cancel();\n+\t\t\t}catch(NullPointerException e){};\n+\t\t\t\n \t\t\ttext_voice_camera_time_details_chronometer.stop();\n \t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n \t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n@@ -89,22 +108,19 @@ public class Voice extends Activity implements OnClickListener{\n \t\t}\n \t\t\t\t\t\t////  ***** if play button pressed ****** //////\t\t\n \t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n-\t\t\t\n-\t\t\t/////////   *******   Countdown Timer  for Chronometer ******* /////////\n-\t\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n-\t\t\t\t\n-\t\t\t\t@Override\n-\t\t\t\tpublic void onChronometerTick(Chronometer arg0) {\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t});\n+\t\t\tLog.v(\"hello\", text_voice_camera_time_details_chronometer.getText()+\"\");\n+\t\t\tcountDownTimer = new MyCount(300000, 1000);\n+\t\t\tcountDownTimer.start();\n \t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n \t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n+\t\t\t\n \t\t}\n \t\t\t\t\t\t////  ***** if rerecord button pressed ****** //////\t\t\n \t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n+\t\t\ttry{\n+\t\t\t\tcountDownTimer.cancel();\n+\t\t\t}catch(NullPointerException e){};\n \t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n \t\t\ttext_voice_camera_time_details_chronometer.start();\n \t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n@@ -114,4 +130,38 @@ public class Voice extends Activity implements OnClickListener{\n \t\t\n \t}\n \t\n+\t\n+\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n+\t//countdowntimer is an abstract class, so extend it and fill in methods\n+\tprivate class MyCount extends CountDownTimer{\n+\n+\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n+\t\t\tsuper(millisInFuture, countDownInterval);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void onFinish() {\n+\t\t\ttext_voice_camera_time_details_chronometer.setText(\"done!\");\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void onTick(long millisUntilFinished) {\n+\t\t\tString minutes = \"00\";\n+\t\t\tif(millisUntilFinished >= 60000){\n+\t\t\t\tLong temp = millisUntilFinished / 60000;\n+\t\t\t\tif(temp < 10){\n+\t\t\t\t\tminutes = \"0\"+temp;\n+\t\t\t\t}else{\n+\t\t\t\t\tminutes = temp+\"\";\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tString seconds = (millisUntilFinished%60000)/1000+\"\";\n+\t\t\tif((millisUntilFinished%60000)/1000 < 10){\n+\t\t\t\t\tseconds = \"0\"+seconds;\n+\t\t\t}\n+\t\t\ttext_voice_camera_time_details_chronometer.setText(minutes +\":\" + seconds);\n+\t\t}\n+\n+\t}\n+\t\n }"], "score": 1.0, "methods_t": ["MyCount OnChronometerTickListener cancel controlVoiceChronometer elapsedRealtime findViewById getId getText length requestWindowFeature setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setVisibility start stop v"], "_version_": 1526735867241037824, "subject_t": ["Chronometer Complete with countdown"], "comments_t": ["\t//countdowntimer is an abstract class, so extend it and fill in methods         ///////   ***** Sets Title Voice Entry *********/////// \t\t///////   ****** No Title Bar   ********* /////////         ////////   ********    Initializing and assigning memory to UI Items **********    ///////// \t\t///////   ********     Adding On Click Actions to click listeners *********    ////////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////       \t\t////////    *******    Adding Click Listeners to UI Items ******** ////////// \t\t///////   ***** Sets Title Voice Entry *********///////         //////   ******  Shows Voice Details ********//////// \t\t\t\t\t\t////  ***** if rerecord button pressed ****** //////\t\t \t\t\t\t\t\t////  ***** if play button pressed ****** //////\t\t \t\t\t\t\t\t////  ***** if stop button pressed ****** //////"], "parents_ss": ["beef6c72d196355a1555a50552fad14f11bcdabc"], "id": "vinsol/expense-tracker\u00001924418dfedb3f44c04e8038c40ed6783095ab81\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.TextView.getText()#android.os.CountDownTimer.start()#android.widget.TextView.setText(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#android.widget.Chronometer.stop()#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#android.app.Activity.setContentView(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#com.vinsol.expensetracker.Voice.setClickListeners()#android.widget.Chronometer.setOnChronometerTickListener()#android.app.Activity.findViewById(<unknown>)#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#android.app.Activity.requestWindowFeature(int)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.MyCount.MyCount(int, int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#android.app.Activity.findViewById(<unknown>)#android.util.Log.v(java.lang.String, java.lang.String)#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)", "callsites_t": ["android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.TextView.getText() android.os.CountDownTimer.start() android.widget.TextView.setText(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.controlVoiceChronometer() android.widget.Chronometer.stop() android.view.View.setVisibility(int) android.widget.Chronometer.start() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() android.app.Activity.setContentView(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) com.vinsol.expensetracker.Voice.setClickListeners() android.widget.Chronometer.setOnChronometerTickListener() android.app.Activity.findViewById(<unknown>) android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() android.app.Activity.requestWindowFeature(int) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.MyCount.MyCount(int, int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() com.vinsol.expensetracker.Voice.setGraphicsVoice() android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) android.view.View.getId() android.app.Activity.findViewById(<unknown>) android.util.Log.v(java.lang.String, java.lang.String) android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent android.view.Window com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class Voice extends Activity implements OnClickListener{\n\t\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\t\n\t\t///////   ****** No Title Bar   ********* /////////\n        \n        \n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        \n        setContentView(R.layout.text_voice_camera);\n        \n        \n        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n        \n        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n    \ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n    \ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n    \ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n    \tmDatabaseAdapter = new DatabaseAdapter(this);\n    \t\n    \t////////*********     Get id from intent extras     ********   ////////////\n        intentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n        _id = intentExtras.getLong(\"_id\");\n    \t\n        \n        \n        \n        ////////   ********  Handle Date Bar   *********   ////////\n        new DateHandler(this);\n        \n        \n        ////////   ********   Starts Recording each time activity starts   ******   ///////\n        if(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n        \tsetGraphicsVoice();\n        \tcontrolVoiceChronometer();\n        \tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n        \tmRecordingHelper.startRecording();\n        } \n        else {\n        \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n        }\n        setClickListeners();\n\t\t\n\t\t////////*********     Get Last most accurate location info   *********   /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\t\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\n\t\n\t@Override\n\tprotected void onPause() {\n\t\t\n\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t}\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n\t\t\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n\t\t\n\t\t\n\t\t////  ***** if stop button pressed ****** //////\n\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n\t\t\tmRecordingHelper.stopRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t}\n\t\t\n\t\t\n\t\t////  ***** if play button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n\t\t\tmAudioPlay = new AudioPlay(_id+\"\",this);\n\t\t\t\n\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n\t\t\tif(!mAudioPlay.isAudioPlaying()){\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\t\t\n\t\t////  ***** if rerecord button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){}\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\t\t\t\n\t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n\t\t\tif(mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\t\t\n\t\t////////********  Adding Action to save entry     *********    ///////////\n\t\t\n\t\tif(v.getId() == R.id.text_voice_camera_save_entry){\n\t\t\tsaveEntry();\n\t\t}\n\t\n\t\n\t\t/////////     *********   Adding action if delete button **********  /////////\n\t\n\t\tif(v.getId() == R.id.text_voice_camera_delete){\n\t\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t}\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\n\t\t\tnew FileDelete(_id);\n\t\t\n\t\t\t//////   *******   Delete entry from database ********   /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n\t\n\tprivate void saveEntry() {\n\t\t///////    *******  Creating HashMap to update info   *******  ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, text_voice_camera_amount.getText().toString());\n\t\t\t\t\n\t\tif(text_voice_camera_tag.getText().toString() != \"\"){\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\t\t\n\t\tif(!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString))\t\n\t\ttry{\n\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\t//////    *******   Update database if user added additional info   *******  ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\tstartActivity(intentExpenseListing);\n\t}\n\n\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\t\n\t\n\t///// ******************  Handling back press of key   ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n\t     if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t    \t onBackPressed();\n\t         return true;\n\t      }\n\t    return super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t    // This will be called either automatically for you on 2.0    \n\t    // or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t    return;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-24T10:31:29Z", "hash_sni": "ec69e0a972fad3ed1f7e08df339475bc0b645454", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" import android.os.Bundle;\n import android.os.CountDownTimer;\n import android.os.SystemClock;\n+import android.view.KeyEvent;\n import android.view.View;\n import android.view.View.OnClickListener;\n import android.view.Window;\n@@ -44,6 +45,7 @@ public class Voice extends Activity implements OnClickListener{\n \tprivate Bundle intentExtras;\n \tprivate DatabaseAdapter mDatabaseAdapter;\n \tprivate TextView text_voice_camera_date_bar_dateview;\n+\tprivate String dateViewString;\n \t\n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n@@ -97,10 +99,14 @@ public class Voice extends Activity implements OnClickListener{\n \t\t////////*********     Get Last most accurate location info   *********   /////////\n \t\tLocationLast mLocationLast = new LocationLast(this);\n \t\tmLocationLast.getLastLocation();\n-\t\t\n \t}\n \t\n-\t\n+\t@Override\n+\tprotected void onResume() {\n+\t\tsuper.onResume();\n+\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n+\t}\n+\n \t\n \t@Override\n \tprotected void onPause() {\n@@ -231,28 +237,7 @@ public class Voice extends Activity implements OnClickListener{\n \t\t////////********  Adding Action to save entry     *********    ///////////\n \t\t\n \t\tif(v.getId() == R.id.text_voice_camera_save_entry){\n-\t\t\t///////    *******  Creating HashMap to update info   *******  ////////\n-\t\t\tHashMap<String, String> _list = new HashMap<String, String>();\n-\t\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n-\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, text_voice_camera_amount.getText().toString());\n-\t\t\t\n-\t\t\tif(text_voice_camera_tag.getText().toString() != \"\"){\n-\t\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n-\t\t\t}\n-\t\t\n-\t\t\ttry{\n-\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n-\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n-\t\t\t} catch (Exception e){\n-\t\t\t\te.printStackTrace();\n-\t\t\t}\n-\t\t\t//////    *******   Update database if user added additional info   *******  ///////\n-\t\t\tmDatabaseAdapter.open();\n-\t\t\tmDatabaseAdapter.editDatabase(_list);\n-\t\t\tmDatabaseAdapter.close();\n-\t\t\tfinish();\n-\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n-\t\t\tstartActivity(intentExpenseListing);\n+\t\t\tsaveEntry();\n \t\t}\n \t\n \t\n@@ -286,6 +271,33 @@ public class Voice extends Activity implements OnClickListener{\n \t}\n \t\n \t\n+\tprivate void saveEntry() {\n+\t\t///////    *******  Creating HashMap to update info   *******  ////////\n+\t\tHashMap<String, String> _list = new HashMap<String, String>();\n+\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n+\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, text_voice_camera_amount.getText().toString());\n+\t\t\t\t\n+\t\tif(text_voice_camera_tag.getText().toString() != \"\"){\n+\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n+\t\t}\n+\t\t\n+\t\tif(!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString))\t\n+\t\ttry{\n+\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n+\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n+\t\t} catch (Exception e){\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//////    *******   Update database if user added additional info   *******  ///////\n+\t\tmDatabaseAdapter.open();\n+\t\tmDatabaseAdapter.editDatabase(_list);\n+\t\tmDatabaseAdapter.close();\n+\t\tfinish();\n+\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n+\t\tstartActivity(intentExpenseListing);\n+\t}\n+\n+\n \t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n \t//countdowntimer is an abstract class, so extend it and fill in methods\n \tprivate class MyCount extends CountDownTimer{\n@@ -311,4 +323,19 @@ public class Voice extends Activity implements OnClickListener{\n \t}\n \t\n \t\n+\t///// ******************  Handling back press of key   ********** ///////////\n+\tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n+\t     if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n+\t    \t onBackPressed();\n+\t         return true;\n+\t      }\n+\t    return super.onKeyDown(keyCode, event);\n+\t}\n+\n+\tpublic void onBackPressed() {\n+\t    // This will be called either automatically for you on 2.0    \n+\t    // or later, or by the code above on earlier versions of the platform.\n+\t\tsaveEntry();\n+\t    return;\n+\t}\n }"], "score": 1.0, "methods_t": ["AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper cancel close controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish getBundleExtra getDisplayTime getExternalStorageState getId getIntent getLastLocation getLong getPlayBackTime getRepeatCount getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open printStackTrace put requestWindowFeature saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526736074720673792, "subject_t": ["Handled back button press"], "comments_t": ["\t\t////////********  Adding Action to save entry     *********    /////////// \t//countdowntimer is an abstract class, so extend it and fill in methods         ///////   ***** Sets Title Voice Entry *********/////// \t\t///////   ****** No Title Bar   ********* /////////         ////////   ********    Initializing and assigning memory to UI Items **********    /////////     \t////////*********     Get id from intent extras     ********   //////////// \t    // This will be called either automatically for you on 2.0     \t\t\t///////   *******   Chronometer Starts Countdown   ******  /////// \t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** /////// \t\t\t//////  ******  Restarts chronometer and recording   *******  //////// \t\t////////    *******    Adding Click Listeners to UI Items ******** ////////// \t\t\t//////   *****  Check whether audio is recording or not   *******   /////// \t///// ******************  Handling back press of key   ********** /////////// \t\t////////*********     Get Last most accurate location info   *********   ///////// \t\t////  ***** if play button pressed ****** //////\t\t \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   //////// \t\t\t//////   *******   Delete entry from database ********   ///////// \t\t////  ***** if rerecord button pressed ****** //////\t\t \t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t//////    *******   Update database if user added additional info   *******  /////// \t\t///////   ********     Adding On Click Actions to click listeners *********    ////////// \t\t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////       \t\t////  ***** if stop button pressed ****** //////         ////////   ********   Starts Recording each time activity starts   ******   /////// \t    // or later, or by the code above on earlier versions of the platform. \t\t///////   ***** Sets Title Voice Entry *********/////// \t\t\t//////   ******   Handles UI items on button click  ******  ///////         //////   ******  Shows Voice Details ********//////// \t\t\t//////\t     ********   to handle playback of recorded file   *********   //////// \t\t///////    *******  Creating HashMap to update info   *******  ////////         ////////   ********  Handle Date Bar   *********   //////// \t\t/////////     *********   Adding action if delete button **********  /////////"], "parents_ss": ["25e71480e9736bfda391bbeb6def56bfac912cf4"], "id": "vinsol/expense-tracker\u0000ec69e0a972fad3ed1f7e08df339475bc0b645454\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.isRecording()#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.lang.Long.toString(long)#android.widget.EditText.getText()#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#android.app.Activity.findViewById(<unknown>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getLastLocation()#android.widget.TextView.getText()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#com.vinsol.expensetracker.Voice.onBackPressed()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.app.Activity.finish()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.lang.Long.toString(long)#com.vinsol.expensetracker.Voice.setGraphicsVoice()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#<unknown>.stopPlayBack()#android.view.View.setVisibility(int)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DisplayTime()#android.os.SystemClock.elapsedRealtime()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.widget.TextView.getText()#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#android.view.KeyEvent.getRepeatCount()#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#android.os.Environment.getExternalStorageState()#android.widget.Chronometer.setOnChronometerTickListener()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.length()#<unknown>.getPlayBackTime()#.OnChronometerTickListener()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.requestWindowFeature(int)#<unknown>.open()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#android.view.View.setVisibility(int)#android.widget.Toast.show()#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.startPlayBack()#java.lang.CharSequence.toString()#<unknown>.close()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#<unknown>.isRecording()#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)#android.app.Activity.finish()", "callsites_t": ["<unknown>.isRecording() <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.view.View.setVisibility(int) android.widget.Chronometer.start() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.lang.Long.toString(long) android.widget.EditText.getText() <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() android.app.Activity.findViewById(<unknown>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) android.view.View.setVisibility(int) <unknown>.getLastLocation() android.widget.TextView.getText() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() com.vinsol.expensetracker.Voice.onBackPressed() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.app.Activity.finish() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.lang.Long.toString(long) com.vinsol.expensetracker.Voice.setGraphicsVoice() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() <unknown>.stopPlayBack() android.view.View.setVisibility(int) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DisplayTime() android.os.SystemClock.elapsedRealtime() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.widget.TextView.getText() android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) android.view.KeyEvent.getRepeatCount() com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) android.os.Environment.getExternalStorageState() android.widget.Chronometer.setOnChronometerTickListener() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.length() <unknown>.getPlayBackTime() .OnChronometerTickListener() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.requestWindowFeature(int) <unknown>.open() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) android.view.View.setVisibility(int) android.widget.Toast.show() android.view.View.setVisibility(int) android.widget.Chronometer.start() android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.startPlayBack() java.lang.CharSequence.toString() <unknown>.close() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) android.view.View.getId() <unknown>.isRecording() android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long) android.app.Activity.finish()"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent android.view.Window com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class Voice extends Activity implements OnClickListener{\n\t\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\t\n\t\t///////   ****** No Title Bar   ********* /////////\n        \n        \n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        \n        setContentView(R.layout.text_voice_camera);\n        \n        \n        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n        \n        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n    \ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n    \ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n    \ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n    \tmDatabaseAdapter = new DatabaseAdapter(this);\n    \t\n    \t////////*********     Get id from intent extras     ********   ////////////\n        intentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n        _id = intentExtras.getLong(\"_id\");\n    \t\n        \n        \n        \n        ////////   ********  Handle Date Bar   *********   ////////\n        new DateHandler(this);\n        \n        \n        ////////   ********   Starts Recording each time activity starts   ******   ///////\n        if(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n        \tsetGraphicsVoice();\n        \tcontrolVoiceChronometer();\n        \tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n        \tmRecordingHelper.startRecording();\n        } \n        else {\n        \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n        }\n        setClickListeners();\n\t\t\n\t\t////////*********     Get Last most accurate location info   *********   /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\t\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\n\t\n\t@Override\n\tprotected void onPause() {\n\t\t\n\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t}\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n\t\t\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n\t\t\n\t\t\n\t\t////  ***** if stop button pressed ****** //////\n\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n\t\t\tmRecordingHelper.stopRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t}\n\t\t\n\t\t\n\t\t////  ***** if play button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n\t\t\tmAudioPlay = new AudioPlay(_id+\"\",this);\n\t\t\t\n\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n\t\t\tif(!mAudioPlay.isAudioPlaying()){\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\t\t\n\t\t////  ***** if rerecord button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){}\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\t\t\t\n\t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n\t\t\tif(mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\t\t\n\t\t////////********  Adding Action to save entry     *********    ///////////\n\t\t\n\t\tif(v.getId() == R.id.text_voice_camera_save_entry){\n\t\t\tsaveEntry();\n\t\t}\n\t\n\t\n\t\t/////////     *********   Adding action if delete button **********  /////////\n\t\n\t\tif(v.getId() == R.id.text_voice_camera_delete){\n\t\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\t\ttry{\n\t\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\n\t\t\tnew FileDelete(_id);\n\t\t\n\t\t\t//////   *******   Delete entry from database ********   /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n\t\n\tprivate void saveEntry() {\n\t\t///////    *******  Creating HashMap to update info   *******  ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\t\t\n\t\tif(!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")){\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double)((int)((mAmount+0.005)*100.0)/100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\t\n\t\tif(text_voice_camera_tag.getText().toString() != \"\"){\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\t\t\n\t\tif(!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString))\t\n\t\ttry{\n\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\t//////    *******   Update database if user added additional info   *******  ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\tstartActivity(intentExpenseListing);\n\t}\n\n\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\t\n\t\n\t///// ******************  Handling back press of key   ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n\t     if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t    \t onBackPressed();\n\t         return true;\n\t      }\n\t    return super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t    // This will be called either automatically for you on 2.0    \n\t    // or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t    return;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-25T13:29:10Z", "hash_sni": "71cf5cf3341812a83d21d1f9b8f9df86f8a3a1f7", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \t\tif(v.getId() == R.id.text_voice_camera_delete){\n \t\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n \t\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n-\t\t\tif(mRecordingHelper.isRecording()){\n-\t\t\t\tmRecordingHelper.stopRecording();\n+\t\t\ttry{\n+\t\t\t\tif(mRecordingHelper.isRecording()){\n+\t\t\t\t\tmRecordingHelper.stopRecording();\n+\t\t\t\t}\n+\t\t\t}catch(NullPointerException e){\n+\t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t\t\n \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////"], "score": 1.0, "methods_t": ["AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper cancel close controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish getBundleExtra getDisplayTime getExternalStorageState getId getIntent getLastLocation getLong getPlayBackTime getRepeatCount getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble printStackTrace put requestWindowFeature saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526736718604009472, "subject_t": ["disable voice + picture entry when SDCard isn't mounted and app crashes when sdcard isn't mounted and we press voice then delete"], "comments_t": ["\t\t////////********  Adding Action to save entry     *********    /////////// \t//countdowntimer is an abstract class, so extend it and fill in methods         ///////   ***** Sets Title Voice Entry *********/////// \t\t///////   ****** No Title Bar   ********* /////////         ////////   ********    Initializing and assigning memory to UI Items **********    /////////     \t////////*********     Get id from intent extras     ********   //////////// \t    // This will be called either automatically for you on 2.0     \t\t\t///////   *******   Chronometer Starts Countdown   ******  /////// \t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** /////// \t\t\t//////  ******  Restarts chronometer and recording   *******  //////// \t\t////////    *******    Adding Click Listeners to UI Items ******** ////////// \t\t\t//////   *****  Check whether audio is recording or not   *******   /////// \t///// ******************  Handling back press of key   ********** /////////// \t\t////////*********     Get Last most accurate location info   *********   ///////// \t\t////  ***** if play button pressed ****** //////\t\t \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   //////// \t\t\t//////   *******   Delete entry from database ********   ///////// \t\t////  ***** if rerecord button pressed ****** //////\t\t \t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t//////    *******   Update database if user added additional info   *******  /////// \t\t///////   ********     Adding On Click Actions to click listeners *********    ////////// \t\t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////       \t\t////  ***** if stop button pressed ****** //////         ////////   ********   Starts Recording each time activity starts   ******   /////// \t    // or later, or by the code above on earlier versions of the platform. \t\t///////   ***** Sets Title Voice Entry *********/////// \t\t\t//////   ******   Handles UI items on button click  ******  ///////         //////   ******  Shows Voice Details ********//////// \t\t\t//////\t     ********   to handle playback of recorded file   *********   //////// \t\t///////    *******  Creating HashMap to update info   *******  ////////         ////////   ********  Handle Date Bar   *********   //////// \t\t/////////     *********   Adding action if delete button **********  /////////"], "parents_ss": ["8bac2deef1cd35abda043ca84e78770bc802dd09"], "id": "vinsol/expense-tracker\u000071cf5cf3341812a83d21d1f9b8f9df86f8a3a1f7\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.isRecording()#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.lang.Long.toString(long)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getLastLocation()#android.widget.TextView.getText()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#com.vinsol.expensetracker.Voice.onBackPressed()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.app.Activity.finish()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.lang.Long.toString(long)#com.vinsol.expensetracker.Voice.setGraphicsVoice()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#android.view.View.setVisibility(int)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DisplayTime()#android.os.SystemClock.elapsedRealtime()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.widget.TextView.getText()#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#android.view.KeyEvent.getRepeatCount()#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#android.os.Environment.getExternalStorageState()#android.widget.Chronometer.setOnChronometerTickListener()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.length()#<unknown>.getPlayBackTime()#.OnChronometerTickListener()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.requestWindowFeature(int)#<unknown>.open()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#android.view.View.setVisibility(int)#android.widget.Toast.show()#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.startPlayBack()#java.lang.CharSequence.toString()#<unknown>.close()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#java.lang.Double.toString()#android.widget.Chronometer.stop()#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#<unknown>.isRecording()#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)#android.app.Activity.finish()", "callsites_t": ["<unknown>.isRecording() <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.view.View.setVisibility(int) android.widget.Chronometer.start() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.lang.Long.toString(long) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) android.view.View.setVisibility(int) <unknown>.getLastLocation() android.widget.TextView.getText() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() com.vinsol.expensetracker.Voice.onBackPressed() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.app.Activity.finish() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.lang.Long.toString(long) com.vinsol.expensetracker.Voice.setGraphicsVoice() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() android.view.View.setVisibility(int) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DisplayTime() android.os.SystemClock.elapsedRealtime() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.widget.TextView.getText() android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) android.view.KeyEvent.getRepeatCount() com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) android.os.Environment.getExternalStorageState() android.widget.Chronometer.setOnChronometerTickListener() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.length() <unknown>.getPlayBackTime() .OnChronometerTickListener() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.requestWindowFeature(int) <unknown>.open() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) android.view.View.setVisibility(int) android.widget.Toast.show() android.view.View.setVisibility(int) android.widget.Chronometer.start() android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.startPlayBack() java.lang.CharSequence.toString() <unknown>.close() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) java.lang.Double.toString() android.widget.Chronometer.stop() java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) android.view.View.getId() <unknown>.isRecording() android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long) android.app.Activity.finish()"]}, {"user_sni": "Kim Hansen", "repo_sni": "kimhansen/Fairphone---DEPRECATED", "imports_t": ["android.util.AttributeSet android.content.Context android.graphics.BitmapShader org.fairphone.launcher.R android.graphics.Shader android.graphics.drawable.Drawable android.graphics.Paint android.graphics.RectF android.graphics.Rect android.view.View android.graphics.Bitmap org.fairphone.launcher.util.KWMathUtils android.graphics.Canvas"], "email_sni": "kim@kwamecorp.com", "contents_t": ["/*\n * Copyright (C) 2013 Fairphone Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.fairphone.launcher.edgeswipe.ui;\n\nimport org.fairphone.launcher.R;\nimport org.fairphone.launcher.util.KWMathUtils;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapShader;\nimport android.graphics.Canvas;\nimport android.graphics.Paint;\nimport android.graphics.Rect;\nimport android.graphics.RectF;\nimport android.graphics.Shader;\nimport android.graphics.drawable.Drawable;\nimport android.util.AttributeSet;\nimport android.view.View;\n\npublic class CircularCountdownTimerView extends View {\n\tpublic interface CircularCountdownListener {\n\t\tpublic void onCountdownFinished(CircularCountdownTimerView countdownView);\n\t}\n\n\tprivate Drawable timerDrawable;\n\tprivate RectF clipBounds = new RectF();\n\tprivate RectF viewBounds = new RectF();\n\tprivate Rect viewBoundsI = new Rect();\n\tprivate Paint clipPaint;\n\tprivate Paint sourcePaint;\n\n\tprivate Bitmap viewBitmap;\n\tprivate BitmapShader timerShader;\n\n\tprivate float curFillRatio = 1.0f;\n\tprivate float startFillRatio = 1.0f;\n\tprivate float endFillRatio = 0.0f;\n\tprivate long animationDuration = 0;\n\tprivate long animationDelay = 0;\n\tprivate long curAnimationTime = 0;\n\tprivate long prevFrame = 0;\n\tprivate boolean isAnimating = false;\n\n\tprivate int prevWidth = 0;\n\tprivate int prevHeight = 0;\n\n\tCircularCountdownListener listener;\n\n\tpublic CircularCountdownTimerView(Context context) {\n\t\tsuper(context);\n\t\tinit();\n\t}\n\n\tpublic CircularCountdownTimerView(Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\tinit();\n\t}\n\n\tpublic CircularCountdownTimerView(Context context, AttributeSet attrs,\n\t\t\tint defStyle) {\n\t\tsuper(context, attrs, defStyle);\n\t\tinit();\n\t}\n\n\tpublic void startCountdownAnimation(long duration) {\n\t\tstartCountdownAnimation(duration, 0);\n\t}\n\n\tpublic void startCountdownAnimation(long duration, long delay) {\n\t\tprevFrame = System.currentTimeMillis();\n\t\tanimationDelay = delay;\n\t\tstartFillRatio = 1.0f;\n\t\tcurFillRatio = 1.0f;\n\t\tendFillRatio = 0.0f;\n\t\tisAnimating = true;\n\t\tcurAnimationTime = 0;\n\t\tanimationDuration = duration;\n\n\t\tpostInvalidate();\n\t}\n\n\tpublic boolean isCountingDown() {\n\t\treturn isAnimating;\n\t}\n\n\tpublic boolean isFinished() {\n\t\treturn curFillRatio == 0.0f;\n\t}\n\n\tpublic float getCountdownRatio() {\n\t\treturn curFillRatio;\n\t}\n\n\tpublic void pauseCountdownAnimation() {\n\t\tisAnimating = false;\n\t\tpostInvalidate();\n\t}\n\n\tpublic void resumeCountdownAnimation() {\n\t\tisAnimating = true;\n\t\tprevFrame = System.currentTimeMillis();\n\t\tpostInvalidate();\n\t}\n\n\tpublic void cancelCountdownAnimation() {\n\t\talpha = 0;\n\t\tisAnimating = false;\n\t\tcurFillRatio = 1.0f;\n\t\tcurAnimationTime = 0;\n\t\tpostInvalidate();\n\t}\n\n\tpublic void finishCountdownAnimation() {\n\t\talpha = 0;\n\t\tpostInvalidate();\n\t\tcurAnimationTime = animationDuration;\n\t\tcurFillRatio = 0.0f;\n\t}\n\n\tpublic void forceCountdownBegin() {\n\t\talpha = 0;\n\t\tcurFillRatio = 1.0f;\n\t\tisAnimating = false;\n\t\tpostInvalidate();\n\t}\n\n\tpublic void forceCountdownEnd() {\n\t\talpha = 0;\n\t\tcurFillRatio = 0.0f;\n\t\tisAnimating = false;\n\t\tpostInvalidate();\n\t}\n\n\tpublic CircularCountdownListener getCircularCountdownListener() {\n\t\treturn listener;\n\t}\n\n\tpublic void setCircularCountdownListener(CircularCountdownListener listener) {\n\t\tthis.listener = listener;\n\t}\n\n\t@Override\n\tprotected void onAttachedToWindow() {\n\t\tsuper.onAttachedToWindow();\n\t}\n\n\t@Override\n\tprotected void onDetachedFromWindow() {\n\t\tclipPaint.setShader(null);\n\t\ttimerShader = null;\n\t\tviewBitmap.recycle();\n\t\tviewBitmap = null;\n\t\tsuper.onDetachedFromWindow();\n\t}\n\n\tprivate void init() {\n\t\ttimerDrawable = getContext().getResources().getDrawable(\n\t\t\t\tR.drawable.fp_fav_icon_ring);\n\n\t\tclipPaint = new Paint();\n\t\tclipPaint.setColor(0xFFFFFFFF);\n\t\tsourcePaint = new Paint();\n\t\tsourcePaint.setColor(0xFFFFFFFF);\n\t}\n\n\t@Override\n\tprotected void onLayout(boolean changed, int left, int top, int right,\n\t\t\tint bottom) {\n\t\tsuper.onLayout(changed, left, top, right, bottom);\n\n\t\tfloat w = getWidth();\n\t\tfloat h = getHeight();\n\t\tfloat w2 = w / 2;\n\t\tfloat h2 = h / 2;\n\t\ttimerDrawable.setBounds(0, 0, (int) w, (int) h);\n\n\t\tfloat radius = (float) Math.sqrt(w2 * w2 + h2 * h2);\n\t\tclipBounds.set(w2 - radius, h2 - radius, w2 + radius, h2 + radius);\n\t\tviewBounds.set(0, 0, (int) w, (int) h);\n\t\tviewBoundsI.set(0, 0, (int) w, (int) h);\n\n\t\tif (getWidth() != prevWidth || getHeight() != prevHeight\n\t\t\t\t|| viewBitmap == null) {\n\t\t\tif (viewBitmap != null) {\n\t\t\t\tviewBitmap.recycle();\n\t\t\t}\n\n\t\t\tviewBitmap = Bitmap.createBitmap(getWidth(), getHeight(),\n\t\t\t\t\tBitmap.Config.ARGB_8888);\n\t\t\tCanvas canvas = new Canvas(viewBitmap);\n\t\t\t// canvas.drawBitmap(sourceBitmap, auxRectI, viewBoundsI,\n\t\t\t// sourcePaint);\n\t\t\ttimerDrawable.setBounds(viewBoundsI);\n\t\t\ttimerDrawable.draw(canvas);\n\n\t\t\ttimerShader = new BitmapShader(viewBitmap, Shader.TileMode.CLAMP,\n\t\t\t\t\tShader.TileMode.CLAMP);\n\t\t\tclipPaint.setShader(timerShader);\n\t\t}\n\n\t\tprevWidth = getWidth();\n\t\tprevHeight = getHeight();\n\t}\n\n\t@Override\n\tpublic void draw(Canvas canvas) {\n\t\tsuper.draw(canvas);\n\t\tupdateAnimation();\n\n\t\tif (curAnimationTime - animationDelay > 0) {\n\t\t\talpha += 0.03f;\n\t\t\t\n\t\t\tif(alpha > 1.0f){\n\t\t\t\talpha = 1.0f;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\tsetAlpha(alpha);\n\t\t\n\t\tif (timerShader != null) {\n\t\t\tcanvas.drawArc(viewBounds, 0, 360.f * curFillRatio, true,\n\t\t\t\t\tclipPaint);\n\t\t}\n\t}\n\tfloat alpha = 0;\n\t\n\tprivate void updateAnimation() {\n\t\tlong curTime = System.currentTimeMillis();\n\t\tlong dt = curTime - prevFrame;\n\t\tif (dt > 500) {\n\t\t\tdt = 1000 / 60;\n\t\t}\n\t\tif (isAnimating) {\n\t\t\tcurAnimationTime += dt;\n\t\t\tboolean isFinished = false;\n\t\t\tlong curAnimTime = Math.max(curAnimationTime - animationDelay, 0);\n\t\t\tif (curAnimTime >= animationDuration) {\n\t\t\t\tcurAnimTime = animationDuration;\n\t\t\t\tcurAnimTime = animationDuration + animationDelay;\n\t\t\t\tisFinished = true;\n\t\t\t\tisAnimating = false;\n\t\t\t\talpha = 0;\n\t\t\t}\n\n\t\t\tfloat timeRatio = KWMathUtils.getLongRatio(0, animationDuration,\n\t\t\t\t\tcurAnimTime);\n\t\t\tcurFillRatio = KWMathUtils.blend(startFillRatio, endFillRatio,\n\t\t\t\t\ttimeRatio);\n\n\t\t\tinvalidate();\n\t\t\tif (isFinished) {\n\t\t\t\talpha = 0;\n\t\t\t\tif (listener != null) {\n\t\t\t\t\tlistener.onCountdownFinished(this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprevFrame = curTime;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2013-11-22T16:42:47Z", "hash_sni": "5f9a38b04bcd14f426004c5b71e80381ed50d5a1", "name_sni": "FairPhoneHome/src/org/fairphone/launcher/edgeswipe/ui/CircularCountdownTimerView.java", "patch_t": ["+/*\n+ * Copyright (C) 2013 Fairphone Project\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fairphone.launcher.edgeswipe.ui;\n+\n+import org.fairphone.launcher.R;\n+import org.fairphone.launcher.util.KWMathUtils;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapShader;\n+import android.graphics.Canvas;\n+import android.graphics.Paint;\n+import android.graphics.Rect;\n+import android.graphics.RectF;\n+import android.graphics.Shader;\n+import android.graphics.drawable.Drawable;\n+import android.util.AttributeSet;\n+import android.view.View;\n+\n+public class CircularCountdownTimerView extends View {\n+\tpublic interface CircularCountdownListener {\n+\t\tpublic void onCountdownFinished(CircularCountdownTimerView countdownView);\n+\t}\n+\n+\tprivate Drawable timerDrawable;\n+\tprivate RectF clipBounds = new RectF();\n+\tprivate RectF viewBounds = new RectF();\n+\tprivate Rect viewBoundsI = new Rect();\n+\tprivate Paint clipPaint;\n+\tprivate Paint sourcePaint;\n+\n+\tprivate Bitmap viewBitmap;\n+\tprivate BitmapShader timerShader;\n+\n+\tprivate float curFillRatio = 1.0f;\n+\tprivate float startFillRatio = 1.0f;\n+\tprivate float endFillRatio = 0.0f;\n+\tprivate long animationDuration = 0;\n+\tprivate long animationDelay = 0;\n+\tprivate long curAnimationTime = 0;\n+\tprivate long prevFrame = 0;\n+\tprivate boolean isAnimating = false;\n+\n+\tprivate int prevWidth = 0;\n+\tprivate int prevHeight = 0;\n+\n+\tCircularCountdownListener listener;\n+\n+\tpublic CircularCountdownTimerView(Context context) {\n+\t\tsuper(context);\n+\t\tinit();\n+\t}\n+\n+\tpublic CircularCountdownTimerView(Context context, AttributeSet attrs) {\n+\t\tsuper(context, attrs);\n+\t\tinit();\n+\t}\n+\n+\tpublic CircularCountdownTimerView(Context context, AttributeSet attrs,\n+\t\t\tint defStyle) {\n+\t\tsuper(context, attrs, defStyle);\n+\t\tinit();\n+\t}\n+\n+\tpublic void startCountdownAnimation(long duration) {\n+\t\tstartCountdownAnimation(duration, 0);\n+\t}\n+\n+\tpublic void startCountdownAnimation(long duration, long delay) {\n+\t\tprevFrame = System.currentTimeMillis();\n+\t\tanimationDelay = delay;\n+\t\tstartFillRatio = 1.0f;\n+\t\tcurFillRatio = 1.0f;\n+\t\tendFillRatio = 0.0f;\n+\t\tisAnimating = true;\n+\t\tcurAnimationTime = 0;\n+\t\tanimationDuration = duration;\n+\n+\t\tpostInvalidate();\n+\t}\n+\n+\tpublic boolean isCountingDown() {\n+\t\treturn isAnimating;\n+\t}\n+\n+\tpublic boolean isFinished() {\n+\t\treturn curFillRatio == 0.0f;\n+\t}\n+\n+\tpublic float getCountdownRatio() {\n+\t\treturn curFillRatio;\n+\t}\n+\n+\tpublic void pauseCountdownAnimation() {\n+\t\tisAnimating = false;\n+\t\tpostInvalidate();\n+\t}\n+\n+\tpublic void resumeCountdownAnimation() {\n+\t\tisAnimating = true;\n+\t\tprevFrame = System.currentTimeMillis();\n+\t\tpostInvalidate();\n+\t}\n+\n+\tpublic void cancelCountdownAnimation() {\n+\t\talpha = 0;\n+\t\tisAnimating = false;\n+\t\tcurFillRatio = 1.0f;\n+\t\tcurAnimationTime = 0;\n+\t\tpostInvalidate();\n+\t}\n+\n+\tpublic void finishCountdownAnimation() {\n+\t\talpha = 0;\n+\t\tpostInvalidate();\n+\t\tcurAnimationTime = animationDuration;\n+\t\tcurFillRatio = 0.0f;\n+\t}\n+\n+\tpublic void forceCountdownBegin() {\n+\t\talpha = 0;\n+\t\tcurFillRatio = 1.0f;\n+\t\tisAnimating = false;\n+\t\tpostInvalidate();\n+\t}\n+\n+\tpublic void forceCountdownEnd() {\n+\t\talpha = 0;\n+\t\tcurFillRatio = 0.0f;\n+\t\tisAnimating = false;\n+\t\tpostInvalidate();\n+\t}\n+\n+\tpublic CircularCountdownListener getCircularCountdownListener() {\n+\t\treturn listener;\n+\t}\n+\n+\tpublic void setCircularCountdownListener(CircularCountdownListener listener) {\n+\t\tthis.listener = listener;\n+\t}\n+\n+\t@Override\n+\tprotected void onAttachedToWindow() {\n+\t\tsuper.onAttachedToWindow();\n+\t}\n+\n+\t@Override\n+\tprotected void onDetachedFromWindow() {\n+\t\tclipPaint.setShader(null);\n+\t\ttimerShader = null;\n+\t\tviewBitmap.recycle();\n+\t\tviewBitmap = null;\n+\t\tsuper.onDetachedFromWindow();\n+\t}\n+\n+\tprivate void init() {\n+\t\ttimerDrawable = getContext().getResources().getDrawable(\n+\t\t\t\tR.drawable.fp_fav_icon_ring);\n+\n+\t\tclipPaint = new Paint();\n+\t\tclipPaint.setColor(0xFFFFFFFF);\n+\t\tsourcePaint = new Paint();\n+\t\tsourcePaint.setColor(0xFFFFFFFF);\n+\t}\n+\n+\t@Override\n+\tprotected void onLayout(boolean changed, int left, int top, int right,\n+\t\t\tint bottom) {\n+\t\tsuper.onLayout(changed, left, top, right, bottom);\n+\n+\t\tfloat w = getWidth();\n+\t\tfloat h = getHeight();\n+\t\tfloat w2 = w / 2;\n+\t\tfloat h2 = h / 2;\n+\t\ttimerDrawable.setBounds(0, 0, (int) w, (int) h);\n+\n+\t\tfloat radius = (float) Math.sqrt(w2 * w2 + h2 * h2);\n+\t\tclipBounds.set(w2 - radius, h2 - radius, w2 + radius, h2 + radius);\n+\t\tviewBounds.set(0, 0, (int) w, (int) h);\n+\t\tviewBoundsI.set(0, 0, (int) w, (int) h);\n+\n+\t\tif (getWidth() != prevWidth || getHeight() != prevHeight\n+\t\t\t\t|| viewBitmap == null) {\n+\t\t\tif (viewBitmap != null) {\n+\t\t\t\tviewBitmap.recycle();\n+\t\t\t}\n+\n+\t\t\tviewBitmap = Bitmap.createBitmap(getWidth(), getHeight(),\n+\t\t\t\t\tBitmap.Config.ARGB_8888);\n+\t\t\tCanvas canvas = new Canvas(viewBitmap);\n+\t\t\t// canvas.drawBitmap(sourceBitmap, auxRectI, viewBoundsI,\n+\t\t\t// sourcePaint);\n+\t\t\ttimerDrawable.setBounds(viewBoundsI);\n+\t\t\ttimerDrawable.draw(canvas);\n+\n+\t\t\ttimerShader = new BitmapShader(viewBitmap, Shader.TileMode.CLAMP,\n+\t\t\t\t\tShader.TileMode.CLAMP);\n+\t\t\tclipPaint.setShader(timerShader);\n+\t\t}\n+\n+\t\tprevWidth = getWidth();\n+\t\tprevHeight = getHeight();\n+\t}\n+\n+\t@Override\n+\tpublic void draw(Canvas canvas) {\n+\t\tsuper.draw(canvas);\n+\t\tupdateAnimation();\n+\n+\t\tif (curAnimationTime - animationDelay > 0) {\n+\t\t\talpha += 0.03f;\n+\t\t\t\n+\t\t\tif(alpha > 1.0f){\n+\t\t\t\talpha = 1.0f;\n+\t\t\t}\n+\t\t\t\n+\t\t\t\n+\t\t}\n+\t\t\n+\t\tsetAlpha(alpha);\n+\t\t\n+\t\tif (timerShader != null) {\n+\t\t\tcanvas.drawArc(viewBounds, 0, 360.f * curFillRatio, true,\n+\t\t\t\t\tclipPaint);\n+\t\t}\n+\t}\n+\tfloat alpha = 0;\n+\t\n+\tprivate void updateAnimation() {\n+\t\tlong curTime = System.currentTimeMillis();\n+\t\tlong dt = curTime - prevFrame;\n+\t\tif (dt > 500) {\n+\t\t\tdt = 1000 / 60;\n+\t\t}\n+\t\tif (isAnimating) {\n+\t\t\tcurAnimationTime += dt;\n+\t\t\tboolean isFinished = false;\n+\t\t\tlong curAnimTime = Math.max(curAnimationTime - animationDelay, 0);\n+\t\t\tif (curAnimTime >= animationDuration) {\n+\t\t\t\tcurAnimTime = animationDuration;\n+\t\t\t\tcurAnimTime = animationDuration + animationDelay;\n+\t\t\t\tisFinished = true;\n+\t\t\t\tisAnimating = false;\n+\t\t\t\talpha = 0;\n+\t\t\t}\n+\n+\t\t\tfloat timeRatio = KWMathUtils.getLongRatio(0, animationDuration,\n+\t\t\t\t\tcurAnimTime);\n+\t\t\tcurFillRatio = KWMathUtils.blend(startFillRatio, endFillRatio,\n+\t\t\t\t\ttimeRatio);\n+\n+\t\t\tinvalidate();\n+\t\t\tif (isFinished) {\n+\t\t\t\talpha = 0;\n+\t\t\t\tif (listener != null) {\n+\t\t\t\t\tlistener.onCountdownFinished(this);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tprevFrame = curTime;\n+\t}\n+}"], "score": 1.0, "methods_t": ["BitmapShader Canvas Paint Rect RectF blend createBitmap currentTimeMillis draw drawArc getContext getDrawable getHeight getLongRatio getResources getWidth init invalidate max onCountdownFinished postInvalidate recycle set setAlpha setBounds setColor setShader sqrt startCountdownAnimation updateAnimation"], "_version_": 1526737510649036800, "subject_t": ["Initial commit with all FairPhone home launcher code and appswitcher widget"], "comments_t": ["/*\n* Copyright (C) 2013 Fairphone Project\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n \t\t\t// canvas.drawBitmap(sourceBitmap, auxRectI, viewBoundsI, \t\t\t// sourcePaint);"], "callsites_t": ["org.fairphone.launcher.edgeswipe.ui.CircularCountdownTimerView.CircularCountdownListener.onCountdownFinished(org.fairphone.launcher.edgeswipe.ui.CircularCountdownTimerView) android.view.View.postInvalidate() android.view.View.getHeight() android.view.View.getContext() android.content.Context.getResources() android.graphics.Canvas.Canvas(android.graphics.Bitmap) android.view.View.postInvalidate() android.graphics.RectF.set(int, int, int, int) <unknown>.blend(float, float, float) android.graphics.Rect.Rect() android.graphics.drawable.Drawable.setBounds(android.graphics.Rect) android.graphics.Paint.setColor(int) android.view.View.postInvalidate() android.graphics.Paint.Paint() android.view.View.setAlpha(float) android.graphics.RectF.RectF() android.graphics.Paint.setColor(int) android.graphics.RectF.set(float, float, float, float) android.graphics.Paint.setShader(android.graphics.BitmapShader) android.graphics.BitmapShader.BitmapShader(android.graphics.Bitmap, android.graphics.Shader.TileMode, android.graphics.Shader.TileMode) android.graphics.Paint.setShader(null) android.graphics.drawable.Drawable.draw(android.graphics.Canvas) android.graphics.Rect.set(int, int, int, int) android.graphics.Canvas.drawArc(android.graphics.RectF, int, float, boolean, android.graphics.Paint) android.graphics.Bitmap.recycle() android.view.View.invalidate() java.lang.Math.max(long, int) java.lang.System.currentTimeMillis() android.view.View.postInvalidate() java.lang.System.currentTimeMillis() android.view.View.getWidth() android.view.View.postInvalidate() java.lang.Math.sqrt(float) org.fairphone.launcher.edgeswipe.ui.CircularCountdownTimerView.updateAnimation() java.lang.System.currentTimeMillis() android.view.View.postInvalidate() android.view.View.postInvalidate() org.fairphone.launcher.edgeswipe.ui.CircularCountdownTimerView.init() android.graphics.drawable.Drawable.setBounds(int, int, int, int) org.fairphone.launcher.edgeswipe.ui.CircularCountdownTimerView.startCountdownAnimation(long, int) android.content.res.Resources.getDrawable(<unknown>) <unknown>.getLongRatio(int, long, long) android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap.Config) android.graphics.Bitmap.recycle()"], "id": "kimhansen/Fairphone---DEPRECATED\u00005f9a38b04bcd14f426004c5b71e80381ed50d5a1\u0000FairPhoneHome/src/org/fairphone/launcher/edgeswipe/ui/CircularCountdownTimerView.java", "callsites_cs": "org.fairphone.launcher.edgeswipe.ui.CircularCountdownTimerView.CircularCountdownListener.onCountdownFinished(org.fairphone.launcher.edgeswipe.ui.CircularCountdownTimerView)#android.view.View.postInvalidate()#android.view.View.getHeight()#android.view.View.getContext()#android.content.Context.getResources()#android.graphics.Canvas.Canvas(android.graphics.Bitmap)#android.view.View.postInvalidate()#android.graphics.RectF.set(int, int, int, int)#<unknown>.blend(float, float, float)#android.graphics.Rect.Rect()#android.graphics.drawable.Drawable.setBounds(android.graphics.Rect)#android.graphics.Paint.setColor(int)#android.view.View.postInvalidate()#android.graphics.Paint.Paint()#android.view.View.setAlpha(float)#android.graphics.RectF.RectF()#android.graphics.Paint.setColor(int)#android.graphics.RectF.set(float, float, float, float)#android.graphics.Paint.setShader(android.graphics.BitmapShader)#android.graphics.BitmapShader.BitmapShader(android.graphics.Bitmap, android.graphics.Shader.TileMode, android.graphics.Shader.TileMode)#android.graphics.Paint.setShader(null)#android.graphics.drawable.Drawable.draw(android.graphics.Canvas)#android.graphics.Rect.set(int, int, int, int)#android.graphics.Canvas.drawArc(android.graphics.RectF, int, float, boolean, android.graphics.Paint)#android.graphics.Bitmap.recycle()#android.view.View.invalidate()#java.lang.Math.max(long, int)#java.lang.System.currentTimeMillis()#android.view.View.postInvalidate()#java.lang.System.currentTimeMillis()#android.view.View.getWidth()#android.view.View.postInvalidate()#java.lang.Math.sqrt(float)#org.fairphone.launcher.edgeswipe.ui.CircularCountdownTimerView.updateAnimation()#java.lang.System.currentTimeMillis()#android.view.View.postInvalidate()#android.view.View.postInvalidate()#org.fairphone.launcher.edgeswipe.ui.CircularCountdownTimerView.init()#android.graphics.drawable.Drawable.setBounds(int, int, int, int)#org.fairphone.launcher.edgeswipe.ui.CircularCountdownTimerView.startCountdownAnimation(long, int)#android.content.res.Resources.getDrawable(<unknown>)#<unknown>.getLongRatio(int, long, long)#android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap.Config)#android.graphics.Bitmap.recycle()"}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Chronometer.OnChronometerTickListener android.widget.Chronometer android.view.View.OnClickListener android.os.Bundle android.widget.TextView android.widget.Button android.widget.RelativeLayout android.view.View android.util.Log android.view.Window android.app.Activity android.os.SystemClock android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\n\npublic class Voice extends Activity implements OnClickListener{\n\t\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate MyCount countDownTimer;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\t\n\t\t///////   ****** No Title Bar   ********* /////////\n        \n        \n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        \n        setContentView(R.layout.text_voice_camera);\n        \n        \n        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n        \n        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n        \n        setGraphicsVoice();\n        controlVoiceChronometer();\n        setClickListeners();\n        \n        ////////********    Handle Date Bar   *********   ////////\n        new DateHandler(this);\n\t}\n\n\tprivate void setClickListeners() {\n\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n\t\t\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\t\t\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n\t\t\n\t\t\n\t\t\t\t\t\t////  ***** if stop button pressed ****** //////\n\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t}\n\t\t\t\t\t\t////  ***** if play button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n\t\t\tLog.v(\"hello\", text_voice_camera_time_details_chronometer.getText()+\"\");\n\t\t\tcountDownTimer = new MyCount(300000, 1000);\n\t\t\tcountDownTimer.start();\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t}\n\t\t\t\t\t\t////  ***** if rerecord button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\t\t}\n\t\t\n\t}\n\t\n\t\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(\"done!\");\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tString minutes = \"00\";\n\t\t\tif(millisUntilFinished >= 60000){\n\t\t\t\tLong temp = millisUntilFinished / 60000;\n\t\t\t\tif(temp < 10){\n\t\t\t\t\tminutes = \"0\"+temp;\n\t\t\t\t}else{\n\t\t\t\t\tminutes = temp+\"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tString seconds = (millisUntilFinished%60000)/1000+\"\";\n\t\t\tif((millisUntilFinished%60000)/1000 < 10){\n\t\t\t\t\tseconds = \"0\"+seconds;\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.setText(minutes +\":\" + seconds);\n\t\t}\n\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-15T13:19:41Z", "hash_sni": "2a6f070841e8d3b8b46b10a21cb02935b0613a48", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": ["         controlVoiceChronometer();\n         setClickListeners();\n         \n+        ////////********    Handle Date Bar   *********   ////////\n+        new DateHandler(this);\n \t}\n \n \tprivate void setClickListeners() {"], "score": 1.0, "methods_t": ["DateHandler MyCount OnChronometerTickListener cancel controlVoiceChronometer elapsedRealtime findViewById getId getText length requestWindowFeature setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setVisibility start stop v"], "_version_": 1526737511608483840, "subject_t": ["Added dateHandler for date bar"], "comments_t": ["\t//countdowntimer is an abstract class, so extend it and fill in methods         ///////   ***** Sets Title Voice Entry *********/////// \t\t///////   ****** No Title Bar   ********* /////////         ////////   ********    Initializing and assigning memory to UI Items **********    ///////// \t\t///////   ********     Adding On Click Actions to click listeners *********    ////////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////       \t\t////////    *******    Adding Click Listeners to UI Items ******** ////////// \t\t///////   ***** Sets Title Voice Entry *********///////         ////////********    Handle Date Bar   *********   ////////         //////   ******  Shows Voice Details ********//////// \t\t\t\t\t\t////  ***** if rerecord button pressed ****** //////\t\t \t\t\t\t\t\t////  ***** if play button pressed ****** //////\t\t \t\t\t\t\t\t////  ***** if stop button pressed ****** //////"], "parents_ss": ["1924418dfedb3f44c04e8038c40ed6783095ab81"], "id": "vinsol/expense-tracker\u00002a6f070841e8d3b8b46b10a21cb02935b0613a48\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.TextView.getText()#android.os.CountDownTimer.start()#android.widget.TextView.setText(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#android.widget.Chronometer.stop()#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#android.app.Activity.setContentView(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#com.vinsol.expensetracker.Voice.setClickListeners()#android.widget.Chronometer.setOnChronometerTickListener()#android.app.Activity.findViewById(<unknown>)#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#android.app.Activity.requestWindowFeature(int)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.MyCount.MyCount(int, int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#android.app.Activity.findViewById(<unknown>)#android.util.Log.v(java.lang.String, java.lang.String)#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)", "callsites_t": ["android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.TextView.getText() android.os.CountDownTimer.start() android.widget.TextView.setText(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.controlVoiceChronometer() android.widget.Chronometer.stop() android.view.View.setVisibility(int) android.widget.Chronometer.start() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() android.app.Activity.setContentView(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) com.vinsol.expensetracker.Voice.setClickListeners() android.widget.Chronometer.setOnChronometerTickListener() android.app.Activity.findViewById(<unknown>) android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() android.app.Activity.requestWindowFeature(int) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.MyCount.MyCount(int, int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() com.vinsol.expensetracker.Voice.setGraphicsVoice() android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) android.view.View.getId() android.app.Activity.findViewById(<unknown>) android.util.Log.v(java.lang.String, java.lang.String) android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "kyze8439690", "repo_sni": "kyze8439690/AndroidVideoRecord", "imports_t": ["android.os.CountDownTimer android.hardware.Camera.Parameters android.media.MediaRecorder android.view.View.OnClickListener java.io.IOException android.widget.ImageButton android.view.SurfaceView android.os.Bundle android.widget.TextView android.annotation.SuppressLint android.view.View android.hardware.Camera.CameraInfo java.io.File android.view.MotionEvent android.view.SurfaceHolder.Callback android.hardware.Camera.Size android.app.Activity android.view.View.OnTouchListener android.os.Environment com.yugy.videorecordtest.widget.RecordButton android.view.SurfaceHolder android.hardware.Camera android.widget.ImageView java.util.List"], "email_sni": "me@yanghui.name", "contents_t": ["package com.yugy.videorecordtest;\n\nimport android.annotation.SuppressLint;\nimport android.app.Activity;\nimport android.hardware.Camera;\nimport android.hardware.Camera.CameraInfo;\nimport android.hardware.Camera.Parameters;\nimport android.hardware.Camera.Size;\nimport android.media.MediaRecorder;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.Environment;\nimport android.view.MotionEvent;\nimport android.view.SurfaceHolder;\nimport android.view.SurfaceHolder.Callback;\nimport android.view.SurfaceView;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.View.OnTouchListener;\nimport android.widget.ImageButton;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport com.yugy.videorecordtest.widget.RecordButton;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class VideoRecordActivity extends Activity implements Callback, OnClickListener, OnTouchListener{\n\n    private File path = new File(Environment.getExternalStorageDirectory() + \"/video.mp4\");\n\n    private SurfaceView surfaceView;\n    private SurfaceHolder surfaceHolder;\n    private MediaRecorder mediaRecorder;\n    private Camera camera;\n    private RecordButton record;\n    private ImageButton back;\n    private ImageButton ok;\n    private ImageView swap;\n    private TextView time;\n\n    private CountDownTimer countDownTimer;\n\n    private boolean recording = false;\n    private int currentCameraId = 0;\n    private int orientation = 0;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_video_record);\n\n        initViews();\n\n    }\n\n    @SuppressLint(\"NewApi\")\n    @SuppressWarnings(\"deprecation\")\n    private void initViews(){\n        surfaceView = (SurfaceView)findViewById(R.id.videorecord_surfaceview);\n        surfaceHolder= surfaceView.getHolder();\n        surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n        surfaceHolder.addCallback(this);\n\n        checkCamera();\n        camera = Camera.open();\n        camera.setDisplayOrientation(90);\n\n        CameraInfo cameraInfo = new CameraInfo();\n        Camera.getCameraInfo(currentCameraId, cameraInfo);\n        orientation = cameraInfo.orientation - 90;\n\n        mediaRecorder = new MediaRecorder();\n\n        record = (RecordButton)findViewById(R.id.videorecord_record);\n        swap = (ImageView)findViewById(R.id.videorecord_swap);\n        back = (ImageButton)findViewById(R.id.videorecord_back);\n        ok = (ImageButton)findViewById(R.id.videorecord_ok);\n        record.setOnClickListener(this);\n        swap.setOnClickListener(this);\n        back.setOnClickListener(this);\n        ok.setOnClickListener(this);\n        swap.setOnTouchListener(this);\n        time = (TextView)findViewById(R.id.videorecord_time);\n\n        countDownTimer = new CountDownTimer(15000, 1000) {\n\n            @Override\n            public void onTick(long millisUntilFinished) {\n                // TODO Auto-generated method stub\n                time.setText(15 - millisUntilFinished / 1000 + \"\u2033/15\u2033\");\n                record.twinkle();\n            }\n\n            @Override\n            public void onFinish() {\n                // TODO Auto-generated method stub\n                time.setText(\"0\u2033/15\u2033\");\n                mediaRecorder.stop();\n                record.setBright();\n                recording = false;\n            }\n        };\n    }\n\n    private void initMediaRecorder(){\n        mediaRecorder.setAudioSource(MediaRecorder.AudioSource.DEFAULT);\n        mediaRecorder.setVideoSource(MediaRecorder.VideoSource.DEFAULT);\n        mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);\n        mediaRecorder.setOutputFile(path.getAbsolutePath());\n        mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT);\n        mediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);\n        mediaRecorder.setOrientationHint(orientation);\n//\t\tif(currentCameraId == 1){\t//\u524d\u7f6e\u6444\u50cf\u5934\n//\t\t\tmediaRecorder.setOrientationHint(180);\n//\t\t}\n        mediaRecorder.setVideoEncodingBitRate(2500000);\n        mediaRecorder.setVideoSize(640, 480);\n        mediaRecorder.setPreviewDisplay(surfaceHolder.getSurface());\n    }\n\n    private void checkCamera(){\n        if(Camera.getNumberOfCameras() < 1){\n            finish();\n        }\n    }\n\n    @Override\n    public void onClick(View arg0) {\n        // TODO Auto-generated method stub\n        switch(arg0.getId()){\n            case R.id.videorecord_record:\n                if(recording){\n                    countDownTimer.onFinish();\n                    countDownTimer.cancel();\n                }else{\n                    camera.unlock();\n                    mediaRecorder.setCamera(camera);\n                    initMediaRecorder();\n                    try {\n                        mediaRecorder.prepare();\n                        mediaRecorder.start();\n                        countDownTimer.start();\n                    } catch (IllegalStateException e) {\n                        // TODO Auto-generated catch block\n                        e.printStackTrace();\n                    } catch (IOException e) {\n                        // TODO Auto-generated catch block\n                        e.printStackTrace();\n                    }\n\n                    recording = true;\n                }\n                break;\n            case R.id.videorecord_swap:\n                if(!recording){\n                    if(Camera.getNumberOfCameras() > 1){\n                        camera.release();\n                        currentCameraId = currentCameraId == 0 ? 1 : 0;\n                        camera = Camera.open(currentCameraId);\n                        camera.setDisplayOrientation(90);\n                        CameraInfo cameraInfo = new CameraInfo();\n                        Camera.getCameraInfo(currentCameraId, cameraInfo);\n                        orientation = cameraInfo.orientation - 90;\n                        try {\n                            camera.setPreviewDisplay(surfaceHolder);\n                            camera.startPreview();\n                        } catch (IOException e) {\n                            // TODO Auto-generated catch block\n                            e.printStackTrace();\n                        }\n                    }\n                }\n                break;\n            case R.id.videorecord_back:\n\n                break;\n            case R.id.videorecord_ok:\n\n                break;\n        }\n    }\n\n    @Override\n    public void surfaceChanged(SurfaceHolder arg0, int arg1, int arg2, int arg3) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public void surfaceCreated(SurfaceHolder arg0) {\n        // TODO Auto-generated method stub\n        try {\n            camera.setPreviewDisplay(surfaceHolder);\n            camera.startPreview();\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n    }\n\n    @Override\n    public void surfaceDestroyed(SurfaceHolder arg0) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    protected void onDestroy() {\n        // TODO Auto-generated method stub\n        camera.release();\n        super.onDestroy();\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    public boolean onTouch(View arg0, MotionEvent arg1) {\n        // TODO Auto-generated method stub\n        switch(arg0.getId()){\n            case R.id.videorecord_swap:\n                switch(arg1.getActionMasked()){\n                    case MotionEvent.ACTION_DOWN:\n                        swap.setAlpha(128);\n                        break;\n                    case MotionEvent.ACTION_UP:\n                        swap.setAlpha(255);\n                        break;\n                }\n                break;\n        }\n        return false;\n    }\n\n}\n\n"], "body_t": ["<empty>"], "date_tdt": "2013-08-30T08:53:12Z", "hash_sni": "b30d79274270cf7543d7c44e8eaaa567d0e08209", "name_sni": "VideoRecordTest/src/main/java/com/yugy/videorecordtest/VideoRecordActivity.java", "patch_t": ["+package com.yugy.videorecordtest;\n+\n+import android.annotation.SuppressLint;\n+import android.app.Activity;\n+import android.hardware.Camera;\n+import android.hardware.Camera.CameraInfo;\n+import android.hardware.Camera.Parameters;\n+import android.hardware.Camera.Size;\n+import android.media.MediaRecorder;\n+import android.os.Bundle;\n+import android.os.CountDownTimer;\n+import android.os.Environment;\n+import android.view.MotionEvent;\n+import android.view.SurfaceHolder;\n+import android.view.SurfaceHolder.Callback;\n+import android.view.SurfaceView;\n+import android.view.View;\n+import android.view.View.OnClickListener;\n+import android.view.View.OnTouchListener;\n+import android.widget.ImageButton;\n+import android.widget.ImageView;\n+import android.widget.TextView;\n+\n+import com.yugy.videorecordtest.widget.RecordButton;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class VideoRecordActivity extends Activity implements Callback, OnClickListener, OnTouchListener{\n+\n+    private File path = new File(Environment.getExternalStorageDirectory() + \"/video.mp4\");\n+\n+    private SurfaceView surfaceView;\n+    private SurfaceHolder surfaceHolder;\n+    private MediaRecorder mediaRecorder;\n+    private Camera camera;\n+    private RecordButton record;\n+    private ImageButton back;\n+    private ImageButton ok;\n+    private ImageView swap;\n+    private TextView time;\n+\n+    private CountDownTimer countDownTimer;\n+\n+    private boolean recording = false;\n+    private int currentCameraId = 0;\n+    private int orientation = 0;\n+\n+    @Override\n+    protected void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setContentView(R.layout.activity_video_record);\n+\n+        initViews();\n+\n+    }\n+\n+    @SuppressLint(\"NewApi\")\n+    @SuppressWarnings(\"deprecation\")\n+    private void initViews(){\n+        surfaceView = (SurfaceView)findViewById(R.id.videorecord_surfaceview);\n+        surfaceHolder= surfaceView.getHolder();\n+        surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n+        surfaceHolder.addCallback(this);\n+\n+        checkCamera();\n+        camera = Camera.open();\n+        camera.setDisplayOrientation(90);\n+\n+        CameraInfo cameraInfo = new CameraInfo();\n+        Camera.getCameraInfo(currentCameraId, cameraInfo);\n+        orientation = cameraInfo.orientation - 90;\n+\n+        mediaRecorder = new MediaRecorder();\n+\n+        record = (RecordButton)findViewById(R.id.videorecord_record);\n+        swap = (ImageView)findViewById(R.id.videorecord_swap);\n+        back = (ImageButton)findViewById(R.id.videorecord_back);\n+        ok = (ImageButton)findViewById(R.id.videorecord_ok);\n+        record.setOnClickListener(this);\n+        swap.setOnClickListener(this);\n+        back.setOnClickListener(this);\n+        ok.setOnClickListener(this);\n+        swap.setOnTouchListener(this);\n+        time = (TextView)findViewById(R.id.videorecord_time);\n+\n+        countDownTimer = new CountDownTimer(15000, 1000) {\n+\n+            @Override\n+            public void onTick(long millisUntilFinished) {\n+                // TODO Auto-generated method stub\n+                time.setText(15 - millisUntilFinished / 1000 + \"\u2033/15\u2033\");\n+                record.twinkle();\n+            }\n+\n+            @Override\n+            public void onFinish() {\n+                // TODO Auto-generated method stub\n+                time.setText(\"0\u2033/15\u2033\");\n+                mediaRecorder.stop();\n+                record.setBright();\n+                recording = false;\n+            }\n+        };\n+    }\n+\n+    private void initMediaRecorder(){\n+        mediaRecorder.setAudioSource(MediaRecorder.AudioSource.DEFAULT);\n+        mediaRecorder.setVideoSource(MediaRecorder.VideoSource.DEFAULT);\n+        mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);\n+        mediaRecorder.setOutputFile(path.getAbsolutePath());\n+        mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT);\n+        mediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);\n+        mediaRecorder.setOrientationHint(orientation);\n+//\t\tif(currentCameraId == 1){\t//\u524d\u7f6e\u6444\u50cf\u5934\n+//\t\t\tmediaRecorder.setOrientationHint(180);\n+//\t\t}\n+        mediaRecorder.setVideoEncodingBitRate(2500000);\n+        mediaRecorder.setVideoSize(640, 480);\n+        mediaRecorder.setPreviewDisplay(surfaceHolder.getSurface());\n+    }\n+\n+    private void checkCamera(){\n+        if(Camera.getNumberOfCameras() < 1){\n+            finish();\n+        }\n+    }\n+\n+    @Override\n+    public void onClick(View arg0) {\n+        // TODO Auto-generated method stub\n+        switch(arg0.getId()){\n+            case R.id.videorecord_record:\n+                if(recording){\n+                    countDownTimer.onFinish();\n+                    countDownTimer.cancel();\n+                }else{\n+                    camera.unlock();\n+                    mediaRecorder.setCamera(camera);\n+                    initMediaRecorder();\n+                    try {\n+                        mediaRecorder.prepare();\n+                        mediaRecorder.start();\n+                        countDownTimer.start();\n+                    } catch (IllegalStateException e) {\n+                        // TODO Auto-generated catch block\n+                        e.printStackTrace();\n+                    } catch (IOException e) {\n+                        // TODO Auto-generated catch block\n+                        e.printStackTrace();\n+                    }\n+\n+                    recording = true;\n+                }\n+                break;\n+            case R.id.videorecord_swap:\n+                if(!recording){\n+                    if(Camera.getNumberOfCameras() > 1){\n+                        camera.release();\n+                        currentCameraId = currentCameraId == 0 ? 1 : 0;\n+                        camera = Camera.open(currentCameraId);\n+                        camera.setDisplayOrientation(90);\n+                        CameraInfo cameraInfo = new CameraInfo();\n+                        Camera.getCameraInfo(currentCameraId, cameraInfo);\n+                        orientation = cameraInfo.orientation - 90;\n+                        try {\n+                            camera.setPreviewDisplay(surfaceHolder);\n+                            camera.startPreview();\n+                        } catch (IOException e) {\n+                            // TODO Auto-generated catch block\n+                            e.printStackTrace();\n+                        }\n+                    }\n+                }\n+                break;\n+            case R.id.videorecord_back:\n+\n+                break;\n+            case R.id.videorecord_ok:\n+\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void surfaceChanged(SurfaceHolder arg0, int arg1, int arg2, int arg3) {\n+        // TODO Auto-generated method stub\n+\n+    }\n+\n+    @Override\n+    public void surfaceCreated(SurfaceHolder arg0) {\n+        // TODO Auto-generated method stub\n+        try {\n+            camera.setPreviewDisplay(surfaceHolder);\n+            camera.startPreview();\n+        } catch (IOException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n+\n+    }\n+\n+    @Override\n+    public void surfaceDestroyed(SurfaceHolder arg0) {\n+        // TODO Auto-generated method stub\n+\n+    }\n+\n+    @Override\n+    protected void onDestroy() {\n+        // TODO Auto-generated method stub\n+        camera.release();\n+        super.onDestroy();\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    @Override\n+    public boolean onTouch(View arg0, MotionEvent arg1) {\n+        // TODO Auto-generated method stub\n+        switch(arg0.getId()){\n+            case R.id.videorecord_swap:\n+                switch(arg1.getActionMasked()){\n+                    case MotionEvent.ACTION_DOWN:\n+                        swap.setAlpha(128);\n+                        break;\n+                    case MotionEvent.ACTION_UP:\n+                        swap.setAlpha(255);\n+                        break;\n+                }\n+                break;\n+        }\n+        return false;\n+    }\n+\n+}\n+"], "score": 1.0, "methods_t": ["CameraInfo CountDownTimer File MediaRecorder addCallback cancel checkCamera findViewById finish getAbsolutePath getActionMasked getCameraInfo getExternalStorageDirectory getHolder getId getNumberOfCameras getSurface initMediaRecorder initViews onFinish open prepare printStackTrace release setAlpha setAudioEncoder setAudioSource setBright setCamera setContentView setDisplayOrientation setOnClickListener setOnTouchListener setOrientationHint setOutputFile setOutputFormat setPreviewDisplay setText setType setVideoEncoder setVideoEncodingBitRate setVideoSize setVideoSource start startPreview stop twinkle unlock"], "_version_": 1526738717910237184, "subject_t": ["initial commit"], "comments_t": ["                            // TODO Auto-generated catch block //\t\t}                         // TODO Auto-generated catch block //\t\t\tmediaRecorder.setOrientationHint(180); //\t\tif(currentCameraId == 1){\t//\u524d\u7f6e\u6444\u50cf\u5934             // TODO Auto-generated catch block         // TODO Auto-generated method stub                 // TODO Auto-generated method stub"], "callsites_t": ["android.view.SurfaceHolder.getSurface() android.app.Activity.findViewById(<unknown>) android.hardware.Camera.getCameraInfo(int, android.hardware.Camera.CameraInfo) android.view.View.setOnClickListener(com.yugy.videorecordtest.VideoRecordActivity) android.media.MediaRecorder.start() android.hardware.Camera.unlock() android.media.MediaRecorder.setOrientationHint(int) android.hardware.Camera.open(int) android.view.View.setOnClickListener(com.yugy.videorecordtest.VideoRecordActivity) android.widget.TextView.setText(java.lang.String) java.io.File.getAbsolutePath() android.hardware.Camera.setDisplayOrientation(int) android.os.Environment.getExternalStorageDirectory() android.hardware.Camera.startPreview() android.hardware.Camera.setDisplayOrientation(int) android.view.SurfaceView.getHolder() com.yugy.videorecordtest.VideoRecordActivity.initViews() android.media.MediaRecorder.setVideoEncoder(int) android.media.MediaRecorder.setOutputFile(java.lang.String) .CountDownTimer(int, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.media.MediaRecorder.setAudioEncoder(int) <unknown>.setBright() android.app.Activity.finish() android.view.View.setOnClickListener(com.yugy.videorecordtest.VideoRecordActivity) android.os.CountDownTimer.onFinish() android.hardware.Camera.CameraInfo.CameraInfo() android.media.MediaRecorder.setVideoSource(int) android.hardware.Camera.release() <unknown>.twinkle() android.view.MotionEvent.getActionMasked() android.app.Activity.findViewById(<unknown>) <unknown>.setOnClickListener(com.yugy.videorecordtest.VideoRecordActivity) android.media.MediaRecorder.stop() android.hardware.Camera.getCameraInfo(int, android.hardware.Camera.CameraInfo) android.view.View.setOnTouchListener(com.yugy.videorecordtest.VideoRecordActivity) android.media.MediaRecorder.prepare() android.hardware.Camera.getNumberOfCameras() android.media.MediaRecorder.setAudioSource(int) android.hardware.Camera.getNumberOfCameras() android.media.MediaRecorder.setVideoEncodingBitRate(int) android.app.Activity.findViewById(<unknown>) java.io.File.File(java.lang.String) android.hardware.Camera.release() android.view.View.getId() android.widget.ImageView.setAlpha(int) android.hardware.Camera.CameraInfo.CameraInfo() android.view.SurfaceHolder.setType(int) android.os.CountDownTimer.start() java.lang.Throwable.printStackTrace() android.hardware.Camera.setPreviewDisplay(android.view.SurfaceHolder) android.app.Activity.findViewById(<unknown>) android.hardware.Camera.setPreviewDisplay(android.view.SurfaceHolder) com.yugy.videorecordtest.VideoRecordActivity.checkCamera() android.widget.TextView.setText(java.lang.String) android.app.Activity.setContentView(<unknown>) android.hardware.Camera.startPreview() android.media.MediaRecorder.MediaRecorder() android.view.SurfaceHolder.addCallback(com.yugy.videorecordtest.VideoRecordActivity) android.media.MediaRecorder.setOutputFormat(int) android.view.View.getId() android.media.MediaRecorder.setVideoSize(int, int) android.hardware.Camera.open() android.media.MediaRecorder.setCamera(android.hardware.Camera) android.widget.ImageView.setAlpha(int) com.yugy.videorecordtest.VideoRecordActivity.initMediaRecorder() android.media.MediaRecorder.setPreviewDisplay(android.view.Surface) java.lang.Throwable.printStackTrace() android.os.CountDownTimer.cancel()"], "id": "kyze8439690/AndroidVideoRecord\u0000b30d79274270cf7543d7c44e8eaaa567d0e08209\u0000VideoRecordTest/src/main/java/com/yugy/videorecordtest/VideoRecordActivity.java", "callsites_cs": "android.view.SurfaceHolder.getSurface()#android.app.Activity.findViewById(<unknown>)#android.hardware.Camera.getCameraInfo(int, android.hardware.Camera.CameraInfo)#android.view.View.setOnClickListener(com.yugy.videorecordtest.VideoRecordActivity)#android.media.MediaRecorder.start()#android.hardware.Camera.unlock()#android.media.MediaRecorder.setOrientationHint(int)#android.hardware.Camera.open(int)#android.view.View.setOnClickListener(com.yugy.videorecordtest.VideoRecordActivity)#android.widget.TextView.setText(java.lang.String)#java.io.File.getAbsolutePath()#android.hardware.Camera.setDisplayOrientation(int)#android.os.Environment.getExternalStorageDirectory()#android.hardware.Camera.startPreview()#android.hardware.Camera.setDisplayOrientation(int)#android.view.SurfaceView.getHolder()#com.yugy.videorecordtest.VideoRecordActivity.initViews()#android.media.MediaRecorder.setVideoEncoder(int)#android.media.MediaRecorder.setOutputFile(java.lang.String)#.CountDownTimer(int, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.media.MediaRecorder.setAudioEncoder(int)#<unknown>.setBright()#android.app.Activity.finish()#android.view.View.setOnClickListener(com.yugy.videorecordtest.VideoRecordActivity)#android.os.CountDownTimer.onFinish()#android.hardware.Camera.CameraInfo.CameraInfo()#android.media.MediaRecorder.setVideoSource(int)#android.hardware.Camera.release()#<unknown>.twinkle()#android.view.MotionEvent.getActionMasked()#android.app.Activity.findViewById(<unknown>)#<unknown>.setOnClickListener(com.yugy.videorecordtest.VideoRecordActivity)#android.media.MediaRecorder.stop()#android.hardware.Camera.getCameraInfo(int, android.hardware.Camera.CameraInfo)#android.view.View.setOnTouchListener(com.yugy.videorecordtest.VideoRecordActivity)#android.media.MediaRecorder.prepare()#android.hardware.Camera.getNumberOfCameras()#android.media.MediaRecorder.setAudioSource(int)#android.hardware.Camera.getNumberOfCameras()#android.media.MediaRecorder.setVideoEncodingBitRate(int)#android.app.Activity.findViewById(<unknown>)#java.io.File.File(java.lang.String)#android.hardware.Camera.release()#android.view.View.getId()#android.widget.ImageView.setAlpha(int)#android.hardware.Camera.CameraInfo.CameraInfo()#android.view.SurfaceHolder.setType(int)#android.os.CountDownTimer.start()#java.lang.Throwable.printStackTrace()#android.hardware.Camera.setPreviewDisplay(android.view.SurfaceHolder)#android.app.Activity.findViewById(<unknown>)#android.hardware.Camera.setPreviewDisplay(android.view.SurfaceHolder)#com.yugy.videorecordtest.VideoRecordActivity.checkCamera()#android.widget.TextView.setText(java.lang.String)#android.app.Activity.setContentView(<unknown>)#android.hardware.Camera.startPreview()#android.media.MediaRecorder.MediaRecorder()#android.view.SurfaceHolder.addCallback(com.yugy.videorecordtest.VideoRecordActivity)#android.media.MediaRecorder.setOutputFormat(int)#android.view.View.getId()#android.media.MediaRecorder.setVideoSize(int, int)#android.hardware.Camera.open()#android.media.MediaRecorder.setCamera(android.hardware.Camera)#android.widget.ImageView.setAlpha(int)#com.yugy.videorecordtest.VideoRecordActivity.initMediaRecorder()#android.media.MediaRecorder.setPreviewDisplay(android.view.Surface)#java.lang.Throwable.printStackTrace()#android.os.CountDownTimer.cancel()"}, {"user_sni": "Andrew Brogdon", "repo_sni": "googleads/googleads-mobile-android-examples", "imports_t": ["android.os.CountDownTimer com.google.android.gms.ads.AdListener android.widget.Toast com.google.android.gms.ads.InterstitialAd android.os.Bundle android.widget.TextView android.widget.Button android.support.v7.app.ActionBarActivity com.google.android.gms.ads.AdRequest android.view.View"], "email_sni": "redbrogdon@google.com", "contents_t": ["/*\n * Copyright (C) 2013 Google, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.android.gms.example.interstitialexample;\n\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.support.v7.app.ActionBarActivity;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.google.android.gms.ads.AdListener;\nimport com.google.android.gms.ads.AdRequest;\nimport com.google.android.gms.ads.InterstitialAd;\n\n/**\n * Main Activity. Inflates main activity xml.\n */\npublic class MyActivity extends ActionBarActivity {\n\n    private static final long GAME_LENGTH_MILLISECONDS = 3000;\n\n    private InterstitialAd mInterstitialAd;\n    private CountDownTimer mCountDownTimer;\n    private Button mRetryButton;\n    private boolean mGameIsInProgress;\n    private long mTimerMilliseconds;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_my);\n\n        // Create the InterstitialAd and set the adUnitId.\n        mInterstitialAd = new InterstitialAd(this);\n        // Defined in res/values/strings.xml\n        mInterstitialAd.setAdUnitId(getString(R.string.ad_unit_id));\n\n        mInterstitialAd.setAdListener(new AdListener() {\n            @Override\n            public void onAdClosed() {\n                startGame();\n            }\n        });\n\n        // Create the \"retry\" button, which tries to show an interstitial between game plays.\n        mRetryButton = ((Button) findViewById(R.id.retry_button));\n        mRetryButton.setVisibility(View.INVISIBLE);\n        mRetryButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                showInterstitial();\n            }\n        });\n\n        startGame();\n    }\n\n    private void createTimer(final long milliseconds) {\n        // Create the game timer, which counts down to the end of the level\n        // and shows the \"retry\" button.\n        if (mCountDownTimer != null) {\n            mCountDownTimer.cancel();\n        }\n\n        final TextView textView = ((TextView) findViewById(R.id.timer));\n\n        mCountDownTimer = new CountDownTimer(milliseconds, 50) {\n            @Override\n            public void onTick(long millisUnitFinished) {\n                mTimerMilliseconds = millisUnitFinished;\n                textView.setText(\"seconds remaining: \" + ((millisUnitFinished / 1000) + 1));\n            }\n\n            @Override\n            public void onFinish() {\n                mGameIsInProgress = false;\n                textView.setText(\"done!\");\n                mRetryButton.setVisibility(View.VISIBLE);\n            }\n        };\n    }\n\n    @Override\n    public void onResume() {\n        // Start or resume the game.\n        super.onResume();\n\n        if (mGameIsInProgress) {\n            resumeGame(mTimerMilliseconds);\n        }\n    }\n\n    @Override\n    public void onPause() {\n        // Cancel the timer if the game is paused.\n        mCountDownTimer.cancel();\n        super.onPause();\n    }\n\n    private void showInterstitial() {\n        // Show the ad if it's ready. Otherwise toast and restart the game.\n        if (mInterstitialAd != null && mInterstitialAd.isLoaded()) {\n            mInterstitialAd.show();\n        } else {\n            Toast.makeText(this, \"Ad did not load\", Toast.LENGTH_SHORT).show();\n            startGame();\n        }\n    }\n\n    private void startGame() {\n        // Request a new ad if one isn't already loaded, hide the button, and kick off the timer.\n        if (!mInterstitialAd.isLoading() && !mInterstitialAd.isLoaded()) {\n            AdRequest adRequest = new AdRequest.Builder().build();\n            mInterstitialAd.loadAd(adRequest);\n        }\n\n        mRetryButton.setVisibility(View.INVISIBLE);\n        resumeGame(GAME_LENGTH_MILLISECONDS);\n    }\n\n    private void resumeGame(long milliseconds) {\n        // Create a new timer for the correct length and start it.\n        mGameIsInProgress = true;\n        mTimerMilliseconds = milliseconds;\n        createTimer(milliseconds);\n        mCountDownTimer.start();\n    }\n}\n"], "body_t": ["<empty>"], "date_tdt": "2015-09-30T00:43:51Z", "hash_sni": "47d883e5214a20a7b2cb018ce8ceed273e67b3b5", "name_sni": "admob/InterstitialExample/app/src/main/java/com/google/android/gms/example/interstitialexample/MyActivity.java", "patch_t": [" import android.os.Bundle;\n import android.os.CountDownTimer;\n import android.support.v7.app.ActionBarActivity;\n-import android.view.Menu;\n-import android.view.MenuItem;\n import android.view.View;\n import android.widget.Button;\n import android.widget.TextView;\n import android.widget.Toast;\n \n+import com.google.android.gms.ads.AdListener;\n import com.google.android.gms.ads.AdRequest;\n import com.google.android.gms.ads.InterstitialAd;\n \n /**\n- * Main Activity. Inflates main activity xml and child fragments.\n+ * Main Activity. Inflates main activity xml.\n  */\n public class MyActivity extends ActionBarActivity {\n \n+    private static final long GAME_LENGTH_MILLISECONDS = 3000;\n+\n     private InterstitialAd mInterstitialAd;\n     private CountDownTimer mCountDownTimer;\n     private Button mRetryButton;\n+    private boolean mGameIsInProgress;\n+    private long mTimerMilliseconds;\n \n     @Override\n     protected void onCreate(Bundle savedInstanceState) {\n@@ -47,6 +50,13 @@ public class MyActivity extends ActionBarActivity {\n         // Defined in res/values/strings.xml\n         mInterstitialAd.setAdUnitId(getString(R.string.ad_unit_id));\n \n+        mInterstitialAd.setAdListener(new AdListener() {\n+            @Override\n+            public void onAdClosed() {\n+                startGame();\n+            }\n+        });\n+\n         // Create the \"retry\" button, which tries to show an interstitial between game plays.\n         mRetryButton = ((Button) findViewById(R.id.retry_button));\n         mRetryButton.setVisibility(View.INVISIBLE);\n@@ -57,17 +67,28 @@ public class MyActivity extends ActionBarActivity {\n             }\n         });\n \n+        startGame();\n+    }\n+\n+    private void createTimer(final long milliseconds) {\n         // Create the game timer, which counts down to the end of the level\n         // and shows the \"retry\" button.\n+        if (mCountDownTimer != null) {\n+            mCountDownTimer.cancel();\n+        }\n+\n         final TextView textView = ((TextView) findViewById(R.id.timer));\n-        mCountDownTimer = new CountDownTimer(3000, 50) {\n+\n+        mCountDownTimer = new CountDownTimer(milliseconds, 50) {\n             @Override\n             public void onTick(long millisUnitFinished) {\n+                mTimerMilliseconds = millisUnitFinished;\n                 textView.setText(\"seconds remaining: \" + ((millisUnitFinished / 1000) + 1));\n             }\n \n             @Override\n             public void onFinish() {\n+                mGameIsInProgress = false;\n                 textView.setText(\"done!\");\n                 mRetryButton.setVisibility(View.VISIBLE);\n             }\n@@ -75,30 +96,13 @@ public class MyActivity extends ActionBarActivity {\n     }\n \n     @Override\n-    public boolean onCreateOptionsMenu(Menu menu) {\n-        // Inflate the menu; this adds items to the action bar if it is present.\n-        getMenuInflater().inflate(R.menu.my, menu);\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean onOptionsItemSelected(MenuItem item) {\n-        // Handle action bar item clicks here. The action bar will\n-        // automatically handle clicks on the Home/Up button, so long\n-        // as you specify a parent activity in AndroidManifest.xml.\n-        int id = item.getItemId();\n-        if (id == R.id.action_settings) {\n-            return true;\n-        }\n-        return super.onOptionsItemSelected(item);\n-    }\n-\n-    @Override\n     public void onResume() {\n-        // Initialize the timer if it hasn't been initialized yet.\n-        // Start the game.\n+        // Start or resume the game.\n         super.onResume();\n-        startGame();\n+\n+        if (mGameIsInProgress) {\n+            resumeGame(mTimerMilliseconds);\n+        }\n     }\n \n     @Override\n@@ -119,10 +123,21 @@ public class MyActivity extends ActionBarActivity {\n     }\n \n     private void startGame() {\n-        // Hide the retry button, load the ad, and start the timer.\n+        // Request a new ad if one isn't already loaded, hide the button, and kick off the timer.\n+        if (!mInterstitialAd.isLoading() && !mInterstitialAd.isLoaded()) {\n+            AdRequest adRequest = new AdRequest.Builder().build();\n+            mInterstitialAd.loadAd(adRequest);\n+        }\n+\n         mRetryButton.setVisibility(View.INVISIBLE);\n-        AdRequest adRequest = new AdRequest.Builder().build();\n-        mInterstitialAd.loadAd(adRequest);\n+        resumeGame(GAME_LENGTH_MILLISECONDS);\n+    }\n+\n+    private void resumeGame(long milliseconds) {\n+        // Create a new timer for the correct length and start it.\n+        mGameIsInProgress = true;\n+        mTimerMilliseconds = milliseconds;\n+        createTimer(milliseconds);\n         mCountDownTimer.start();\n     }\n }"], "score": 1.0, "methods_t": ["AdListener AdRequest.Builder CountDownTimer InterstitialAd View.OnClickListener build cancel createTimer findViewById getString isLoaded isLoading loadAd makeText resumeGame setAdListener setAdUnitId setContentView setOnClickListener setText setVisibility show showInterstitial start startGame"], "_version_": 1526737805975224320, "subject_t": ["Updates interstitial examples, Adds NativeListViewExample."], "comments_t": ["        // Create a new timer for the correct length and start it.         // Create the game timer, which counts down to the end of the level /** \n * Main Activity. Inflates main activity xml.\n */\n         // Request a new ad if one isn't already loaded, hide the button, and kick off the timer. /*\n* Copyright (C) 2013 Google, Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n         // Create the \"retry\" button, which tries to show an interstitial between game plays.         // Start or resume the game.         // Show the ad if it's ready. Otherwise toast and restart the game.         // Create the InterstitialAd and set the adUnitId.         // Cancel the timer if the game is paused.         // Defined in res/values/strings.xml         // and shows the \"retry\" button."], "parents_ss": ["ce31986c22158af501bd635e5775352775fb1898"], "id": "googleads/googleads-mobile-android-examples\u000047d883e5214a20a7b2cb018ce8ceed273e67b3b5\u0000admob/InterstitialExample/app/src/main/java/com/google/android/gms/example/interstitialexample/MyActivity.java", "callsites_cs": ".View.OnClickListener()#<unknown>.getString(<unknown>)#.CountDownTimer(long, int)#<unknown>.InterstitialAd(com.google.android.gms.example.interstitialexample.MyActivity)#android.widget.TextView.setText(java.lang.String)#<unknown>.findViewById(<unknown>)#android.widget.Toast.makeText(com.google.android.gms.example.interstitialexample.MyActivity, java.lang.String, int)#android.view.View.setVisibility(int)#com.google.android.gms.example.interstitialexample.MyActivity.createTimer(long)#<unknown>.isLoaded()#android.view.View.setOnClickListener()#android.os.CountDownTimer.start()#<unknown>.show()#<unknown>.show()#com.google.android.gms.example.interstitialexample.MyActivity.resumeGame(long)#<unknown>.isLoaded()#com.google.android.gms.example.interstitialexample.MyActivity.showInterstitial()#<unknown>.loadAd(com.google.android.gms.example.interstitialexample.AdRequest)#com.google.android.gms.example.interstitialexample.MyActivity.startGame()#<unknown>.setContentView(<unknown>)#com.google.android.gms.example.interstitialexample.MyActivity.startGame()#android.view.View.setVisibility(int)#<unknown>.findViewById(<unknown>)#<unknown>.AdListener()#com.google.android.gms.example.interstitialexample.MyActivity.startGame()#android.os.CountDownTimer.cancel()#android.view.View.setVisibility(int)#<unknown>.build()#com.google.android.gms.example.interstitialexample.MyActivity.resumeGame(long)#<unknown>.AdRequest.Builder()#<unknown>.setAdUnitId(<unknown>)#<unknown>.setAdListener()#android.os.CountDownTimer.cancel()#android.widget.TextView.setText(java.lang.String)#<unknown>.isLoading()", "callsites_t": [".View.OnClickListener() <unknown>.getString(<unknown>) .CountDownTimer(long, int) <unknown>.InterstitialAd(com.google.android.gms.example.interstitialexample.MyActivity) android.widget.TextView.setText(java.lang.String) <unknown>.findViewById(<unknown>) android.widget.Toast.makeText(com.google.android.gms.example.interstitialexample.MyActivity, java.lang.String, int) android.view.View.setVisibility(int) com.google.android.gms.example.interstitialexample.MyActivity.createTimer(long) <unknown>.isLoaded() android.view.View.setOnClickListener() android.os.CountDownTimer.start() <unknown>.show() <unknown>.show() com.google.android.gms.example.interstitialexample.MyActivity.resumeGame(long) <unknown>.isLoaded() com.google.android.gms.example.interstitialexample.MyActivity.showInterstitial() <unknown>.loadAd(com.google.android.gms.example.interstitialexample.AdRequest) com.google.android.gms.example.interstitialexample.MyActivity.startGame() <unknown>.setContentView(<unknown>) com.google.android.gms.example.interstitialexample.MyActivity.startGame() android.view.View.setVisibility(int) <unknown>.findViewById(<unknown>) <unknown>.AdListener() com.google.android.gms.example.interstitialexample.MyActivity.startGame() android.os.CountDownTimer.cancel() android.view.View.setVisibility(int) <unknown>.build() com.google.android.gms.example.interstitialexample.MyActivity.resumeGame(long) <unknown>.AdRequest.Builder() <unknown>.setAdUnitId(<unknown>) <unknown>.setAdListener() android.os.CountDownTimer.cancel() android.widget.TextView.setText(java.lang.String) <unknown>.isLoading()"]}, {"user_sni": "Andrew Brogdon", "repo_sni": "googleads/googleads-mobile-android-examples", "imports_t": ["com.google.android.gms.ads.doubleclick.PublisherInterstitialAd android.os.CountDownTimer android.widget.Button android.support.v7.app.ActionBarActivity com.google.android.gms.ads.AdListener android.view.View android.widget.Toast com.google.android.gms.ads.doubleclick.PublisherAdRequest android.os.Bundle android.widget.TextView"], "email_sni": "redbrogdon@google.com", "contents_t": ["/*\n * Copyright (C) 2013 Google, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.android.gms.example.interstitialexample;\n\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.support.v7.app.ActionBarActivity;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.google.android.gms.ads.AdListener;\nimport com.google.android.gms.ads.doubleclick.PublisherAdRequest;\nimport com.google.android.gms.ads.doubleclick.PublisherInterstitialAd;\n\n/**\n * Main Activity. Inflates main activity xml.\n */\npublic class MyActivity extends ActionBarActivity {\n\n    private static final long GAME_LENGTH_MILLISECONDS = 3000;\n\n    private PublisherInterstitialAd mInterstitialAd;\n    private CountDownTimer mCountDownTimer;\n    private Button mRetryButton;\n    private boolean mGameIsInProgress;\n    private boolean mAdIsLoading;\n    private long mTimerMilliseconds;\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_my);\n\n        // Create the InterstitialAd and set the adUnitId.\n        mInterstitialAd = new PublisherInterstitialAd(this);\n        // Defined in res/values/strings.xml\n        mInterstitialAd.setAdUnitId(getString(R.string.ad_unit_id));\n\n        mInterstitialAd.setAdListener(new AdListener() {\n            @Override\n            public void onAdClosed() {\n                startGame();\n            }\n\n            @Override\n            public void onAdLoaded() {\n                mAdIsLoading = false;\n            }\n\n            @Override\n            public void onAdFailedToLoad(int errorCode) {\n                mAdIsLoading = false;\n            }\n        });\n\n        // Create the \"retry\" button, which tries to show an interstitial between game plays.\n        mRetryButton = ((Button) findViewById(R.id.retry_button));\n        mRetryButton.setVisibility(View.INVISIBLE);\n        mRetryButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                showInterstitial();\n            }\n        });\n\n        startGame();\n    }\n\n    private void createTimer(final long milliseconds) {\n        // Create the game timer, which counts down to the end of the level\n        // and shows the \"retry\" button.\n        if (mCountDownTimer != null) {\n            mCountDownTimer.cancel();\n        }\n\n        final TextView textView = ((TextView) findViewById(R.id.timer));\n\n        mCountDownTimer = new CountDownTimer(milliseconds, 50) {\n            @Override\n            public void onTick(long millisUnitFinished) {\n                mTimerMilliseconds = millisUnitFinished;\n                textView.setText(\"seconds remaining: \" + ((millisUnitFinished / 1000) + 1));\n            }\n\n            @Override\n            public void onFinish() {\n                mGameIsInProgress = false;\n                textView.setText(\"done!\");\n                mRetryButton.setVisibility(View.VISIBLE);\n            }\n        };\n    }\n\n    @Override\n    public void onResume() {\n        // Start or resume the game.\n        super.onResume();\n\n        if (mGameIsInProgress) {\n            resumeGame(mTimerMilliseconds);\n        }\n    }\n\n    @Override\n    public void onPause() {\n        // Cancel the timer if the game is paused.\n        mCountDownTimer.cancel();\n        super.onPause();\n    }\n\n    private void showInterstitial() {\n        // Show the ad if it's ready. Otherwise toast and restart the game.\n        if (mInterstitialAd != null && mInterstitialAd.isLoaded()) {\n            mInterstitialAd.show();\n        } else {\n            Toast.makeText(this, \"Ad did not load\", Toast.LENGTH_SHORT).show();\n            startGame();\n        }\n    }\n\n    private void startGame() {\n        // Request a new ad if one isn't already loaded, hide the button, and kick off the timer.\n        if (!mAdIsLoading && !mInterstitialAd.isLoaded()) {\n            mAdIsLoading = true;\n            PublisherAdRequest adRequest = new PublisherAdRequest.Builder().build();\n            mInterstitialAd.loadAd(adRequest);\n        }\n\n        mRetryButton.setVisibility(View.INVISIBLE);\n        resumeGame(GAME_LENGTH_MILLISECONDS);\n    }\n\n    private void resumeGame(long milliseconds) {\n        // Create a new timer for the correct length and start it.\n        mGameIsInProgress = true;\n        mTimerMilliseconds = milliseconds;\n        createTimer(milliseconds);\n        mCountDownTimer.start();\n    }\n}\n"], "body_t": ["<empty>"], "date_tdt": "2015-09-30T00:43:51Z", "hash_sni": "47d883e5214a20a7b2cb018ce8ceed273e67b3b5", "name_sni": "doubleclick/InterstitialExample/app/src/main/java/com/google/android/gms/example/interstitialexample/MyActivity.java", "patch_t": [" import android.os.Bundle;\n import android.os.CountDownTimer;\n import android.support.v7.app.ActionBarActivity;\n-import android.view.Menu;\n-import android.view.MenuItem;\n import android.view.View;\n import android.widget.Button;\n import android.widget.TextView;\n import android.widget.Toast;\n \n+import com.google.android.gms.ads.AdListener;\n import com.google.android.gms.ads.doubleclick.PublisherAdRequest;\n import com.google.android.gms.ads.doubleclick.PublisherInterstitialAd;\n \n /**\n- * Main Activity. Inflates main activity xml and child fragments.\n+ * Main Activity. Inflates main activity xml.\n  */\n public class MyActivity extends ActionBarActivity {\n \n+    private static final long GAME_LENGTH_MILLISECONDS = 3000;\n+\n     private PublisherInterstitialAd mInterstitialAd;\n     private CountDownTimer mCountDownTimer;\n     private Button mRetryButton;\n+    private boolean mGameIsInProgress;\n+    private boolean mAdIsLoading;\n+    private long mTimerMilliseconds;\n+\n \n     @Override\n     protected void onCreate(Bundle savedInstanceState) {\n@@ -47,6 +52,23 @@ public class MyActivity extends ActionBarActivity {\n         // Defined in res/values/strings.xml\n         mInterstitialAd.setAdUnitId(getString(R.string.ad_unit_id));\n \n+        mInterstitialAd.setAdListener(new AdListener() {\n+            @Override\n+            public void onAdClosed() {\n+                startGame();\n+            }\n+\n+            @Override\n+            public void onAdLoaded() {\n+                mAdIsLoading = false;\n+            }\n+\n+            @Override\n+            public void onAdFailedToLoad(int errorCode) {\n+                mAdIsLoading = false;\n+            }\n+        });\n+\n         // Create the \"retry\" button, which tries to show an interstitial between game plays.\n         mRetryButton = ((Button) findViewById(R.id.retry_button));\n         mRetryButton.setVisibility(View.INVISIBLE);\n@@ -57,17 +79,28 @@ public class MyActivity extends ActionBarActivity {\n             }\n         });\n \n+        startGame();\n+    }\n+\n+    private void createTimer(final long milliseconds) {\n         // Create the game timer, which counts down to the end of the level\n         // and shows the \"retry\" button.\n+        if (mCountDownTimer != null) {\n+            mCountDownTimer.cancel();\n+        }\n+\n         final TextView textView = ((TextView) findViewById(R.id.timer));\n-        mCountDownTimer = new CountDownTimer(3000, 50) {\n+\n+        mCountDownTimer = new CountDownTimer(milliseconds, 50) {\n             @Override\n             public void onTick(long millisUnitFinished) {\n+                mTimerMilliseconds = millisUnitFinished;\n                 textView.setText(\"seconds remaining: \" + ((millisUnitFinished / 1000) + 1));\n             }\n \n             @Override\n             public void onFinish() {\n+                mGameIsInProgress = false;\n                 textView.setText(\"done!\");\n                 mRetryButton.setVisibility(View.VISIBLE);\n             }\n@@ -75,30 +108,13 @@ public class MyActivity extends ActionBarActivity {\n     }\n \n     @Override\n-    public boolean onCreateOptionsMenu(Menu menu) {\n-        // Inflate the menu; this adds items to the action bar if it is present.\n-        getMenuInflater().inflate(R.menu.my, menu);\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean onOptionsItemSelected(MenuItem item) {\n-        // Handle action bar item clicks here. The action bar will\n-        // automatically handle clicks on the Home/Up button, so long\n-        // as you specify a parent activity in AndroidManifest.xml.\n-        int id = item.getItemId();\n-        if (id == R.id.action_settings) {\n-            return true;\n-        }\n-        return super.onOptionsItemSelected(item);\n-    }\n-\n-   @Override\n     public void onResume() {\n-        // Initialize the timer if it hasn't been initialized yet.\n-        // Start the game.\n+        // Start or resume the game.\n         super.onResume();\n-        startGame();\n+\n+        if (mGameIsInProgress) {\n+            resumeGame(mTimerMilliseconds);\n+        }\n     }\n \n     @Override\n@@ -119,10 +135,22 @@ public class MyActivity extends ActionBarActivity {\n     }\n \n     private void startGame() {\n-        // Hide the retry button, load the ad, and start the timer.\n+        // Request a new ad if one isn't already loaded, hide the button, and kick off the timer.\n+        if (!mAdIsLoading && !mInterstitialAd.isLoaded()) {\n+            mAdIsLoading = true;\n+            PublisherAdRequest adRequest = new PublisherAdRequest.Builder().build();\n+            mInterstitialAd.loadAd(adRequest);\n+        }\n+\n         mRetryButton.setVisibility(View.INVISIBLE);\n-        PublisherAdRequest publisherAdRequest = new PublisherAdRequest.Builder().build();\n-        mInterstitialAd.loadAd(publisherAdRequest);\n+        resumeGame(GAME_LENGTH_MILLISECONDS);\n+    }\n+\n+    private void resumeGame(long milliseconds) {\n+        // Create a new timer for the correct length and start it.\n+        mGameIsInProgress = true;\n+        mTimerMilliseconds = milliseconds;\n+        createTimer(milliseconds);\n         mCountDownTimer.start();\n     }\n }"], "score": 1.0, "methods_t": ["AdListener CountDownTimer PublisherAdRequest.Builder PublisherInterstitialAd View.OnClickListener build cancel createTimer findViewById getString isLoaded loadAd makeText resumeGame setAdListener setAdUnitId setContentView setOnClickListener setText setVisibility show showInterstitial start startGame"], "_version_": 1526737805979418624, "subject_t": ["Updates interstitial examples, Adds NativeListViewExample."], "comments_t": ["        // Show the ad if it's ready. Otherwise toast and restart the game.         // Create a new timer for the correct length and start it.         // Create the game timer, which counts down to the end of the level /** \n * Main Activity. Inflates main activity xml.\n */\n         // Request a new ad if one isn't already loaded, hide the button, and kick off the timer.         // Create the InterstitialAd and set the adUnitId.         // Cancel the timer if the game is paused.         // Defined in res/values/strings.xml /*\n* Copyright (C) 2013 Google, Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n         // and shows the \"retry\" button.         // Create the \"retry\" button, which tries to show an interstitial between game plays.         // Start or resume the game."], "parents_ss": ["ce31986c22158af501bd635e5775352775fb1898"], "id": "googleads/googleads-mobile-android-examples\u000047d883e5214a20a7b2cb018ce8ceed273e67b3b5\u0000doubleclick/InterstitialExample/app/src/main/java/com/google/android/gms/example/interstitialexample/MyActivity.java", "callsites_cs": ".View.OnClickListener()#<unknown>.setContentView(<unknown>)#com.google.android.gms.example.interstitialexample.MyActivity.startGame()#android.view.View.setVisibility(int)#<unknown>.findViewById(<unknown>)#<unknown>.getString(<unknown>)#.CountDownTimer(long, int)#<unknown>.AdListener()#com.google.android.gms.example.interstitialexample.MyActivity.startGame()#android.os.CountDownTimer.cancel()#android.view.View.setVisibility(int)#<unknown>.PublisherInterstitialAd(com.google.android.gms.example.interstitialexample.MyActivity)#com.google.android.gms.example.interstitialexample.MyActivity.resumeGame(long)#android.widget.TextView.setText(java.lang.String)#<unknown>.findViewById(<unknown>)#android.widget.Toast.makeText(com.google.android.gms.example.interstitialexample.MyActivity, java.lang.String, int)#android.view.View.setVisibility(int)#<unknown>.loadAd(com.google.android.gms.example.interstitialexample.PublisherAdRequest)#<unknown>.isLoaded()#<unknown>.setAdUnitId(<unknown>)#com.google.android.gms.example.interstitialexample.MyActivity.createTimer(long)#android.view.View.setOnClickListener()#android.os.CountDownTimer.start()#<unknown>.show()#<unknown>.show()#android.os.CountDownTimer.cancel()#android.widget.TextView.setText(java.lang.String)#com.google.android.gms.example.interstitialexample.MyActivity.resumeGame(long)#<unknown>.build()#<unknown>.PublisherAdRequest.Builder()#<unknown>.setAdListener()#<unknown>.isLoaded()#com.google.android.gms.example.interstitialexample.MyActivity.showInterstitial()#com.google.android.gms.example.interstitialexample.MyActivity.startGame()", "callsites_t": [".View.OnClickListener() <unknown>.setContentView(<unknown>) com.google.android.gms.example.interstitialexample.MyActivity.startGame() android.view.View.setVisibility(int) <unknown>.findViewById(<unknown>) <unknown>.getString(<unknown>) .CountDownTimer(long, int) <unknown>.AdListener() com.google.android.gms.example.interstitialexample.MyActivity.startGame() android.os.CountDownTimer.cancel() android.view.View.setVisibility(int) <unknown>.PublisherInterstitialAd(com.google.android.gms.example.interstitialexample.MyActivity) com.google.android.gms.example.interstitialexample.MyActivity.resumeGame(long) android.widget.TextView.setText(java.lang.String) <unknown>.findViewById(<unknown>) android.widget.Toast.makeText(com.google.android.gms.example.interstitialexample.MyActivity, java.lang.String, int) android.view.View.setVisibility(int) <unknown>.loadAd(com.google.android.gms.example.interstitialexample.PublisherAdRequest) <unknown>.isLoaded() <unknown>.setAdUnitId(<unknown>) com.google.android.gms.example.interstitialexample.MyActivity.createTimer(long) android.view.View.setOnClickListener() android.os.CountDownTimer.start() <unknown>.show() <unknown>.show() android.os.CountDownTimer.cancel() android.widget.TextView.setText(java.lang.String) com.google.android.gms.example.interstitialexample.MyActivity.resumeGame(long) <unknown>.build() <unknown>.PublisherAdRequest.Builder() <unknown>.setAdListener() <unknown>.isLoaded() com.google.android.gms.example.interstitialexample.MyActivity.showInterstitial() com.google.android.gms.example.interstitialexample.MyActivity.startGame()"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.content.Context android.content.DialogInterface android.widget.Button android.view.View android.app.Dialog android.view.Window com.vinsol.expensetracker.utils.AudioPlay"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\n\nimport android.app.Dialog;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.os.CountDownTimer;\nimport android.view.View;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\n\npublic class AudioPlayDialog extends Dialog implements android.view.View.OnClickListener,android.content.DialogInterface.OnDismissListener,android.content.DialogInterface.OnCancelListener {\n\n\tprivate Button audio_play_dialog_stop_button;\n\tprivate Button audio_play_dialog_play_button;\n\tprivate Button audio_play_dialog_cancel_button;\n\tprivate Chronometer audio_play_dialog_time_details_chronometer;\n\tprivate AudioPlay mAudioPlay;\n\tprivate MyCount countDownTimer;\n\tprivate String mFile;\n\tprivate Context mContext;\n\n\tpublic AudioPlayDialog(Context context, String id) {\n\t\tsuper(context);\n\t\tmContext = context;\n\t\tmFile = id;\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.audio_play_dialog);\n\t\tmAudioPlay = new AudioPlay(id, context);\n\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\taudio_play_dialog_stop_button = (Button) findViewById(R.id.audio_play_dialog_stop_button);\n\t\taudio_play_dialog_play_button = (Button) findViewById(R.id.audio_play_dialog_play_button);\n\t\taudio_play_dialog_cancel_button = (Button) findViewById(R.id.audio_play_dialog_cancel_button);\n\t\taudio_play_dialog_time_details_chronometer = (Chronometer) findViewById(R.id.audio_play_dialog_time_details_chronometer);\n\t\taudio_play_dialog_cancel_button.setOnClickListener(this);\n\t\taudio_play_dialog_play_button.setOnClickListener(this);\n\t\taudio_play_dialog_stop_button.setOnClickListener(this);\n\t\tsetOnDismissListener(this);\n\t\tsetOnCancelListener(this);\n\t\tmAudioPlay.startPlayBack();\n\t\tcountDownTimer.start();\n\t\tshow();\n\t}\n\n\tpublic AudioPlayDialog(Context context, String id,String fav) {\n\t\tsuper(context);\n\t\tmContext = context;\n\t\tmFile = id;\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.audio_play_dialog);\n\t\tmAudioPlay = new AudioPlay(id, context,fav);\n\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\taudio_play_dialog_stop_button = (Button) findViewById(R.id.audio_play_dialog_stop_button);\n\t\taudio_play_dialog_play_button = (Button) findViewById(R.id.audio_play_dialog_play_button);\n\t\taudio_play_dialog_cancel_button = (Button) findViewById(R.id.audio_play_dialog_cancel_button);\n\t\taudio_play_dialog_time_details_chronometer = (Chronometer) findViewById(R.id.audio_play_dialog_time_details_chronometer);\n\t\taudio_play_dialog_cancel_button.setOnClickListener(this);\n\t\taudio_play_dialog_play_button.setOnClickListener(this);\n\t\taudio_play_dialog_stop_button.setOnClickListener(this);\n\t\tsetOnDismissListener(this);\n\t\tsetOnCancelListener(this);\n\t\tmAudioPlay.startPlayBack();\n\t\tcountDownTimer.start();\n\t\tshow();\n\t}\n\t\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.audio_play_dialog_cancel_button) {\n\t\t\tcountDownTimer.cancel();\n\t\t\tmAudioPlay.stopPlayBack();\n\t\t\tdismiss();\n\t\t}\n\n\t\tif (v.getId() == R.id.audio_play_dialog_play_button) {\n\t\t\taudio_play_dialog_play_button.setVisibility(View.GONE);\n\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t}\n\t\t\tmAudioPlay = new AudioPlay(mFile, mContext);\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\tcountDownTimer.start();\n\t\t\tmAudioPlay.startPlayBack();\n\t\t\taudio_play_dialog_stop_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\tif (v.getId() == R.id.audio_play_dialog_stop_button) {\n\n\t\t\taudio_play_dialog_stop_button.setVisibility(View.GONE);\n\t\t\tmAudioPlay.stopPlayBack();\n\t\t\tcountDownTimer.cancel();\n\t\t\taudio_play_dialog_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\taudio_play_dialog_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\taudio_play_dialog_stop_button.setVisibility(View.GONE);\n\t\t\taudio_play_dialog_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onDismiss(DialogInterface dialog) {\n\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\tmAudioPlay.stopPlayBack();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onCancel(DialogInterface dialog) {\n\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\tmAudioPlay.stopPlayBack();\n\t\t}\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-10T13:24:16Z", "hash_sni": "8c17c6e0f86ddfa59c9873b3a0b608c4ee3227b8", "name_sni": "src/com/vinsol/expensetracker/AudioPlayDialog.java", "patch_t": [" import android.content.Context;\n import android.content.DialogInterface;\n import android.os.CountDownTimer;\n-import android.util.Log;\n import android.view.View;\n import android.view.Window;\n import android.widget.Button;\n import android.widget.Chronometer;\n \n-public class AudioPlayDialog extends Dialog implements\n-\t\tandroid.view.View.OnClickListener,\n-\t\tandroid.content.DialogInterface.OnDismissListener,\n-\t\tandroid.content.DialogInterface.OnCancelListener {\n+public class AudioPlayDialog extends Dialog implements android.view.View.OnClickListener,android.content.DialogInterface.OnDismissListener,android.content.DialogInterface.OnCancelListener {\n \n \tprivate Button audio_play_dialog_stop_button;\n \tprivate Button audio_play_dialog_play_button;\n@@ -98,9 +94,7 @@ public class AudioPlayDialog extends Dialog implements\n \t\t\taudio_play_dialog_stop_button.setVisibility(View.GONE);\n \t\t\tmAudioPlay.stopPlayBack();\n \t\t\tcountDownTimer.cancel();\n-\t\t\taudio_play_dialog_time_details_chronometer\n-\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n-\t\t\t\t\t\t\t.getPlayBackTime()));\n+\t\t\taudio_play_dialog_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n \t\t\taudio_play_dialog_play_button.setVisibility(View.VISIBLE);\n \t\t}\n \n@@ -119,23 +113,19 @@ public class AudioPlayDialog extends Dialog implements\n \n \t\t@Override\n \t\tpublic void onFinish() {\n-\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime\n-\t\t\t\t\t.getDisplayTime(mAudioPlay.getPlayBackTime()));\n+\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n \t\t\taudio_play_dialog_stop_button.setVisibility(View.GONE);\n \t\t\taudio_play_dialog_play_button.setVisibility(View.VISIBLE);\n \t\t}\n \n \t\t@Override\n \t\tpublic void onTick(long millisUntilFinished) {\n-\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime\n-\t\t\t\t\t.getDisplayTime(millisUntilFinished));\n+\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n \t\t}\n \t}\n \n \t@Override\n \tpublic void onDismiss(DialogInterface dialog) {\n-\t\tLog.v(\"mAudioPlay.isAudioPlaying() dismiss\",\n-\t\t\t\tmAudioPlay.isAudioPlaying() + \"\");\n \t\tif (mAudioPlay.isAudioPlaying()) {\n \t\t\tmAudioPlay.stopPlayBack();\n \t\t}\n@@ -143,8 +133,6 @@ public class AudioPlayDialog extends Dialog implements\n \n \t@Override\n \tpublic void onCancel(DialogInterface dialog) {\n-\t\tLog.v(\"mAudioPlay.isAudioPlaying() cancel\", mAudioPlay.isAudioPlaying()\n-\t\t\t\t+ \"\");\n \t\tif (mAudioPlay.isAudioPlaying()) {\n \t\t\tmAudioPlay.stopPlayBack();\n \t\t}"], "score": 1.0, "methods_t": ["AudioPlay DisplayTime MyCount cancel dismiss findViewById getDisplayTime getId getPlayBackTime isAudioPlaying requestWindowFeature setContentView setOnCancelListener setOnClickListener setOnDismissListener setText setVisibility show start startPlayBack stopPlayBack"], "_version_": 1526739029056290816, "subject_t": ["Final Commit 10 Dec"], "comments_t": ["\t// countdowntimer is an abstract class, so extend it and fill in methods \t// /////// ********* CountdownTimer for Chronometer ********* //////////"], "parents_ss": ["35ad47d99cd5b597d829778d1f2c8ed5abe1fbea"], "id": "vinsol/expense-tracker\u00008c17c6e0f86ddfa59c9873b3a0b608c4ee3227b8\u0000src/com/vinsol/expensetracker/AudioPlayDialog.java", "callsites_cs": "<unknown>.startPlayBack()#<unknown>.isAudioPlaying()#com.vinsol.expensetracker.AudioPlayDialog.MyCount.MyCount(<unknown>, int)#android.app.Dialog.findViewById(<unknown>)#android.app.Dialog.setContentView(<unknown>)#android.os.CountDownTimer.start()#<unknown>.getDisplayTime(<unknown>)#<unknown>.DisplayTime()#<unknown>.AudioPlay(java.lang.String, android.content.Context)#<unknown>.stopPlayBack()#android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog)#android.view.View.setVisibility(int)#<unknown>.getPlayBackTime()#<unknown>.getPlayBackTime()#android.view.View.getId()#android.view.View.setVisibility(int)#android.app.Dialog.setOnCancelListener(com.vinsol.expensetracker.AudioPlayDialog)#<unknown>.getDisplayTime(long)#android.app.Dialog.dismiss()#android.os.CountDownTimer.start()#android.app.Dialog.findViewById(<unknown>)#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog)#<unknown>.startPlayBack()#android.view.View.setVisibility(int)#com.vinsol.expensetracker.AudioPlayDialog.MyCount.MyCount(<unknown>, int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog)#<unknown>.getPlayBackTime()#<unknown>.stopPlayBack()#android.os.CountDownTimer.cancel()#android.widget.TextView.setText(<unknown>)#<unknown>.stopPlayBack()#android.app.Dialog.show()#<unknown>.isAudioPlaying()#<unknown>.AudioPlay(java.lang.String, android.content.Context, java.lang.String)#android.view.View.setVisibility(int)#android.app.Dialog.findViewById(<unknown>)#android.app.Dialog.setOnDismissListener(com.vinsol.expensetracker.AudioPlayDialog)#android.view.View.setVisibility(int)#android.app.Dialog.findViewById(<unknown>)#android.app.Dialog.requestWindowFeature(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.AudioPlay(java.lang.String, android.content.Context)", "callsites_t": ["<unknown>.startPlayBack() <unknown>.isAudioPlaying() com.vinsol.expensetracker.AudioPlayDialog.MyCount.MyCount(<unknown>, int) android.app.Dialog.findViewById(<unknown>) android.app.Dialog.setContentView(<unknown>) android.os.CountDownTimer.start() <unknown>.getDisplayTime(<unknown>) <unknown>.DisplayTime() <unknown>.AudioPlay(java.lang.String, android.content.Context) <unknown>.stopPlayBack() android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog) android.view.View.setVisibility(int) <unknown>.getPlayBackTime() <unknown>.getPlayBackTime() android.view.View.getId() android.view.View.setVisibility(int) android.app.Dialog.setOnCancelListener(com.vinsol.expensetracker.AudioPlayDialog) <unknown>.getDisplayTime(long) android.app.Dialog.dismiss() android.os.CountDownTimer.start() android.app.Dialog.findViewById(<unknown>) <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog) <unknown>.startPlayBack() android.view.View.setVisibility(int) com.vinsol.expensetracker.AudioPlayDialog.MyCount.MyCount(<unknown>, int) android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog) <unknown>.getPlayBackTime() <unknown>.stopPlayBack() android.os.CountDownTimer.cancel() android.widget.TextView.setText(<unknown>) <unknown>.stopPlayBack() android.app.Dialog.show() <unknown>.isAudioPlaying() <unknown>.AudioPlay(java.lang.String, android.content.Context, java.lang.String) android.view.View.setVisibility(int) android.app.Dialog.findViewById(<unknown>) android.app.Dialog.setOnDismissListener(com.vinsol.expensetracker.AudioPlayDialog) android.view.View.setVisibility(int) android.app.Dialog.findViewById(<unknown>) android.app.Dialog.requestWindowFeature(int) <unknown>.getDisplayTime(<unknown>) <unknown>.AudioPlay(java.lang.String, android.content.Context)"]}, {"user_sni": "Eric Jain", "repo_sni": "zenobase/zenobase-cardio", "imports_t": ["android.os.CountDownTimer javax.inject.Inject android.os.Vibrator com.squareup.otto.Bus"], "email_sni": "ejain@zenobase.com", "contents_t": ["package com.zenobase.cardio;\n\nimport javax.inject.Inject;\n\nimport android.os.CountDownTimer;\nimport android.os.Vibrator;\nimport com.squareup.otto.Bus;\n\npublic class Timer {\n\n\tprivate static long TIMER_DURATION = 300000L;\n\n\tprivate final Bus bus;\n\tprivate final Vibrator vibrator;\n\tprivate long millisUntilFinished;\n\tprivate CountDownTimer timer;\n\n\t@Inject\n\tpublic Timer(Bus bus, Vibrator vibrator) {\n\t\tthis.bus = bus;\n\t\tthis.vibrator = vibrator;\n\t\treset();\n\t}\n\n\tpublic void start() {\n\t\ttimer = new CountDownTimer(millisUntilFinished, 1000L) {\n\n\t\t\t@Override\n\t\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\t\tTimer.this.millisUntilFinished = millisUntilFinished;\n\t\t\t\tbus.post(getCurrentValue());\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onFinish() {\n\t\t\t\tvibrator.vibrate(1000L);\n\t\t\t\tTimer.this.millisUntilFinished = 0L;\n\t\t\t\tbus.post(getCurrentValue());\n\t\t\t}\n\t\t};\n\t\ttimer.start();\n\t}\n\n\tpublic void stop() {\n\t\tif (timer != null) {\n\t\t\ttimer.cancel();\n\t\t}\n\t}\n\n\tpublic void reset() {\n\t\tmillisUntilFinished = TIMER_DURATION;\n\t\tbus.post(getCurrentValue());\n\t}\n\n\tpublic TimerValue getCurrentValue() {\n\t\treturn new TimerValue(millisUntilFinished);\n\t}\n\n\tpublic long getEllapsedMillis() {\n\t\treturn TIMER_DURATION - millisUntilFinished;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2013-12-25T22:24:12Z", "hash_sni": "1df90b04f1549e3cd793143ae5ccc3acf2904976", "name_sni": "src/com/zenobase/cardio/Timer.java", "patch_t": ["+package com.zenobase.cardio;\n+\n+import javax.inject.Inject;\n+\n+import android.os.CountDownTimer;\n+import android.os.Vibrator;\n+import com.squareup.otto.Bus;\n+\n+public class Timer {\n+\n+\tprivate static long TIMER_DURATION = 300000L;\n+\n+\tprivate final Bus bus;\n+\tprivate final Vibrator vibrator;\n+\tprivate long millisUntilFinished;\n+\tprivate CountDownTimer timer;\n+\n+\t@Inject\n+\tpublic Timer(Bus bus, Vibrator vibrator) {\n+\t\tthis.bus = bus;\n+\t\tthis.vibrator = vibrator;\n+\t\treset();\n+\t}\n+\n+\tpublic void start() {\n+\t\ttimer = new CountDownTimer(millisUntilFinished, 1000L) {\n+\n+\t\t\t@Override\n+\t\t\tpublic void onTick(long millisUntilFinished) {\n+\t\t\t\tTimer.this.millisUntilFinished = millisUntilFinished;\n+\t\t\t\tbus.post(getCurrentValue());\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void onFinish() {\n+\t\t\t\tvibrator.vibrate(1000L);\n+\t\t\t\tTimer.this.millisUntilFinished = 0L;\n+\t\t\t\tbus.post(getCurrentValue());\n+\t\t\t}\n+\t\t};\n+\t\ttimer.start();\n+\t}\n+\n+\tpublic void stop() {\n+\t\tif (timer != null) {\n+\t\t\ttimer.cancel();\n+\t\t}\n+\t}\n+\n+\tpublic void reset() {\n+\t\tmillisUntilFinished = TIMER_DURATION;\n+\t\tbus.post(getCurrentValue());\n+\t}\n+\n+\tpublic TimerValue getCurrentValue() {\n+\t\treturn new TimerValue(millisUntilFinished);\n+\t}\n+\n+\tpublic long getEllapsedMillis() {\n+\t\treturn TIMER_DURATION - millisUntilFinished;\n+\t}\n+}"], "score": 1.0, "methods_t": ["CountDownTimer TimerValue cancel getCurrentValue post reset start vibrate"], "_version_": 1526739081000648704, "subject_t": ["import"], "comments_t": ["<empty>"], "callsites_t": ["com.zenobase.cardio.Timer.reset() android.os.CountDownTimer.cancel() <unknown>.post(com.zenobase.cardio.TimerValue) com.zenobase.cardio.Timer.getCurrentValue() <unknown>.post(com.zenobase.cardio.TimerValue) com.zenobase.cardio.Timer.getCurrentValue() <unknown>.TimerValue(long) <unknown>.post(com.zenobase.cardio.TimerValue) android.os.CountDownTimer.start() android.os.Vibrator.vibrate(long) com.zenobase.cardio.Timer.getCurrentValue() .CountDownTimer(long, long)"], "id": "zenobase/zenobase-cardio\u00001df90b04f1549e3cd793143ae5ccc3acf2904976\u0000src/com/zenobase/cardio/Timer.java", "callsites_cs": "com.zenobase.cardio.Timer.reset()#android.os.CountDownTimer.cancel()#<unknown>.post(com.zenobase.cardio.TimerValue)#com.zenobase.cardio.Timer.getCurrentValue()#<unknown>.post(com.zenobase.cardio.TimerValue)#com.zenobase.cardio.Timer.getCurrentValue()#<unknown>.TimerValue(long)#<unknown>.post(com.zenobase.cardio.TimerValue)#android.os.CountDownTimer.start()#android.os.Vibrator.vibrate(long)#com.zenobase.cardio.Timer.getCurrentValue()#.CountDownTimer(long, long)"}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.util.Log android.app.Activity java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate static final int EDIT_RESULT = 35;\n\tprivate RelativeLayout dateBarRelativeLayout;\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprotected static String favID = null;\n\tprivate FavoriteHelper mFavoriteHelper;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\t\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\t\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t}\n\t\t\t\n\t\t\tif(mShowList.get(4) != null){\n\t\t\t\tif(!mShowList.get(4).equals(\"\")){\n\t\t\t\t\tfavID = mShowList.get(4);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\n\t\t\tif(mShowList.get(7) != null)\n\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\n\t\t\tif(mShowList.get(6) != null)\n\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\telse {\n\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tmFavoriteHelper = new FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n\n\t\t\tmShowList.set(4, favID);\n\t\t\tintentExtras.remove(\"mDisplayList\");\n\t\t\tintentExtras.putStringArrayList(\"mDisplayList\", mShowList);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivityForResult(editIntent, EDIT_RESULT);\n//\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t\t\n\t\tsuper.onActivityResult(requestCode, resultCode, data);\n\t\tif (EDIT_RESULT == requestCode) {\n\t\t\tif(Activity.RESULT_OK == resultCode) {\n\t\t\t\t\n\t\t\t\tintentExtras = data.getBundleExtra(\"voiceShowBundle\");\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tmShowList = new ArrayList<String>();\n\t\t\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t\t\tLog.v(\"mShowListOnResult\", mShowList.toString());\n\t\t\t\t\tif(mShowList.get(0) != null){\n\t\t\t\t\t\tif(mShowList.get(0) != \"\"){\n\t\t\t\t\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfinish();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfinish();\n\t\t\t\t\t}\n\t\t\t\t\tString amount = mShowList.get(2);\n\t\t\t\t\tString tag = mShowList.get(1);\n\t\t\t\t\t\n\t\t\t\t\tif (amount != null) {\n\t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)))) {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(getString(R.string.finished_voiceentry));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(7) != null)\n\t\t\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(6) != null)\n\t\t\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\t\t\telse {\n\t\t\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\t\tupdateUI();\n\t\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmFavoriteHelper.setShowList(mShowList);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\n\t\tif(resultCode == Activity.RESULT_CANCELED){\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-13T11:53:59Z", "hash_sni": "d4beeea8da5bd26d55c1c966ddf74e948f4fea6b", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" \t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n \t\t\t\t\t}\n \t\t\t\t\t\n-\t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))) {\n+\t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)))) {\n \t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n \t\t\t\t\t} else {\n-\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n+\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(getString(R.string.finished_voiceentry));\n \t\t\t\t\t}\n \t\t\t\t\t\n \t\t\t\t\tCalendar mCalendar = Calendar.getInstance();"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler ShowLocationHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getDrawable getExternalStorageState getId getInstance getIntent getPlayBackTime getResources getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putBoolean putExtra putStringArrayList remove set setBackgroundDrawable setContentView setFirstDayOfWeek setOnClickListener setShowList setText setTimeInMillis setVisibility show start startActivityForResult startPlayBack stop stopPlayBack toString updateUI v"], "_version_": 1526732438107062272, "subject_t": ["Removed fav activity bug"], "comments_t": ["\t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** //\t\t\tfinish(); \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ****** If audio recording started then stop recording audio ***** /////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["4c263c85c19e7c3d163954d848a24b65df77ec02"], "id": "vinsol/expense-tracker\u0000d4beeea8da5bd26d55c1c966ddf74e948f4fea6b\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "android.os.Bundle.remove(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.startActivityForResult(android.content.Intent, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.io.File.canRead()#android.widget.Toast.show()#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getPlayBackTime()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#<unknown>.open()#android.content.Context.getString(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#java.util.AbstractCollection<java.lang.String>.toString()#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.Toast.show()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.view.View.setVisibility(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#java.io.File.File(java.lang.String)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#java.lang.String.equals(<unknown>)#android.view.ContextThemeWrapper.getResources()#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.content.Context.getString(<unknown>)#android.util.Log.v(java.lang.String, java.lang.String)#<unknown>.setShowList(java.util.ArrayList<java.lang.String>)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#java.lang.String.equals(<unknown>)#android.os.Environment.getExternalStorageState()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#android.app.Activity.finish()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#java.lang.Long.toString(java.lang.Long)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#<unknown>.getDisplayTime(<unknown>)#android.os.CountDownTimer.cancel()#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setBackgroundDrawable(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.util.ArrayList<java.lang.String>.ArrayList, String()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.Toast.show()#java.lang.String.equals(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#java.util.Calendar.setTimeInMillis(long)#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.res.Resources.getDrawable(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#<unknown>.DisplayTime()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.os.Bundle.putBoolean(java.lang.String, boolean)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.getInstance()#android.view.View.setVisibility(int)", "callsites_t": ["android.os.Bundle.remove(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.startActivityForResult(android.content.Intent, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.io.File.canRead() android.widget.Toast.show() java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getPlayBackTime() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) <unknown>.open() android.content.Context.getString(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) java.util.AbstractCollection<java.lang.String>.toString() <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.Toast.show() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) android.view.View.setVisibility(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) java.io.File.File(java.lang.String) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) java.lang.String.equals(<unknown>) android.view.ContextThemeWrapper.getResources() android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.content.Context.getString(<unknown>) android.util.Log.v(java.lang.String, java.lang.String) <unknown>.setShowList(java.util.ArrayList<java.lang.String>) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) java.lang.String.equals(<unknown>) android.os.Environment.getExternalStorageState() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() android.app.Activity.finish() java.io.File.File(java.lang.String) android.widget.Toast.show() java.lang.Long.toString(java.lang.Long) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() <unknown>.getDisplayTime(<unknown>) android.os.CountDownTimer.cancel() java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setBackgroundDrawable(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.util.ArrayList<java.lang.String>.ArrayList, String() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.Toast.show() java.lang.String.equals(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) java.util.Calendar.setTimeInMillis(long) java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.content.res.Resources.getDrawable(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) <unknown>.getPlayBackTime() android.app.Activity.finish() <unknown>.DisplayTime() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) android.content.Intent.getBundleExtra(java.lang.String) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.os.Bundle.putBoolean(java.lang.String, boolean) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) java.util.Calendar.getInstance() android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener com.vinsol.expensetracker.utils.DisplayDate android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.StringProcessing com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayDate;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\nimport com.vinsol.expensetracker.utils.StringProcessing;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\tprivate Boolean isChanged = false;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\")) {\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry)) || mEditList.get(5).equals(getString(R.string.unknown))){\n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ****** ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio  ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\tisChanged = true;\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif(mRecordingHelper != null)\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\t\n\t\t\tif(intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\t\tIntent mIntent = new Intent(this, ShowTextActivity.class);\n\t\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t\tBundle tempBundle = new Bundle();\n\t\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\t\tmEditList = new ArrayList<String>();\n\t\t\t\tmEditList.addAll(listOnResult);\n\t\t\t\tmIntent.putExtra(\"textShowBundle\", tempBundle);\n\t\t\t\tsetResult(Activity.RESULT_CANCELED, mIntent);\n\t\t\t}\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, \"\");\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\n\t\t\n\t\t\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,mDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\t\t ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\t\n\t\t\n\t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tBundle mToHighLight = new Bundle();\n\t\t\tmToHighLight.putString(\"toHighLight\", _list.get(DatabaseAdapter.KEY_ID));\n\t\t\tintentExpenseListing.putExtras(mToHighLight);\n\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t} else {\n\t\t\t\n\t\t\tIntent mIntent = new Intent(this, ShowVoiceActivity.class);\n\t\t\tBundle tempBundle = new Bundle();\n\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\tlistOnResult.add(mEditList.get(0));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_TAG));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_AMOUNT));\n\t\t\tif(listOnResult.get(2) == null || listOnResult.get(2) == \"\"){\n\t\t\t\tlistOnResult.set(2, \"?\");\n\t\t\t}\n\t\t\t\n\t\t\tif (listOnResult.get(1) == null || listOnResult.get(1).equals(\"\") || listOnResult.get(1).equals(getString(R.string.unfinished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.finished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.unknown_entry))) {\n\t\t\t\tif(listOnResult.get(1).equals(getString(R.string.unfinished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.finished_voiceentry))) {\n\t\t\t\t\tlistOnResult.set(1, mEditList.get(1));\n\t\t\t\t} else {\n\t\t\t\t\tlistOnResult.set(1, \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n\t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDateDate(_list.get(DatabaseAdapter.KEY_DATE_TIME)));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(3));\n\t\t\t}\t\t\t\t\n\t\t\tif((!mEditList.get(1).equals(listOnResult.get(1))) || (!mEditList.get(2).equals(new StringProcessing().getStringDoubleDecimal(listOnResult.get(2)))) || isChanged ) {\n\t\t\t\tShowVoiceActivity.favID = null;\n\t\t\t\tHashMap<String, String> listForFav = new HashMap<String, String>();\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_FAVORITE, \"\");\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_ID, mEditList.get(0));\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.editDatabase(listForFav);\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t} else if(ShowVoiceActivity.favID == null) {\n\t\t\t\t\tlistOnResult.add(mEditList.get(4));\n\t\t\t\t}\n\t\t\t\telse { \n\t\t\t\t\tlistOnResult.add(ShowVoiceActivity.favID);\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(5));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n\t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(6));\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(7));\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList.addAll(listOnResult);\n\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\tmIntent.putExtra(\"voiceShowBundle\", tempBundle);\n\t\t\tsetResult(Activity.RESULT_OK, mIntent);\n\t\t}\n\t\tfinish();\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-13T11:53:59Z", "hash_sni": "d4beeea8da5bd26d55c1c966ddf74e948f4fea6b", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \t\t\t}\n \t\t\t\n \t\t\tif (listOnResult.get(1) == null || listOnResult.get(1).equals(\"\") || listOnResult.get(1).equals(getString(R.string.unfinished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.finished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.unknown_entry))) {\n-\t\t\t\tlistOnResult.set(1, mEditList.get(1));\n+\t\t\t\tif(listOnResult.get(1).equals(getString(R.string.unfinished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.finished_voiceentry))) {\n+\t\t\t\t\tlistOnResult.set(1, mEditList.get(1));\n+\t\t\t\t} else {\n+\t\t\t\t\tlistOnResult.set(1, \"\");\n+\t\t\t\t}\n \t\t\t}\n \t\t\t\n \t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n@@ -434,7 +438,7 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t\tlistOnResult.add(mEditList.get(3));\n \t\t\t}\t\t\t\t\n \t\t\tif((!mEditList.get(1).equals(listOnResult.get(1))) || (!mEditList.get(2).equals(new StringProcessing().getStringDoubleDecimal(listOnResult.get(2)))) || isChanged ) {\n-\t\t\t\tShowTextActivity.favID = null;\n+\t\t\t\tShowVoiceActivity.favID = null;\n \t\t\t\tHashMap<String, String> listForFav = new HashMap<String, String>();\n \t\t\t\tlistForFav.put(DatabaseAdapter.KEY_FAVORITE, \"\");\n \t\t\t\tlistForFav.put(DatabaseAdapter.KEY_ID, mEditList.get(0));"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay Bundle DatabaseAdapter DateHandler DateHelper DisplayDate DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper StringProcessing add addAll addFlags canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLocationDate getLocationDateDate getLong getPlayBackTime getRepeatCount getString getStringArrayList getStringDoubleDecimal getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put putExtra putExtras putString putStringArrayList saveEntry set setBase setClickListeners setContentView setFirstDayOfWeek setGraphicsVoice setOnChronometerTickListener setOnClickListener setResult setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim"], "_version_": 1526732438125936640, "subject_t": ["Removed fav activity bug"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// ////// ******** Starts Recording each time activity starts ****** /////// \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items ********** ///////// \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// //// ******* Update database if user added additional info *******\t\t /////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t// //// ****** If audio recording started then stop recording audio  ***** /////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["7e2db56d342e2343722915119ebdd1fde2da2f33"], "id": "vinsol/expense-tracker\u0000d4beeea8da5bd26d55c1c966ddf74e948f4fea6b\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#java.lang.String.equals(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.lang.String.equals(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#<unknown>.getLocationDateDate(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.content.Context.getString(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.os.Bundle.putString(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#<unknown>.getLocationDate(<unknown>, java.lang.String)#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.content.Context.getString(<unknown>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.Bundle()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#java.lang.String.equals(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setResult(int, android.content.Intent)#android.widget.TextView.getText()#android.content.Intent.putExtras(android.os.Bundle)#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#<unknown>.StringProcessing()#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#java.lang.String.equals(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.DisplayDate()#<unknown>.isAudioPlaying()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.widget.TextView.getText()#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.view.KeyEvent.getRepeatCount()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.content.Intent.addFlags(int)#android.os.Bundle.Bundle()#android.app.Activity.setResult(int, android.content.Intent)#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#<unknown>.isRecording()#java.lang.String.equals(<unknown>)#<unknown>.getStringDoubleDecimal(java.lang.String)#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) java.lang.String.equals(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.add(<unknown>) java.lang.String.equals(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) <unknown>.getLocationDateDate(<unknown>) android.app.Activity.findViewById(<unknown>) android.content.Context.getString(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.os.Bundle.putString(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.util.ArrayList<java.lang.String>.get(int) java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() <unknown>.getLocationDate(<unknown>, java.lang.String) android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) java.lang.String.equals(<unknown>) android.widget.TextView.setText(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.content.Context.getString(<unknown>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.Bundle() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) java.lang.String.equals(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setResult(int, android.content.Intent) android.widget.TextView.getText() android.content.Intent.putExtras(android.os.Bundle) <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) <unknown>.StringProcessing() android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.util.ArrayList<java.lang.String>.get(int) java.lang.String.equals(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.DisplayDate() <unknown>.isAudioPlaying() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() java.util.ArrayList<java.lang.String>.add(<unknown>) android.widget.TextView.getText() <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.add(java.lang.String) android.view.KeyEvent.getRepeatCount() java.util.ArrayList<java.lang.String>.add(<unknown>) android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.ArrayList<java.lang.String>.ArrayList, String() android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.content.Intent.addFlags(int) android.os.Bundle.Bundle() android.app.Activity.setResult(int, android.content.Intent) android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) <unknown>.isRecording() java.lang.String.equals(<unknown>) <unknown>.getStringDoubleDecimal(java.lang.String) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Leon Nicholls", "repo_sni": "entertailion/Android-Anymote", "imports_t": ["android.os.CountDownTimer com.entertailion.java.anymote.client.AnymoteSender android.view.View android.view.MotionEvent"], "email_sni": "entertailion@gmail.com", "contents_t": ["/*\n * Copyright (C) 2012 Google Inc.  All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.entertailion.android.anymote;\n\nimport android.os.CountDownTimer;\nimport android.view.MotionEvent;\nimport android.view.View;\n\nimport com.entertailion.java.anymote.client.AnymoteSender;\n\n/**\n * Handler for touch events. Instantiate this handler for a View to send its \n * touch events to the connected Google TV using Anymote protocol.\n * \n */\npublic final class TouchHandler implements View.OnTouchListener {\n    /**\n     * Defines the kind of events this handler is supposed to generate.\n     */\n    private final Mode mode;\n\n    /**\n     * Interface to send anymoteSender during a touch sequence.\n     */\n    private final AnymoteSender anymoteSender;\n\n    /**\n     * The current touch sequence.\n     */\n    private Sequence state;\n\n    /**\n     * {@code true} if the touch handler is active.\n     */\n    private boolean isActive;\n\n    /**\n     * Scale gesture detector.\n     */\n    private final ScaleGestureDetector scaleGestureDetector;\n\n    private final float zoomThreshold;\n\n    /**\n     * Max thresholds for a sequence to be considered a click.\n     */\n    private static final int CLICK_DISTANCE_THRESHOLD_SQUARE = 30 * 30;\n    private static final int CLICK_TIME_THRESHOLD = 500;\n    private static final float SCROLLING_FACTOR = 0.2f;\n\n    /**\n     * Threshold to send a sendScroll event.\n     */\n    private static final int SCROLL_THRESHOLD = 2;\n\n    /**\n     * Thresholds for multitouch gestures.\n     */\n    private static final float MT_SCROLL_BEGIN_DIST_THRESHOLD_SQR = 20.0f * 20.0f;\n    private static final float MT_SCROLL_BEGIN_THRESHOLD = 1.2f;\n    private static final float MT_SCROLL_END_THRESHOLD = 1.4f;\n    private static final float MT_ZOOM_SCALE_THRESHOLD = 1.8f;\n\n    /**\n     * Describes the way touches should be interpreted.\n     */\n    public enum Mode {\n        POINTER,\n        POINTER_MULTITOUCH,\n        SCROLL_VERTICAL,\n        SCROLL_HORIZONTAL,\n        ZOOM_VERTICAL\n    }\n    /**\n     * Constructor\n     * @param view The view on the remote app, whose touch events are sent to Google TV.\n     * @param mode The value of {@code Mode}\n     * @param anymoteSender Sends Anymote messages to Google TV.\n     */\n    public TouchHandler(View view, Mode mode, AnymoteSender anymoteSender) {\n        if (Mode.POINTER_MULTITOUCH.equals(mode)) {\n            this.scaleGestureDetector = ScaleGestureDetectorFactory\n                    .createScaleGestureDetector(view, new MultitouchHandler());\n            this.mode = Mode.POINTER;\n        } else {\n            this.scaleGestureDetector = null;\n            this.mode = mode;\n        }\n\n        this.anymoteSender = anymoteSender;\n        isActive = true;\n        zoomThreshold = view.getResources().getInteger(R.integer.zoom_threshold);\n        view.setOnTouchListener(this);\n    }\n\n    public boolean onTouch(View v, MotionEvent event) {\n        if (!isActive) {\n            return false;\n        }\n\n        if (scaleGestureDetector != null) {\n            scaleGestureDetector.onTouchEvent(event);\n            if (scaleGestureDetector.isInProgress()) {\n                if (state != null) {\n                    state.cancelDownTimer();\n                    state = null;\n                }\n                return true;\n            }\n        }\n\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n        long timestamp = event.getEventTime();\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                state = new Sequence(x, y, timestamp);\n                return true;\n\n            case MotionEvent.ACTION_CANCEL:\n                state = null;\n                return true;\n\n            case MotionEvent.ACTION_UP:\n                boolean handled = state != null && state.handleUp(x, y, timestamp);\n                state = null;\n                return handled;\n\n            case MotionEvent.ACTION_MOVE:\n                return state != null && state.handleMove(x, y, timestamp);\n\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * {@code true} activates the touch handler, {@code false} deactivates it.\n     */\n    public void setActive(boolean active) {\n        isActive = active;\n    }\n\n    /**\n     * Stores parameters of a touch sequence, i.e. down - move(s) - up and\n     * handles new touch events.\n     */\n    private class Sequence {\n\n        /**\n         * Location of the sequence's start event.\n         */\n        private final int refX, refY;\n\n        /**\n         * Location of the last touch event.\n         */\n        private int lastX, lastY;\n        private long lastTimestamp;\n\n        /**\n         * Delta Y accumulated across several touches.\n         */\n        private int accuY;\n\n        /**\n         * Timer that expires when a click down has to be sent.\n         */\n        private CountDownTimer clickDownTimer;\n\n        /**\n         * {@code true} if a click down has been sent.\n         */\n        private boolean clickDownSent;\n\n        public Sequence(int x, int y, long timestamp) {\n            refX = x;\n            refY = y;\n            clickDownSent = false;\n            setLastTouch(x, y, timestamp);\n            if (mode == Mode.POINTER) {\n                startClickDownTimer();\n            }\n        }\n\n        private void setLastTouch(int x, int y, long timestamp) {\n            lastX = x;\n            lastY = y;\n            lastTimestamp = timestamp;\n        }\n\n        /**\n         * Returns {@code true} if a sequence is a movement.\n         */\n        private boolean isMove(int x, int y) {\n            int distance = ((refX - x) * (refX - x)) + ((refY - y) * (refY - y));\n            return distance > CLICK_DISTANCE_THRESHOLD_SQUARE;\n        }\n\n        /**\n         * Starts a timer that will expire after\n         * {@link TouchHandler#CLICK_TIME_THRESHOLD} and start to send a click\n         * down event if the touch event cannot be interpreted as a movement.\n         */\n        private void startClickDownTimer() {\n            clickDownTimer = new CountDownTimer(CLICK_TIME_THRESHOLD,\n                    CLICK_TIME_THRESHOLD) {\n                    @Override\n                public void onTick(long arg0) {\n                    // Nothing to do.\n                }\n\n                    @Override\n                public void onFinish() {\n                    clickDown();\n                }\n            };\n            clickDownTimer.start();\n        }\n\n        /**\n         * Cancels the timer, no-op if there is no timer available.\n         * \n         * @return {@code true} if there was a timer to cancel\n         */\n        private boolean cancelDownTimer() {\n            if (clickDownTimer != null) {\n                clickDownTimer.cancel();\n                clickDownTimer = null;\n                return true;\n            }\n            return false;\n        }\n\n        /**\n         * Sends a click down message.\n         */\n        private void clickDown() {\n            Action.CLICK_DOWN.execute(anymoteSender);\n            clickDownSent = true;\n        }\n\n        /**\n         * Handles a touch up. A click will be issued if the initial touch of\n         * the sequence is close enough both timewise and distance-wise.\n         * \n         * @param x an integer representing the touch's x coordinate\n         * @param y an integer representing the touch's y coordinate\n         * @param timestamp a long representing the touch's time\n         * @return {@code true} if a click was issued\n         */\n        public boolean handleUp(int x, int y, long timestamp) {\n            if (mode != Mode.POINTER) {\n                return true;\n            }\n            // If a click down is waiting, send it.\n            if (cancelDownTimer()) {\n                clickDown();\n            }\n            if (clickDownSent) {\n                Action.CLICK_UP.execute(anymoteSender);\n            }\n            return true;\n        }\n\n        /**\n         * Handles a touch move. Depending on the initial touch of the sequence,\n         * this will result in a pointer move or in a sendScrolling action.\n         * \n         * @param x an integer representing the touch's x coordinate\n         * @param y an integer representing the touch's y coordinate\n         * @param timestamp a long representing the touch's time\n         * @return {@code true} if any action was taken\n         */\n        public boolean handleMove(int x, int y, long timestamp) {\n            if (mode == Mode.POINTER) {\n                if (!isMove(x, y)) {\n                    // Stand still while it's not a move to avoid a movement\n                    // when a click\n                    // is performed.\n                } else {\n                    cancelDownTimer();\n                }\n            }\n\n            long timeDelta = timestamp - lastTimestamp;\n            int deltaX = x - lastX;\n            int deltaY = y - lastY;\n\n            switch (mode) {\n                case POINTER:\n                    anymoteSender.sendMoveRelative(deltaX, deltaY);\n                    break;\n\n                case SCROLL_VERTICAL:\n                    if (shouldTriggerScrollEvent(deltaY)) {\n                        anymoteSender.sendScroll(0, deltaY);\n                    }\n                    break;\n\n                case SCROLL_HORIZONTAL:\n                    if (shouldTriggerScrollEvent(deltaX)) {\n                        anymoteSender.sendScroll(deltaX, 0);\n                    }\n                    break;\n\n                case ZOOM_VERTICAL:\n                    accuY += deltaY;\n                    if (Math.abs(accuY) >= zoomThreshold) {\n                        if (accuY < 0) {\n                            Action.ZOOM_IN.execute(anymoteSender);\n                        } else {\n                            Action.ZOOM_OUT.execute(anymoteSender);\n                        }\n                        accuY = 0;\n                    }\n                    break;\n            }\n            setLastTouch(x, y, timestamp);\n            return true;\n        }\n    }\n\n    /**\n     * Handles multitouch events to capture zoom and sendScroll events.\n     */\n    private class MultitouchHandler\n            implements ScaleGestureDetector.OnScaleGestureListener {\n\n        private float lastScrollX;\n        private float lastScrollY;\n        private boolean isScrolling;\n\n        public boolean onScale(ScaleGestureDetector detector) {\n            float scaleFactor = detector.getScaleFactor();\n            float deltaX = scaleGestureDetector.getFocusX() - lastScrollX;\n            float deltaY = scaleGestureDetector.getFocusY() - lastScrollY;\n\n            toggleScrolling(scaleFactor, deltaX, deltaY);\n            float absX = Math.abs(deltaX);\n            float signX = Math.signum(deltaX);\n            float absY = Math.abs(deltaY);\n            float signY = Math.signum(deltaY);\n            // If both translations are less than 1\n            // pick greater one and align to 1\n            if ((absX < 1) && (absY < 1)) {\n                if (absX > absY) {\n                    deltaX = signX;\n                    deltaY = 0;\n                } else {\n                    deltaX = 0;\n                    deltaY = signY;\n                }\n            } else {\n                if (absX < 1) {\n                    deltaX = 0;\n                } else {\n                    deltaX = ((absX - 1) * SCROLLING_FACTOR + 1) * signX;\n                }\n                if (absY < 1) {\n                    deltaY = 0;\n                } else {\n                    deltaY = ((absY - 1) * SCROLLING_FACTOR + 1) * signY;\n                }\n            }\n\n            if (isScrolling) {\n                if (shouldTriggerScrollEvent(deltaX)\n                        || shouldTriggerScrollEvent(deltaY)) {\n                    executeScrollEvent(deltaX, deltaY);\n                }\n                return false;\n            }\n\n            if (!isWithinInvRange(scaleFactor, MT_ZOOM_SCALE_THRESHOLD)) {\n                executeZoomEvent(scaleFactor);\n                return true;\n            }\n\n            return false;\n        }\n\n        public boolean onScaleBegin(ScaleGestureDetector detector) {\n            resetScroll();\n            return true;\n        }\n\n        public void onScaleEnd(ScaleGestureDetector detector) {\n            // Do nothing\n        }\n\n        /**\n         * Resets sendScrolling mode.\n         */\n        private void resetScroll() {\n            isScrolling = false;\n            updateScroll();\n        }\n\n        /**\n         * Updates last sendScroll positions.\n         */\n        private void updateScroll() {\n            lastScrollX = scaleGestureDetector.getFocusX();\n            lastScrollY = scaleGestureDetector.getFocusY();\n        }\n\n        /**\n         * Sends zoom event.\n         * \n         * @param scaleFactor scale factor.\n         */\n        private void executeZoomEvent(float scaleFactor) {\n            resetScroll();\n            if (scaleFactor > 1.0f) {\n                Action.ZOOM_IN.execute(anymoteSender);\n            } else {\n                Action.ZOOM_OUT.execute(anymoteSender);\n            }\n        }\n\n        /**\n         * Sends sendScroll event.\n         */\n        private void executeScrollEvent(float deltaX, float deltaY) {\n            anymoteSender.sendScroll(Math.round(deltaX), Math.round(deltaY));\n            updateScroll();\n        }\n\n        /**\n         * Enables of disables sendScrolling, depending on the current state,\n         * scale factor, and distance from last registered focus position. mode\n         * should be enabled / disabled depending on the speed of dragging vs.\n         * scale factor.\n         */\n        private void toggleScrolling(\n                float scaleFactor, float deltaX, float deltaY) {\n            if (!isScrolling\n                    && isWithinInvRange(scaleFactor, MT_SCROLL_BEGIN_THRESHOLD)) {\n                float dist = deltaX * deltaX + deltaY * deltaY;\n                if (dist > MT_SCROLL_BEGIN_DIST_THRESHOLD_SQR) {\n                    isScrolling = true;\n                }\n            } else if (isScrolling\n                    && !isWithinInvRange(scaleFactor, MT_SCROLL_END_THRESHOLD)) {\n                // Stop sendScrolling if zooming occurs.\n                isScrolling = false;\n            }\n        }\n\n        /**\n         * Returns {@code true} if {@code (1/upperLimit) &lt; scaleFactor &lt;\n         * upperLimit}\n         */\n        private boolean isWithinInvRange(float scaleFactor, float upperLimit) {\n            if (upperLimit < 1.0f) {\n                throw new IllegalArgumentException(\"Upper limit < 1.0f: \" + upperLimit);\n            }\n            return 1.0f / upperLimit < scaleFactor && scaleFactor < upperLimit;\n        }\n    }\n\n    /**\n     * Returns {@code true} if the delta measured when sendScrolling is enough\n     * to trigger a sendScroll event.\n     * \n     * @param deltaScroll the amount of sendScroll wanted\n     */\n    private static boolean shouldTriggerScrollEvent(float deltaScroll) {\n        return Math.abs(deltaScroll) >= SCROLL_THRESHOLD;\n    }\n}\n"], "body_t": ["<empty>"], "date_tdt": "2012-11-07T16:07:03Z", "hash_sni": "43231d21b5a21058eea4ce47deb5b82df0bfe66c", "name_sni": "src/com/entertailion/android/anymote/TouchHandler.java", "patch_t": ["+/*\n+ * Copyright (C) 2012 Google Inc.  All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.entertailion.android.anymote;\n+\n+import android.os.CountDownTimer;\n+import android.view.MotionEvent;\n+import android.view.View;\n+\n+import com.entertailion.java.anymote.client.AnymoteSender;\n+\n+/**\n+ * Handler for touch events. Instantiate this handler for a View to send its \n+ * touch events to the connected Google TV using Anymote protocol.\n+ * \n+ */\n+public final class TouchHandler implements View.OnTouchListener {\n+    /**\n+     * Defines the kind of events this handler is supposed to generate.\n+     */\n+    private final Mode mode;\n+\n+    /**\n+     * Interface to send anymoteSender during a touch sequence.\n+     */\n+    private final AnymoteSender anymoteSender;\n+\n+    /**\n+     * The current touch sequence.\n+     */\n+    private Sequence state;\n+\n+    /**\n+     * {@code true} if the touch handler is active.\n+     */\n+    private boolean isActive;\n+\n+    /**\n+     * Scale gesture detector.\n+     */\n+    private final ScaleGestureDetector scaleGestureDetector;\n+\n+    private final float zoomThreshold;\n+\n+    /**\n+     * Max thresholds for a sequence to be considered a click.\n+     */\n+    private static final int CLICK_DISTANCE_THRESHOLD_SQUARE = 30 * 30;\n+    private static final int CLICK_TIME_THRESHOLD = 500;\n+    private static final float SCROLLING_FACTOR = 0.2f;\n+\n+    /**\n+     * Threshold to send a sendScroll event.\n+     */\n+    private static final int SCROLL_THRESHOLD = 2;\n+\n+    /**\n+     * Thresholds for multitouch gestures.\n+     */\n+    private static final float MT_SCROLL_BEGIN_DIST_THRESHOLD_SQR = 20.0f * 20.0f;\n+    private static final float MT_SCROLL_BEGIN_THRESHOLD = 1.2f;\n+    private static final float MT_SCROLL_END_THRESHOLD = 1.4f;\n+    private static final float MT_ZOOM_SCALE_THRESHOLD = 1.8f;\n+\n+    /**\n+     * Describes the way touches should be interpreted.\n+     */\n+    public enum Mode {\n+        POINTER,\n+        POINTER_MULTITOUCH,\n+        SCROLL_VERTICAL,\n+        SCROLL_HORIZONTAL,\n+        ZOOM_VERTICAL\n+    }\n+    /**\n+     * Constructor\n+     * @param view The view on the remote app, whose touch events are sent to Google TV.\n+     * @param mode The value of {@code Mode}\n+     * @param anymoteSender Sends Anymote messages to Google TV.\n+     */\n+    public TouchHandler(View view, Mode mode, AnymoteSender anymoteSender) {\n+        if (Mode.POINTER_MULTITOUCH.equals(mode)) {\n+            this.scaleGestureDetector = ScaleGestureDetectorFactory\n+                    .createScaleGestureDetector(view, new MultitouchHandler());\n+            this.mode = Mode.POINTER;\n+        } else {\n+            this.scaleGestureDetector = null;\n+            this.mode = mode;\n+        }\n+\n+        this.anymoteSender = anymoteSender;\n+        isActive = true;\n+        zoomThreshold = view.getResources().getInteger(R.integer.zoom_threshold);\n+        view.setOnTouchListener(this);\n+    }\n+\n+    public boolean onTouch(View v, MotionEvent event) {\n+        if (!isActive) {\n+            return false;\n+        }\n+\n+        if (scaleGestureDetector != null) {\n+            scaleGestureDetector.onTouchEvent(event);\n+            if (scaleGestureDetector.isInProgress()) {\n+                if (state != null) {\n+                    state.cancelDownTimer();\n+                    state = null;\n+                }\n+                return true;\n+            }\n+        }\n+\n+        int x = (int) event.getX();\n+        int y = (int) event.getY();\n+        long timestamp = event.getEventTime();\n+        switch (event.getAction()) {\n+            case MotionEvent.ACTION_DOWN:\n+                state = new Sequence(x, y, timestamp);\n+                return true;\n+\n+            case MotionEvent.ACTION_CANCEL:\n+                state = null;\n+                return true;\n+\n+            case MotionEvent.ACTION_UP:\n+                boolean handled = state != null && state.handleUp(x, y, timestamp);\n+                state = null;\n+                return handled;\n+\n+            case MotionEvent.ACTION_MOVE:\n+                return state != null && state.handleMove(x, y, timestamp);\n+\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    /**\n+     * {@code true} activates the touch handler, {@code false} deactivates it.\n+     */\n+    public void setActive(boolean active) {\n+        isActive = active;\n+    }\n+\n+    /**\n+     * Stores parameters of a touch sequence, i.e. down - move(s) - up and\n+     * handles new touch events.\n+     */\n+    private class Sequence {\n+\n+        /**\n+         * Location of the sequence's start event.\n+         */\n+        private final int refX, refY;\n+\n+        /**\n+         * Location of the last touch event.\n+         */\n+        private int lastX, lastY;\n+        private long lastTimestamp;\n+\n+        /**\n+         * Delta Y accumulated across several touches.\n+         */\n+        private int accuY;\n+\n+        /**\n+         * Timer that expires when a click down has to be sent.\n+         */\n+        private CountDownTimer clickDownTimer;\n+\n+        /**\n+         * {@code true} if a click down has been sent.\n+         */\n+        private boolean clickDownSent;\n+\n+        public Sequence(int x, int y, long timestamp) {\n+            refX = x;\n+            refY = y;\n+            clickDownSent = false;\n+            setLastTouch(x, y, timestamp);\n+            if (mode == Mode.POINTER) {\n+                startClickDownTimer();\n+            }\n+        }\n+\n+        private void setLastTouch(int x, int y, long timestamp) {\n+            lastX = x;\n+            lastY = y;\n+            lastTimestamp = timestamp;\n+        }\n+\n+        /**\n+         * Returns {@code true} if a sequence is a movement.\n+         */\n+        private boolean isMove(int x, int y) {\n+            int distance = ((refX - x) * (refX - x)) + ((refY - y) * (refY - y));\n+            return distance > CLICK_DISTANCE_THRESHOLD_SQUARE;\n+        }\n+\n+        /**\n+         * Starts a timer that will expire after\n+         * {@link TouchHandler#CLICK_TIME_THRESHOLD} and start to send a click\n+         * down event if the touch event cannot be interpreted as a movement.\n+         */\n+        private void startClickDownTimer() {\n+            clickDownTimer = new CountDownTimer(CLICK_TIME_THRESHOLD,\n+                    CLICK_TIME_THRESHOLD) {\n+                    @Override\n+                public void onTick(long arg0) {\n+                    // Nothing to do.\n+                }\n+\n+                    @Override\n+                public void onFinish() {\n+                    clickDown();\n+                }\n+            };\n+            clickDownTimer.start();\n+        }\n+\n+        /**\n+         * Cancels the timer, no-op if there is no timer available.\n+         * \n+         * @return {@code true} if there was a timer to cancel\n+         */\n+        private boolean cancelDownTimer() {\n+            if (clickDownTimer != null) {\n+                clickDownTimer.cancel();\n+                clickDownTimer = null;\n+                return true;\n+            }\n+            return false;\n+        }\n+\n+        /**\n+         * Sends a click down message.\n+         */\n+        private void clickDown() {\n+            Action.CLICK_DOWN.execute(anymoteSender);\n+            clickDownSent = true;\n+        }\n+\n+        /**\n+         * Handles a touch up. A click will be issued if the initial touch of\n+         * the sequence is close enough both timewise and distance-wise.\n+         * \n+         * @param x an integer representing the touch's x coordinate\n+         * @param y an integer representing the touch's y coordinate\n+         * @param timestamp a long representing the touch's time\n+         * @return {@code true} if a click was issued\n+         */\n+        public boolean handleUp(int x, int y, long timestamp) {\n+            if (mode != Mode.POINTER) {\n+                return true;\n+            }\n+            // If a click down is waiting, send it.\n+            if (cancelDownTimer()) {\n+                clickDown();\n+            }\n+            if (clickDownSent) {\n+                Action.CLICK_UP.execute(anymoteSender);\n+            }\n+            return true;\n+        }\n+\n+        /**\n+         * Handles a touch move. Depending on the initial touch of the sequence,\n+         * this will result in a pointer move or in a sendScrolling action.\n+         * \n+         * @param x an integer representing the touch's x coordinate\n+         * @param y an integer representing the touch's y coordinate\n+         * @param timestamp a long representing the touch's time\n+         * @return {@code true} if any action was taken\n+         */\n+        public boolean handleMove(int x, int y, long timestamp) {\n+            if (mode == Mode.POINTER) {\n+                if (!isMove(x, y)) {\n+                    // Stand still while it's not a move to avoid a movement\n+                    // when a click\n+                    // is performed.\n+                } else {\n+                    cancelDownTimer();\n+                }\n+            }\n+\n+            long timeDelta = timestamp - lastTimestamp;\n+            int deltaX = x - lastX;\n+            int deltaY = y - lastY;\n+\n+            switch (mode) {\n+                case POINTER:\n+                    anymoteSender.sendMoveRelative(deltaX, deltaY);\n+                    break;\n+\n+                case SCROLL_VERTICAL:\n+                    if (shouldTriggerScrollEvent(deltaY)) {\n+                        anymoteSender.sendScroll(0, deltaY);\n+                    }\n+                    break;\n+\n+                case SCROLL_HORIZONTAL:\n+                    if (shouldTriggerScrollEvent(deltaX)) {\n+                        anymoteSender.sendScroll(deltaX, 0);\n+                    }\n+                    break;\n+\n+                case ZOOM_VERTICAL:\n+                    accuY += deltaY;\n+                    if (Math.abs(accuY) >= zoomThreshold) {\n+                        if (accuY < 0) {\n+                            Action.ZOOM_IN.execute(anymoteSender);\n+                        } else {\n+                            Action.ZOOM_OUT.execute(anymoteSender);\n+                        }\n+                        accuY = 0;\n+                    }\n+                    break;\n+            }\n+            setLastTouch(x, y, timestamp);\n+            return true;\n+        }\n+    }\n+\n+    /**\n+     * Handles multitouch events to capture zoom and sendScroll events.\n+     */\n+    private class MultitouchHandler\n+            implements ScaleGestureDetector.OnScaleGestureListener {\n+\n+        private float lastScrollX;\n+        private float lastScrollY;\n+        private boolean isScrolling;\n+\n+        public boolean onScale(ScaleGestureDetector detector) {\n+            float scaleFactor = detector.getScaleFactor();\n+            float deltaX = scaleGestureDetector.getFocusX() - lastScrollX;\n+            float deltaY = scaleGestureDetector.getFocusY() - lastScrollY;\n+\n+            toggleScrolling(scaleFactor, deltaX, deltaY);\n+            float absX = Math.abs(deltaX);\n+            float signX = Math.signum(deltaX);\n+            float absY = Math.abs(deltaY);\n+            float signY = Math.signum(deltaY);\n+            // If both translations are less than 1\n+            // pick greater one and align to 1\n+            if ((absX < 1) && (absY < 1)) {\n+                if (absX > absY) {\n+                    deltaX = signX;\n+                    deltaY = 0;\n+                } else {\n+                    deltaX = 0;\n+                    deltaY = signY;\n+                }\n+            } else {\n+                if (absX < 1) {\n+                    deltaX = 0;\n+                } else {\n+                    deltaX = ((absX - 1) * SCROLLING_FACTOR + 1) * signX;\n+                }\n+                if (absY < 1) {\n+                    deltaY = 0;\n+                } else {\n+                    deltaY = ((absY - 1) * SCROLLING_FACTOR + 1) * signY;\n+                }\n+            }\n+\n+            if (isScrolling) {\n+                if (shouldTriggerScrollEvent(deltaX)\n+                        || shouldTriggerScrollEvent(deltaY)) {\n+                    executeScrollEvent(deltaX, deltaY);\n+                }\n+                return false;\n+            }\n+\n+            if (!isWithinInvRange(scaleFactor, MT_ZOOM_SCALE_THRESHOLD)) {\n+                executeZoomEvent(scaleFactor);\n+                return true;\n+            }\n+\n+            return false;\n+        }\n+\n+        public boolean onScaleBegin(ScaleGestureDetector detector) {\n+            resetScroll();\n+            return true;\n+        }\n+\n+        public void onScaleEnd(ScaleGestureDetector detector) {\n+            // Do nothing\n+        }\n+\n+        /**\n+         * Resets sendScrolling mode.\n+         */\n+        private void resetScroll() {\n+            isScrolling = false;\n+            updateScroll();\n+        }\n+\n+        /**\n+         * Updates last sendScroll positions.\n+         */\n+        private void updateScroll() {\n+            lastScrollX = scaleGestureDetector.getFocusX();\n+            lastScrollY = scaleGestureDetector.getFocusY();\n+        }\n+\n+        /**\n+         * Sends zoom event.\n+         * \n+         * @param scaleFactor scale factor.\n+         */\n+        private void executeZoomEvent(float scaleFactor) {\n+            resetScroll();\n+            if (scaleFactor > 1.0f) {\n+                Action.ZOOM_IN.execute(anymoteSender);\n+            } else {\n+                Action.ZOOM_OUT.execute(anymoteSender);\n+            }\n+        }\n+\n+        /**\n+         * Sends sendScroll event.\n+         */\n+        private void executeScrollEvent(float deltaX, float deltaY) {\n+            anymoteSender.sendScroll(Math.round(deltaX), Math.round(deltaY));\n+            updateScroll();\n+        }\n+\n+        /**\n+         * Enables of disables sendScrolling, depending on the current state,\n+         * scale factor, and distance from last registered focus position. mode\n+         * should be enabled / disabled depending on the speed of dragging vs.\n+         * scale factor.\n+         */\n+        private void toggleScrolling(\n+                float scaleFactor, float deltaX, float deltaY) {\n+            if (!isScrolling\n+                    && isWithinInvRange(scaleFactor, MT_SCROLL_BEGIN_THRESHOLD)) {\n+                float dist = deltaX * deltaX + deltaY * deltaY;\n+                if (dist > MT_SCROLL_BEGIN_DIST_THRESHOLD_SQR) {\n+                    isScrolling = true;\n+                }\n+            } else if (isScrolling\n+                    && !isWithinInvRange(scaleFactor, MT_SCROLL_END_THRESHOLD)) {\n+                // Stop sendScrolling if zooming occurs.\n+                isScrolling = false;\n+            }\n+        }\n+\n+        /**\n+         * Returns {@code true} if {@code (1/upperLimit) &lt; scaleFactor &lt;\n+         * upperLimit}\n+         */\n+        private boolean isWithinInvRange(float scaleFactor, float upperLimit) {\n+            if (upperLimit < 1.0f) {\n+                throw new IllegalArgumentException(\"Upper limit < 1.0f: \" + upperLimit);\n+            }\n+            return 1.0f / upperLimit < scaleFactor && scaleFactor < upperLimit;\n+        }\n+    }\n+\n+    /**\n+     * Returns {@code true} if the delta measured when sendScrolling is enough\n+     * to trigger a sendScroll event.\n+     * \n+     * @param deltaScroll the amount of sendScroll wanted\n+     */\n+    private static boolean shouldTriggerScrollEvent(float deltaScroll) {\n+        return Math.abs(deltaScroll) >= SCROLL_THRESHOLD;\n+    }\n+}"], "score": 1.0, "methods_t": ["CountDownTimer IllegalArgumentException MultitouchHandler Sequence abs cancel cancelDownTimer clickDown createScaleGestureDetector equals execute executeScrollEvent executeZoomEvent getAction getEventTime getFocusX getFocusY getInteger getResources getScaleFactor getX getY handleMove handleUp isInProgress isMove isWithinInvRange onTouchEvent resetScroll round sendMoveRelative sendScroll setLastTouch setOnTouchListener shouldTriggerScrollEvent signum start startClickDownTimer toggleScrolling updateScroll"], "_version_": 1526731219459375104, "subject_t": ["Anymote logic hooked up to UI"], "comments_t": ["/** \n * Handler for touch events. Instantiate this handler for a View to send its  touch events to the connected Google TV using Anymote protocol.\n */\n             // pick greater one and align to 1 /** \n * {@code true} activates the touch handler, {@code false} deactivates it.\n */\n /** \n * Handles a touch up. A click will be issued if the initial touch of the sequence is close enough both timewise and distance-wise.\n * @param x an integer representing the touch's x coordinate\n * @param y an integer representing the touch's y coordinate\n * @param timestamp a long representing the touch's time\n * @return {@code true} if a click was issued\n */\n /** \n * Location of the sequence's start event.\n */\n /** \n * Timer that expires when a click down has to be sent.\n */\n                     // when a click /** \n * Starts a timer that will expire after {@link TouchHandler#CLICK_TIME_THRESHOLD} and start to send a clickdown event if the touch event cannot be interpreted as a movement.\n */\n /** \n * Updates last sendScroll positions.\n */\n                     // Nothing to do. /** \n * {@code true} if a click down has been sent.\n */\n /** \n * Sends zoom event.\n * @param scaleFactor scale factor.\n */\n /** \n * Returns  {@code true} if a sequence is a movement.\n */\n /** \n * {@code true} if the touch handler is active.\n */\n                 // Stop sendScrolling if zooming occurs. /** \n * Returns  {@code true} if {@code (1/upperLimit) &lt; scaleFactor &lt;upperLimit}\n */\n             // Do nothing /** \n * Sends a click down message.\n */\n /** \n * Constructor\n * @param view The view on the remote app, whose touch events are sent to Google TV.\n * @param mode The value of {@code Mode}\n * @param anymoteSender Sends Anymote messages to Google TV.\n */\n             // If a click down is waiting, send it. /** \n * Location of the last touch event.\n */\n /** \n * Delta Y accumulated across several touches.\n */\n /** \n * Describes the way touches should be interpreted.\n */\n /** \n * Handles multitouch events to capture zoom and sendScroll events.\n */\n /** \n * Handles a touch move. Depending on the initial touch of the sequence, this will result in a pointer move or in a sendScrolling action.\n * @param x an integer representing the touch's x coordinate\n * @param y an integer representing the touch's y coordinate\n * @param timestamp a long representing the touch's time\n * @return {@code true} if any action was taken\n */\n /** \n * Scale gesture detector.\n */\n /** \n * Threshold to send a sendScroll event.\n */\n /** \n * Max thresholds for a sequence to be considered a click.\n */\n /** \n * The current touch sequence.\n */\n /*\n* Copyright (C) 2012 Google Inc.  All rights reserved.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n /** \n * Resets sendScrolling mode.\n */\n /** \n * Sends sendScroll event.\n */\n /** \n * Stores parameters of a touch sequence, i.e. down - move(s) - up and handles new touch events.\n */\n                     // Stand still while it's not a move to avoid a movement             // If both translations are less than 1 /** \n * Interface to send anymoteSender during a touch sequence.\n */\n /** \n * Enables of disables sendScrolling, depending on the current state, scale factor, and distance from last registered focus position. mode should be enabled / disabled depending on the speed of dragging vs. scale factor.\n */\n /** \n * Cancels the timer, no-op if there is no timer available.\n * @return {@code true} if there was a timer to cancel\n */\n                     // is performed. /** \n * Thresholds for multitouch gestures.\n */\n /** \n * Defines the kind of events this handler is supposed to generate.\n */\n /** \n * Returns  {@code true} if the delta measured when sendScrolling is enoughto trigger a sendScroll event.\n * @param deltaScroll the amount of sendScroll wanted\n */\n"], "callsites_t": ["<unknown>.getScaleFactor() android.view.View.setOnTouchListener(com.entertailion.android.anymote.TouchHandler) com.entertailion.android.anymote.TouchHandler.shouldTriggerScrollEvent(int) <unknown>.execute(com.entertailion.android.anymote.AnymoteSender) <unknown>.equals(com.entertailion.android.anymote.Mode) com.entertailion.android.anymote.TouchHandler.MultitouchHandler.toggleScrolling(float, float, float) com.entertailion.android.anymote.TouchHandler.Sequence.Sequence(int, int, long) com.entertailion.android.anymote.TouchHandler.Sequence.setLastTouch(int, int, long) <unknown>.onTouchEvent(android.view.MotionEvent) <unknown>.getFocusY() <unknown>.execute(com.entertailion.android.anymote.AnymoteSender) com.entertailion.android.anymote.TouchHandler.Sequence.startClickDownTimer() java.lang.Math.round(float) <unknown>.getFocusY() java.lang.Math.round(float) <unknown>.createScaleGestureDetector(android.view.View, com.entertailion.android.anymote.TouchHandler.MultitouchHandler) android.view.MotionEvent.getEventTime() java.lang.Math.abs(float) java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String) com.entertailion.android.anymote.TouchHandler.Sequence.isMove(int, int) <unknown>.execute(com.entertailion.android.anymote.AnymoteSender) java.lang.Math.abs(float) <unknown>.sendScroll(int, int) com.entertailion.android.anymote.TouchHandler.Sequence.handleMove(int, int, long) com.entertailion.android.anymote.TouchHandler.shouldTriggerScrollEvent(float) android.os.CountDownTimer.start() com.entertailion.android.anymote.TouchHandler.MultitouchHandler.isWithinInvRange(float, float) android.view.MotionEvent.getY() <unknown>.isInProgress() com.entertailion.android.anymote.TouchHandler.Sequence.setLastTouch(int, int, long) java.lang.Math.abs(int) com.entertailion.android.anymote.TouchHandler.MultitouchHandler.isWithinInvRange(float, float) com.entertailion.android.anymote.TouchHandler.MultitouchHandler.isWithinInvRange(float, float) com.entertailion.android.anymote.TouchHandler.Sequence.handleUp(int, int, long) java.lang.Math.abs(float) com.entertailion.android.anymote.TouchHandler.MultitouchHandler.resetScroll() com.entertailion.android.anymote.TouchHandler.MultitouchHandler.MultitouchHandler() com.entertailion.android.anymote.TouchHandler.Sequence.clickDown() <unknown>.getFocusX() <unknown>.execute(com.entertailion.android.anymote.AnymoteSender) com.entertailion.android.anymote.TouchHandler.MultitouchHandler.updateScroll() android.content.res.Resources.getInteger(<unknown>) <unknown>.execute(com.entertailion.android.anymote.AnymoteSender) android.view.View.getResources() com.entertailion.android.anymote.TouchHandler.shouldTriggerScrollEvent(int) <unknown>.getFocusX() com.entertailion.android.anymote.TouchHandler.MultitouchHandler.executeScrollEvent(float, float) com.entertailion.android.anymote.TouchHandler.MultitouchHandler.resetScroll() com.entertailion.android.anymote.TouchHandler.MultitouchHandler.updateScroll() java.lang.Math.signum(float) java.lang.Math.signum(float) .CountDownTimer(int, int) <unknown>.sendMoveRelative(int, int) android.view.MotionEvent.getX() com.entertailion.android.anymote.TouchHandler.MultitouchHandler.executeZoomEvent(float) <unknown>.execute(com.entertailion.android.anymote.AnymoteSender) <unknown>.sendScroll(int, int) com.entertailion.android.anymote.TouchHandler.shouldTriggerScrollEvent(float) com.entertailion.android.anymote.TouchHandler.Sequence.cancelDownTimer() com.entertailion.android.anymote.TouchHandler.Sequence.cancelDownTimer() com.entertailion.android.anymote.TouchHandler.Sequence.clickDown() android.os.CountDownTimer.cancel() android.view.MotionEvent.getAction() com.entertailion.android.anymote.TouchHandler.Sequence.cancelDownTimer() <unknown>.sendScroll(int, int)"], "id": "entertailion/Android-Anymote\u000043231d21b5a21058eea4ce47deb5b82df0bfe66c\u0000src/com/entertailion/android/anymote/TouchHandler.java", "callsites_cs": "<unknown>.getScaleFactor()#android.view.View.setOnTouchListener(com.entertailion.android.anymote.TouchHandler)#com.entertailion.android.anymote.TouchHandler.shouldTriggerScrollEvent(int)#<unknown>.execute(com.entertailion.android.anymote.AnymoteSender)#<unknown>.equals(com.entertailion.android.anymote.Mode)#com.entertailion.android.anymote.TouchHandler.MultitouchHandler.toggleScrolling(float, float, float)#com.entertailion.android.anymote.TouchHandler.Sequence.Sequence(int, int, long)#com.entertailion.android.anymote.TouchHandler.Sequence.setLastTouch(int, int, long)#<unknown>.onTouchEvent(android.view.MotionEvent)#<unknown>.getFocusY()#<unknown>.execute(com.entertailion.android.anymote.AnymoteSender)#com.entertailion.android.anymote.TouchHandler.Sequence.startClickDownTimer()#java.lang.Math.round(float)#<unknown>.getFocusY()#java.lang.Math.round(float)#<unknown>.createScaleGestureDetector(android.view.View, com.entertailion.android.anymote.TouchHandler.MultitouchHandler)#android.view.MotionEvent.getEventTime()#java.lang.Math.abs(float)#java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)#com.entertailion.android.anymote.TouchHandler.Sequence.isMove(int, int)#<unknown>.execute(com.entertailion.android.anymote.AnymoteSender)#java.lang.Math.abs(float)#<unknown>.sendScroll(int, int)#com.entertailion.android.anymote.TouchHandler.Sequence.handleMove(int, int, long)#com.entertailion.android.anymote.TouchHandler.shouldTriggerScrollEvent(float)#android.os.CountDownTimer.start()#com.entertailion.android.anymote.TouchHandler.MultitouchHandler.isWithinInvRange(float, float)#android.view.MotionEvent.getY()#<unknown>.isInProgress()#com.entertailion.android.anymote.TouchHandler.Sequence.setLastTouch(int, int, long)#java.lang.Math.abs(int)#com.entertailion.android.anymote.TouchHandler.MultitouchHandler.isWithinInvRange(float, float)#com.entertailion.android.anymote.TouchHandler.MultitouchHandler.isWithinInvRange(float, float)#com.entertailion.android.anymote.TouchHandler.Sequence.handleUp(int, int, long)#java.lang.Math.abs(float)#com.entertailion.android.anymote.TouchHandler.MultitouchHandler.resetScroll()#com.entertailion.android.anymote.TouchHandler.MultitouchHandler.MultitouchHandler()#com.entertailion.android.anymote.TouchHandler.Sequence.clickDown()#<unknown>.getFocusX()#<unknown>.execute(com.entertailion.android.anymote.AnymoteSender)#com.entertailion.android.anymote.TouchHandler.MultitouchHandler.updateScroll()#android.content.res.Resources.getInteger(<unknown>)#<unknown>.execute(com.entertailion.android.anymote.AnymoteSender)#android.view.View.getResources()#com.entertailion.android.anymote.TouchHandler.shouldTriggerScrollEvent(int)#<unknown>.getFocusX()#com.entertailion.android.anymote.TouchHandler.MultitouchHandler.executeScrollEvent(float, float)#com.entertailion.android.anymote.TouchHandler.MultitouchHandler.resetScroll()#com.entertailion.android.anymote.TouchHandler.MultitouchHandler.updateScroll()#java.lang.Math.signum(float)#java.lang.Math.signum(float)#.CountDownTimer(int, int)#<unknown>.sendMoveRelative(int, int)#android.view.MotionEvent.getX()#com.entertailion.android.anymote.TouchHandler.MultitouchHandler.executeZoomEvent(float)#<unknown>.execute(com.entertailion.android.anymote.AnymoteSender)#<unknown>.sendScroll(int, int)#com.entertailion.android.anymote.TouchHandler.shouldTriggerScrollEvent(float)#com.entertailion.android.anymote.TouchHandler.Sequence.cancelDownTimer()#com.entertailion.android.anymote.TouchHandler.Sequence.cancelDownTimer()#com.entertailion.android.anymote.TouchHandler.Sequence.clickDown()#android.os.CountDownTimer.cancel()#android.view.MotionEvent.getAction()#com.entertailion.android.anymote.TouchHandler.Sequence.cancelDownTimer()#<unknown>.sendScroll(int, int)"}, {"user_sni": "code-read", "repo_sni": "Inego/Aglona-Reader-Android", "imports_t": ["android.os.CountDownTimer android.content.Context android.graphics.Paint android.graphics.RectF android.util.AttributeSet android.graphics.PorterDuff android.view.View android.util.Log android.view.MotionEvent android.graphics.Bitmap android.graphics.Canvas"], "email_sni": "github@carsonwilson.com", "contents_t": ["package ru.parallelbooks.aglonareader;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\nimport android.graphics.Paint;\nimport android.graphics.PorterDuff;\nimport android.graphics.RectF;\nimport android.os.CountDownTimer;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.MotionEvent;\nimport android.view.View;\n\npublic class ParallelTextView extends View {\n\tParallelTextData pTD;\n\tprivate final MainActivity mainActivity;\n\tprivate float splitterMoveOffset;\n\tprivate final int BACKGROUND_COLOR = 0xFFFFFFFF;\n\tprivate float screenDensityX;\n\tprivate float screenDensityY;\n\tprivate float screenWidth;\n\tprivate float screenHeight;\n\tprivate final int STATE_IDLE = 0;\n\tprivate final int STATE_POINTERDOWN = 1;\n\tprivate final int STATE_DRAGGING_SPLITTER = 3;\n\tprivate final int STATE_DRAGGING_PAGE = 4;\n\tprivate final int STATE_PAGEDRAGFINISHING = 5;\n\tprivate final int STATE_PAGEDRAGREVERTING = 6;\n\tprivate final int STATE_SCALING = 7;\n\tprivate final int STATE_BRIGHTNESS_CHANGE = 8;\n\tprivate final int STATE_SCROLL = 9;\n\tprivate int state = STATE_IDLE;\n\tprivate int firstDownPointerId;\n\tprivate int secondDownPointerId;\n\tprivate float pointerDownPositionX;\n\tprivate float pointerDownPositionY;\n\tprivate float scrollY;\n\tprivate float lastBrightY;\n\tprivate float initialScalingDistance;\n\tprivate int initialFontProportion;\n\tprivate double initialBrightness;\n\tprivate long lastSingleTapTime;\n\tprivate final LongTapTimer longTapTimer = new LongTapTimer();\n\tprivate final int LONG_TAP_DELAY = 500;\n\t// Bitmaps are made static to avoid memory leaks on Android 2.3.3 and lower\n\tprivate static Bitmap currentPageBitmap;\n\tprivate Canvas currentPageBitmapCanvas;\n\tprivate static Bitmap nextPageBitmap;\n\tprivate Canvas nextPageBitmapCanvas;\n\tprivate float initialFloatingPagePosition;\n\tprivate float floatingPagePosition;\n\tprivate boolean switchingToNextPage;\n\tprivate static Bitmap shadowBitmap;\n\tprivate float shadowWidth;\n\tprivate final RectF shadowRect = new RectF();\n\tprivate boolean suppressParallelTextRedrawing = false;\n\tprivate long pageAnimationStartTime;\n\tprivate int opState;\n\n\tpublic ParallelTextView(Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\tmainActivity = (MainActivity) context;\n\t\tif (shadowBitmap == null) {\n\t\t\tshadowBitmap = Bitmap.createBitmap(50, 1, Bitmap.Config.ARGB_8888);\n\t\t\tCanvas shadowBitmapCanvas = new Canvas(shadowBitmap);\n\t\t\tPaint shadowPaint = new Paint();\n\t\t\tfor (int i = 0; i < 50; ++i) {\n\t\t\t\tshadowPaint.setARGB(200 - i * 4, 0, 0, 0);\n\t\t\t\tshadowBitmapCanvas.drawPoint((float) i, 0.0f, shadowPaint);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void goToNextPage() {\n\t\tif (state == STATE_IDLE) {\n\t\t\tprepareSwitchToNextPage();\n\t\t\tsetState(STATE_PAGEDRAGFINISHING);\n\t\t\tstartPageAnimation(initialFloatingPagePosition);\n\t\t}\n\t}\n\n\tpublic void goToPreviousPage() {\n\t\tif (state == STATE_IDLE) {\n\t\t\tprepareSwitchToPrevPage();\n\t\t\tsetState(STATE_PAGEDRAGREVERTING);\n\t\t\tstartPageAnimation(initialFloatingPagePosition);\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onTouchEvent(MotionEvent event) {\n\t\tfinal int pointerIndex = event.getActionIndex();\n\t\tfinal int pointerId = event.getPointerId(pointerIndex);\n\t\tfinal float x = event.getX(pointerIndex);\n\t\tfinal float y = event.getY(pointerIndex);\n\t\tswitch (event.getActionMasked()) {\n\t\t\tcase MotionEvent.ACTION_DOWN:\n\t\t\tcase MotionEvent.ACTION_POINTER_DOWN:\n\t\t\t\tswitch (state) {\n\t\t\t\t\tcase STATE_IDLE: // A finger is down, start timer for options popup:\n\t\t\t\t\t\tsetState(STATE_POINTERDOWN);\n\t\t\t\t\t\tlongTapTimer.start();\n\t\t\t\t\t\tpointerDownPositionX = x;\n\t\t\t\t\t\tpointerDownPositionY = y;\n\t\t\t\t\t\tfirstDownPointerId = pointerId;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_POINTERDOWN: // A second finger is down, so scale:\n\t\t\t\t\t\tlongTapTimer.cancel();\n\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n\t\t\t\t\t\t\tpTD.TurnAdvancedPopupOff();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetState(STATE_SCALING);\n\t\t\t\t\t\tsecondDownPointerId = pointerId;\n\t\t\t\t\t\tinitialScalingDistance = getDistance(x, y, pointerDownPositionX, pointerDownPositionY);\n\t\t\t\t\t\tinitialFontProportion = pTD.fontProportion;\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase MotionEvent.ACTION_MOVE:\n\t\t\t\tswitch (state) {\n\t\t\t\t\tcase STATE_POINTERDOWN:\n\t\t\t\t\t\tfloat MIN_MOVE_DELTA_INCH = 0.1f;\n\t\t\t\t\t\tif (getHeightDiffInches(pointerDownPositionY, y) > MIN_MOVE_DELTA_INCH) { // vertical movement\n\t\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal\n\t\t\t\t\t\t\t\t\t&& opState == 0 && pTD.XonSplitter(pointerDownPositionX, screenDensityX)) {\n\t\t\t\t\t\t\t\tsetState(STATE_BRIGHTNESS_CHANGE);\n\t\t\t\t\t\t\t\tinitialBrightness = pTD.brightness;\n\t\t\t\t\t\t\t\tlastBrightY = y;\n\t\t\t\t\t\t\t\t// Scroll up/down a line if finger moved at least that far:\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetState(STATE_SCROLL);\n\t\t\t\t\t\t\t\tscrollY = pointerDownPositionY; // Track finger movement\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (getWidthDiffInches(pointerDownPositionX, x) > MIN_MOVE_DELTA_INCH) { // horizontal movement\n\t\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal\n\t\t\t\t\t\t\t\t\t&& opState == 0 && pTD.XonSplitter(pointerDownPositionX, screenDensityX)) {\n\t\t\t\t\t\t\t\topState = 1;\n\t\t\t\t\t\t\t\tsplitterMoveOffset = pointerDownPositionX - pTD.splitterPosition;\n\t\t\t\t\t\t\t\tsetState(STATE_DRAGGING_SPLITTER);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetState(STATE_DRAGGING_PAGE);\n\t\t\t\t\t\t\t\tif (x > pointerDownPositionX) { // going to prev page\n\t\t\t\t\t\t\t\t\tprepareSwitchToPrevPage();\n\t\t\t\t\t\t\t\t} else { // next page\n\t\t\t\t\t\t\t\t\tprepareSwitchToNextPage();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_SCALING:\n\t\t\t\t\t\tfloat fx = 0, fy = 0;\n\t\t\t\t\t\tboolean firstPointFound = false;\n\t\t\t\t\t\tfor (int pi = 0; pi < event.getPointerCount(); ++pi) {\n\t\t\t\t\t\t\tint pid = event.getPointerId(pi);\n\t\t\t\t\t\t\tif (pid == firstDownPointerId || pid == secondDownPointerId) {\n\t\t\t\t\t\t\t\tif (firstPointFound) {\n\t\t\t\t\t\t\t\t\tfinal float distance = getDistance(fx, fy, event.getX(pi), event.getY(pi));\n\t\t\t\t\t\t\t\t\tfinal float factor = distance / initialScalingDistance;\n\t\t\t\t\t\t\t\t\tpTD.fontProportion = (int) (initialFontProportion * factor);\n\t\t\t\t\t\t\t\t\tif (pTD.fontProportion < pTD.fontSizeMin) {\n\t\t\t\t\t\t\t\t\t\tpTD.fontProportion = (int) pTD.fontSizeMin;\n\t\t\t\t\t\t\t\t\t} else if (pTD.fontProportion > 1000) {\n\t\t\t\t\t\t\t\t\t\tpTD.fontProportion = 1000;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tpTD.setFontSize(true);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfx = event.getX(pi);\n\t\t\t\t\t\t\t\t\tfy = event.getY(pi);\n\t\t\t\t\t\t\t\t\tfirstPointFound = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_DRAGGING_SPLITTER:\n\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal && opState == 1) {\n\t\t\t\t\t\t\tfloat newSplitterPosition = x - splitterMoveOffset;\n\t\t\t\t\t\t\tif (newSplitterPosition != pTD.splitterPosition) {\n\t\t\t\t\t\t\t\tif (MainActivity.DoSoundEffects) {\n\t\t\t\t\t\t\t\t\t// Indicate splitter drag with sound effects.\n\t\t\t\t\t\t\t\t\t// Calculate rate (pitch):\n\t\t\t\t\t\t\t\t\tfloat SERate = (float) (((newSplitterPosition / screenWidth) * 1.5) + .5);\n\t\t\t\t\t\t\t\t\t// Use +/- 3 to avoid flood of sounds:\n\t\t\t\t\t\t\t\t\tif (newSplitterPosition < pTD.splitterPosition - 3)\n\t\t\t\t\t\t\t\t\t\t// For now we use 1 effect for left/right, this code allows 2 if desired:\n\t\t\t\t\t\t\t\t\t\tmainActivity.SoundEffect(6, .2f, .2f, SERate);\n\t\t\t\t\t\t\t\t\telse if (newSplitterPosition > pTD.splitterPosition + 3)\n\t\t\t\t\t\t\t\t\t\tmainActivity.SoundEffect(6, .2f, .2f, SERate);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpTD.setSplitterPosition(newSplitterPosition);\n\t\t\t\t\t\t\t\tpTD.SetSplitterRatioByPosition();\n\t\t\t\t\t\t\t\tpTD.ProcessLayoutChange(false);\n\t\t\t\t\t\t\t\tinvalidateParallelText();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_DRAGGING_PAGE:\n\t\t\t\t\t\tfinal float deltaX = x - pointerDownPositionX;\n\t\t\t\t\t\tfloatingPagePosition = initialFloatingPagePosition + deltaX;\n\t\t\t\t\t\tif (floatingPagePosition > 0.0f) {\n\t\t\t\t\t\t\tfloatingPagePosition = 0.0f;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinvalidate();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase STATE_SCROLL:\n\t\t\t\t\t\tif (Math.abs(scrollY - y) > pTD.lineHeight) { // large vertical movement\n\t\t\t\t\t\t\t// Turn off TTS and sentence outline:\n\t\t\t\t\t\t\tpTD.TurnAdvancedPopupOff();\n\t\t\t\t\t\t\tif (y < scrollY)\n\t\t\t\t\t\t\t\tpTD.ProcessKeyDown(); // scroll text up (move forwards in text)\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tpTD.ProcessKeyUp();   // scroll text down\n\t\t\t\t\t\t\tif (MainActivity.DoSoundEffects) mainActivity.SoundEffect(2, .2f, .2f, 1);\n\t\t\t\t\t\t\tscrollY = y;\n\t\t\t\t\t\t\tinvalidateParallelText();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase STATE_BRIGHTNESS_CHANGE:\n//\t\t\t\t\t\tfinal double delta = (y - pointerDownPositionY) / screenHeight * 2.0;\n\t\t\t\t\t\t// \"up\" means \"brighter\" [crw]:\n\t\t\t\t\t\tfinal double delta = (pointerDownPositionY - y) / screenHeight * 2.0;\n\t\t\t\t\t\tif (Math.abs(lastBrightY - y) > 5) {  // Lower input sensitivity\n\t\t\t\t\t\t\tpTD.brightness = initialBrightness + delta;\n\t\t\t\t\t\t\tif (pTD.brightness < 0.5) {\n\t\t\t\t\t\t\t\tpTD.brightness = 0.5f;\n\t\t\t\t\t\t\t} else if (pTD.brightness > 1.0) {\n\t\t\t\t\t\t\t\tpTD.brightness = 1.0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (MainActivity.DoSoundEffects)\n\t\t\t\t\t\t\t\t//\tSound effect rises/falls with brightness setting:\n\t\t\t\t\t\t\t\tmainActivity.SoundEffect(5, .2f, .2f, (float) pTD.brightness);\n\t\t\t\t\t\t\tpTD.SetColorsByBrightness();\n\t\t\t\t\t\t\tinvalidateParallelText();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlastBrightY = y;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase MotionEvent.ACTION_UP:\n\t\t\tcase MotionEvent.ACTION_POINTER_UP:\n\t\t\t\tswitch (state) {\n\t\t\t\t\tcase STATE_SCALING:\n\t\t\t\t\t\tif (pointerId == firstDownPointerId) {\n\t\t\t\t\t\t\tfirstDownPointerId = -1;\n\t\t\t\t\t\t} else if (pointerId == secondDownPointerId) {\n\t\t\t\t\t\t\tsecondDownPointerId = -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (firstDownPointerId == -1 && secondDownPointerId == -1) {\n\t\t\t\t\t\t\tsetState(STATE_IDLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_POINTERDOWN:\n\t\t\t\t\t\tfinal long time = System.currentTimeMillis();\n\t\t\t\t\t\tsetState(STATE_IDLE);\n\t\t\t\t\t\tint DOUBLE_TAP_DELAY = 500;\n\t\t\t\t\t\tif (time - lastSingleTapTime < DOUBLE_TAP_DELAY) {\n\t\t\t\t\t\t\tlastSingleTapTime = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprocessSingleTap(x, y);\n\t\t\t\t\t\t\tlastSingleTapTime = System.currentTimeMillis();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_DRAGGING_SPLITTER:\n\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal && opState == 1) {\n\t\t\t\t\t\t\topState = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetState(STATE_IDLE);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_BRIGHTNESS_CHANGE:\n\t\t\t\t\tcase STATE_SCROLL:\n\t\t\t\t\t\tsetState(STATE_IDLE);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_DRAGGING_PAGE:\n\t\t\t\t\t\tsetState(switchingToNextPage ? STATE_PAGEDRAGFINISHING : STATE_PAGEDRAGREVERTING);\n\t\t\t\t\t\tif (MainActivity.DoSoundEffects) mainActivity.SoundEffect(3, .8f, .8f, 1);\n\t\t\t\t\t\tstartPageAnimation(floatingPagePosition);\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate void prepareSwitchToNextPage() {\n\t\tswitchingToNextPage = true;\n\t\tsuppressParallelTextRedrawing = true;\n\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n\t\t\tpTD.TurnAdvancedPopupOff();\n\t\t}\n\t\tpTD.ProcessPageDown();\n\t\tsuppressParallelTextRedrawing = false;\n\t\tnextPageBitmapCanvas.drawColor(BACKGROUND_COLOR, PorterDuff.Mode.SRC);\n\t\tpTD.onDraw(nextPageBitmapCanvas);\n\t\tinitialFloatingPagePosition = 0;\n\t}\n\n\tprivate void prepareSwitchToPrevPage() {\n\t\tswitchingToNextPage = false;\n\t\tsuppressParallelTextRedrawing = true;\n\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n\t\t\tpTD.TurnAdvancedPopupOff();\n\t\t}\n\t\tpTD.ProcessPageUp();\n\t\tsuppressParallelTextRedrawing = false;\n\t\tnextPageBitmapCanvas.drawColor(BACKGROUND_COLOR, PorterDuff.Mode.SRC);\n\t\tpTD.onDraw(nextPageBitmapCanvas);\n\t\tswapBitmaps();\n\t\tinitialFloatingPagePosition = -screenWidth - shadowWidth;\n\t}\n\n\tprivate void swapBitmaps() {\n\t\tfinal Bitmap tempBitmap = nextPageBitmap;\n\t\tnextPageBitmap = currentPageBitmap;\n\t\tcurrentPageBitmap = tempBitmap;\n\t\tfinal Canvas tempCanvas = nextPageBitmapCanvas;\n\t\tnextPageBitmapCanvas = currentPageBitmapCanvas;\n\t\tcurrentPageBitmapCanvas = tempCanvas;\n\t}\n\n\tprivate void startPageAnimation(float ininitalPagePosition) {\n\t\tinitialFloatingPagePosition = ininitalPagePosition;\n\t\tpageAnimationStartTime = System.currentTimeMillis();\n\t\tinvalidate();\n\t}\n\n\tprivate void setState(int state) {\n\t\tLog.d(\"ParalleltextView\", \"State change: \" + this.state + \" -> \" + state);\n\t\tthis.state = state;\n\t}\n\n\tprivate void processSingleTap(float x, float y) {\n\t\tpTD.LastMouseX = x;\n\t\tpTD.LastMouseY = y;\n//controls advancedpopup [crw]\n\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n\t\t\tpTD.ProcessMousePosition();\n\t\t}\n\t}\n\n\tprivate void processLongTap() {\n\t\tmainActivity.openContextMenu(this);\n\t}\n\n\t@Override\n\tprotected void onSizeChanged(int w, int h, int oldw, int oldh) {\n\t\tif (pTD == null)\n\t\t\treturn;\n\t\tif (currentPageBitmap != null) {\n\t\t\tcurrentPageBitmap.recycle();\n\t\t}\n\t\tif (nextPageBitmap != null) {\n\t\t\tnextPageBitmap.recycle();\n\t\t}\n\t\tcurrentPageBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);\n\t\tcurrentPageBitmapCanvas = new Canvas(currentPageBitmap);\n\t\tnextPageBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);\n\t\tnextPageBitmapCanvas = new Canvas(nextPageBitmap);\n\t\tif (!pTD.fontRangeSet) {\n\t\t\tpTD.setFontRange(w, h);\n\t\t\tpTD.setFontSize(false);\n\t\t}\n\t\tpTD.viewWidth = w;\n\t\tpTD.viewHeight = h;\n\t\tpTD.pTV = this;\n\t\tpTD.SetSplitterPositionByRatio();\n\t\tpTD.ProcessLayoutChange(true);\n\t\tscreenDensityX = getContext().getResources().getDisplayMetrics().xdpi;\n\t\tscreenDensityY = getContext().getResources().getDisplayMetrics().ydpi;\n\t\tscreenWidth = w;\n\t\tscreenHeight = h;\n\t\tshadowWidth = screenWidth / 25.0f;\n\t\tsuper.onSizeChanged(w, h, oldw, oldh);\n\t}\n\n\t@Override\n\tprotected void onDraw(Canvas canvas) {\n\t\tsuper.onDraw(canvas);\n\t\tif (state == STATE_PAGEDRAGFINISHING || state == STATE_PAGEDRAGREVERTING) // animating\n\t\t{\n\t\t\tfinal float finalPagePos = state == STATE_PAGEDRAGFINISHING ? (-screenWidth - shadowWidth) : 0.0f;\n\t\t\tlong PAGE_ANIMATION_DURATION = 300;\n\t\t\tfinal float coef = (System.currentTimeMillis() - pageAnimationStartTime) / (float) PAGE_ANIMATION_DURATION;\n\t\t\tif (coef >= 1.0f) {\n\t\t\t\tfloatingPagePosition = 0.0f;\n\t\t\t\tif (state == STATE_PAGEDRAGFINISHING) {\n\t\t\t\t\tswapBitmaps();\n\t\t\t\t}\n\t\t\t\tsetState(STATE_IDLE);\n\t\t\t} else {\n\t\t\t\tfinal float transformedCoef = ((float) Math.sin(coef * Math.PI - Math.PI / 2.0) + 1.0f) / 2.0f; // transform by sine\n\t\t\t\tfloatingPagePosition = initialFloatingPagePosition + (finalPagePos - initialFloatingPagePosition) * transformedCoef;\n\t\t\t\tinvalidate();\n\t\t\t}\n\t\t}\n\t\tif (state == STATE_DRAGGING_PAGE || state == STATE_PAGEDRAGFINISHING || state == STATE_PAGEDRAGREVERTING) {\n\t\t\tcanvas.drawBitmap(nextPageBitmap, 0, 0, null);\n\t\t\tfinal float shadowLeft = floatingPagePosition + screenWidth;\n\t\t\tfinal float shadowRight = shadowLeft + shadowWidth;\n\t\t\tshadowRect.set(shadowLeft, 0.0f, shadowRight, screenHeight);\n\t\t\tcanvas.drawBitmap(shadowBitmap, null, shadowRect, null);\n\t\t}\n\t\tcanvas.drawBitmap(currentPageBitmap, floatingPagePosition, 0, null);\n\t}\n\n\tpublic void invalidateParallelText() {\n\t\tif (suppressParallelTextRedrawing) {\n\t\t\treturn;\n\t\t}\n\t\tif (pTD != null) {\n\t\t\tcurrentPageBitmapCanvas.drawColor(BACKGROUND_COLOR, PorterDuff.Mode.SRC);\n\t\t\tpTD.onDraw(currentPageBitmapCanvas);\n\t\t}\n\t\tinvalidate();\n\t}\n\n\tpublic void updateNoBookVisibility() {\n\t\tMainActivity mActivity = (MainActivity) getContext();\n\t\tmActivity.findViewById(R.id.emptyBookView).setVisibility(pTD.bookOpened ? View.INVISIBLE : View.VISIBLE);\n\t}\n\n\tprivate float getHeightDiffInches(float y1, float y2) {\n\t\treturn Math.abs(y1 - y2) / screenDensityY;\n\t}\n\n\tprivate float getWidthDiffInches(float x1, float x2) {\n\t\treturn Math.abs(x1 - x2) / screenDensityX;\n\t}\n\n\tprivate static float getDistance(float x1, float y1, float x2, float y2) {\n\t\tfinal float dX = x1 - x2;\n\t\tfinal float dY = y1 - y2;\n\t\treturn (float) Math.sqrt(dX * dX + dY * dY);\n\t}\n\n\tprivate class LongTapTimer extends CountDownTimer {\n\t\tpublic LongTapTimer() {\n\t\t\tsuper(LONG_TAP_DELAY, 1000000);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long l) {\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tmainActivity.runOnUiThread(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tif (state == STATE_POINTERDOWN) {\n\t\t\t\t\t\tsetState(STATE_IDLE);\n\t\t\t\t\t\tprocessLongTap();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n"], "body_t": ["TODO:\n- Add TTS speed and pitch settings to prefs (currently controlled by\n  system settings)\n- Add TTS to normal and alternating display modes\n- Fix normal mode color spillover at top of screen\n- Improve file navigation; sometimes directories appear to be unavailable\n- Improve startup time of TTS when language changes, possibly by preloading a second thread\n- Divider should be horizontal on vertical tablet orientation, currently vertical on all orientations\n- Analyze possible overuse of pTD, etc., to import/export context\n- Investigate small screen slider sound effect performance; possibly we need a different metric to time sound effect calls"], "date_tdt": "2015-09-17T15:29:26Z", "hash_sni": "09f8465ae4491120bf13c4530986792880559f8a", "name_sni": "app/src/main/java/ru/parallelbooks/aglonareader/ParallelTextView.java", "patch_t": [" \n import android.content.Context;\n import android.graphics.Bitmap;\n-//import android.graphics.BitmapFactory;\n import android.graphics.Canvas;\n import android.graphics.Paint;\n import android.graphics.PorterDuff;\n@@ -12,33 +11,25 @@ import android.util.AttributeSet;\n import android.util.Log;\n import android.view.MotionEvent;\n import android.view.View;\n-import android.widget.TextView;\n-\n \n public class ParallelTextView extends View {\n-\n \tParallelTextData pTD;\n \tprivate final MainActivity mainActivity;\n-\n \tprivate float splitterMoveOffset;\n-\n \tprivate final int BACKGROUND_COLOR = 0xFFFFFFFF;\n-\n \tprivate float screenDensityX;\n \tprivate float screenDensityY;\n \tprivate float screenWidth;\n \tprivate float screenHeight;\n-\n-\tprivate final int STATE_IDLE              = 0;\n-\tprivate final int STATE_POINTERDOWN       = 1;\n+\tprivate final int STATE_IDLE = 0;\n+\tprivate final int STATE_POINTERDOWN = 1;\n \tprivate final int STATE_DRAGGING_SPLITTER = 3;\n-\tprivate final int STATE_DRAGGING_PAGE     = 4;\n+\tprivate final int STATE_DRAGGING_PAGE = 4;\n \tprivate final int STATE_PAGEDRAGFINISHING = 5;\n \tprivate final int STATE_PAGEDRAGREVERTING = 6;\n-\tprivate final int STATE_SCALING           = 7;\n+\tprivate final int STATE_SCALING = 7;\n \tprivate final int STATE_BRIGHTNESS_CHANGE = 8;\n-\tprivate final int STATE_SCROLL            = 9;\n-\n+\tprivate final int STATE_SCROLL = 9;\n \tprivate int state = STATE_IDLE;\n \tprivate int firstDownPointerId;\n \tprivate int secondDownPointerId;\n@@ -46,16 +37,12 @@ public class ParallelTextView extends View {\n \tprivate float pointerDownPositionY;\n \tprivate float scrollY;\n \tprivate float lastBrightY;\n-\n \tprivate float initialScalingDistance;\n \tprivate int initialFontProportion;\n-\n \tprivate double initialBrightness;\n-\n \tprivate long lastSingleTapTime;\n \tprivate final LongTapTimer longTapTimer = new LongTapTimer();\n \tprivate final int LONG_TAP_DELAY = 500;\n-\n \t// Bitmaps are made static to avoid memory leaks on Android 2.3.3 and lower\n \tprivate static Bitmap currentPageBitmap;\n \tprivate Canvas currentPageBitmapCanvas;\n@@ -63,26 +50,21 @@ public class ParallelTextView extends View {\n \tprivate Canvas nextPageBitmapCanvas;\n \tprivate float initialFloatingPagePosition;\n \tprivate float floatingPagePosition;\n-\n \tprivate boolean switchingToNextPage;\n-\n \tprivate static Bitmap shadowBitmap;\n \tprivate float shadowWidth;\n \tprivate final RectF shadowRect = new RectF();\n-\n \tprivate boolean suppressParallelTextRedrawing = false;\n-\n \tprivate long pageAnimationStartTime;\n+\tprivate int opState;\n \n \tpublic ParallelTextView(Context context, AttributeSet attrs) {\n \t\tsuper(context, attrs);\n \t\tmainActivity = (MainActivity) context;\n-\n \t\tif (shadowBitmap == null) {\n \t\t\tshadowBitmap = Bitmap.createBitmap(50, 1, Bitmap.Config.ARGB_8888);\n \t\t\tCanvas shadowBitmapCanvas = new Canvas(shadowBitmap);\n \t\t\tPaint shadowPaint = new Paint();\n-\n \t\t\tfor (int i = 0; i < 50; ++i) {\n \t\t\t\tshadowPaint.setARGB(200 - i * 4, 0, 0, 0);\n \t\t\t\tshadowBitmapCanvas.drawPoint((float) i, 0.0f, shadowPaint);\n@@ -112,7 +94,6 @@ public class ParallelTextView extends View {\n \t\tfinal int pointerId = event.getPointerId(pointerIndex);\n \t\tfinal float x = event.getX(pointerIndex);\n \t\tfinal float y = event.getY(pointerIndex);\n-\n \t\tswitch (event.getActionMasked()) {\n \t\t\tcase MotionEvent.ACTION_DOWN:\n \t\t\tcase MotionEvent.ACTION_POINTER_DOWN:\n@@ -140,34 +121,25 @@ public class ParallelTextView extends View {\n \t\t\t\tswitch (state) {\n \t\t\t\t\tcase STATE_POINTERDOWN:\n \t\t\t\t\t\tfloat MIN_MOVE_DELTA_INCH = 0.1f;\n-\n-//\t\t\t\t\t\tLog.e(\"PTV\", \"PDPX= \" + Float.toString(pointerDownPositionX));\n-//\t\t\t\t\t\tLog.e(\"PTV\", \"VW= \" + Float.toString(pTD.viewWidth));\n-\n-//crw\t\t\t\t\t\tif (getHeightDiffInches(pointerDownPositionY, y) > MIN_MOVE_DELTA_INCH) { // vertical movement\n-//middle third of screen only, reserve rest for page drag:\n \t\t\t\t\t\tif (getHeightDiffInches(pointerDownPositionY, y) > MIN_MOVE_DELTA_INCH) { // vertical movement\n-\t\t\t\t\t\t\tif ((pTD.LayoutMode == pTD.LayoutMode_Normal) &&\n-\t\t\t\t\t\t\t\t(pointerDownPositionX > (pTD.viewWidth / 3)\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& pointerDownPositionX < pTD.viewWidth / 1.5)) {\n+\t\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal\n+\t\t\t\t\t\t\t\t\t&& opState == 0 && pTD.XonSplitter(pointerDownPositionX, screenDensityX)) {\n \t\t\t\t\t\t\t\tsetState(STATE_BRIGHTNESS_CHANGE);\n \t\t\t\t\t\t\t\tinitialBrightness = pTD.brightness;\n \t\t\t\t\t\t\t\tlastBrightY = y;\n-\t\t\t\t\t\t// Scroll up/down a line if finger moved at least that far:\n+\t\t\t\t\t\t\t\t// Scroll up/down a line if finger moved at least that far:\n \t\t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t\tsetState(STATE_SCROLL);\n \t\t\t\t\t\t\t\tscrollY = pointerDownPositionY; // Track finger movement\n-//\t\t\t\t\t\t\t\tLog.e(\"PTV\", \"scroll1\");\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t} else if (getWidthDiffInches(pointerDownPositionX, x) > MIN_MOVE_DELTA_INCH) { // horizontal movement\n \t\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal\n-\t\t\t\t\t\t\t\t\t&& pTD.opState == 0 && pTD.XonSplitter(pointerDownPositionX, screenDensityX)) {\n-\t\t\t\t\t\t\t\tpTD.opState = 1;\n+\t\t\t\t\t\t\t\t\t&& opState == 0 && pTD.XonSplitter(pointerDownPositionX, screenDensityX)) {\n+\t\t\t\t\t\t\t\topState = 1;\n \t\t\t\t\t\t\t\tsplitterMoveOffset = pointerDownPositionX - pTD.splitterPosition;\n \t\t\t\t\t\t\t\tsetState(STATE_DRAGGING_SPLITTER);\n \t\t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t\tsetState(STATE_DRAGGING_PAGE);\n-\n \t\t\t\t\t\t\t\tif (x > pointerDownPositionX) { // going to prev page\n \t\t\t\t\t\t\t\t\tprepareSwitchToPrevPage();\n \t\t\t\t\t\t\t\t} else { // next page\n@@ -179,32 +151,18 @@ public class ParallelTextView extends View {\n \t\t\t\t\tcase STATE_SCALING:\n \t\t\t\t\t\tfloat fx = 0, fy = 0;\n \t\t\t\t\t\tboolean firstPointFound = false;\n-\n \t\t\t\t\t\tfor (int pi = 0; pi < event.getPointerCount(); ++pi) {\n \t\t\t\t\t\t\tint pid = event.getPointerId(pi);\n-\n \t\t\t\t\t\t\tif (pid == firstDownPointerId || pid == secondDownPointerId) {\n \t\t\t\t\t\t\t\tif (firstPointFound) {\n \t\t\t\t\t\t\t\t\tfinal float distance = getDistance(fx, fy, event.getX(pi), event.getY(pi));\n \t\t\t\t\t\t\t\t\tfinal float factor = distance / initialScalingDistance;\n-\t\t\t\t\t\t\t\t\tpTD.fontProportion = (int)(initialFontProportion * factor);\n-\n-//Due to multiplication on line above, once pTD.fontProportion goes negative, 0 here\n-// prevents further adjustments until our prefs cache is cleared, so use pTD.fontSizeMin instead:\n-//crw\t\t\t\t\t\t\t\t\tif (pTD.fontProportion < 0) {\n-//crw\t\t\t\t\t\t\t\t\t\tpTD.fontProportion = 0;\n+\t\t\t\t\t\t\t\t\tpTD.fontProportion = (int) (initialFontProportion * factor);\n \t\t\t\t\t\t\t\t\tif (pTD.fontProportion < pTD.fontSizeMin) {\n \t\t\t\t\t\t\t\t\t\tpTD.fontProportion = (int) pTD.fontSizeMin;\n \t\t\t\t\t\t\t\t\t} else if (pTD.fontProportion > 1000) {\n \t\t\t\t\t\t\t\t\t\tpTD.fontProportion = 1000;\n \t\t\t\t\t\t\t\t\t}\n-/*\n-\t\t\t\t\t\t\t\t\tLog.w(\"PTV\", \"FP:\" + String.format(\"%04d\", pTD.fontProportion)\n-\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" fctr:\" + String.format(\"%.2f\", factor)\n-\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" dst:\" + String.format(\"%.2f\", distance)\n-\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" ISD:\" + String.format(\"%.2f\", initialScalingDistance)\n-\t\t\t\t\t\t\t\t\t\t\t\t\t+ \" IFP:\" + initialFontProportion);\n-*/\n \t\t\t\t\t\t\t\t\tpTD.setFontSize(true);\n \t\t\t\t\t\t\t\t\tbreak;\n \t\t\t\t\t\t\t\t} else {\n@@ -216,11 +174,10 @@ public class ParallelTextView extends View {\n \t\t\t\t\t\t}\n \t\t\t\t\t\treturn true;\n \t\t\t\t\tcase STATE_DRAGGING_SPLITTER:\n-\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal && pTD.opState == 1) {\n+\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal && opState == 1) {\n \t\t\t\t\t\t\tfloat newSplitterPosition = x - splitterMoveOffset;\n-\n \t\t\t\t\t\t\tif (newSplitterPosition != pTD.splitterPosition) {\n-\t\t\t\t\t\t\t\tif (mainActivity.DoSoundEffects) {\n+\t\t\t\t\t\t\t\tif (MainActivity.DoSoundEffects) {\n \t\t\t\t\t\t\t\t\t// Indicate splitter drag with sound effects.\n \t\t\t\t\t\t\t\t\t// Calculate rate (pitch):\n \t\t\t\t\t\t\t\t\tfloat SERate = (float) (((newSplitterPosition / screenWidth) * 1.5) + .5);\n@@ -246,33 +203,33 @@ public class ParallelTextView extends View {\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinvalidate();\n \t\t\t\t\t\tbreak;\n-\n \t\t\t\t\tcase STATE_SCROLL:\n-//\t\t\t\t\t\tLog.e(\"PTV\", \"scroll2\");\n-//\t\t\t\t\t\tLog.e(\"PTV\", \"PDPY=\" + Float.toString(pointerDownPositionY));\n-//\t\t\t\t\t\tLog.e(\"PTV\", \"SY=\" + Float.toString(scrollY));\n-//\t\t\t\t\t\tLog.e(\"PTV\", \"Y=\" + Float.toString(y));\n-\n \t\t\t\t\t\tif (Math.abs(scrollY - y) > pTD.lineHeight) { // large vertical movement\n+\t\t\t\t\t\t\t// Turn off TTS and sentence outline:\n+\t\t\t\t\t\t\tpTD.TurnAdvancedPopupOff();\n \t\t\t\t\t\t\tif (y < scrollY)\n \t\t\t\t\t\t\t\tpTD.ProcessKeyDown(); // scroll text up (move forwards in text)\n \t\t\t\t\t\t\telse\n \t\t\t\t\t\t\t\tpTD.ProcessKeyUp();   // scroll text down\n-\t\t\t\t\t\t\tif (mainActivity.DoSoundEffects) mainActivity.SoundEffect(2, .2f, .2f, 1);\n+\t\t\t\t\t\t\tif (MainActivity.DoSoundEffects) mainActivity.SoundEffect(2, .2f, .2f, 1);\n \t\t\t\t\t\t\tscrollY = y;\n+\t\t\t\t\t\t\tinvalidateParallelText();\n \t\t\t\t\t\t}\n \t\t\t\t\t\tbreak;\n-\n \t\t\t\t\tcase STATE_BRIGHTNESS_CHANGE:\n-\t\t\t\t\t\tfinal double delta = (y - pointerDownPositionY) / screenHeight * 2.0;\n-\t\t\t\t\t\tif (Math.abs(lastBrightY - y) > 5) {  // Lower sensitivity\n+//\t\t\t\t\t\tfinal double delta = (y - pointerDownPositionY) / screenHeight * 2.0;\n+\t\t\t\t\t\t// \"up\" means \"brighter\" [crw]:\n+\t\t\t\t\t\tfinal double delta = (pointerDownPositionY - y) / screenHeight * 2.0;\n+\t\t\t\t\t\tif (Math.abs(lastBrightY - y) > 5) {  // Lower input sensitivity\n \t\t\t\t\t\t\tpTD.brightness = initialBrightness + delta;\n \t\t\t\t\t\t\tif (pTD.brightness < 0.5) {\n \t\t\t\t\t\t\t\tpTD.brightness = 0.5f;\n \t\t\t\t\t\t\t} else if (pTD.brightness > 1.0) {\n \t\t\t\t\t\t\t\tpTD.brightness = 1.0;\n \t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tif (mainActivity.DoSoundEffects) mainActivity.SoundEffect(5, .2f, .2f, 1);\n+\t\t\t\t\t\t\tif (MainActivity.DoSoundEffects)\n+\t\t\t\t\t\t\t\t//\tSound effect rises/falls with brightness setting:\n+\t\t\t\t\t\t\t\tmainActivity.SoundEffect(5, .2f, .2f, (float) pTD.brightness);\n \t\t\t\t\t\t\tpTD.SetColorsByBrightness();\n \t\t\t\t\t\t\tinvalidateParallelText();\n \t\t\t\t\t\t}\n@@ -289,18 +246,15 @@ public class ParallelTextView extends View {\n \t\t\t\t\t\t} else if (pointerId == secondDownPointerId) {\n \t\t\t\t\t\t\tsecondDownPointerId = -1;\n \t\t\t\t\t\t}\n-\n \t\t\t\t\t\tif (firstDownPointerId == -1 && secondDownPointerId == -1) {\n \t\t\t\t\t\t\tsetState(STATE_IDLE);\n \t\t\t\t\t\t}\n \t\t\t\t\t\treturn true;\n \t\t\t\t\tcase STATE_POINTERDOWN:\n \t\t\t\t\t\tfinal long time = System.currentTimeMillis();\n-\n \t\t\t\t\t\tsetState(STATE_IDLE);\n \t\t\t\t\t\tint DOUBLE_TAP_DELAY = 500;\n \t\t\t\t\t\tif (time - lastSingleTapTime < DOUBLE_TAP_DELAY) {\n-//\t\t\t\t\t\t\tprocessDoubleTap();\n \t\t\t\t\t\t\tlastSingleTapTime = 0;\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tprocessSingleTap(x, y);\n@@ -308,8 +262,8 @@ public class ParallelTextView extends View {\n \t\t\t\t\t\t}\n \t\t\t\t\t\treturn true;\n \t\t\t\t\tcase STATE_DRAGGING_SPLITTER:\n-\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal && pTD.opState == 1) {\n-\t\t\t\t\t\t\tpTD.opState = 0;\n+\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal && opState == 1) {\n+\t\t\t\t\t\t\topState = 0;\n \t\t\t\t\t\t}\n \t\t\t\t\t\tsetState(STATE_IDLE);\n \t\t\t\t\t\treturn true;\n@@ -319,32 +273,12 @@ public class ParallelTextView extends View {\n \t\t\t\t\t\treturn true;\n \t\t\t\t\tcase STATE_DRAGGING_PAGE:\n \t\t\t\t\t\tsetState(switchingToNextPage ? STATE_PAGEDRAGFINISHING : STATE_PAGEDRAGREVERTING);\n-\t\t\t\t\t\tif (mainActivity.DoSoundEffects) mainActivity.SoundEffect(3, .8f, .8f, 1);\n-\t\t\t\t\t\tstartPageAnimation(floatingPagePosition);\n-\t\t\t\t\t\treturn true;\n-/*\n-\t\t\t\t\t\tif (switchingToNextPage) {\n-//\t\t\t\t\t\t\tif (!switchingToNextPage) { // revert page change\n-\t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = true;\n-\t\t\t\t\t\t\t\tpTD.ProcessPageDown();\n-\t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = false;\n-//\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tsetState(STATE_PAGEDRAGFINISHING);\n-\t\t\t\t\t\t} else {\n-//\t\t\t\t\t\t\tif (switchingToNextPage) { // revert page change\n-\t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = true;\n-\t\t\t\t\t\t\t\tpTD.ProcessPageUp();\n-\t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = false;\n-//\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tsetState(STATE_PAGEDRAGREVERTING);\n-\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (MainActivity.DoSoundEffects) mainActivity.SoundEffect(3, .8f, .8f, 1);\n \t\t\t\t\t\tstartPageAnimation(floatingPagePosition);\n \t\t\t\t\t\treturn true;\n-*/\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t}\n-\n \t\treturn false;\n \t}\n \n@@ -379,7 +313,6 @@ public class ParallelTextView extends View {\n \t\tfinal Bitmap tempBitmap = nextPageBitmap;\n \t\tnextPageBitmap = currentPageBitmap;\n \t\tcurrentPageBitmap = tempBitmap;\n-\n \t\tfinal Canvas tempCanvas = nextPageBitmapCanvas;\n \t\tnextPageBitmapCanvas = currentPageBitmapCanvas;\n \t\tcurrentPageBitmapCanvas = tempCanvas;\n@@ -399,7 +332,7 @@ public class ParallelTextView extends View {\n \tprivate void processSingleTap(float x, float y) {\n \t\tpTD.LastMouseX = x;\n \t\tpTD.LastMouseY = y;\n-\n+//controls advancedpopup [crw]\n \t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n \t\t\tpTD.ProcessMousePosition();\n \t\t}\n@@ -413,74 +346,60 @@ public class ParallelTextView extends View {\n \tprotected void onSizeChanged(int w, int h, int oldw, int oldh) {\n \t\tif (pTD == null)\n \t\t\treturn;\n-\n \t\tif (currentPageBitmap != null) {\n \t\t\tcurrentPageBitmap.recycle();\n \t\t}\n-\n \t\tif (nextPageBitmap != null) {\n \t\t\tnextPageBitmap.recycle();\n \t\t}\n-\n \t\tcurrentPageBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);\n \t\tcurrentPageBitmapCanvas = new Canvas(currentPageBitmap);\n \t\tnextPageBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);\n \t\tnextPageBitmapCanvas = new Canvas(nextPageBitmap);\n-\n \t\tif (!pTD.fontRangeSet) {\n \t\t\tpTD.setFontRange(w, h);\n \t\t\tpTD.setFontSize(false);\n \t\t}\n-\t\t\n \t\tpTD.viewWidth = w;\n \t\tpTD.viewHeight = h;\n \t\tpTD.pTV = this;\n \t\tpTD.SetSplitterPositionByRatio();\n \t\tpTD.ProcessLayoutChange(true);\n-\n \t\tscreenDensityX = getContext().getResources().getDisplayMetrics().xdpi;\n \t\tscreenDensityY = getContext().getResources().getDisplayMetrics().ydpi;\n \t\tscreenWidth = w;\n \t\tscreenHeight = h;\n \t\tshadowWidth = screenWidth / 25.0f;\n-\n \t\tsuper.onSizeChanged(w, h, oldw, oldh);\n \t}\n \n \t@Override\n \tprotected void onDraw(Canvas canvas) {\n \t\tsuper.onDraw(canvas);\n-\n \t\tif (state == STATE_PAGEDRAGFINISHING || state == STATE_PAGEDRAGREVERTING) // animating\n \t\t{\n \t\t\tfinal float finalPagePos = state == STATE_PAGEDRAGFINISHING ? (-screenWidth - shadowWidth) : 0.0f;\n \t\t\tlong PAGE_ANIMATION_DURATION = 300;\n \t\t\tfinal float coef = (System.currentTimeMillis() - pageAnimationStartTime) / (float) PAGE_ANIMATION_DURATION;\n-\n \t\t\tif (coef >= 1.0f) {\n \t\t\t\tfloatingPagePosition = 0.0f;\n-\n \t\t\t\tif (state == STATE_PAGEDRAGFINISHING) {\n \t\t\t\t\tswapBitmaps();\n \t\t\t\t}\n-\n \t\t\t\tsetState(STATE_IDLE);\n \t\t\t} else {\n-\t\t\t\tfinal float transformedCoef = ((float)Math.sin(coef * Math.PI - Math.PI / 2.0) + 1.0f) / 2.0f; // transform by sine\n+\t\t\t\tfinal float transformedCoef = ((float) Math.sin(coef * Math.PI - Math.PI / 2.0) + 1.0f) / 2.0f; // transform by sine\n \t\t\t\tfloatingPagePosition = initialFloatingPagePosition + (finalPagePos - initialFloatingPagePosition) * transformedCoef;\n \t\t\t\tinvalidate();\n \t\t\t}\n \t\t}\n-\n \t\tif (state == STATE_DRAGGING_PAGE || state == STATE_PAGEDRAGFINISHING || state == STATE_PAGEDRAGREVERTING) {\n \t\t\tcanvas.drawBitmap(nextPageBitmap, 0, 0, null);\n-\n \t\t\tfinal float shadowLeft = floatingPagePosition + screenWidth;\n \t\t\tfinal float shadowRight = shadowLeft + shadowWidth;\n \t\t\tshadowRect.set(shadowLeft, 0.0f, shadowRight, screenHeight);\n \t\t\tcanvas.drawBitmap(shadowBitmap, null, shadowRect, null);\n \t\t}\n-\n \t\tcanvas.drawBitmap(currentPageBitmap, floatingPagePosition, 0, null);\n \t}\n \n@@ -488,20 +407,16 @@ public class ParallelTextView extends View {\n \t\tif (suppressParallelTextRedrawing) {\n \t\t\treturn;\n \t\t}\n-\n \t\tif (pTD != null) {\n \t\t\tcurrentPageBitmapCanvas.drawColor(BACKGROUND_COLOR, PorterDuff.Mode.SRC);\n \t\t\tpTD.onDraw(currentPageBitmapCanvas);\n \t\t}\n-\n \t\tinvalidate();\n \t}\n \n \tpublic void updateNoBookVisibility() {\n-\t\t\n \t\tMainActivity mActivity = (MainActivity) getContext();\n-\t\t\n-\t\t((TextView)mActivity.findViewById(R.id.emptyBookView)).setVisibility(pTD.bookOpened ? View.INVISIBLE : View.VISIBLE);\n+\t\tmActivity.findViewById(R.id.emptyBookView).setVisibility(pTD.bookOpened ? View.INVISIBLE : View.VISIBLE);\n \t}\n \n \tprivate float getHeightDiffInches(float y1, float y2) {\n@@ -515,7 +430,7 @@ public class ParallelTextView extends View {\n \tprivate static float getDistance(float x1, float y1, float x2, float y2) {\n \t\tfinal float dX = x1 - x2;\n \t\tfinal float dY = y1 - y2;\n-\t\treturn (float)Math.sqrt(dX * dX + dY * dY);\n+\t\treturn (float) Math.sqrt(dX * dX + dY * dY);\n \t}\n \n \tprivate class LongTapTimer extends CountDownTimer {"], "score": 1.0, "methods_t": ["Canvas LongTapTimer Paint ProcessKeyDown ProcessKeyUp ProcessLayoutChange ProcessMousePosition ProcessPageDown ProcessPageUp RectF Runnable SetColorsByBrightness SetSplitterPositionByRatio SetSplitterRatioByPosition SoundEffect TurnAdvancedPopupOff XonSplitter abs cancel createBitmap currentTimeMillis d drawBitmap drawColor drawPoint findViewById getActionIndex getActionMasked getContext getDisplayMetrics getDistance getHeightDiffInches getPointerCount getPointerId getResources getWidthDiffInches getX getY invalidate invalidateParallelText onDraw openContextMenu prepareSwitchToNextPage prepareSwitchToPrevPage processLongTap processSingleTap recycle runOnUiThread set setARGB setFontRange setFontSize setSplitterPosition setState setVisibility sin sqrt start startPageAnimation swapBitmaps"], "_version_": 1526731072981696512, "subject_t": ["- Added changes.txt file to make tracking more transparent (assuming it's kept up to date) - Changed version to 1.0.2.4 - Advanced popup and TTS now terminate upon SCROLL actions - Brightness control is now same as divider, not central 1/3 of screen - Doubled width of \"FINGERTIP\" from .1 to .2 inch providing wider area for divider drag or brightness control. - Brightness control sound effect now rises/falls with brightness change - Reversed brightness control so up is brighter, down is darker - Reformatted MainActivity.java, ParallelTextView.java and ParallelTextData.java for clarity and deleted commented-out code. - Reconfigured some areas of code marked as \"probable bug\" or \"redundant\" or \"unused\" by Android Studio as recommended by AS. - Corrected problem where spoken text did not match popup under some conditions. - Corrected problem of grayed-out fragments at end of screen containing entire sentences. - Moved variable \"opstate\" from ParallelTextData.java to ParallelTextView.java since this is (now?) the only location it is used from."], "comments_t": ["\t\t\t\t\t\tif (getHeightDiffInches(pointerDownPositionY, y) > MIN_MOVE_DELTA_INCH) { // vertical movement \t\t\t\t\t\t\t\t//\tSound effect rises/falls with brightness setting: \t\t\t\t\t\t\t// Turn off TTS and sentence outline: \t\tif (state == STATE_PAGEDRAGFINISHING || state == STATE_PAGEDRAGREVERTING) // animating \t\t\t\t\t\t\t\t} else { // next page \t\t\t\t\t\t\t\tif (x > pointerDownPositionX) { // going to prev page \t\t\t\t\t\t\t\tpTD.ProcessKeyUp();   // scroll text down \t\t\t\t\t\t\t\t\t// Calculate rate (pitch): //controls advancedpopup [crw] \t\t\t\t\t\t// \"up\" means \"brighter\" [crw]: \t\t\t\tfinal float transformedCoef = ((float) Math.sin(coef * Math.PI - Math.PI / 2.0) + 1.0f) / 2.0f; // transform by sine \t\t\t\t\t\tif (Math.abs(scrollY - y) > pTD.lineHeight) { // large vertical movement \t// Bitmaps are made static to avoid memory leaks on Android 2.3.3 and lower \t\t\t\t\t\t} else if (getWidthDiffInches(pointerDownPositionX, x) > MIN_MOVE_DELTA_INCH) { // horizontal movement \t\t\t\t\t\t\t\tscrollY = pointerDownPositionY; // Track finger movement \t\t\t\t\t\t\t\t\t// Indicate splitter drag with sound effects. \t\t\t\t\tcase STATE_POINTERDOWN: // A second finger is down, so scale: \t\t\t\t\t\tif (Math.abs(lastBrightY - y) > 5) {  // Lower input sensitivity \t\t\t\t\t\t\t\t\t// Use +/- 3 to avoid flood of sounds: \t\t\t\t\t\t\t\t\t\t// For now we use 1 effect for left/right, this code allows 2 if desired: \t\t\t\t\tcase STATE_IDLE: // A finger is down, start timer for options popup: \t\t\t\t\t\t\t\tpTD.ProcessKeyDown(); // scroll text up (move forwards in text) \t\t\t\t\t\t\t\t// Scroll up/down a line if finger moved at least that far: //\t\t\t\t\t\tfinal double delta = (y - pointerDownPositionY) / screenHeight * 2.0;"], "parents_ss": ["d5ad87d11608c81dbf31356c1b16b981b4b8a466"], "id": "Inego/Aglona-Reader-Android\u000009f8465ae4491120bf13c4530986792880559f8a\u0000app/src/main/java/ru/parallelbooks/aglonareader/ParallelTextView.java", "callsites_cs": "<unknown>.ProcessKeyUp()#android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, float, int, null)#android.content.Context.getResources()#java.lang.System.currentTimeMillis()#<unknown>.onDraw(android.graphics.Canvas)#android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode)#android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap.Config)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float)#.Runnable()#<unknown>.setFontSize(boolean)#ru.parallelbooks.aglonareader.ParallelTextView.swapBitmaps()#<unknown>.TurnAdvancedPopupOff()#android.view.MotionEvent.getX(int)#android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap.Config)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#<unknown>.ProcessPageUp()#<unknown>.setFontSize(boolean)#<unknown>.ProcessMousePosition()#ru.parallelbooks.aglonareader.ParallelTextView.getWidthDiffInches(float, float)#<unknown>.ProcessKeyDown()#java.lang.System.currentTimeMillis()#android.os.CountDownTimer.start()#java.lang.Math.abs(float)#ru.parallelbooks.aglonareader.ParallelTextView.processLongTap()#android.content.res.Resources.getDisplayMetrics()#android.view.MotionEvent.getPointerCount()#android.view.View.invalidate()#java.lang.System.currentTimeMillis()#android.graphics.Paint.setARGB(int, int, int, int)#<unknown>.ProcessLayoutChange(boolean)#android.view.MotionEvent.getY(int)#android.graphics.Canvas.Canvas(android.graphics.Bitmap)#<unknown>.ProcessLayoutChange(boolean)#<unknown>.SetSplitterRatioByPosition()#android.view.MotionEvent.getActionMasked()#android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, null, android.graphics.RectF, null)#android.graphics.Bitmap.recycle()#ru.parallelbooks.aglonareader.ParallelTextView.LongTapTimer.LongTapTimer()#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#java.lang.Math.abs(float)#java.lang.Math.sqrt(float)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#android.view.View.invalidate()#ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToPrevPage()#<unknown>.SoundEffect(int, float, float, float)#<unknown>.SetColorsByBrightness()#ru.parallelbooks.aglonareader.ParallelTextView.getDistance(float, float, float, float)#ru.parallelbooks.aglonareader.ParallelTextView.swapBitmaps()#<unknown>.ProcessPageDown()#<unknown>.openContextMenu(ru.parallelbooks.aglonareader.ParallelTextView)#ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToNextPage()#ru.parallelbooks.aglonareader.ParallelTextView.getHeightDiffInches(float, float)#<unknown>.setSplitterPosition(float)#<unknown>.setFontRange(int, int)#android.view.MotionEvent.getActionIndex()#android.graphics.RectF.set(float, float, float, float)#ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float)#java.lang.Math.abs(float)#<unknown>.SoundEffect(int, float, float, int)#ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToPrevPage()#ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float)#android.graphics.Canvas.Canvas(android.graphics.Bitmap)#java.lang.Math.abs(float)#ru.parallelbooks.aglonareader.ParallelTextView.invalidateParallelText()#android.view.View.invalidate()#<unknown>.findViewById(<unknown>)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#android.graphics.Canvas.Canvas(android.graphics.Bitmap)#<unknown>.onDraw(android.graphics.Canvas)#android.view.MotionEvent.getPointerId(int)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#<unknown>.SoundEffect(int, float, float, float)#<unknown>.SetSplitterPositionByRatio()#<unknown>.SoundEffect(int, float, float, int)#android.view.MotionEvent.getPointerId(int)#android.graphics.Canvas.drawPoint(float, float, android.graphics.Paint)#android.view.MotionEvent.getY(int)#android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, int, int, null)#android.view.View.getContext()#android.graphics.Bitmap.recycle()#android.graphics.RectF.RectF()#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.TurnAdvancedPopupOff()#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#<unknown>.XonSplitter(float, float)#android.view.MotionEvent.getX(int)#java.lang.Math.sin(double)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#<unknown>.runOnUiThread()#android.view.View.invalidate()#ru.parallelbooks.aglonareader.ParallelTextView.getDistance(float, float, float, float)#ru.parallelbooks.aglonareader.ParallelTextView.processSingleTap(float, float)#android.graphics.Paint.Paint()#android.view.View.getContext()#<unknown>.onDraw(android.graphics.Canvas)#<unknown>.TurnAdvancedPopupOff()#<unknown>.setVisibility(<unknown>)#android.os.CountDownTimer.cancel()#ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToNextPage()", "callsites_t": ["<unknown>.ProcessKeyUp() android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, float, int, null) android.content.Context.getResources() java.lang.System.currentTimeMillis() <unknown>.onDraw(android.graphics.Canvas) android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode) android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap.Config) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float) .Runnable() <unknown>.setFontSize(boolean) ru.parallelbooks.aglonareader.ParallelTextView.swapBitmaps() <unknown>.TurnAdvancedPopupOff() android.view.MotionEvent.getX(int) android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap.Config) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) <unknown>.ProcessPageUp() <unknown>.setFontSize(boolean) <unknown>.ProcessMousePosition() ru.parallelbooks.aglonareader.ParallelTextView.getWidthDiffInches(float, float) <unknown>.ProcessKeyDown() java.lang.System.currentTimeMillis() android.os.CountDownTimer.start() java.lang.Math.abs(float) ru.parallelbooks.aglonareader.ParallelTextView.processLongTap() android.content.res.Resources.getDisplayMetrics() android.view.MotionEvent.getPointerCount() android.view.View.invalidate() java.lang.System.currentTimeMillis() android.graphics.Paint.setARGB(int, int, int, int) <unknown>.ProcessLayoutChange(boolean) android.view.MotionEvent.getY(int) android.graphics.Canvas.Canvas(android.graphics.Bitmap) <unknown>.ProcessLayoutChange(boolean) <unknown>.SetSplitterRatioByPosition() android.view.MotionEvent.getActionMasked() android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, null, android.graphics.RectF, null) android.graphics.Bitmap.recycle() ru.parallelbooks.aglonareader.ParallelTextView.LongTapTimer.LongTapTimer() ru.parallelbooks.aglonareader.ParallelTextView.setState(int) java.lang.Math.abs(float) java.lang.Math.sqrt(float) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) android.view.View.invalidate() ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToPrevPage() <unknown>.SoundEffect(int, float, float, float) <unknown>.SetColorsByBrightness() ru.parallelbooks.aglonareader.ParallelTextView.getDistance(float, float, float, float) ru.parallelbooks.aglonareader.ParallelTextView.swapBitmaps() <unknown>.ProcessPageDown() <unknown>.openContextMenu(ru.parallelbooks.aglonareader.ParallelTextView) ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToNextPage() ru.parallelbooks.aglonareader.ParallelTextView.getHeightDiffInches(float, float) <unknown>.setSplitterPosition(float) <unknown>.setFontRange(int, int) android.view.MotionEvent.getActionIndex() android.graphics.RectF.set(float, float, float, float) ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float) java.lang.Math.abs(float) <unknown>.SoundEffect(int, float, float, int) ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToPrevPage() ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float) android.graphics.Canvas.Canvas(android.graphics.Bitmap) java.lang.Math.abs(float) ru.parallelbooks.aglonareader.ParallelTextView.invalidateParallelText() android.view.View.invalidate() <unknown>.findViewById(<unknown>) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) android.graphics.Canvas.Canvas(android.graphics.Bitmap) <unknown>.onDraw(android.graphics.Canvas) android.view.MotionEvent.getPointerId(int) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) <unknown>.SoundEffect(int, float, float, float) <unknown>.SetSplitterPositionByRatio() <unknown>.SoundEffect(int, float, float, int) android.view.MotionEvent.getPointerId(int) android.graphics.Canvas.drawPoint(float, float, android.graphics.Paint) android.view.MotionEvent.getY(int) android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, int, int, null) android.view.View.getContext() android.graphics.Bitmap.recycle() android.graphics.RectF.RectF() android.util.Log.d(java.lang.String, java.lang.String) <unknown>.TurnAdvancedPopupOff() ru.parallelbooks.aglonareader.ParallelTextView.setState(int) <unknown>.XonSplitter(float, float) android.view.MotionEvent.getX(int) java.lang.Math.sin(double) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) <unknown>.runOnUiThread() android.view.View.invalidate() ru.parallelbooks.aglonareader.ParallelTextView.getDistance(float, float, float, float) ru.parallelbooks.aglonareader.ParallelTextView.processSingleTap(float, float) android.graphics.Paint.Paint() android.view.View.getContext() <unknown>.onDraw(android.graphics.Canvas) <unknown>.TurnAdvancedPopupOff() <unknown>.setVisibility(<unknown>) android.os.CountDownTimer.cancel() ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToNextPage()"]}, {"user_sni": "cwz.scardigno@gmail.com", "repo_sni": "pedant/sweet-alert-dialog", "imports_t": ["android.os.CountDownTimer cn.pedant.SweetAlert.SweetAlertDialog android.os.Bundle android.view.View android.app.Activity"], "email_sni": "TiAmoRaff@47", "contents_t": ["package cn.pedant.SweetAlert.sample;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.View;\n\nimport cn.pedant.SweetAlert.SweetAlertDialog;\n\npublic class SampleActivity extends Activity implements View.OnClickListener {\n\n    private int i = -1;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.sample_activity);\n        findViewById(R.id.basic_test).setOnClickListener(this);\n        findViewById(R.id.under_text_test).setOnClickListener(this);\n        findViewById(R.id.error_text_test).setOnClickListener(this);\n        findViewById(R.id.success_text_test).setOnClickListener(this);\n        findViewById(R.id.warning_confirm_test).setOnClickListener(this);\n        findViewById(R.id.warning_cancel_test).setOnClickListener(this);\n        findViewById(R.id.custom_img_test).setOnClickListener(this);\n        findViewById(R.id.progress_dialog).setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.basic_test:\n                // default title \"Here's a message!\"\n                new SweetAlertDialog(this)\n                        .show();\n                break;\n            case R.id.under_text_test:\n                new SweetAlertDialog(this)\n                        .setContentText(\"It's pretty, isn't it?\")\n                        .show();\n                break;\n            case R.id.error_text_test:\n                new SweetAlertDialog(this, SweetAlertDialog.ERROR_TYPE)\n                        .setTitleText(\"Oops...\")\n                        .setContentText(\"Something went wrong!\")\n                        .show();\n                break;\n            case R.id.success_text_test:\n                new SweetAlertDialog(this, SweetAlertDialog.SUCCESS_TYPE)\n                        .setTitleText(\"Good job!\")\n                        .setContentText(\"You clicked the button!\")\n                        .show();\n                break;\n            case R.id.warning_confirm_test:\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\n                        .setTitleText(\"Are you sure?\")\n                        .setContentText(\"Won't be able to recover this file!\")\n                        .setConfirmText(\"Yes,delete it!\")\n                        .setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {\n                        @Override\n                        public void onClick(SweetAlertDialog sDialog) {\n                            // reuse previous dialog instance\n                            sDialog.setTitleText(\"Deleted!\")\n                                    .setContentText(\"Your imaginary file has been deleted!\")\n                                    .setConfirmText(\"OK\")\n                                    .setConfirmClickListener(null)\n                                    .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);\n                        }\n                        })\n                        .show();\n                break;\n            case R.id.warning_cancel_test:\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\n                        .setTitleText(\"Are you sure?\")\n                        .setContentText(\"Won't be able to recover this file!\")\n                        .setCancelText(\"No,cancel plx!\")\n                        .setConfirmText(\"Yes,delete it!\")\n                        .showCancelButton(true)\n                        .setCancelClickListener(new SweetAlertDialog.OnSweetClickListener() {\n                            @Override\n                            public void onClick(SweetAlertDialog sDialog) {\n                                // reuse previous dialog instance, keep widget user state, reset them if you need\n                                sDialog.setTitleText(\"Cancelled!\")\n                                        .setContentText(\"Your imaginary file is safe :)\")\n                                        .setConfirmText(\"OK\")\n                                        .showCancelButton(false)\n                                        .setCancelClickListener(null)\n                                        .setConfirmClickListener(null)\n                                        .changeAlertType(SweetAlertDialog.ERROR_TYPE);\n\n                                // or you can new a SweetAlertDialog to show\n                               /* sDialog.dismiss();\n                                new SweetAlertDialog(SampleActivity.this, SweetAlertDialog.ERROR_TYPE)\n                                        .setTitleText(\"Cancelled!\")\n                                        .setContentText(\"Your imaginary file is safe :)\")\n                                        .setConfirmText(\"OK\")\n                                        .show();*/\n                            }\n                        })\n                        .setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {\n                            @Override\n                            public void onClick(SweetAlertDialog sDialog) {\n                                sDialog.setTitleText(\"Deleted!\")\n                                        .setContentText(\"Your imaginary file has been deleted!\")\n                                        .setConfirmText(\"OK\")\n                                        .showCancelButton(false)\n                                        .setCancelClickListener(null)\n                                        .setConfirmClickListener(null)\n                                        .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);\n                            }\n                        })\n                        .show();\n                break;\n            case R.id.custom_img_test:\n                new SweetAlertDialog(this, SweetAlertDialog.CUSTOM_IMAGE_TYPE)\n                        .setTitleText(\"Sweet!\")\n                        .setContentText(\"Here's a custom image.\")\n                        .setCustomImage(R.drawable.custom_img)\n                        .show();\n                break;\n            case R.id.progress_dialog:\n                final SweetAlertDialog progressSweetAlertDialog = new SweetAlertDialog(this, SweetAlertDialog.PROGRESS_TYPE)\n                        .setContentText(\"Loading... For ten seconds than close. Every second change color.\")\n                        .spin();\n\n                progressSweetAlertDialog.show();\n                new CountDownTimer(10000, 1000) {\n\n                    public void onTick(long millisUntilFinished) {\n                        i++;\n                        switch (i){\n                            case 0:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.red_btn_bg_color));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.red_btn_bg_color));\n                                break;\n                            case 1:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.blue_btn_bg_color));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.blue_btn_bg_color));\n                                break;\n                            case 2:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.gray_btn_bg_pressed_color));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.gray_btn_bg_pressed_color));\n                                break;\n                            case 3:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_deep_teal_500));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_deep_teal_500));\n                                break;\n                            case 4:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_deep_teal_500));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_deep_teal_500));\n                                break;\n                            case 5:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_blue_grey_950));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_blue_grey_950));\n                                break;\n                            case 6:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_deep_teal_200));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_deep_teal_200));\n                                break;\n                            case 7:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_blue_grey_800));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_blue_grey_800));\n                                break;\n                            case 8:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.warning_stroke_color));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.warning_stroke_color));\n                                break;\n                            case 9:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.success_stroke_color));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.success_stroke_color));\n                                break;\n                        }\n                    }\n\n                    public void onFinish() {\n                        i = -1;\n                        progressSweetAlertDialog.dismissWithAnimation();\n                    }\n                }.start();\n                break;\n        }\n    }\n}\n"], "body_t": ["<empty>"], "date_tdt": "2014-12-03T17:46:00Z", "hash_sni": "14d531f134a795bc48ac66ac47bab46fb3d2cf26", "name_sni": "sample/src/main/java/cn/pedant/SweetAlert/sample/SampleActivity.java", "patch_t": [" \n import android.app.Activity;\n import android.os.Bundle;\n+import android.os.CountDownTimer;\n import android.view.View;\n \n import cn.pedant.SweetAlert.SweetAlertDialog;\n \n public class SampleActivity extends Activity implements View.OnClickListener {\n+\n+    private int i = -1;\n+\n     @Override\n     public void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n@@ -18,6 +22,7 @@ public class SampleActivity extends Activity implements View.OnClickListener {\n         findViewById(R.id.warning_confirm_test).setOnClickListener(this);\n         findViewById(R.id.warning_cancel_test).setOnClickListener(this);\n         findViewById(R.id.custom_img_test).setOnClickListener(this);\n+        findViewById(R.id.progress_dialog).setOnClickListener(this);\n     }\n \n     @Override\n@@ -112,6 +117,66 @@ public class SampleActivity extends Activity implements View.OnClickListener {\n                         .setCustomImage(R.drawable.custom_img)\n                         .show();\n                 break;\n+            case R.id.progress_dialog:\n+                final SweetAlertDialog progressSweetAlertDialog = new SweetAlertDialog(this, SweetAlertDialog.PROGRESS_TYPE)\n+                        .setContentText(\"Loading... For ten seconds than close. Every second change color.\")\n+                        .spin();\n+\n+                progressSweetAlertDialog.show();\n+                new CountDownTimer(10000, 1000) {\n+\n+                    public void onTick(long millisUntilFinished) {\n+                        i++;\n+                        switch (i){\n+                            case 0:\n+                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.red_btn_bg_color));\n+                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.red_btn_bg_color));\n+                                break;\n+                            case 1:\n+                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.blue_btn_bg_color));\n+                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.blue_btn_bg_color));\n+                                break;\n+                            case 2:\n+                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.gray_btn_bg_pressed_color));\n+                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.gray_btn_bg_pressed_color));\n+                                break;\n+                            case 3:\n+                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_deep_teal_500));\n+                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_deep_teal_500));\n+                                break;\n+                            case 4:\n+                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_deep_teal_500));\n+                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_deep_teal_500));\n+                                break;\n+                            case 5:\n+                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_blue_grey_950));\n+                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_blue_grey_950));\n+                                break;\n+                            case 6:\n+                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_deep_teal_200));\n+                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_deep_teal_200));\n+                                break;\n+                            case 7:\n+                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_blue_grey_800));\n+                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_blue_grey_800));\n+                                break;\n+                            case 8:\n+                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.warning_stroke_color));\n+                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.warning_stroke_color));\n+                                break;\n+                            case 9:\n+                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.success_stroke_color));\n+                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.success_stroke_color));\n+                                break;\n+                        }\n+                    }\n+\n+                    public void onFinish() {\n+                        i = -1;\n+                        progressSweetAlertDialog.dismissWithAnimation();\n+                    }\n+                }.start();\n+                break;\n         }\n     }\n }"], "score": 1.0, "methods_t": ["CountDownTimer SweetAlertDialog SweetAlertDialog.OnSweetClickListener changeAlertType dismissWithAnimation findViewById getColor getId getResources setBarColor setCancelClickListener setCancelText setConfirmClickListener setConfirmText setContentText setContentView setCustomImage setOnClickListener setProgressMessageColor setTitleText show showCancelButton spin start"], "_version_": 1526732861972938752, "subject_t": ["Added progress dialog"], "comments_t": ["                                // reuse previous dialog instance, keep widget user state, reset them if you need /* sDialog.dismiss();\nnew SweetAlertDialog(SampleActivity.this, SweetAlertDialog.ERROR_TYPE)\n.setTitleText(\"Cancelled!\")\n.setContentText(\"Your imaginary file is safe :)\")\n.setConfirmText(\"OK\")\n.show();*/\n                                 // or you can new a SweetAlertDialog to show                 // default title \"Here's a message!\"                             // reuse previous dialog instance"], "parents_ss": ["4e4ecd54f1c460027bf2834b69c011325673717b"], "id": "pedant/sweet-alert-dialog\u000014d531f134a795bc48ac66ac47bab46fb3d2cf26\u0000sample/src/main/java/cn/pedant/SweetAlert/sample/SampleActivity.java", "callsites_cs": "<unknown>.setProgressMessageColor(<unknown>)#<unknown>.setProgressMessageColor(<unknown>)#<unknown>.setConfirmClickListener(null)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#<unknown>.setTitleText(java.lang.String)#android.content.res.Resources.getColor(<unknown>)#<unknown>.show()#<unknown>.show()#<unknown>.setConfirmClickListener()#<unknown>.setProgressMessageColor(<unknown>)#<unknown>.setTitleText(java.lang.String)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#android.content.res.Resources.getColor(<unknown>)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setTitleText(java.lang.String)#.CountDownTimer(int, int)#android.app.Activity.findViewById(<unknown>)#<unknown>.setTitleText(java.lang.String)#<unknown>.show()#android.content.res.Resources.getColor(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.setConfirmText(java.lang.String)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#android.content.res.Resources.getColor(<unknown>)#<unknown>.setBarColor(<unknown>)#android.content.res.Resources.getColor(<unknown>)#<unknown>.setConfirmText(java.lang.String)#<unknown>.show()#<unknown>.SweetAlertDialog.OnSweetClickListener()#<unknown>.showCancelButton(boolean)#<unknown>.setContentText(java.lang.String)#android.content.res.Resources.getColor(<unknown>)#<unknown>.spin()#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.dismissWithAnimation()#android.app.Activity.findViewById(<unknown>)#<unknown>.showCancelButton(boolean)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#android.view.ContextThemeWrapper.getResources()#android.content.res.Resources.getColor(<unknown>)#android.os.CountDownTimer.start()#<unknown>.showCancelButton(boolean)#<unknown>.setConfirmClickListener(null)#<unknown>.setBarColor(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.setBarColor(<unknown>)#<unknown>.setProgressMessageColor(<unknown>)#<unknown>.setBarColor(<unknown>)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.changeAlertType(<unknown>)#<unknown>.setProgressMessageColor(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.show()#<unknown>.setConfirmText(java.lang.String)#<unknown>.setCancelClickListener(null)#<unknown>.setConfirmText(java.lang.String)#<unknown>.setBarColor(<unknown>)#<unknown>.setProgressMessageColor(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.setProgressMessageColor(<unknown>)#android.content.res.Resources.getColor(<unknown>)#<unknown>.setCustomImage(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.setContentText(java.lang.String)#<unknown>.setBarColor(<unknown>)#<unknown>.setConfirmClickListener()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.setTitleText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#<unknown>.setProgressMessageColor(<unknown>)#<unknown>.show()#<unknown>.show()#android.app.Activity.findViewById(<unknown>)#<unknown>.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setBarColor(<unknown>)#<unknown>.setCancelClickListener(null)#android.app.Activity.findViewById(<unknown>)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#<unknown>.show()#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#android.content.res.Resources.getColor(<unknown>)#<unknown>.setTitleText(java.lang.String)#<unknown>.setProgressMessageColor(<unknown>)#<unknown>.changeAlertType(<unknown>)#<unknown>.setCancelClickListener()#<unknown>.setContentText(java.lang.String)#<unknown>.setCancelText(java.lang.String)#<unknown>.setBarColor(<unknown>)#<unknown>.changeAlertType(<unknown>)#<unknown>.setBarColor(<unknown>)#android.app.Activity.setContentView(<unknown>)#<unknown>.setConfirmClickListener(null)", "callsites_t": ["<unknown>.setProgressMessageColor(<unknown>) <unknown>.setProgressMessageColor(<unknown>) <unknown>.setConfirmClickListener(null) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) <unknown>.setTitleText(java.lang.String) android.content.res.Resources.getColor(<unknown>) <unknown>.show() <unknown>.show() <unknown>.setConfirmClickListener() <unknown>.setProgressMessageColor(<unknown>) <unknown>.setTitleText(java.lang.String) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) android.content.res.Resources.getColor(<unknown>) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setTitleText(java.lang.String) .CountDownTimer(int, int) android.app.Activity.findViewById(<unknown>) <unknown>.setTitleText(java.lang.String) <unknown>.show() android.content.res.Resources.getColor(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.setConfirmText(java.lang.String) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) android.content.res.Resources.getColor(<unknown>) <unknown>.setBarColor(<unknown>) android.content.res.Resources.getColor(<unknown>) <unknown>.setConfirmText(java.lang.String) <unknown>.show() <unknown>.SweetAlertDialog.OnSweetClickListener() <unknown>.showCancelButton(boolean) <unknown>.setContentText(java.lang.String) android.content.res.Resources.getColor(<unknown>) <unknown>.spin() <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.dismissWithAnimation() android.app.Activity.findViewById(<unknown>) <unknown>.showCancelButton(boolean) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) android.view.ContextThemeWrapper.getResources() android.content.res.Resources.getColor(<unknown>) android.os.CountDownTimer.start() <unknown>.showCancelButton(boolean) <unknown>.setConfirmClickListener(null) <unknown>.setBarColor(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.setBarColor(<unknown>) <unknown>.setProgressMessageColor(<unknown>) <unknown>.setBarColor(<unknown>) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.changeAlertType(<unknown>) <unknown>.setProgressMessageColor(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.show() <unknown>.setConfirmText(java.lang.String) <unknown>.setCancelClickListener(null) <unknown>.setConfirmText(java.lang.String) <unknown>.setBarColor(<unknown>) <unknown>.setProgressMessageColor(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.setProgressMessageColor(<unknown>) android.content.res.Resources.getColor(<unknown>) <unknown>.setCustomImage(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.setContentText(java.lang.String) <unknown>.setBarColor(<unknown>) <unknown>.setConfirmClickListener() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.setTitleText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.view.View.getId() java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) <unknown>.setProgressMessageColor(<unknown>) <unknown>.show() <unknown>.show() android.app.Activity.findViewById(<unknown>) <unknown>.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setBarColor(<unknown>) <unknown>.setCancelClickListener(null) android.app.Activity.findViewById(<unknown>) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) <unknown>.show() <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) android.content.res.Resources.getColor(<unknown>) <unknown>.setTitleText(java.lang.String) <unknown>.setProgressMessageColor(<unknown>) <unknown>.changeAlertType(<unknown>) <unknown>.setCancelClickListener() <unknown>.setContentText(java.lang.String) <unknown>.setCancelText(java.lang.String) <unknown>.setBarColor(<unknown>) <unknown>.changeAlertType(<unknown>) <unknown>.setBarColor(<unknown>) android.app.Activity.setContentView(<unknown>) <unknown>.setConfirmClickListener(null)"]}, {"user_sni": "Alok Vaish", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File android.view.Window com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity android.widget.ImageView java.util.Calendar"], "email_sni": "alok@alok-PC.(none)", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate ImageView show_text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate ImageView show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.show_text_voice_camera_voice_details_separator);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (ImageView) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t}\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tnew ShowDateHandler(this, mCalendar);\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id\n\t\t\t\t\t\t+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button\n\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(new DisplayTime()\n\t\t\t\t\t\t\t\t\t.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tnew FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG)\n\t\t\t\t\t.show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_voice_details_separator\n\t\t\t\t.setVisibility(View.VISIBLE);\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivity(editIntent);\n\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-05T09:42:12Z", "hash_sni": "d7419a803b011b4b026bab3eac20e3865f43a8ca", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" import java.io.File;\n import java.util.ArrayList;\n import java.util.Calendar;\n-import java.util.HashMap;\n-\n-import com.vinsol.expensetracker.utils.AudioPlay;\n-import com.vinsol.expensetracker.utils.DisplayTime;\n-import com.vinsol.expensetracker.utils.FileDelete;\n \n import android.app.Activity;\n import android.content.Intent;\n import android.os.Bundle;\n import android.os.CountDownTimer;\n-import android.view.KeyEvent;\n import android.view.View;\n import android.view.View.OnClickListener;\n import android.view.Window;\n import android.widget.Button;\n import android.widget.Chronometer;\n-import android.widget.EditText;\n import android.widget.ImageView;\n import android.widget.RelativeLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n+import com.vinsol.expensetracker.utils.AudioPlay;\n+import com.vinsol.expensetracker.utils.DisplayTime;\n+import com.vinsol.expensetracker.utils.FileDelete;\n+\n public class ShowVoiceActivity extends Activity implements OnClickListener {\n \n \tprivate TextView show_text_voice_camera_header_title;\n@@ -32,15 +29,11 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \tprivate RelativeLayout show_text_voice_camera_voice_details;\n \tprivate TextView show_text_voice_camera_amount;\n \tprivate TextView show_text_voice_camera_tag_textview;\n-\tprivate EditText show_text_voice_camera_tag;\n \tprivate Button show_text_voice_camera_delete;\n-\tprivate View show_text_voice_camera_divider_amount_desc;\n \tprivate Button show_text_voice_camera_play_button;\n \tprivate Button show_text_voice_camera_stop_button;\n \tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n \tprivate MyCount countDownTimer;\n-\tprivate Button show_text_voice_camera_update_entry;\n-\tprivate TextView show_text_voice_camera_description_show;\n \tprivate ImageView show_text_voice_camera_edit;\n \n \tprivate AudioPlay mAudioPlay;\n@@ -59,15 +52,11 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\tshow_text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.show_text_voice_camera_voice_details_separator);\n \t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n \t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n-\t\tshow_text_voice_camera_tag = (EditText) findViewById(R.id.show_text_voice_camera_tag);\n \t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n-\t\tshow_text_voice_camera_divider_amount_desc = findViewById(R.id.show_text_voice_camera_divider_amount_desc);\n \t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n \t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n \t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n \t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n-\t\tshow_text_voice_camera_update_entry = (Button) findViewById(R.id.show_text_voice_camera_update_entry);\n-\t\tshow_text_voice_camera_description_show = (TextView) findViewById(R.id.show_text_voice_camera_description_show);\n \t\tshow_text_voice_camera_edit = (ImageView) findViewById(R.id.show_text_voice_camera_edit);\n \n \t\tmDatabaseAdapter = new DatabaseAdapter(this);\n@@ -88,13 +77,7 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n \t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n \t\t\t} else {\n-\t\t\t\tshow_text_voice_camera_description_show\n-\t\t\t\t\t\t.setVisibility(View.GONE);\n-\t\t\t\tshow_text_voice_camera_tag_textview.setVisibility(View.GONE);\n-\t\t\t\tshow_text_voice_camera_tag.setVisibility(View.VISIBLE);\n-\t\t\t\tshow_text_voice_camera_divider_amount_desc\n-\t\t\t\t\t\t.setVisibility(View.GONE);\n-\t\t\t\tshow_text_voice_camera_update_entry.setVisibility(View.VISIBLE);\n+\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n \t\t\t}\n \t\t\tCalendar mCalendar = Calendar.getInstance();\n \t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n@@ -103,7 +86,6 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\tshow_text_voice_camera_delete.setOnClickListener(this);\n \t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n \t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n-\t\tshow_text_voice_camera_update_entry.setOnClickListener(this);\n \t\tshow_text_voice_camera_edit.setOnClickListener(this);\n \n \t\tif (android.os.Environment.getExternalStorageState().equals(\n@@ -225,13 +207,6 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n \t\t\t\t\t\t\t.getPlayBackTime()));\n \t\t}\n-\n-\t\tif (v.getId() == R.id.show_text_voice_camera_update_entry) {\n-\t\t\tif (show_text_voice_camera_tag.isShown()) {\n-\t\t\t\tif (show_text_voice_camera_tag.getText().toString() != \"\")\n-\t\t\t\t\tsaveEntry();\n-\t\t\t}\n-\t\t}\n \t\t\n \t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n \t\t\tIntent editIntent = new Intent(this, Voice.class);\n@@ -268,31 +243,6 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t}\n \t}\n \n-\t// /// ****************** Handling back press of key ********** ///////////\n-\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n-\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n-\t\t\tonBackPressed();\n-\t\t\treturn super.onKeyDown(keyCode, event);\n-\t\t}\n-\t\treturn super.onKeyDown(keyCode, event);\n-\t}\n-\n-\tpublic void onBackPressed() {\n-\t\t// This will be called either automatically for you on 2.0\n-\t\t// or later, or by the code above on earlier versions of the platform.\n-\t\tif (show_text_voice_camera_tag.isShown()) {\n-\t\t\tif (show_text_voice_camera_tag.getText().toString() != \"\")\n-\t\t\t\tsaveEntry();\n-\t\t}\n-\n-\t\ttry {\n-\t\t\tif (mAudioPlay.isAudioPlaying())\n-\t\t\t\tmAudioPlay.stopPlayBack();\n-\t\t} catch (Exception e) {\n-\t\t}\n-\t\tfinish();\n-\t}\n-\n \t@Override\n \tprotected void onPause() {\n \n@@ -307,22 +257,4 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t}\n \t\tsuper.onPause();\n \t}\n-\n-\tprivate void saveEntry() {\n-\t\t// ///// ******* Creating HashMap to update info ******* ////////\n-\t\tHashMap<String, String> _list = new HashMap<String, String>();\n-\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n-\n-\t\tif (show_text_voice_camera_tag.getText().toString() != \"\") {\n-\t\t\t_list.put(DatabaseAdapter.KEY_TAG, show_text_voice_camera_tag\n-\t\t\t\t\t.getText().toString());\n-\t\t}\n-\n-\t\t// //// ******* Update database if user added additional info *******\n-\t\t// ///////\n-\t\tmDatabaseAdapter.open();\n-\t\tmDatabaseAdapter.editDatabase(_list);\n-\t\tmDatabaseAdapter.close();\n-\t\tfinish();\n-\t}\n }"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getPlayBackTime getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putExtra requestWindowFeature setContentView setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack stop stopPlayBack toString updateUI"], "_version_": 1526733148837117952, "subject_t": ["Show Page: inline description editing functionality removed"], "comments_t": ["\t\t// //// ****** If audio recording started then stop recording audio \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t// ***** /////// \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["409c513b7463d099754b68925f55c7f57319840b"], "id": "vinsol/expense-tracker\u0000d7419a803b011b4b026bab3eac20e3865f43a8ca\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.widget.Toast.show()#<unknown>.isAudioPlaying()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.open()#android.content.Context.getString(<unknown>)#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#android.app.Activity.requestWindowFeature(int)#android.os.CountDownTimer.cancel()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#android.view.View.setVisibility(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.show()#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#android.widget.ImageView.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.app.Activity.startActivity(android.content.Intent)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#android.view.View.setVisibility(int)", "callsites_t": ["java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) android.widget.Toast.show() <unknown>.isAudioPlaying() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.open() android.content.Context.getString(<unknown>) <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() java.io.File.File(java.lang.String) android.widget.Toast.show() android.app.Activity.requestWindowFeature(int) android.os.CountDownTimer.cancel() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() android.view.View.setVisibility(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.show() java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) <unknown>.getPlayBackTime() android.app.Activity.finish() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) android.widget.ImageView.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.app.Activity.startActivity(android.content.Intent) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.view.View.OnClickListener android.os.Bundle android.widget.TextView android.widget.Button android.widget.RelativeLayout android.view.View android.util.Log android.view.Window com.vinsol.expensetracker.utils.AudioPlay android.app.Activity com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\n\npublic class Voice extends Activity implements OnClickListener{\n\t\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate String mFileName = \"test1\";\n\tprivate AudioPlay mAudioPlay;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\t\n\t\t///////   ****** No Title Bar   ********* /////////\n        \n        \n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        \n        setContentView(R.layout.text_voice_camera);\n        \n        \n        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n        \n        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n        \n        setGraphicsVoice();\n        controlVoiceChronometer();\n        setClickListeners();\n        \n        ////////   ********  Handle Date Bar   *********   ////////\n        new DateHandler(this);\n        \n        \n        ////////   ********   Starts Recording each time activity starts   ******   ///////\n        mRecordingHelper = new RecordingHelper(mFileName);\n\t\tmRecordingHelper.startRecording();\n\t\t\n\t\t\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\t\t\n\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\tif(mRecordingHelper.isRecording()){\n\t\t\tmRecordingHelper.stopRecording();\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n\t\t\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\t\t\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n\t\t\n\t\t\n\t\t////  ***** if stop button pressed ****** //////\n\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n\t\t\tmRecordingHelper.stopRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t}\n\t\t\n\t\t\n\t\t////  ***** if play button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n\t\t\tmAudioPlay = new AudioPlay(mFileName);\n\t\t\tLog.v(\"hello\", text_voice_camera_time_details_chronometer.getText()+\"\");\n\t\t\t\n\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n\t\t\tif(!mAudioPlay.isAudioPlaying()){\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\t\t\n\t\t////  ***** if rerecord button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){}\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\t\t\t\n\t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n\t\t\tif(mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(mFileName);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\t}\n\t\n\t\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-16T11:01:45Z", "hash_sni": "c20f178370c9726c2807c583adba7736e827bce7", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" package com.vinsol.expensetracker;\n \n+import com.vinsol.expensetracker.utils.AudioPlay;\n+import com.vinsol.expensetracker.utils.DisplayTime;\n+import com.vinsol.expensetracker.utils.RecordingHelper;\n+\n import android.app.Activity;\n import android.os.Bundle;\n import android.os.CountDownTimer;\n@@ -25,6 +29,9 @@ public class Voice extends Activity implements OnClickListener{\n \tprivate Button text_voice_camera_play_button;\n \tprivate Button text_voice_camera_rerecord_button;\n \tprivate MyCount countDownTimer;\n+\tprivate RecordingHelper mRecordingHelper;\n+\tprivate String mFileName = \"test1\";\n+\tprivate AudioPlay mAudioPlay;\n \t\n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n@@ -52,8 +59,26 @@ public class Voice extends Activity implements OnClickListener{\n         controlVoiceChronometer();\n         setClickListeners();\n         \n-        ////////********    Handle Date Bar   *********   ////////\n+        ////////   ********  Handle Date Bar   *********   ////////\n         new DateHandler(this);\n+        \n+        \n+        ////////   ********   Starts Recording each time activity starts   ******   ///////\n+        mRecordingHelper = new RecordingHelper(mFileName);\n+\t\tmRecordingHelper.startRecording();\n+\t\t\n+\t\t\n+\t}\n+\t\n+\t@Override\n+\tprotected void onPause() {\n+\t\t\n+\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n+\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n+\t\tif(mRecordingHelper.isRecording()){\n+\t\t\tmRecordingHelper.stopRecording();\n+\t\t}\n+\t\tsuper.onPause();\n \t}\n \n \tprivate void setClickListeners() {\n@@ -97,39 +122,73 @@ public class Voice extends Activity implements OnClickListener{\n \t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n \t\t\n \t\t\n-\t\t\t\t\t\t////  ***** if stop button pressed ****** //////\n+\t\t////  ***** if stop button pressed ****** //////\n \t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n \t\t\ttry{\n \t\t\t\tcountDownTimer.cancel();\n \t\t\t}catch(NullPointerException e){};\n \t\t\t\n-\t\t\ttext_voice_camera_time_details_chronometer.stop();\n+\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n \t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n \t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n+\t\t\t\n+\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n+\t\t\tmRecordingHelper.stopRecording();\n+\t\t\ttext_voice_camera_time_details_chronometer.stop();\n \t\t}\n-\t\t\t\t\t\t////  ***** if play button pressed ****** //////\t\t\n+\t\t\n+\t\t\n+\t\t////  ***** if play button pressed ****** //////\t\t\n \t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n+\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n+\t\t\tmAudioPlay = new AudioPlay(mFileName);\n \t\t\tLog.v(\"hello\", text_voice_camera_time_details_chronometer.getText()+\"\");\n-\t\t\tcountDownTimer = new MyCount(300000, 1000);\n-\t\t\tcountDownTimer.start();\n+\t\t\t\n+\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n+\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n+\t\t\t\n+\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n \t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n \t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n \t\t\t\n+\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n+\t\t\tif(!mAudioPlay.isAudioPlaying()){\n+\t\t\t\tmAudioPlay.startPlayBack();\n+\t\t\t} else {\n+\t\t\t\tmAudioPlay.stopPlayBack();\n+\t\t\t\tmAudioPlay.startPlayBack();\n+\t\t\t}\n+\t\t\tcountDownTimer.start();\n \t\t}\n-\t\t\t\t\t\t////  ***** if rerecord button pressed ****** //////\t\t\n+\t\t\n+\t\t////  ***** if rerecord button pressed ****** //////\t\t\n \t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n \t\t\ttry{\n \t\t\t\tcountDownTimer.cancel();\n \t\t\t}catch(NullPointerException e){};\n-\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n-\t\t\ttext_voice_camera_time_details_chronometer.start();\n+\t\t\t\n+\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n+\t\t\ttry{\n+\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n+\t\t\t\t\tmAudioPlay.stopPlayBack();\n+\t\t\t\t}\n+\t\t\t}catch(NullPointerException e){}\n+\t\t\t\n+\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n \t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n \t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n+\t\t\t\n+\t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n+\t\t\tif(mRecordingHelper.isRecording())\n+\t\t\t\tmRecordingHelper.stopRecording();\n+\t\t\tmRecordingHelper = new RecordingHelper(mFileName);\n+\t\t\tmRecordingHelper.startRecording();\n+\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n+\t\t\ttext_voice_camera_time_details_chronometer.start();\n \t\t}\n-\t\t\n \t}\n \t\n \t\n@@ -137,31 +196,23 @@ public class Voice extends Activity implements OnClickListener{\n \t//countdowntimer is an abstract class, so extend it and fill in methods\n \tprivate class MyCount extends CountDownTimer{\n \n+\t\tDisplayTime mDisplayTime;\n+\t\t\n \t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n \t\t\tsuper(millisInFuture, countDownInterval);\n+\t\t\tmDisplayTime = new DisplayTime();\n \t\t}\n \n \t\t@Override\n \t\tpublic void onFinish() {\n-\t\t\ttext_voice_camera_time_details_chronometer.setText(\"done!\");\n+\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n+\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n+\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n \t\t}\n \n \t\t@Override\n \t\tpublic void onTick(long millisUntilFinished) {\n-\t\t\tString minutes = \"00\";\n-\t\t\tif(millisUntilFinished >= 60000){\n-\t\t\t\tLong temp = millisUntilFinished / 60000;\n-\t\t\t\tif(temp < 10){\n-\t\t\t\t\tminutes = \"0\"+temp;\n-\t\t\t\t}else{\n-\t\t\t\t\tminutes = temp+\"\";\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tString seconds = (millisUntilFinished%60000)/1000+\"\";\n-\t\t\tif((millisUntilFinished%60000)/1000 < 10){\n-\t\t\t\t\tseconds = \"0\"+seconds;\n-\t\t\t}\n-\t\t\ttext_voice_camera_time_details_chronometer.setText(minutes +\":\" + seconds);\n+\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n \t\t}\n \n \t}"], "score": 1.0, "methods_t": ["AudioPlay DateHandler DisplayTime MyCount OnChronometerTickListener RecordingHelper cancel controlVoiceChronometer elapsedRealtime findViewById getDisplayTime getId getPlayBackTime getText isAudioPlaying isRecording length requestWindowFeature setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setVisibility start startPlayBack startRecording stop stopPlayBack stopRecording v"], "_version_": 1526731855126069248, "subject_t": ["Added Audio Recorder and AudioPlay, found 1 bug in location"], "comments_t": ["\t\t//////   *****  Check whether audio is recording or not   *******   /////// \t//countdowntimer is an abstract class, so extend it and fill in methods         ///////   ***** Sets Title Voice Entry *********/////// \t\t///////   ****** No Title Bar   ********* /////////         ////////   ********    Initializing and assigning memory to UI Items **********    ///////// \t\t///////   ********     Adding On Click Actions to click listeners *********    ////////// \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******////// \t\t\t///////   *******   Chronometer Starts Countdown   ******  /////// \t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** /////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////       \t\t\t//////  ******  Restarts chronometer and recording   *******  //////// \t\t////////    *******    Adding Click Listeners to UI Items ******** ////////// \t\t////  ***** if stop button pressed ****** //////         ////////   ********   Starts Recording each time activity starts   ******   /////// \t\t///////   ***** Sets Title Voice Entry *********/////// \t\t\t//////   ******   Handles UI items on button click  ******  ///////         //////   ******  Shows Voice Details ********//////// \t\t////  ***** if play button pressed ****** //////\t\t \t\t\t//////\t     ********   to handle playback of recorded file   *********   //////// \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////         ////////   ********  Handle Date Bar   *********   //////// \t\t////  ***** if rerecord button pressed ****** //////\t\t \t\t//////   ******   If audio recording started then stop recording audio   *****   ///////"], "parents_ss": ["2a6f070841e8d3b8b46b10a21cb02935b0613a48"], "id": "vinsol/expense-tracker\u0000c20f178370c9726c2807c583adba7736e827bce7\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.isRecording()#android.view.View.setVisibility(int)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#android.widget.Chronometer.stop()#<unknown>.AudioPlay(java.lang.String)#<unknown>.stopPlayBack()#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.DisplayTime()#android.os.SystemClock.elapsedRealtime()#<unknown>.RecordingHelper(java.lang.String)#android.app.Activity.setContentView(<unknown>)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#android.app.Activity.findViewById(<unknown>)#com.vinsol.expensetracker.Voice.setClickListeners()#android.widget.Chronometer.setOnChronometerTickListener()#android.app.Activity.findViewById(<unknown>)#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#<unknown>.getPlayBackTime()#.OnChronometerTickListener()#android.view.View.setVisibility(int)#android.app.Activity.requestWindowFeature(int)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#<unknown>.RecordingHelper(java.lang.String)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.app.Activity.findViewById(<unknown>)#<unknown>.startPlayBack()#android.widget.TextView.getText()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#<unknown>.isRecording()#android.app.Activity.findViewById(<unknown>)#android.util.Log.v(java.lang.String, java.lang.String)#<unknown>.startRecording()#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)", "callsites_t": ["android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.isRecording() android.view.View.setVisibility(int) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() <unknown>.stopRecording() android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.controlVoiceChronometer() android.widget.Chronometer.stop() <unknown>.AudioPlay(java.lang.String) <unknown>.stopPlayBack() android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.DisplayTime() android.os.SystemClock.elapsedRealtime() <unknown>.RecordingHelper(java.lang.String) android.app.Activity.setContentView(<unknown>) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) android.app.Activity.findViewById(<unknown>) com.vinsol.expensetracker.Voice.setClickListeners() android.widget.Chronometer.setOnChronometerTickListener() android.app.Activity.findViewById(<unknown>) android.os.CountDownTimer.cancel() java.lang.CharSequence.length() <unknown>.getPlayBackTime() .OnChronometerTickListener() android.view.View.setVisibility(int) android.app.Activity.requestWindowFeature(int) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) <unknown>.RecordingHelper(java.lang.String) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.app.Activity.findViewById(<unknown>) <unknown>.startPlayBack() android.widget.TextView.getText() com.vinsol.expensetracker.Voice.setGraphicsVoice() android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) android.view.View.getId() <unknown>.isRecording() android.app.Activity.findViewById(<unknown>) android.util.Log.v(java.lang.String, java.lang.String) <unknown>.startRecording() android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener com.vinsol.expensetracker.utils.DisplayDate android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayDate;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\tprivate Boolean isChanged = false;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\")) {\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ****** ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio  ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\tisChanged = true;\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif(mRecordingHelper != null)\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\t\n\t\t\tif(intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\t\tIntent mIntent = new Intent(this, ShowTextActivity.class);\n\t\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t\tBundle tempBundle = new Bundle();\n\t\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\t\tmEditList = new ArrayList<String>();\n\t\t\t\tmEditList.addAll(listOnResult);\n\t\t\t\tmIntent.putExtra(\"textShowBundle\", tempBundle);\n\t\t\t\tsetResult(Activity.RESULT_CANCELED, mIntent);\n\t\t\t}\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,mDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\t\t ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\t\n\t\t\n\t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t} else {\n\t\t\t\n\t\t\tIntent mIntent = new Intent(this, ShowVoiceActivity.class);\n\t\t\tBundle tempBundle = new Bundle();\n\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\tlistOnResult.add(mEditList.get(0));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_TAG));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_AMOUNT));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n\t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDateDate(_list.get(DatabaseAdapter.KEY_DATE_TIME)));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(3));\n\t\t\t}\t\t\t\t\n\t\t\tif((mEditList.get(1) != listOnResult.get(1)) || (mEditList.get(2) != listOnResult.get(2)) || isChanged ) {\n\t\t\t\tShowTextActivity.favID = null;\n\t\t\t\tHashMap<String, String> listForFav = new HashMap<String, String>();\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_FAVORITE, \"\");\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_ID, mEditList.get(0));\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.editDatabase(listForFav);\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t} else if(ShowVoiceActivity.favID == null) {\n\t\t\t\t\tlistOnResult.add(mEditList.get(4));\n\t\t\t\t}\n\t\t\t\telse { \n\t\t\t\t\tlistOnResult.add(ShowVoiceActivity.favID);\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(5));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n\t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(6));\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(7));\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList.addAll(listOnResult);\n\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\tmIntent.putExtra(\"voiceShowBundle\", tempBundle);\n\t\t\tsetResult(Activity.RESULT_OK, mIntent);\n\t\t}\n\t\tfinish();\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-12T11:13:47Z", "hash_sni": "a658a694e9a273ede5c143453ac68612db358894", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \tprivate boolean setUnknown = false;\n \tprivate Boolean isChanged = false;\n \t\n-\t\n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n \t\tsuper.onCreate(savedInstanceState);\n@@ -338,6 +337,18 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\tmDatabaseAdapter.open();\n \t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n \t\t\tmDatabaseAdapter.close();\n+\t\t\t\n+\t\t\tif(intentExtras.containsKey(\"isFromShowPage\")){\n+\t\t\t\tIntent mIntent = new Intent(this, ShowTextActivity.class);\n+\t\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n+\t\t\t\tlistOnResult.add(\"\");\n+\t\t\t\tBundle tempBundle = new Bundle();\n+\t\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n+\t\t\t\tmEditList = new ArrayList<String>();\n+\t\t\t\tmEditList.addAll(listOnResult);\n+\t\t\t\tmIntent.putExtra(\"textShowBundle\", tempBundle);\n+\t\t\t\tsetResult(Activity.RESULT_CANCELED, mIntent);\n+\t\t\t}\n \t\t\tfinish();\n \t\t}\n \t}"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay Bundle DatabaseAdapter DateHandler DateHelper DisplayDate DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper add addAll addFlags canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLocationDate getLocationDateDate getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put putExtra putStringArrayList saveEntry setBase setClickListeners setContentView setFirstDayOfWeek setGraphicsVoice setOnChronometerTickListener setOnClickListener setResult setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim"], "_version_": 1526731734918365184, "subject_t": ["Handled delete button"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// ////// ******** Starts Recording each time activity starts ****** /////// \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items ********** ///////// \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// //// ******* Update database if user added additional info *******\t\t /////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t// //// ****** If audio recording started then stop recording audio  ***** /////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["2791ed27f7882f037221f8aff4fd75946200073b"], "id": "vinsol/expense-tracker\u0000a658a694e9a273ede5c143453ac68612db358894\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#<unknown>.getLocationDateDate(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#<unknown>.getLocationDate(<unknown>, java.lang.String)#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.Bundle()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setResult(int, android.content.Intent)#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.DisplayDate()#<unknown>.isAudioPlaying()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.widget.TextView.getText()#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.view.KeyEvent.getRepeatCount()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.content.Intent.addFlags(int)#android.os.Bundle.Bundle()#android.app.Activity.setResult(int, android.content.Intent)#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#<unknown>.isRecording()#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) <unknown>.getLocationDateDate(<unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.util.ArrayList<java.lang.String>.get(int) java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() <unknown>.getLocationDate(<unknown>, java.lang.String) android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.Bundle() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setResult(int, android.content.Intent) android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.DisplayDate() <unknown>.isAudioPlaying() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() java.util.ArrayList<java.lang.String>.add(<unknown>) android.widget.TextView.getText() <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.add(java.lang.String) android.view.KeyEvent.getRepeatCount() java.util.ArrayList<java.lang.String>.add(<unknown>) android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.ArrayList<java.lang.String>.ArrayList, String() android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.content.Intent.addFlags(int) android.os.Bundle.Bundle() android.app.Activity.setResult(int, android.content.Intent) android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) <unknown>.isRecording() android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.util.Log android.app.Activity java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate static final int EDIT_RESULT = 35;\n\tprivate RelativeLayout dateBarRelativeLayout;\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprotected static String favID = null;\n\tprivate FavoriteHelper mFavoriteHelper;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\t\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\t\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t}\n\t\t\t\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\n\t\t\tif(mShowList.get(7) != null)\n\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\n\t\t\tif(mShowList.get(6) != null)\n\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\telse {\n\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tmFavoriteHelper = new FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n\n\t\t\tmShowList.set(4, favID);\n\t\t\tintentExtras.remove(\"mDisplayList\");\n\t\t\tintentExtras.putStringArrayList(\"mDisplayList\", mShowList);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivityForResult(editIntent, EDIT_RESULT);\n//\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t\t\n\t\tsuper.onActivityResult(requestCode, resultCode, data);\n\t\tif (EDIT_RESULT == requestCode) {\n\t\t\tif(Activity.RESULT_OK == resultCode) {\n\t\t\t\t\n\t\t\t\tintentExtras = data.getBundleExtra(\"voiceShowBundle\");\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tmShowList = new ArrayList<String>();\n\t\t\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t\t\tLog.v(\"mShowListOnResult\", mShowList.toString());\n\t\t\t\t\tif(mShowList.get(0) != null){\n\t\t\t\t\t\tif(mShowList.get(0) != \"\"){\n\t\t\t\t\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfinish();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfinish();\n\t\t\t\t\t}\n\t\t\t\t\tString amount = mShowList.get(2);\n\t\t\t\t\tString tag = mShowList.get(1);\n\t\t\t\t\t\n\t\t\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(7) != null)\n\t\t\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(6) != null)\n\t\t\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\t\t\telse {\n\t\t\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\t\tupdateUI();\n\t\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmFavoriteHelper.setShowList(mShowList);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\n\t\tif(resultCode == Activity.RESULT_CANCELED){\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-12T11:13:47Z", "hash_sni": "a658a694e9a273ede5c143453ac68612db358894", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" \t\t\t\t\tmShowList = new ArrayList<String>();\n \t\t\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n \t\t\t\t\tLog.v(\"mShowListOnResult\", mShowList.toString());\n-\t\t\t\t\t_id = Long.parseLong(mShowList.get(0));\n+\t\t\t\t\tif(mShowList.get(0) != null){\n+\t\t\t\t\t\tif(mShowList.get(0) != \"\"){\n+\t\t\t\t\t\t\t_id = Long.parseLong(mShowList.get(0));\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tfinish();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tfinish();\n+\t\t\t\t\t}\n \t\t\t\t\tString amount = mShowList.get(2);\n \t\t\t\t\tString tag = mShowList.get(1);\n \t\t\t\t\t\n@@ -333,7 +341,10 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t\t}\n \t\t}\n \t\t\n-\t\t\n+\n+\t\tif(resultCode == Activity.RESULT_CANCELED){\n+\t\t\tfinish();\n+\t\t}\n \t}\n \t\n }"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler ShowLocationHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getDrawable getExternalStorageState getId getInstance getIntent getPlayBackTime getResources getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putBoolean putExtra putStringArrayList remove set setBackgroundDrawable setContentView setFirstDayOfWeek setOnClickListener setShowList setText setTimeInMillis setVisibility show start startActivityForResult startPlayBack stop stopPlayBack toString updateUI v"], "_version_": 1526731734929899520, "subject_t": ["Handled delete button"], "comments_t": ["\t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** //\t\t\tfinish(); \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ****** If audio recording started then stop recording audio ***** /////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["824dc3cf210d2bcf7ea5de5716edec27606b6a34"], "id": "vinsol/expense-tracker\u0000a658a694e9a273ede5c143453ac68612db358894\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "android.os.Bundle.remove(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.startActivityForResult(android.content.Intent, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.io.File.canRead()#android.widget.Toast.show()#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getPlayBackTime()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#<unknown>.open()#android.content.Context.getString(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#java.util.AbstractCollection<java.lang.String>.toString()#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.Toast.show()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.view.View.setVisibility(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#java.io.File.File(java.lang.String)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.view.ContextThemeWrapper.getResources()#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.content.Context.getString(<unknown>)#android.util.Log.v(java.lang.String, java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.setShowList(java.util.ArrayList<java.lang.String>)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#java.lang.String.contains(java.lang.String)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#java.lang.String.equals(<unknown>)#android.os.Environment.getExternalStorageState()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#android.app.Activity.finish()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#java.lang.Long.toString(java.lang.Long)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#<unknown>.getDisplayTime(<unknown>)#android.os.CountDownTimer.cancel()#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setBackgroundDrawable(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.util.ArrayList<java.lang.String>.ArrayList, String()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.Toast.show()#java.util.Calendar.setFirstDayOfWeek(int)#java.util.Calendar.setTimeInMillis(long)#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.res.Resources.getDrawable(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#<unknown>.DisplayTime()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.os.Bundle.putBoolean(java.lang.String, boolean)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.getInstance()#android.view.View.setVisibility(int)", "callsites_t": ["android.os.Bundle.remove(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.startActivityForResult(android.content.Intent, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.io.File.canRead() android.widget.Toast.show() java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getPlayBackTime() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) <unknown>.open() android.content.Context.getString(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) java.util.AbstractCollection<java.lang.String>.toString() <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.Toast.show() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.widget.TextView.setText(java.lang.String) android.view.View.setVisibility(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) java.io.File.File(java.lang.String) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.view.ContextThemeWrapper.getResources() android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.content.Context.getString(<unknown>) android.util.Log.v(java.lang.String, java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.setShowList(java.util.ArrayList<java.lang.String>) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) java.lang.String.contains(java.lang.String) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) java.lang.String.equals(<unknown>) android.os.Environment.getExternalStorageState() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() android.app.Activity.finish() java.io.File.File(java.lang.String) android.widget.Toast.show() java.lang.Long.toString(java.lang.Long) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() <unknown>.getDisplayTime(<unknown>) android.os.CountDownTimer.cancel() java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setBackgroundDrawable(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.util.ArrayList<java.lang.String>.ArrayList, String() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.Toast.show() java.util.Calendar.setFirstDayOfWeek(int) java.util.Calendar.setTimeInMillis(long) java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.content.res.Resources.getDrawable(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) <unknown>.getPlayBackTime() android.app.Activity.finish() <unknown>.DisplayTime() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) android.content.Intent.getBundleExtra(java.lang.String) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.os.Bundle.putBoolean(java.lang.String, boolean) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) java.util.Calendar.getInstance() android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File android.view.Window com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast android.widget.ImageView java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class Voice extends Activity implements OnClickListener{\n\t\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\t\n\t\t///////   ****** No Title Bar   ********* /////////\n        \n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        setContentView(R.layout.text_voice_camera);\n        \n        \n        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n        \n        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n    \ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n    \ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n    \ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n    \tmDatabaseAdapter = new DatabaseAdapter(this);\n    \t\n    \t////////*********     Get id from intent extras     ********   ////////////\n        intentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n        _id = intentExtras.getLong(\"_id\");\n    \t\n        if(intentExtras.containsKey(\"mDisplayList\")){\n        \tmEditList = new ArrayList<String>();\n        \tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n        \t_id = Long.parseLong(mEditList.get(0));\n        \tString amount = mEditList.get(2);\n        \tString tag = mEditList.get(1);\n        \tif(!(amount.equals(\"\") || amount == null)){\n        \t\tif(!amount.contains(\"?\"))\n        \t\t\ttext_voice_camera_amount.setText(amount);\n        \t}\n        \tif(!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))){\n        \t\ttext_voice_camera_tag.setText(tag);\n        \t}\n        }\n        \n        \n        ////////   ********  Handle Date Bar   *********   ////////\n        if(intentExtras.containsKey(\"mDisplayList\")){\n        \tnew DateHandler(this , Long.parseLong(mEditList.get(6)));\n        } else if(intentExtras.containsKey(\"timeInMillis\")) {\n        \tnew DateHandler(this ,intentExtras.getLong(\"timeInMillis\"));\n        } else {\n        \tnew DateHandler(this);\n        }\n        \n        \n        ////////   ********   Starts Recording each time activity starts   ******   ///////\n        if(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n        \tsetGraphicsVoice();\n        \t\n        \tif(intentExtras.containsKey(\"mDisplayList\")){\n        \t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\"+_id+\".amr\");\n        \t\t\n        \t\tif(tempFile.canRead()){\n        \t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n        \t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n        \t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n        \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n        \t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n        \t\t} else {\n        \t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n        \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n        \t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n        \t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n        \t\t}\n        \t} else {\n        \t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n        \t\tmRecordingHelper.startRecording();\n        \t\tcontrolVoiceChronometer();\n        \t}\n        } \n        else {\n        \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n        }\n        setClickListeners();\n\t\t\n\t\t////////*********     Get Last most accurate location info   *********   /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\t\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\n\t\n\t@Override\n\tprotected void onPause() {\n\t\t\n\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\ttry{\n\t\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n\t\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch(Exception e){\n\t\t\t\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n\t\t\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n\t\t\n\t\t\n\t\t////  ***** if stop button pressed ****** //////\n\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n\t\t\tmRecordingHelper.stopRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t}\n\t\t\n\t\t\n\t\t////  ***** if play button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n\t\t\tmAudioPlay = new AudioPlay(_id+\"\",this);\n\t\t\t\n\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n\t\t\tif(!mAudioPlay.isAudioPlaying()){\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\t\t\n\t\t////  ***** if rerecord button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){}\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\t\t\t\n\t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n\t\t\tif(mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\t\t\n\t\t////////********  Adding Action to save entry     *********    ///////////\n\t\t\n\t\tif(v.getId() == R.id.text_voice_camera_save_entry){\n\t\t\tsaveEntry();\n\t\t}\n\t\n\t\n\t\t/////////     *********   Adding action if delete button **********  /////////\n\t\n\t\tif(v.getId() == R.id.text_voice_camera_delete){\n\t\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\t\ttry{\n\t\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\n\t\t\tnew FileDelete(_id);\n\t\t\n\t\t\t//////   *******   Delete entry from database ********   /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n\t\n\tprivate void saveEntry() {\n\t\t///////    *******  Creating HashMap to update info   *******  ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\t\t\n\t\tif(!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")){\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double)((int)((mAmount+0.005)*100.0)/100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\t\n\t\tif(text_voice_camera_tag.getText().toString() != \"\"){\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\t\t\n\t\tif(!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)){\n\t\t\ttry{\n\t\t\t\tif(!intentExtras.containsKey(\"mDisplayList\")){\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t} else {\n\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mEditList.get(6)));\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t}\n\t\t\t} catch (Exception e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t//////    *******   Update database if user added additional info   *******  ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tif(!intentExtras.containsKey(\"timeInMillis\")  && !intentExtras.containsKey(\"mDisplayList\")){\n\t\t\t Intent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\t startActivity(intentExpenseListing);\n\t\t}\n\t}\n\n\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\t\n\t\n\t///// ******************  Handling back press of key   ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n\t     if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t    \t onBackPressed();\n\t         return true;\n\t      }\n\t    return super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t    // This will be called either automatically for you on 2.0    \n\t    // or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t    return;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-26T12:40:57Z", "hash_sni": "6b33d4eeee1e80f84005d84f9eb07f7f301a7736", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" package com.vinsol.expensetracker;\n \n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n import java.util.HashMap;\n \n import com.vinsol.expensetracker.location.LocationLast;\n@@ -46,6 +49,7 @@ public class Voice extends Activity implements OnClickListener{\n \tprivate DatabaseAdapter mDatabaseAdapter;\n \tprivate TextView text_voice_camera_date_bar_dateview;\n \tprivate String dateViewString;\n+\tprivate ArrayList<String> mEditList;\n \t\n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n@@ -53,9 +57,7 @@ public class Voice extends Activity implements OnClickListener{\n \t\t\n \t\t///////   ****** No Title Bar   ********* /////////\n         \n-        \n         this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n-        \n         setContentView(R.layout.text_voice_camera);\n         \n         \n@@ -77,11 +79,26 @@ public class Voice extends Activity implements OnClickListener{\n         intentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n         _id = intentExtras.getLong(\"_id\");\n     \t\n-        \n+        if(intentExtras.containsKey(\"mDisplayList\")){\n+        \tmEditList = new ArrayList<String>();\n+        \tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n+        \t_id = Long.parseLong(mEditList.get(0));\n+        \tString amount = mEditList.get(2);\n+        \tString tag = mEditList.get(1);\n+        \tif(!(amount.equals(\"\") || amount == null)){\n+        \t\tif(!amount.contains(\"?\"))\n+        \t\t\ttext_voice_camera_amount.setText(amount);\n+        \t}\n+        \tif(!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))){\n+        \t\ttext_voice_camera_tag.setText(tag);\n+        \t}\n+        }\n         \n         \n         ////////   ********  Handle Date Bar   *********   ////////\n-        if(intentExtras.containsKey(\"timeInMillis\")){\n+        if(intentExtras.containsKey(\"mDisplayList\")){\n+        \tnew DateHandler(this , Long.parseLong(mEditList.get(6)));\n+        } else if(intentExtras.containsKey(\"timeInMillis\")) {\n         \tnew DateHandler(this ,intentExtras.getLong(\"timeInMillis\"));\n         } else {\n         \tnew DateHandler(this);\n@@ -91,9 +108,27 @@ public class Voice extends Activity implements OnClickListener{\n         ////////   ********   Starts Recording each time activity starts   ******   ///////\n         if(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n         \tsetGraphicsVoice();\n-        \tcontrolVoiceChronometer();\n-        \tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n-        \tmRecordingHelper.startRecording();\n+        \t\n+        \tif(intentExtras.containsKey(\"mDisplayList\")){\n+        \t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\"+_id+\".amr\");\n+        \t\t\n+        \t\tif(tempFile.canRead()){\n+        \t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n+        \t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n+        \t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n+        \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n+        \t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n+        \t\t} else {\n+        \t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n+        \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n+        \t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n+        \t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n+        \t\t}\n+        \t} else {\n+        \t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n+        \t\tmRecordingHelper.startRecording();\n+        \t\tcontrolVoiceChronometer();\n+        \t}\n         } \n         else {\n         \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n@@ -117,10 +152,14 @@ public class Voice extends Activity implements OnClickListener{\n \t\t\n \t\t//////   *****  Check whether audio is recording or not   *******   ///////\n \t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n-\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n-\t\t\tif(mRecordingHelper.isRecording()){\n-\t\t\t\tmRecordingHelper.stopRecording();\n+\t\ttry{\n+\t\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n+\t\t\t\tif(mRecordingHelper.isRecording()){\n+\t\t\t\t\tmRecordingHelper.stopRecording();\n+\t\t\t\t}\n \t\t\t}\n+\t\t} catch(Exception e){\n+\t\t\t\n \t\t}\n \t\tsuper.onPause();\n \t}\n@@ -295,19 +334,27 @@ public class Voice extends Activity implements OnClickListener{\n \t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n \t\t}\n \t\t\n-\t\tif(!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString))\t\n-\t\ttry{\n-\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n-\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n-\t\t} catch (Exception e){\n-\t\t\te.printStackTrace();\n+\t\tif(!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)){\n+\t\t\ttry{\n+\t\t\t\tif(!intentExtras.containsKey(\"mDisplayList\")){\n+\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n+\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n+\t\t\t\t} else {\n+\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n+\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mEditList.get(6)));\n+\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n+\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n+\t\t\t\t}\n+\t\t\t} catch (Exception e){\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n \t\t}\n \t\t//////    *******   Update database if user added additional info   *******  ///////\n \t\tmDatabaseAdapter.open();\n \t\tmDatabaseAdapter.editDatabase(_list);\n \t\tmDatabaseAdapter.close();\n \t\tfinish();\n-\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n+\t\tif(!intentExtras.containsKey(\"timeInMillis\")  && !intentExtras.containsKey(\"mDisplayList\")){\n \t\t\t Intent intentExpenseListing = new Intent(this, ExpenseListing.class);\n \t\t\t startActivity(intentExpenseListing);\n \t\t}"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime File FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLastLocation getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put requestWindowFeature saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526731662961934336, "subject_t": ["Added Functionality of edit record using listclick"], "comments_t": ["\t\t/////////     *********   Adding action if delete button **********  ///////// \t\t////////********  Adding Action to save entry     *********    /////////// \t//countdowntimer is an abstract class, so extend it and fill in methods         ///////   ***** Sets Title Voice Entry *********/////// \t\t///////   ****** No Title Bar   ********* /////////         ////////   ********    Initializing and assigning memory to UI Items **********    /////////     \t////////*********     Get id from intent extras     ********   //////////// \t    // This will be called either automatically for you on 2.0     \t\t\t///////   *******   Chronometer Starts Countdown   ******  /////// \t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** /////// \t\t\t//////  ******  Restarts chronometer and recording   *******  //////// \t\t////////    *******    Adding Click Listeners to UI Items ******** ////////// \t\t\t//////   *****  Check whether audio is recording or not   *******   /////// \t///// ******************  Handling back press of key   ********** /////////// \t\t////////*********     Get Last most accurate location info   *********   ///////// \t\t////  ***** if play button pressed ****** //////\t\t \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   //////// \t\t\t//////   *******   Delete entry from database ********   ///////// \t\t////  ***** if rerecord button pressed ****** //////\t\t \t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t//////    *******   Update database if user added additional info   *******  /////// \t\t///////   ********     Adding On Click Actions to click listeners *********    ////////// \t\t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////       \t\t////  ***** if stop button pressed ****** //////         ////////   ********   Starts Recording each time activity starts   ******   /////// \t    // or later, or by the code above on earlier versions of the platform. \t\t///////   ***** Sets Title Voice Entry *********/////// \t\t\t//////   ******   Handles UI items on button click  ******  ///////         //////   ******  Shows Voice Details ********//////// \t\t\t//////\t     ********   to handle playback of recorded file   *********   //////// \t\t///////    *******  Creating HashMap to update info   *******  ////////         ////////   ********  Handle Date Bar   *********   ////////"], "parents_ss": ["f3f63e8b8e4ae305501369c5568614db6a2861fe"], "id": "vinsol/expense-tracker\u00006b33d4eeee1e80f84005d84f9eb07f7f301a7736\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.isRecording()#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.lang.Long.parseLong(java.lang.String)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#java.lang.String.equals(java.lang.String)#<unknown>.startRecording()#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#<unknown>.DisplayTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.deleteDatabaseEntryID(java.lang.String)#java.util.Calendar.setTimeInMillis(long)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getLastLocation()#android.widget.TextView.getText()#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.os.Bundle.getStringArrayList(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#com.vinsol.expensetracker.Voice.onBackPressed()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.app.Activity.finish()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getLong(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#<unknown>.close()#android.widget.TextView.setText(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#android.os.SystemClock.elapsedRealtime()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.widget.TextView.getText()#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#android.view.KeyEvent.getRepeatCount()#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#android.os.Environment.getExternalStorageState()#<unknown>.getPlayBackTime()#com.vinsol.expensetracker.Voice.setClickListeners()#android.widget.Chronometer.setOnChronometerTickListener()#android.os.CountDownTimer.cancel()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.length()#<unknown>.getPlayBackTime()#.OnChronometerTickListener()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.requestWindowFeature(int)#<unknown>.open()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.widget.Toast.show()#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#java.io.File.canRead()#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(<unknown>)#java.lang.Long.parseLong(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.close()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#java.lang.Double.toString()#android.widget.Chronometer.stop()#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#<unknown>.isRecording()#java.util.Calendar.getInstance()#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)#android.app.Activity.finish()#java.io.File.File(java.lang.String)", "callsites_t": ["<unknown>.isRecording() <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.lang.Long.parseLong(java.lang.String) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) java.lang.String.equals(java.lang.String) <unknown>.startRecording() java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) <unknown>.DisplayTime() android.view.View.setVisibility(int) java.lang.Long.toString(long) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.deleteDatabaseEntryID(java.lang.String) java.util.Calendar.setTimeInMillis(long) <unknown>.getTimeMillis() android.app.Activity.getIntent() android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getLastLocation() android.widget.TextView.getText() android.app.Activity.findViewById(<unknown>) <unknown>.DateHelper(java.lang.String, java.util.Calendar) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.os.Bundle.getStringArrayList(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() com.vinsol.expensetracker.Voice.onBackPressed() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.app.Activity.finish() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getLong(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) <unknown>.close() android.widget.TextView.setText(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) android.os.SystemClock.elapsedRealtime() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.widget.TextView.getText() android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) android.view.KeyEvent.getRepeatCount() <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) android.os.Environment.getExternalStorageState() <unknown>.getPlayBackTime() com.vinsol.expensetracker.Voice.setClickListeners() android.widget.Chronometer.setOnChronometerTickListener() android.os.CountDownTimer.cancel() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.length() <unknown>.getPlayBackTime() .OnChronometerTickListener() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.requestWindowFeature(int) <unknown>.open() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.widget.Toast.show() android.view.View.setVisibility(int) android.widget.Chronometer.start() android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) java.io.File.canRead() android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(<unknown>) java.lang.Long.parseLong(java.lang.String) java.lang.CharSequence.toString() <unknown>.close() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) java.lang.Double.toString() android.widget.Chronometer.stop() java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) android.view.View.getId() <unknown>.isRecording() java.util.Calendar.getInstance() android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long) android.app.Activity.finish() java.io.File.File(java.lang.String)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items\n\t\t// ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n\t\t\t\t//TODO \n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ******\n\t\t// ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText()\n\t\t\t\t.toString();\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t\t.getText().length() > 5) {\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock\n\t\t\t\t\t.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\")\n\t\t\t\t&& !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount\n\t\t\t\t\t.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText()\n\t\t\t\t\t.toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString()\n\t\t\t\t.equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(\n\t\t\t\t\t\t\ttext_voice_camera_date_bar_dateview.getText()\n\t\t\t\t\t\t\t\t\t.toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,\n\t\t\t\t\t\t\tmDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\n\t\t// ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);\n\t\tstartActivity(intentExpenseListing);\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-08T10:10:26Z", "hash_sni": "bc82b1face79b8ee82db185ef34a0b25948c0eef", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n \t\t\t\t\t} else {\n \t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n+\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n \t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n \t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n \t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper addFlags canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put saveEntry setBase setClickListeners setContentView setFirstDayOfWeek setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim"], "_version_": 1526731445234565120, "subject_t": ["Set First day of week to MONDAY"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// /////// \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// //// ******* Update database if user added additional info ******* \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// //// ****** If audio recording started then stop recording audio \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t\t//TODO  \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// ////// ******** Starts Recording each time activity starts ****** \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// ***** /////// \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// ********** ///////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["97fc4ed71d60227730b2b631d6d55295dac2dc91"], "id": "vinsol/expense-tracker\u0000bc82b1face79b8ee82db185ef34a0b25948c0eef\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#java.util.Calendar.setFirstDayOfWeek(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.widget.TextView.setText(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Intent.addFlags(int)#android.os.SystemClock.elapsedRealtime()#android.widget.TextView.getText()#<unknown>.DisplayTime()#android.view.KeyEvent.getRepeatCount()#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#<unknown>.isRecording()#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() java.util.Calendar.setFirstDayOfWeek(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.widget.TextView.setText(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.lang.Long.toString(long) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Intent.addFlags(int) android.os.SystemClock.elapsedRealtime() android.widget.TextView.getText() <unknown>.DisplayTime() android.view.KeyEvent.getRepeatCount() android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) <unknown>.isRecording() android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate RelativeLayout dateBarRelativeLayout;\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t}\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tif(mShowList.get(7) != null)\n\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\tif(mShowList.get(6) != null)\n\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\telse {\n\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t}\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id\n\t\t\t\t\t\t+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button\n\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(new DisplayTime()\n\t\t\t\t\t\t\t\t\t.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tnew FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG)\n\t\t\t\t\t.show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivity(editIntent);\n\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-08T10:10:26Z", "hash_sni": "bc82b1face79b8ee82db185ef34a0b25948c0eef", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" \t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n \t\t\t}\n \t\t\tCalendar mCalendar = Calendar.getInstance();\n+\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n \t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n \t\t\tif(mShowList.get(7) != null)\n \t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler ShowLocationHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getDrawable getExternalStorageState getId getInstance getIntent getPlayBackTime getResources getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putBoolean putExtra setBackgroundDrawable setContentView setFirstDayOfWeek setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack stop stopPlayBack toString updateUI"], "_version_": 1526731445267070976, "subject_t": ["Set First day of week to MONDAY"], "comments_t": ["\t\t// //// ****** If audio recording started then stop recording audio \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t// ***** /////// \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["c69e5515e248645142dd3f797f3664934cebb393"], "id": "vinsol/expense-tracker\u0000bc82b1face79b8ee82db185ef34a0b25948c0eef\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.widget.Toast.show()#<unknown>.isAudioPlaying()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.open()#android.content.Context.getString(<unknown>)#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.view.ContextThemeWrapper.getResources()#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#android.os.CountDownTimer.cancel()#android.app.Activity.findViewById(<unknown>)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setBackgroundDrawable(<unknown>)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.Toast.show()#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.res.Resources.getDrawable(<unknown>)#android.view.View.setVisibility(int)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.app.Activity.startActivity(android.content.Intent)#android.os.Bundle.putBoolean(java.lang.String, boolean)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#android.view.View.setVisibility(int)", "callsites_t": ["java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) android.widget.Toast.show() <unknown>.isAudioPlaying() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.open() android.content.Context.getString(<unknown>) <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.view.ContextThemeWrapper.getResources() android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() java.io.File.File(java.lang.String) android.widget.Toast.show() android.os.CountDownTimer.cancel() android.app.Activity.findViewById(<unknown>) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setBackgroundDrawable(<unknown>) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.app.Activity.findViewById(<unknown>) java.io.File.canRead() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.Toast.show() java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.content.res.Resources.getDrawable(<unknown>) android.view.View.setVisibility(int) <unknown>.getPlayBackTime() android.app.Activity.finish() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.app.Activity.startActivity(android.content.Intent) android.os.Bundle.putBoolean(java.lang.String, boolean) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) android.view.View.setVisibility(int)"]}, {"user_sni": "Edmund Lam", "repo_sni": "sllam/comingle", "imports_t": ["android.os.Handler comingle.comms.directory.NodeInfo comingle.actuation.ActuatorAction android.content.Context android.os.Bundle android.widget.ListView comingle.comms.listeners.DirectoryChangedListener comingle.runtime.CoMingleAndroidRuntime comingle.tuple.Tuple3 android.view.Menu java.util.ArrayList comingle.comms.message.Message android.widget.ListAdapter android.widget.TextView android.view.ViewManager comingle.comms.directory.BaseDirectory android.net.Uri android.media.Ringtone android.media.RingtoneManager mafia.Mafia java.util.Set android.widget.AdapterView android.os.CountDownTimer comingle.tuple.Tuple2 comingle.comms.listeners.LocalNodeInfoAvailableListener android.widget.ArrayAdapter comingle.android.directory.ui.dialogsequences.DirectoryChosenListener android.content.Intent java.util.Map java.util.List comingle.tuple.Unit comingle.misc.Misc java.util.HashMap android.view.MenuItem java.util.Comparator android.view.View comingle.mset.SimpMultiset android.app.Activity java.util.Iterator android.os.Vibrator"], "email_sni": "edmund@Sigma.Awe.Rig", "contents_t": ["package comingle.mafiapartygame;\n\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport comingle.tuple.Tuple3;\nimport mafia.Mafia;\nimport comingle.actuation.ActuatorAction;\nimport comingle.android.directory.ui.dialogsequences.DirectoryChosenListener;\nimport comingle.comms.directory.BaseDirectory;\nimport comingle.comms.directory.NodeInfo;\nimport comingle.comms.listeners.DirectoryChangedListener;\nimport comingle.comms.listeners.LocalNodeInfoAvailableListener;\nimport comingle.comms.message.Message;\nimport comingle.misc.Misc;\nimport comingle.mset.SimpMultiset;\nimport comingle.runtime.CoMingleAndroidRuntime;\nimport comingle.tuple.Tuple2;\nimport comingle.tuple.Unit;\n\nimport android.content.Context;\nimport android.os.Vibrator;\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.media.Ringtone;\nimport android.media.RingtoneManager;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.Handler;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewManager;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.ListAdapter;\nimport android.widget.ListView;\nimport android.widget.TextView;\n\npublic class MafiaActivity extends Activity {\n\n\tprivate static final String MPG_REQ_CODE = \"MAFIA_PARTY_GAME_COMINGLE\";\n\tprivate static final int MPG_ADMIN_PORT  = 8181;\n\tprivate static final int MPG_FACT_PORT   = 8819;\n\n\tprivate static final int LENGTH_OF_CYCLES_SECS = 30;\n\n\tprotected CoMingleAndroidRuntime<Mafia> mafiaRuntime;\n\n\tprotected Menu options_menu;\n\tprotected Handler handler = new Handler();\n\tBoolean Mafia=false; //value to indicate if mafia or not\n\tTextView cycle;\n\tint Night=-1; //value to control voting 1 means it's night 0 means it's day -1 means it's in transition so no one can vote\n\tboolean dead=false;\n\tContext context=this;\n\tActivity act=this;\n\tboolean started=false;//game started boolean for init button control\n\tArrayList<VoteSlot> votes; //arrayList of votes which serves as the base for the arrayAdapter.\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_mafia);\n\n\t\tmafiaRuntime = new CoMingleAndroidRuntime<Mafia>(this, Mafia.class, MPG_ADMIN_PORT, MPG_FACT_PORT, MPG_REQ_CODE);\n\n\t\tDirectoryChosenListener<Message> postDirChoiceListener = new DirectoryChosenListener<Message>() {\n\t\t\t@Override\n\t\t\tpublic void doDirectoryChosenAction(BaseDirectory<Message> directory) {\n\t\t\t\tsetupDirectory();\n\t\t\t}\n\t\t};\n\t\tmafiaRuntime.initStandardDirectorySetup(R.layout.peer_list_row, R.id.peer_name, R.id.peer_loc, R.id.peer_ip, postDirChoiceListener);\n\t\tcycle=(TextView)findViewById(R.id.Cycle);\n\t}\n\n\tprivate void setupDirectory() {\n\t\tfinal MafiaActivity self = this;\n\t\tmafiaRuntime.getDirectory().addLocalNodeInfoAvailableListener(new LocalNodeInfoAvailableListener() {\n\t\t\t@Override\n\t\t\tpublic void doLocalNodeInfoAvailableAction(NodeInfo local, final int role) {\n\t\t\t\tself.runOnUiThread(new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tself.startMafiaRewriteMachine();\n\t\t\t\t\t\tself.checkOffset();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tmafiaRuntime.getDirectory().addDirectoryChangedListener(new DirectoryChangedListener() {\n\t\t\t@Override\n\t\t\tpublic void doDirectoryChangedAction(final List<NodeInfo> new_peers,\n\t\t\t\t\t\t\t\t\t\t\t\t List<NodeInfo> added_nodes, final List<NodeInfo> dropped_nodes, int role) {\n\t\t\t\tself.runOnUiThread(new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tif(dropped_nodes.size() > 0) {\n\t\t\t\t\t\t\tmafiaRuntime.postAlert(\"Player Dropped\", \"A player has dropped out! Please restart the app!\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void startMafiaRewriteMachine() {\n\n\t\tmafiaRuntime.initRewriteMachine();\n\n\t\t// Actuator setup\n\n\t\tActuatorAction<Unit> notifyIsCitizen = new ActuatorAction<Unit>() {\n\t\t\t@Override\n\t\t\tpublic void doAction(Unit input) {\n\t\t\t\tmafiaRuntime.postAlert(\"You're a citizen!\", \"You are now a citizen, your objective is to find the Mafiosos before it's too late!\");\n\t\t\t\trunOnUiThread(new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tfinal ListView lv=(ListView)findViewById(R.id.Mafiavotes);\n\t\t\t\t\t\t((ViewManager)lv.getParent()).removeView(lv);\n\t\t\t\t\t\tfinal ListView lv1=(ListView)findViewById(R.id.CombinedVotes);\n\t\t\t\t\t\tMafia=false;\n\t\t\t\t\t\tMap<Integer,String> map=mafiaRuntime.getDirectory().getNames();\n\t\t\t\t\t\tIterator<Integer> keys=map.keySet().iterator();\n\t\t\t\t\t\tvotes=new ArrayList<VoteSlot>();\n\t\t\t\t\t\twhile (keys.hasNext()){\n\t\t\t\t\t\t\tint Key=keys.next();\n\t\t\t\t\t\t\tvotes.add(new VoteSlot(0,map.get(Key),Key));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tarrayAdapter ad=new arrayAdapter(act,R.layout.array_adapter,R.id.name,R.id.Votes,votes);\n\t\t\t\t\t\tlv1.setAdapter(ad);\n\t\t\t\t\t\tlv1.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void onItemClick(final AdapterView<?> adapterView, View view, final int i, long l) {\n\t\t\t\t\t\t\t\trunOnUiThread(new Runnable() {\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\t\tif (!dead) {\n\t\t\t\t\t\t\t\t\t\t\tif (Night == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\tint myIndex = getSlotIndexByLoc(mafiaRuntime.getLocation());\n\t\t\t\t\t\t\t\t\t\t\t\tif (votes.get(myIndex).votedForLoc != -1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvotes.get(getSlotIndexByLoc(votes.get(myIndex).votedForLoc)).numberOfVotes--;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tvotes.get(myIndex).votedForLoc = votes.get(i).location;\n\t\t\t\t\t\t\t\t\t\t\t\tvotes.get(i).numberOfVotes++;\n\t\t\t\t\t\t\t\t\t\t\t\tcitizenChangedVote(votes.get(i).location);\n\t\t\t\t\t\t\t\t\t\t\t\tarrayAdapter adapter = new arrayAdapter(act, R.layout.array_adapter, R.id.name, R.id.Votes, votes);\n\t\t\t\t\t\t\t\t\t\t\t\tlv1.setAdapter(adapter);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}\n\t\t};\n\t\tmafiaRuntime.getRewriteMachine().setNotifyIsCitizenActuator(notifyIsCitizen);\n\n\t\tActuatorAction<SimpMultiset<Integer>> notifyIsMafia = new ActuatorAction<SimpMultiset<Integer>>() {\n\t\t\t@Override\n\t\t\tpublic void doAction(SimpMultiset<Integer> mafiaLocs) {\n\t\t\t\tmafiaRuntime.postAlert(\"You're a Mafioso!\",\"You are now a member of the devious Mafia, your objective is to eliminate the citizens before they find you!\");\n\t\t\t\trunOnUiThread(new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tfinal ListView lv1=(ListView)findViewById(R.id.Mafiavotes);\n\t\t\t\t\t\tfinal ListView lv=(ListView)findViewById(R.id.CombinedVotes);\n\t\t\t\t\t\tMafia=true;\n\t\t\t\t\t\tMap<Integer,String> map=mafiaRuntime.getDirectory().getNames();\n\t\t\t\t\t\tIterator<Integer> keys=map.keySet().iterator();\n\t\t\t\t\t\tvotes=new ArrayList<VoteSlot>();\n\t\t\t\t\t\twhile (keys.hasNext()){\n\t\t\t\t\t\t\tint Key=keys.next();\n\t\t\t\t\t\t\tvotes.add(new VoteSlot(0,map.get(Key),Key));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarrayAdapter ad=new arrayAdapter(act,R.layout.array_adapter,R.id.name,R.id.Votes,votes);\n\t\t\t\t\t\tarrayAdapter2 ad2=new arrayAdapter2(act,R.layout.array_adapter,R.id.name,R.id.Votes,votes);\n\t\t\t\t\t\tlv.setAdapter(ad);\n\t\t\t\t\t\tlv1.setAdapter(ad2);\n\t\t\t\t\t\tlv1.setOnItemClickListener(new AdapterView.OnItemClickListener(){\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void onItemClick(AdapterView<?> adapterView, View view,final int i, long l) {\n\t\t\t\t\t\t\t\trunOnUiThread(new Runnable() {\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\t\tif (Night == 0) {\n\t\t\t\t\t\t\t\t\t\t\tint myIndex = getSlotIndexByLoc(mafiaRuntime.getLocation());\n\t\t\t\t\t\t\t\t\t\t\tif (!dead) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (votes.get(myIndex).votedForLoc2 != -1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tvotes.get(getSlotIndexByLoc(votes.get(myIndex).votedForLoc2)).votees.remove(votes.get(myIndex));\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tvotes.get(i).votees.add(votes.get(myIndex));\n\t\t\t\t\t\t\t\t\t\t\t\tvotes.get(myIndex).votedForLoc2 = votes.get(i).location;\n\t\t\t\t\t\t\t\t\t\t\t\tmafiaChangedVote(votes.get(i).location);\n\t\t\t\t\t\t\t\t\t\t\t\tarrayAdapter2 adapter = new arrayAdapter2(act, R.layout.array_adapter, R.id.name, R.id.Votes, votes);\n\t\t\t\t\t\t\t\t\t\t\t\tlv1.setAdapter(adapter);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlv.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void onItemClick(AdapterView<?> adapterView, View view,final int i, long l) {\n\t\t\t\t\t\t\t\trunOnUiThread(new Runnable() {\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\t\tint myIndex = getSlotIndexByLoc(mafiaRuntime.getLocation());\n\t\t\t\t\t\t\t\t\t\tif (!dead &&(Night==1||Night==0)) {\n\t\t\t\t\t\t\t\t\t\t\tif (votes.get(myIndex).votedForLoc != -1) {\n\t\t\t\t\t\t\t\t\t\t\t\tvotes.get(getSlotIndexByLoc(votes.get(myIndex).votedForLoc)).numberOfVotes--;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tvotes.get(myIndex).votedForLoc = votes.get(i).location;\n\t\t\t\t\t\t\t\t\t\t\tvotes.get(i).numberOfVotes++;\n\t\t\t\t\t\t\t\t\t\t\tif (Night == 1) {\n\t\t\t\t\t\t\t\t\t\t\t\tmafiaChangedVote(votes.get(i).location);\n\t\t\t\t\t\t\t\t\t\t\t} else if (Night == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\tcitizenChangedVote(votes.get(i).location);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tarrayAdapter adapter = new arrayAdapter(act, R.layout.array_adapter, R.id.name, R.id.Votes, votes);\n\t\t\t\t\t\t\t\t\t\t\tlv.setAdapter(adapter);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}\n\t\t};\n\t\tmafiaRuntime.getRewriteMachine().setNotifyIsMafiaActuator(notifyIsMafia);\n\n\t\tActuatorAction<Tuple2<Integer,Integer>> notifyMafiaChangedVote = new ActuatorAction<Tuple2<Integer,Integer>>() {\n\t\t\t@Override\n\t\t\tpublic void doAction(Tuple2<Integer, Integer> input) {\n\t\t\t\tint mafiaLoc = input.t1;\n\t\t\t\tint voteLoc = input.t2;\n\t\t\t\t// TODO: Notify that <mafiaLoc> has voted for <voteLoc> to be murdered.\n\t\t\t\tif (mafiaLoc != mafiaRuntime.getLocation()) {\n\t\t\t\t\tif (Mafia) {\n\t\t\t\t\t\tif (Night == 0) {\n\t\t\t\t\t\t\tfinal ListView lv1 = (ListView) findViewById(R.id.Mafiavotes);\n\t\t\t\t\t\t\tint mafiaIndex = getSlotIndexByLoc(mafiaLoc);\n\t\t\t\t\t\t\tint victimIndex = getSlotIndexByLoc(voteLoc);\n\t\t\t\t\t\t\tif (votes.get(mafiaIndex).votedForLoc2 != -1) {\n\t\t\t\t\t\t\t\tvotes.get(getSlotIndexByLoc(votes.get(mafiaIndex).votedForLoc2)).votees.remove(votes.get(mafiaIndex));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvotes.get(victimIndex).votees.add(votes.get(mafiaIndex));\n\t\t\t\t\t\t\tvotes.get(mafiaIndex).votedForLoc2 = votes.get(victimIndex).location;\n\t\t\t\t\t\t\tfinal arrayAdapter2 adapter = new arrayAdapter2(act, R.layout.array_adapter, R.id.name, R.id.Votes, votes);\n\t\t\t\t\t\t\tRunnable updateVotees = new Runnable() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\tlv1.setAdapter(adapter);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\trunOnUiThread(updateVotees);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfinal ListView lv = (ListView) findViewById(R.id.CombinedVotes);\n\t\t\t\t\t\tint mafiaIndex = getSlotIndexByLoc(mafiaLoc);\n\t\t\t\t\t\tint victimIndex = getSlotIndexByLoc(voteLoc);\n\t\t\t\t\t\tif (votes.get(mafiaIndex).votedForLoc != voteLoc) {\n\t\t\t\t\t\t\tif (votes.get(mafiaIndex).votedForLoc != -1) {\n\t\t\t\t\t\t\t\tint prevVictimIndex = getSlotIndexByLoc(votes.get(mafiaIndex).votedForLoc);\n\t\t\t\t\t\t\t\tvotes.get(prevVictimIndex).numberOfVotes--;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvotes.get(victimIndex).numberOfVotes++;\n\t\t\t\t\t\t\tvotes.get(mafiaIndex).votedForLoc = voteLoc;\n\t\t\t\t\t\t\tfinal arrayAdapter ad = new arrayAdapter(act, R.layout.array_adapter, R.id.name, R.id.Votes, votes);\n\t\t\t\t\t\t\tRunnable updateCounter = new Runnable() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\tlv.setAdapter(ad);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\trunOnUiThread(updateCounter);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (mafiaRuntime.isOwner()) {\n\t\t\t\t\t\tint mafiaIndex = getSlotIndexByLoc(mafiaLoc);\n\t\t\t\t\t\tint victimIndex = getSlotIndexByLoc(voteLoc);\n\t\t\t\t\t\tif (votes.get(mafiaIndex).votedForLoc != -1) {\n\t\t\t\t\t\t\tint prevVictimIndex = getSlotIndexByLoc(votes.get(mafiaIndex).votedForLoc);\n\t\t\t\t\t\t\tvotes.get(prevVictimIndex).numberOfVotes--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (votes.get(mafiaIndex).votedForLoc != voteLoc) {\n\t\t\t\t\t\t\tvotes.get(victimIndex).numberOfVotes++;\n\t\t\t\t\t\t\tvotes.get(mafiaIndex).votedForLoc = voteLoc;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tmafiaRuntime.getRewriteMachine().setNotifyMafiaChangedVoteActuator(notifyMafiaChangedVote);\n\n\t\tActuatorAction<Tuple2<Integer,Integer>> notifyCitizenChangedVote = new ActuatorAction<Tuple2<Integer,Integer>>() {\n\t\t\t@Override\n\t\t\tpublic void doAction(Tuple2<Integer, Integer> input) {\n\t\t\t\tint citizenLoc = input.t1;\n\t\t\t\tint voteLoc    = input.t2;\n\t\t\t\t// TODO: Notify that <citizenLoc> has voted for <voteLoc> to be executed.\n\t\t\t\tif(citizenLoc!=mafiaRuntime.getLocation()){\n\t\t\t\t\tfinal ListView lv = (ListView) findViewById(R.id.CombinedVotes);\n\t\t\t\t\tint citizenIndex=getSlotIndexByLoc(citizenLoc);\n\t\t\t\t\tint victimIndex=getSlotIndexByLoc(voteLoc);\n\t\t\t\t\tif(votes.get(citizenIndex).votedForLoc!=voteLoc) {\n\t\t\t\t\t\tif(votes.get(citizenIndex).votedForLoc!=-1){\n\t\t\t\t\t\t\tint prevVictimIndex=getSlotIndexByLoc(votes.get(citizenIndex).votedForLoc);\n\t\t\t\t\t\t\tvotes.get(prevVictimIndex).numberOfVotes--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvotes.get(victimIndex).numberOfVotes++;\n\t\t\t\t\t\tvotes.get(citizenIndex).votedForLoc = voteLoc;\n\t\t\t\t\t\tfinal arrayAdapter ad = new arrayAdapter(act, R.layout.array_adapter, R.id.name, R.id.Votes, votes);\n\t\t\t\t\t\tRunnable updateCounter = new Runnable() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\tlv.setAdapter(ad);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\trunOnUiThread(updateCounter);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tmafiaRuntime.getRewriteMachine().setNotifyCitizenChangedVoteActuator(notifyCitizenChangedVote);\n\n\t\tActuatorAction<Long> warnNight = new ActuatorAction<Long>() {\n\t\t\t@Override\n\t\t\tpublic void doAction(Long warnTime) {\n\t\t\t\t// warnTime: Time to warn of approaching night\n\t\t\t\t// TODO: Implement <nightTimeWarningEvent>: warning beep and count down UI display\n\t\t\t\tRunnable nightTimeWarningEvent = new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tNight=-1;\n\t\t\t\t\t\t\tUri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);\n\t\t\t\t\t\t\tRingtone r = RingtoneManager.getRingtone(getApplicationContext(), notification);\n\t\t\t\t\t\t\tr.play();\n\t\t\t\t\t\t\tnew CountDownTimer(10000, 1000) {\n\n\t\t\t\t\t\t\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\t\t\t\t\t\t\tcycle.setText(\"seconds remaining: \" + millisUntilFinished / 1000);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tpublic void onFinish() {\n\t\t\t\t\t\t\t\t\tcycle.setText(\"Night Time!\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}.start();\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tmafiaRuntime.scheduleAt(nightTimeWarningEvent, warnTime);\n\t\t\t}\n\t\t};\n\t\tmafiaRuntime.getRewriteMachine().setWarnNightActuator(warnNight);\n\n\t\tActuatorAction<Long> warnDay = new ActuatorAction<Long>() {\n\t\t\t@Override\n\t\t\tpublic void doAction(Long warnTime) {\n\t\t\t\t// warnTime: Time to warn of approaching night\n\t\t\t\t// TODO: Implement <dayTimeWarningEvent>: warning beep and count down UI display\n\t\t\t\tRunnable dayTimeWarningEvent =new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tNight=-1;\n\t\t\t\t\t\t\tUri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);\n\t\t\t\t\t\t\tRingtone r = RingtoneManager.getRingtone(getApplicationContext(), notification);\n\t\t\t\t\t\t\tr.play();\n\t\t\t\t\t\t\tnew CountDownTimer(10000, 1000) {\n\n\t\t\t\t\t\t\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\t\t\t\t\t\t\tcycle.setText(\"seconds remaining: \" + millisUntilFinished / 1000);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tpublic void onFinish() {\n\t\t\t\t\t\t\t\t\tcycle.setText(\"Day Time!\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}.start();\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tmafiaRuntime.scheduleAt(dayTimeWarningEvent, warnTime);\n\t\t\t}\n\t\t};\n\t\tmafiaRuntime.getRewriteMachine().setWarnDayActuator(warnDay);\n\n\t\tfinal Runnable resetVotes =new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {//a runnable to reset the votes of everyone ONLY RUN ON UI THREAD\n\t\t\t\tfor(int i=0;i<votes.size();i++){\n\t\t\t\t\tvotes.get(i).numberOfVotes=0;\n\t\t\t\t\tvotes.get(i).votedForLoc=-1;\n\t\t\t\t}\n\t\t\t\tarrayAdapter ad = new arrayAdapter(act, R.layout.array_adapter, R.id.name, R.id.Votes, votes);\n\t\t\t\tListView lv = (ListView) findViewById(R.id.CombinedVotes);\n\t\t\t\tlv.setAdapter(ad);\n\t\t\t}\n\t\t};\n\t\tActuatorAction<Long> signalNight = new ActuatorAction<Long>() {\n\t\t\t@Override\n\t\t\tpublic void doAction(Long signalTime) {\n\t\t\t\t// signalTime: Time to signal approaching night\n\t\t\t\t// TODO: Implement <nightTimeSignalEvent>: long vibrate\n\n\t\t\t\tRunnable nightTimeSignalEvent = new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tNight=1;\n\t\t\t\t\t\tVibrator v = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\n\t\t\t\t\t\trunOnUiThread(resetVotes);\n\t\t\t\t\t\tv.vibrate(2000);\n\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tmafiaRuntime.scheduleAt(nightTimeSignalEvent, signalTime);\n\t\t\t}\n\t\t};\n\t\tmafiaRuntime.getRewriteMachine().setSignalNightActuator(signalNight);\n\n\t\tActuatorAction<Long> signalDay = new ActuatorAction<Long>() {\n\t\t\t@Override\n\t\t\tpublic void doAction(Long signalTime) {\n\t\t\t\t// signalTime: Time to signal approaching day\n\t\t\t\t// TODO: Implement <dayTimeSignalEvent>: long vibrate\n\t\t\t\tRunnable dayTimeSignalEvent = new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tNight=0;\n\t\t\t\t\t\tVibrator v = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\n\t\t\t\t\t\trunOnUiThread(resetVotes);\n\t\t\t\t\t\tv.vibrate(2000);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tmafiaRuntime.scheduleAt(dayTimeSignalEvent, signalTime);\n\t\t\t}\n\t\t};\n\t\tmafiaRuntime.getRewriteMachine().setSignalDayActuator(signalDay);\n\n\t\tActuatorAction<Long> wakeMafia = new ActuatorAction<Long>() {\n\t\t\t@Override\n\t\t\tpublic void doAction(Long wakeTime) {\n\t\t\t\t// signalTime: Time to wake mafia\n\t\t\t\t// TODO: Implement <wakeMafiaEvent>: long vibrate + UI display\n\t\t\t\tRunnable wakeMafiaEvent = new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tVibrator v = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\n\t\t\t\t\t\tv.vibrate(2000);\n\t\t\t\t\t\tmafiaRuntime.postAlert(\"Wake up mafia\",\"Time to be devious\");\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tmafiaRuntime.scheduleAt(wakeMafiaEvent, wakeTime);\n\t\t\t}\n\t\t};\n\t\tmafiaRuntime.getRewriteMachine().setWakeMafiaActuator(wakeMafia);\n\n\t\tActuatorAction<Unit> notifyMarked= new ActuatorAction<Unit>() {\n\t\t\t@Override\n\t\t\tpublic void doAction(Unit unit) {\n\t\t\t\tRunnable mark = new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tmafiaRuntime.postAlert(\"You've been marked\",\"the mafiosos are coming for you!\\n They've marked you as a high value target on the first turn.\");\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tmafiaRuntime.scheduleAt(mark,0);\n\t\t\t}\n\t\t};\n\t\tmafiaRuntime.getRewriteMachine().setNotifyMarkedActuator(notifyMarked);\n\n\t\tActuatorAction<Tuple3<SimpMultiset<Integer>,Long,Boolean>> notifyCheckVotes = new ActuatorAction<Tuple3<SimpMultiset<Integer>,Long,Boolean>>() {\n\t\t\t@Override\n\t\t\tpublic void doAction(Tuple3<SimpMultiset<Integer>, Long, Boolean> input) {\n\t\t\t\tif(mafiaRuntime.isOwner()){\n\t\t\t\t\tfinal SimpMultiset<Integer> votingLocs = input.t1;\n\t\t\t\t\tlong voteCheckingTime = input.t2;\n\t\t\t\t\tfinal Boolean isFirst= input.t3;\n\t\t\t\t\tRunnable checkVoteEvent=new Runnable() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\tArrayList<Integer> votedFors=new ArrayList<Integer>();\n\t\t\t\t\t\t\tfor (int i = 0; i < votes.size(); i++) {\n\t\t\t\t\t\t\t\tif (votingLocs.contains(votes.get(i).location)) {\n\t\t\t\t\t\t\t\t\tif(votes.get(i).votedForLoc!=-1) {\n\t\t\t\t\t\t\t\t\t\tvotedFors.add(votes.get(i).votedForLoc);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tint currentMax = -1;\n\t\t\t\t\t\t\tVoteSlot currentVote = null;\n\t\t\t\t\t\t\tfor(int i=0;i<votedFors.size();i++){\n\t\t\t\t\t\t\t\tVoteSlot currentSlot=votes.get(getSlotIndexByLoc(votedFors.get(i)));\n\t\t\t\t\t\t\t\tif(currentSlot.numberOfVotes>=currentMax){\n\t\t\t\t\t\t\t\t\tcurrentVote=currentSlot;\n\t\t\t\t\t\t\t\t\tcurrentMax=currentSlot.numberOfVotes;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (isFirst) {\n\t\t\t\t\t\t\t\tmarkPlayer(currentVote.location);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tkillPlayer(currentVote.location);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tmafiaRuntime.scheduleAt(checkVoteEvent, voteCheckingTime);\n\t\t\t\t}\n\n\t\t\t}\n\t\t};\n\t\tmafiaRuntime.getRewriteMachine().setNotifyCheckVotesActuator(notifyCheckVotes);\n\t\tActuatorAction<Integer> notifyDeath = new ActuatorAction<Integer>() {\n\t\t\t@Override\n\t\t\tpublic void doAction(final Integer killedLoc) {\n\t\t\t\t// killedLoc Location that was nominated to be killed.\n\t\t\t\t//fix stupid\n\t\t\t\t// TODO: Notify this activity of the death of <killedLoc>\n\t\t\t\tRunnable notifyDeath = new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tif(mafiaRuntime.getLocation()==killedLoc){\n\t\t\t\t\t\t\tString Message=\"You've been murdered.\";\n\t\t\t\t\t\t\tdead=true;\n\t\t\t\t\t\t\tmafiaRuntime.postAlert(\"You are dead\",Message);\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tString nameOfKilled=\"\";\n\t\t\t\t\t\t\tfor(int i=0;i<votes.size();i++){ //find the name of the person killed for announcement.\n\t\t\t\t\t\t\t\tif(votes.get(i).location==killedLoc){\n\t\t\t\t\t\t\t\t\tnameOfKilled=votes.get(i).name;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmafiaRuntime.postAlert(nameOfKilled+\" has died!\",nameOfKilled+\" has been killed.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveFromDisplay(killedLoc);//removing the location from display\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\trunOnUiThread(notifyDeath);\n\t\t\t}\n\n\n\t\t};\n\t\tmafiaRuntime.getRewriteMachine().setNotifyDeathActuator(notifyDeath);\n\n\t\tActuatorAction<Unit> notifyMafiaWin = new ActuatorAction<Unit>() {\n\t\t\t@Override\n\t\t\tpublic void doAction(Unit input) {\n\t\t\t\tdead=true;\n\t\t\t\trunOnUiThread(resetVotes);\n\t\t\t\tmafiaRuntime.postAlert(\"Mafia wins!\",\"The Mafias have eliminated more Citizens than the number of Mafiosos in the game!\");\n\n\t\t\t}\n\t\t};\n\t\tmafiaRuntime.getRewriteMachine().setNotifyMafiaWinActuator(notifyMafiaWin);\n\n\t\tActuatorAction<Unit> notifyCitizensWin = new ActuatorAction<Unit>() {\n\t\t\t@Override\n\t\t\tpublic void doAction(Unit input) {\n\t\t\t\tdead=true;\n\t\t\t\trunOnUiThread(resetVotes);//resetting votes.\n\t\t\t\tmafiaRuntime.postAlert(\"Citizens win!\",\"The Mafias have been eliminated!\");\n\t\t\t}\n\t\t};\n\t\tmafiaRuntime.getRewriteMachine().setNotifyCitizensWinActuator(notifyCitizensWin);\n\n\t\tmafiaRuntime.startRewriteMachine();\n\n\t\tif(mafiaRuntime.isRewriteReady() && mafiaRuntime.isOwner()) {\n\t\t\tthis.setMenuItemVisibility(R.id.action_start, true);\n\t\t}\n\t\tif(mafiaRuntime.isRewriteReady()) {\n\t\t\tmafiaRuntime.getRewriteMachine().init();\n\t\t\tmafiaRuntime.initTimeServices(handler);\n\t\t}\n\n\t}\n\n\n\n\t//supplementary functions\n\tprivate void removeFromDisplay(Integer killedLoc) {//ONLY RUN ON UI THREAD\n\t\tint killedIndex=getSlotIndexByLoc(killedLoc);\n\t\tvotes.remove(killedIndex);\n\t\tarrayAdapter ad=new arrayAdapter(act,R.layout.array_adapter,R.id.name,R.id.Votes,votes);\n\t\tListView lv=(ListView)findViewById(R.id.CombinedVotes);\n\t\tlv.setAdapter(ad);\n\t}\n\tprivate int getSlotIndexByLoc(int Loc){ //Safe (will not return -1 unexpectedly)\n\t\tfor(int i=0;i<votes.size();i++){\n\t\t\tif(votes.get(i).location==Loc){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t// Trigger methods\n\t// Initialize the game. Only group owner / moderator should be allowed to run this.\n\tprotected void initializeGame() {\n\t\tSimpMultiset<Integer> allPlayerLocs = Misc.to_mset( mafiaRuntime.getDirectory().getLocations() ) ;\n\t\tint duration = LENGTH_OF_CYCLES_SECS;\n\t\tmafiaRuntime.getRewriteMachine().addInitialize(allPlayerLocs, duration);\n\t}\n\n\t// Start the game. Only group owner / moderator should be allowed to run this.\n\tprotected void startGame() {\n\t\tif(mafiaRuntime.isOwner()) {\n\t\t\tmafiaRuntime.getRewriteMachine().addStart();\n\t\t}\n\t}\n\n\tprotected void markPlayer(int chosenLoc){\n\t\tif(mafiaRuntime.isOwner()) {\n\t\t\tmafiaRuntime.getRewriteMachine().addMark(chosenLoc);\n\t\t}\n\t}\n\t// Kill a player. Only group owner / moderator should be allowed to run this.\n\tprotected void killPlayer(int chosenLoc) {\n\t\tif(mafiaRuntime.isOwner()) {\n\t\t\tmafiaRuntime.getRewriteMachine().addKill(chosenLoc);\n\t\t}\n\t}\n\n\t// This activity chosens <chosenLoc> to be murdered. Only a mafia should be allowed to run this.\n\tprotected void mafiaChangedVote(int chosenLoc) {\n\t\t\tmafiaRuntime.getRewriteMachine().addMafiaChangedVote(chosenLoc);\n\t}\n\n\t// This activity chosens <chosenLoc> to be executed. Only a citizen should be allowed to run this.\n\tprotected void citizenChangedVote(int chosenLoc) {\n\t\tmafiaRuntime.getRewriteMachine().addCitizenChangedVote(chosenLoc);\n\t}\n\n\t@Override\n\tpublic boolean onCreateOptionsMenu(Menu menu) {\n\t\t// Inflate the menu; this adds items to the action bar if it is present.\n\t\tgetMenuInflater().inflate(R.menu.mafia, menu);\n\n\t\toptions_menu = menu;\n\t\treturn true;\n\t}\n\n\tpublic void setMenuItemVisibility(int id, boolean visible) {\n\t\tif (options_menu == null) {\n\t\t\tString msg = \"Option menu is null\";\n\t\t\treturn;\n\t\t}\n\t\tMenuItem item = options_menu.findItem(id);\n\t\tif (item != null) {\n\t\t\titem.setVisible(visible);\n\t\t} else {\n\t\t\tString msg = \"Failed to find item \" + id;\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onOptionsItemSelected(MenuItem item) {\n\t\t// Handle action bar item clicks here. The action bar will\n\t\t// automatically handle clicks on the Home/Up button, so long\n\t\t// as you specify a parent activity in AndroidManifest.xml.\n\t\tint id = item.getItemId();\n\t\tswitch (id) {\n\t\t\tcase R.id.action_settings: return true;\n\t\t\tcase R.id.action_start:\n\t\t\t\tif(!started) {\n\t\t\t\t\tif (mafiaRuntime.isOwner()) {\n\t\t\t\t\t\tinitializeGame();\n\t\t\t\t\t\tstartGame();\n\t\t\t\t\t\tstarted=true;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t}\n\t\treturn super.onOptionsItemSelected(item);\n\t}\n\n\tprotected void checkOffset() {\n\t\t(new Thread() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tmafiaRuntime.postToast( String.format(\"Offset: %s\", mafiaRuntime.getLocalTimeOffset()) );\n\t\t\t}\n\t\t}).start();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tmafiaRuntime.resumeNetworkNotifications();\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\t\tsuper.onPause();\n\t\tmafiaRuntime.pauseNetworkNotifications();\n\t}\n\n\t@Override\n\tprotected void onDestroy() {\n\t\tsuper.onDestroy();\n\t\tmafiaRuntime.close();\n\t}\n\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t\tmafiaRuntime.handleOnActivityResults(requestCode);\n\t}\n\n}\n"], "body_t": ["<empty>"], "date_tdt": "2015-07-06T11:32:11Z", "hash_sni": "3f28e15bfdff7857a10d30cb88457558c071aa08", "name_sni": "android_apps/CoMingleMafia/app/src/main/java/comingle/mafiapartygame/MafiaActivity.java", "patch_t": ["+package comingle.mafiapartygame;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import comingle.tuple.Tuple3;\n+import mafia.Mafia;\n+import comingle.actuation.ActuatorAction;\n+import comingle.android.directory.ui.dialogsequences.DirectoryChosenListener;\n+import comingle.comms.directory.BaseDirectory;\n+import comingle.comms.directory.NodeInfo;\n+import comingle.comms.listeners.DirectoryChangedListener;\n+import comingle.comms.listeners.LocalNodeInfoAvailableListener;\n+import comingle.comms.message.Message;\n+import comingle.misc.Misc;\n+import comingle.mset.SimpMultiset;\n+import comingle.runtime.CoMingleAndroidRuntime;\n+import comingle.tuple.Tuple2;\n+import comingle.tuple.Unit;\n+\n+import android.content.Context;\n+import android.os.Vibrator;\n+import android.app.Activity;\n+import android.content.Intent;\n+import android.media.Ringtone;\n+import android.media.RingtoneManager;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.os.CountDownTimer;\n+import android.os.Handler;\n+import android.view.Menu;\n+import android.view.MenuItem;\n+import android.view.View;\n+import android.view.ViewManager;\n+import android.widget.AdapterView;\n+import android.widget.ArrayAdapter;\n+import android.widget.ListAdapter;\n+import android.widget.ListView;\n+import android.widget.TextView;\n+\n+public class MafiaActivity extends Activity {\n+\n+\tprivate static final String MPG_REQ_CODE = \"MAFIA_PARTY_GAME_COMINGLE\";\n+\tprivate static final int MPG_ADMIN_PORT  = 8181;\n+\tprivate static final int MPG_FACT_PORT   = 8819;\n+\n+\tprivate static final int LENGTH_OF_CYCLES_SECS = 30;\n+\n+\tprotected CoMingleAndroidRuntime<Mafia> mafiaRuntime;\n+\n+\tprotected Menu options_menu;\n+\tprotected Handler handler = new Handler();\n+\tBoolean Mafia=false; //value to indicate if mafia or not\n+\tTextView cycle;\n+\tint Night=-1; //value to control voting 1 means it's night 0 means it's day -1 means it's in transition so no one can vote\n+\tboolean dead=false;\n+\tContext context=this;\n+\tActivity act=this;\n+\tboolean started=false;//game started boolean for init button control\n+\tArrayList<VoteSlot> votes; //arrayList of votes which serves as the base for the arrayAdapter.\n+\t@Override\n+\tprotected void onCreate(Bundle savedInstanceState) {\n+\t\tsuper.onCreate(savedInstanceState);\n+\t\tsetContentView(R.layout.activity_mafia);\n+\n+\t\tmafiaRuntime = new CoMingleAndroidRuntime<Mafia>(this, Mafia.class, MPG_ADMIN_PORT, MPG_FACT_PORT, MPG_REQ_CODE);\n+\n+\t\tDirectoryChosenListener<Message> postDirChoiceListener = new DirectoryChosenListener<Message>() {\n+\t\t\t@Override\n+\t\t\tpublic void doDirectoryChosenAction(BaseDirectory<Message> directory) {\n+\t\t\t\tsetupDirectory();\n+\t\t\t}\n+\t\t};\n+\t\tmafiaRuntime.initStandardDirectorySetup(R.layout.peer_list_row, R.id.peer_name, R.id.peer_loc, R.id.peer_ip, postDirChoiceListener);\n+\t\tcycle=(TextView)findViewById(R.id.Cycle);\n+\t}\n+\n+\tprivate void setupDirectory() {\n+\t\tfinal MafiaActivity self = this;\n+\t\tmafiaRuntime.getDirectory().addLocalNodeInfoAvailableListener(new LocalNodeInfoAvailableListener() {\n+\t\t\t@Override\n+\t\t\tpublic void doLocalNodeInfoAvailableAction(NodeInfo local, final int role) {\n+\t\t\t\tself.runOnUiThread(new Runnable() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\tself.startMafiaRewriteMachine();\n+\t\t\t\t\t\tself.checkOffset();\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t}\n+\t\t});\n+\t\tmafiaRuntime.getDirectory().addDirectoryChangedListener(new DirectoryChangedListener() {\n+\t\t\t@Override\n+\t\t\tpublic void doDirectoryChangedAction(final List<NodeInfo> new_peers,\n+\t\t\t\t\t\t\t\t\t\t\t\t List<NodeInfo> added_nodes, final List<NodeInfo> dropped_nodes, int role) {\n+\t\t\t\tself.runOnUiThread(new Runnable() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\tif(dropped_nodes.size() > 0) {\n+\t\t\t\t\t\t\tmafiaRuntime.postAlert(\"Player Dropped\", \"A player has dropped out! Please restart the app!\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tprivate void startMafiaRewriteMachine() {\n+\n+\t\tmafiaRuntime.initRewriteMachine();\n+\n+\t\t// Actuator setup\n+\n+\t\tActuatorAction<Unit> notifyIsCitizen = new ActuatorAction<Unit>() {\n+\t\t\t@Override\n+\t\t\tpublic void doAction(Unit input) {\n+\t\t\t\tmafiaRuntime.postAlert(\"You're a citizen!\", \"You are now a citizen, your objective is to find the Mafiosos before it's too late!\");\n+\t\t\t\trunOnUiThread(new Runnable() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\tfinal ListView lv=(ListView)findViewById(R.id.Mafiavotes);\n+\t\t\t\t\t\t((ViewManager)lv.getParent()).removeView(lv);\n+\t\t\t\t\t\tfinal ListView lv1=(ListView)findViewById(R.id.CombinedVotes);\n+\t\t\t\t\t\tMafia=false;\n+\t\t\t\t\t\tMap<Integer,String> map=mafiaRuntime.getDirectory().getNames();\n+\t\t\t\t\t\tIterator<Integer> keys=map.keySet().iterator();\n+\t\t\t\t\t\tvotes=new ArrayList<VoteSlot>();\n+\t\t\t\t\t\twhile (keys.hasNext()){\n+\t\t\t\t\t\t\tint Key=keys.next();\n+\t\t\t\t\t\t\tvotes.add(new VoteSlot(0,map.get(Key),Key));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tarrayAdapter ad=new arrayAdapter(act,R.layout.array_adapter,R.id.name,R.id.Votes,votes);\n+\t\t\t\t\t\tlv1.setAdapter(ad);\n+\t\t\t\t\t\tlv1.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic void onItemClick(final AdapterView<?> adapterView, View view, final int i, long l) {\n+\t\t\t\t\t\t\t\trunOnUiThread(new Runnable() {\n+\t\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\t\t\t\t\tif (!dead) {\n+\t\t\t\t\t\t\t\t\t\t\tif (Night == 0) {\n+\t\t\t\t\t\t\t\t\t\t\t\tint myIndex = getSlotIndexByLoc(mafiaRuntime.getLocation());\n+\t\t\t\t\t\t\t\t\t\t\t\tif (votes.get(myIndex).votedForLoc != -1) {\n+\t\t\t\t\t\t\t\t\t\t\t\t\tvotes.get(getSlotIndexByLoc(votes.get(myIndex).votedForLoc)).numberOfVotes--;\n+\t\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\t\tvotes.get(myIndex).votedForLoc = votes.get(i).location;\n+\t\t\t\t\t\t\t\t\t\t\t\tvotes.get(i).numberOfVotes++;\n+\t\t\t\t\t\t\t\t\t\t\t\tcitizenChangedVote(votes.get(i).location);\n+\t\t\t\t\t\t\t\t\t\t\t\tarrayAdapter adapter = new arrayAdapter(act, R.layout.array_adapter, R.id.name, R.id.Votes, votes);\n+\t\t\t\t\t\t\t\t\t\t\t\tlv1.setAdapter(adapter);\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\n+\t\t\t}\n+\t\t};\n+\t\tmafiaRuntime.getRewriteMachine().setNotifyIsCitizenActuator(notifyIsCitizen);\n+\n+\t\tActuatorAction<SimpMultiset<Integer>> notifyIsMafia = new ActuatorAction<SimpMultiset<Integer>>() {\n+\t\t\t@Override\n+\t\t\tpublic void doAction(SimpMultiset<Integer> mafiaLocs) {\n+\t\t\t\tmafiaRuntime.postAlert(\"You're a Mafioso!\",\"You are now a member of the devious Mafia, your objective is to eliminate the citizens before they find you!\");\n+\t\t\t\trunOnUiThread(new Runnable() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\tfinal ListView lv1=(ListView)findViewById(R.id.Mafiavotes);\n+\t\t\t\t\t\tfinal ListView lv=(ListView)findViewById(R.id.CombinedVotes);\n+\t\t\t\t\t\tMafia=true;\n+\t\t\t\t\t\tMap<Integer,String> map=mafiaRuntime.getDirectory().getNames();\n+\t\t\t\t\t\tIterator<Integer> keys=map.keySet().iterator();\n+\t\t\t\t\t\tvotes=new ArrayList<VoteSlot>();\n+\t\t\t\t\t\twhile (keys.hasNext()){\n+\t\t\t\t\t\t\tint Key=keys.next();\n+\t\t\t\t\t\t\tvotes.add(new VoteSlot(0,map.get(Key),Key));\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tarrayAdapter ad=new arrayAdapter(act,R.layout.array_adapter,R.id.name,R.id.Votes,votes);\n+\t\t\t\t\t\tarrayAdapter2 ad2=new arrayAdapter2(act,R.layout.array_adapter,R.id.name,R.id.Votes,votes);\n+\t\t\t\t\t\tlv.setAdapter(ad);\n+\t\t\t\t\t\tlv1.setAdapter(ad2);\n+\t\t\t\t\t\tlv1.setOnItemClickListener(new AdapterView.OnItemClickListener(){\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic void onItemClick(AdapterView<?> adapterView, View view,final int i, long l) {\n+\t\t\t\t\t\t\t\trunOnUiThread(new Runnable() {\n+\t\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\t\t\t\t\tif (Night == 0) {\n+\t\t\t\t\t\t\t\t\t\t\tint myIndex = getSlotIndexByLoc(mafiaRuntime.getLocation());\n+\t\t\t\t\t\t\t\t\t\t\tif (!dead) {\n+\t\t\t\t\t\t\t\t\t\t\t\tif (votes.get(myIndex).votedForLoc2 != -1) {\n+\t\t\t\t\t\t\t\t\t\t\t\t\tvotes.get(getSlotIndexByLoc(votes.get(myIndex).votedForLoc2)).votees.remove(votes.get(myIndex));\n+\t\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\t\tvotes.get(i).votees.add(votes.get(myIndex));\n+\t\t\t\t\t\t\t\t\t\t\t\tvotes.get(myIndex).votedForLoc2 = votes.get(i).location;\n+\t\t\t\t\t\t\t\t\t\t\t\tmafiaChangedVote(votes.get(i).location);\n+\t\t\t\t\t\t\t\t\t\t\t\tarrayAdapter2 adapter = new arrayAdapter2(act, R.layout.array_adapter, R.id.name, R.id.Votes, votes);\n+\t\t\t\t\t\t\t\t\t\t\t\tlv1.setAdapter(adapter);\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\tlv.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic void onItemClick(AdapterView<?> adapterView, View view,final int i, long l) {\n+\t\t\t\t\t\t\t\trunOnUiThread(new Runnable() {\n+\t\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\t\t\t\t\tint myIndex = getSlotIndexByLoc(mafiaRuntime.getLocation());\n+\t\t\t\t\t\t\t\t\t\tif (!dead &&(Night==1||Night==0)) {\n+\t\t\t\t\t\t\t\t\t\t\tif (votes.get(myIndex).votedForLoc != -1) {\n+\t\t\t\t\t\t\t\t\t\t\t\tvotes.get(getSlotIndexByLoc(votes.get(myIndex).votedForLoc)).numberOfVotes--;\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\tvotes.get(myIndex).votedForLoc = votes.get(i).location;\n+\t\t\t\t\t\t\t\t\t\t\tvotes.get(i).numberOfVotes++;\n+\t\t\t\t\t\t\t\t\t\t\tif (Night == 1) {\n+\t\t\t\t\t\t\t\t\t\t\t\tmafiaChangedVote(votes.get(i).location);\n+\t\t\t\t\t\t\t\t\t\t\t} else if (Night == 0) {\n+\t\t\t\t\t\t\t\t\t\t\t\tcitizenChangedVote(votes.get(i).location);\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t\tarrayAdapter adapter = new arrayAdapter(act, R.layout.array_adapter, R.id.name, R.id.Votes, votes);\n+\t\t\t\t\t\t\t\t\t\t\tlv.setAdapter(adapter);\n+\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\n+\t\t\t}\n+\t\t};\n+\t\tmafiaRuntime.getRewriteMachine().setNotifyIsMafiaActuator(notifyIsMafia);\n+\n+\t\tActuatorAction<Tuple2<Integer,Integer>> notifyMafiaChangedVote = new ActuatorAction<Tuple2<Integer,Integer>>() {\n+\t\t\t@Override\n+\t\t\tpublic void doAction(Tuple2<Integer, Integer> input) {\n+\t\t\t\tint mafiaLoc = input.t1;\n+\t\t\t\tint voteLoc = input.t2;\n+\t\t\t\t// TODO: Notify that <mafiaLoc> has voted for <voteLoc> to be murdered.\n+\t\t\t\tif (mafiaLoc != mafiaRuntime.getLocation()) {\n+\t\t\t\t\tif (Mafia) {\n+\t\t\t\t\t\tif (Night == 0) {\n+\t\t\t\t\t\t\tfinal ListView lv1 = (ListView) findViewById(R.id.Mafiavotes);\n+\t\t\t\t\t\t\tint mafiaIndex = getSlotIndexByLoc(mafiaLoc);\n+\t\t\t\t\t\t\tint victimIndex = getSlotIndexByLoc(voteLoc);\n+\t\t\t\t\t\t\tif (votes.get(mafiaIndex).votedForLoc2 != -1) {\n+\t\t\t\t\t\t\t\tvotes.get(getSlotIndexByLoc(votes.get(mafiaIndex).votedForLoc2)).votees.remove(votes.get(mafiaIndex));\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tvotes.get(victimIndex).votees.add(votes.get(mafiaIndex));\n+\t\t\t\t\t\t\tvotes.get(mafiaIndex).votedForLoc2 = votes.get(victimIndex).location;\n+\t\t\t\t\t\t\tfinal arrayAdapter2 adapter = new arrayAdapter2(act, R.layout.array_adapter, R.id.name, R.id.Votes, votes);\n+\t\t\t\t\t\t\tRunnable updateVotees = new Runnable() {\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\t\t\t\tlv1.setAdapter(adapter);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t\trunOnUiThread(updateVotees);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tfinal ListView lv = (ListView) findViewById(R.id.CombinedVotes);\n+\t\t\t\t\t\tint mafiaIndex = getSlotIndexByLoc(mafiaLoc);\n+\t\t\t\t\t\tint victimIndex = getSlotIndexByLoc(voteLoc);\n+\t\t\t\t\t\tif (votes.get(mafiaIndex).votedForLoc != voteLoc) {\n+\t\t\t\t\t\t\tif (votes.get(mafiaIndex).votedForLoc != -1) {\n+\t\t\t\t\t\t\t\tint prevVictimIndex = getSlotIndexByLoc(votes.get(mafiaIndex).votedForLoc);\n+\t\t\t\t\t\t\t\tvotes.get(prevVictimIndex).numberOfVotes--;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tvotes.get(victimIndex).numberOfVotes++;\n+\t\t\t\t\t\t\tvotes.get(mafiaIndex).votedForLoc = voteLoc;\n+\t\t\t\t\t\t\tfinal arrayAdapter ad = new arrayAdapter(act, R.layout.array_adapter, R.id.name, R.id.Votes, votes);\n+\t\t\t\t\t\t\tRunnable updateCounter = new Runnable() {\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\t\t\t\tlv.setAdapter(ad);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t\trunOnUiThread(updateCounter);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (mafiaRuntime.isOwner()) {\n+\t\t\t\t\t\tint mafiaIndex = getSlotIndexByLoc(mafiaLoc);\n+\t\t\t\t\t\tint victimIndex = getSlotIndexByLoc(voteLoc);\n+\t\t\t\t\t\tif (votes.get(mafiaIndex).votedForLoc != -1) {\n+\t\t\t\t\t\t\tint prevVictimIndex = getSlotIndexByLoc(votes.get(mafiaIndex).votedForLoc);\n+\t\t\t\t\t\t\tvotes.get(prevVictimIndex).numberOfVotes--;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (votes.get(mafiaIndex).votedForLoc != voteLoc) {\n+\t\t\t\t\t\t\tvotes.get(victimIndex).numberOfVotes++;\n+\t\t\t\t\t\t\tvotes.get(mafiaIndex).votedForLoc = voteLoc;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t};\n+\t\tmafiaRuntime.getRewriteMachine().setNotifyMafiaChangedVoteActuator(notifyMafiaChangedVote);\n+\n+\t\tActuatorAction<Tuple2<Integer,Integer>> notifyCitizenChangedVote = new ActuatorAction<Tuple2<Integer,Integer>>() {\n+\t\t\t@Override\n+\t\t\tpublic void doAction(Tuple2<Integer, Integer> input) {\n+\t\t\t\tint citizenLoc = input.t1;\n+\t\t\t\tint voteLoc    = input.t2;\n+\t\t\t\t// TODO: Notify that <citizenLoc> has voted for <voteLoc> to be executed.\n+\t\t\t\tif(citizenLoc!=mafiaRuntime.getLocation()){\n+\t\t\t\t\tfinal ListView lv = (ListView) findViewById(R.id.CombinedVotes);\n+\t\t\t\t\tint citizenIndex=getSlotIndexByLoc(citizenLoc);\n+\t\t\t\t\tint victimIndex=getSlotIndexByLoc(voteLoc);\n+\t\t\t\t\tif(votes.get(citizenIndex).votedForLoc!=voteLoc) {\n+\t\t\t\t\t\tif(votes.get(citizenIndex).votedForLoc!=-1){\n+\t\t\t\t\t\t\tint prevVictimIndex=getSlotIndexByLoc(votes.get(citizenIndex).votedForLoc);\n+\t\t\t\t\t\t\tvotes.get(prevVictimIndex).numberOfVotes--;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tvotes.get(victimIndex).numberOfVotes++;\n+\t\t\t\t\t\tvotes.get(citizenIndex).votedForLoc = voteLoc;\n+\t\t\t\t\t\tfinal arrayAdapter ad = new arrayAdapter(act, R.layout.array_adapter, R.id.name, R.id.Votes, votes);\n+\t\t\t\t\t\tRunnable updateCounter = new Runnable() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\t\t\tlv.setAdapter(ad);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t};\n+\t\t\t\t\t\trunOnUiThread(updateCounter);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t};\n+\t\tmafiaRuntime.getRewriteMachine().setNotifyCitizenChangedVoteActuator(notifyCitizenChangedVote);\n+\n+\t\tActuatorAction<Long> warnNight = new ActuatorAction<Long>() {\n+\t\t\t@Override\n+\t\t\tpublic void doAction(Long warnTime) {\n+\t\t\t\t// warnTime: Time to warn of approaching night\n+\t\t\t\t// TODO: Implement <nightTimeWarningEvent>: warning beep and count down UI display\n+\t\t\t\tRunnable nightTimeWarningEvent = new Runnable() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tNight=-1;\n+\t\t\t\t\t\t\tUri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);\n+\t\t\t\t\t\t\tRingtone r = RingtoneManager.getRingtone(getApplicationContext(), notification);\n+\t\t\t\t\t\t\tr.play();\n+\t\t\t\t\t\t\tnew CountDownTimer(10000, 1000) {\n+\n+\t\t\t\t\t\t\t\tpublic void onTick(long millisUntilFinished) {\n+\t\t\t\t\t\t\t\t\tcycle.setText(\"seconds remaining: \" + millisUntilFinished / 1000);\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tpublic void onFinish() {\n+\t\t\t\t\t\t\t\t\tcycle.setText(\"Night Time!\");\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}.start();\n+\t\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\t\te.printStackTrace();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t};\n+\t\t\t\tmafiaRuntime.scheduleAt(nightTimeWarningEvent, warnTime);\n+\t\t\t}\n+\t\t};\n+\t\tmafiaRuntime.getRewriteMachine().setWarnNightActuator(warnNight);\n+\n+\t\tActuatorAction<Long> warnDay = new ActuatorAction<Long>() {\n+\t\t\t@Override\n+\t\t\tpublic void doAction(Long warnTime) {\n+\t\t\t\t// warnTime: Time to warn of approaching night\n+\t\t\t\t// TODO: Implement <dayTimeWarningEvent>: warning beep and count down UI display\n+\t\t\t\tRunnable dayTimeWarningEvent =new Runnable() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tNight=-1;\n+\t\t\t\t\t\t\tUri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);\n+\t\t\t\t\t\t\tRingtone r = RingtoneManager.getRingtone(getApplicationContext(), notification);\n+\t\t\t\t\t\t\tr.play();\n+\t\t\t\t\t\t\tnew CountDownTimer(10000, 1000) {\n+\n+\t\t\t\t\t\t\t\tpublic void onTick(long millisUntilFinished) {\n+\t\t\t\t\t\t\t\t\tcycle.setText(\"seconds remaining: \" + millisUntilFinished / 1000);\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tpublic void onFinish() {\n+\t\t\t\t\t\t\t\t\tcycle.setText(\"Day Time!\");\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}.start();\n+\t\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\t\te.printStackTrace();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t};\n+\t\t\t\tmafiaRuntime.scheduleAt(dayTimeWarningEvent, warnTime);\n+\t\t\t}\n+\t\t};\n+\t\tmafiaRuntime.getRewriteMachine().setWarnDayActuator(warnDay);\n+\n+\t\tfinal Runnable resetVotes =new Runnable() {\n+\t\t\t@Override\n+\t\t\tpublic void run() {//a runnable to reset the votes of everyone ONLY RUN ON UI THREAD\n+\t\t\t\tfor(int i=0;i<votes.size();i++){\n+\t\t\t\t\tvotes.get(i).numberOfVotes=0;\n+\t\t\t\t\tvotes.get(i).votedForLoc=-1;\n+\t\t\t\t}\n+\t\t\t\tarrayAdapter ad = new arrayAdapter(act, R.layout.array_adapter, R.id.name, R.id.Votes, votes);\n+\t\t\t\tListView lv = (ListView) findViewById(R.id.CombinedVotes);\n+\t\t\t\tlv.setAdapter(ad);\n+\t\t\t}\n+\t\t};\n+\t\tActuatorAction<Long> signalNight = new ActuatorAction<Long>() {\n+\t\t\t@Override\n+\t\t\tpublic void doAction(Long signalTime) {\n+\t\t\t\t// signalTime: Time to signal approaching night\n+\t\t\t\t// TODO: Implement <nightTimeSignalEvent>: long vibrate\n+\n+\t\t\t\tRunnable nightTimeSignalEvent = new Runnable() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\tNight=1;\n+\t\t\t\t\t\tVibrator v = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\n+\t\t\t\t\t\trunOnUiThread(resetVotes);\n+\t\t\t\t\t\tv.vibrate(2000);\n+\n+\t\t\t\t\t}\n+\t\t\t\t};\n+\t\t\t\tmafiaRuntime.scheduleAt(nightTimeSignalEvent, signalTime);\n+\t\t\t}\n+\t\t};\n+\t\tmafiaRuntime.getRewriteMachine().setSignalNightActuator(signalNight);\n+\n+\t\tActuatorAction<Long> signalDay = new ActuatorAction<Long>() {\n+\t\t\t@Override\n+\t\t\tpublic void doAction(Long signalTime) {\n+\t\t\t\t// signalTime: Time to signal approaching day\n+\t\t\t\t// TODO: Implement <dayTimeSignalEvent>: long vibrate\n+\t\t\t\tRunnable dayTimeSignalEvent = new Runnable() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\tNight=0;\n+\t\t\t\t\t\tVibrator v = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\n+\t\t\t\t\t\trunOnUiThread(resetVotes);\n+\t\t\t\t\t\tv.vibrate(2000);\n+\t\t\t\t\t}\n+\t\t\t\t};\n+\t\t\t\tmafiaRuntime.scheduleAt(dayTimeSignalEvent, signalTime);\n+\t\t\t}\n+\t\t};\n+\t\tmafiaRuntime.getRewriteMachine().setSignalDayActuator(signalDay);\n+\n+\t\tActuatorAction<Long> wakeMafia = new ActuatorAction<Long>() {\n+\t\t\t@Override\n+\t\t\tpublic void doAction(Long wakeTime) {\n+\t\t\t\t// signalTime: Time to wake mafia\n+\t\t\t\t// TODO: Implement <wakeMafiaEvent>: long vibrate + UI display\n+\t\t\t\tRunnable wakeMafiaEvent = new Runnable() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\tVibrator v = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\n+\t\t\t\t\t\tv.vibrate(2000);\n+\t\t\t\t\t\tmafiaRuntime.postAlert(\"Wake up mafia\",\"Time to be devious\");\n+\t\t\t\t\t}\n+\t\t\t\t};\n+\t\t\t\tmafiaRuntime.scheduleAt(wakeMafiaEvent, wakeTime);\n+\t\t\t}\n+\t\t};\n+\t\tmafiaRuntime.getRewriteMachine().setWakeMafiaActuator(wakeMafia);\n+\n+\t\tActuatorAction<Unit> notifyMarked= new ActuatorAction<Unit>() {\n+\t\t\t@Override\n+\t\t\tpublic void doAction(Unit unit) {\n+\t\t\t\tRunnable mark = new Runnable() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\tmafiaRuntime.postAlert(\"You've been marked\",\"the mafiosos are coming for you!\\n They've marked you as a high value target on the first turn.\");\n+\t\t\t\t\t}\n+\t\t\t\t};\n+\t\t\t\tmafiaRuntime.scheduleAt(mark,0);\n+\t\t\t}\n+\t\t};\n+\t\tmafiaRuntime.getRewriteMachine().setNotifyMarkedActuator(notifyMarked);\n+\n+\t\tActuatorAction<Tuple3<SimpMultiset<Integer>,Long,Boolean>> notifyCheckVotes = new ActuatorAction<Tuple3<SimpMultiset<Integer>,Long,Boolean>>() {\n+\t\t\t@Override\n+\t\t\tpublic void doAction(Tuple3<SimpMultiset<Integer>, Long, Boolean> input) {\n+\t\t\t\tif(mafiaRuntime.isOwner()){\n+\t\t\t\t\tfinal SimpMultiset<Integer> votingLocs = input.t1;\n+\t\t\t\t\tlong voteCheckingTime = input.t2;\n+\t\t\t\t\tfinal Boolean isFirst= input.t3;\n+\t\t\t\t\tRunnable checkVoteEvent=new Runnable() {\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\t\tArrayList<Integer> votedFors=new ArrayList<Integer>();\n+\t\t\t\t\t\t\tfor (int i = 0; i < votes.size(); i++) {\n+\t\t\t\t\t\t\t\tif (votingLocs.contains(votes.get(i).location)) {\n+\t\t\t\t\t\t\t\t\tif(votes.get(i).votedForLoc!=-1) {\n+\t\t\t\t\t\t\t\t\t\tvotedFors.add(votes.get(i).votedForLoc);\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tint currentMax = -1;\n+\t\t\t\t\t\t\tVoteSlot currentVote = null;\n+\t\t\t\t\t\t\tfor(int i=0;i<votedFors.size();i++){\n+\t\t\t\t\t\t\t\tVoteSlot currentSlot=votes.get(getSlotIndexByLoc(votedFors.get(i)));\n+\t\t\t\t\t\t\t\tif(currentSlot.numberOfVotes>=currentMax){\n+\t\t\t\t\t\t\t\t\tcurrentVote=currentSlot;\n+\t\t\t\t\t\t\t\t\tcurrentMax=currentSlot.numberOfVotes;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (isFirst) {\n+\t\t\t\t\t\t\t\tmarkPlayer(currentVote.location);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tkillPlayer(currentVote.location);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t};\n+\t\t\t\t\tmafiaRuntime.scheduleAt(checkVoteEvent, voteCheckingTime);\n+\t\t\t\t}\n+\n+\t\t\t}\n+\t\t};\n+\t\tmafiaRuntime.getRewriteMachine().setNotifyCheckVotesActuator(notifyCheckVotes);\n+\t\tActuatorAction<Integer> notifyDeath = new ActuatorAction<Integer>() {\n+\t\t\t@Override\n+\t\t\tpublic void doAction(final Integer killedLoc) {\n+\t\t\t\t// killedLoc Location that was nominated to be killed.\n+\t\t\t\t//fix stupid\n+\t\t\t\t// TODO: Notify this activity of the death of <killedLoc>\n+\t\t\t\tRunnable notifyDeath = new Runnable() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\tif(mafiaRuntime.getLocation()==killedLoc){\n+\t\t\t\t\t\t\tString Message=\"You've been murdered.\";\n+\t\t\t\t\t\t\tdead=true;\n+\t\t\t\t\t\t\tmafiaRuntime.postAlert(\"You are dead\",Message);\n+\t\t\t\t\t\t}else {\n+\t\t\t\t\t\t\tString nameOfKilled=\"\";\n+\t\t\t\t\t\t\tfor(int i=0;i<votes.size();i++){ //find the name of the person killed for announcement.\n+\t\t\t\t\t\t\t\tif(votes.get(i).location==killedLoc){\n+\t\t\t\t\t\t\t\t\tnameOfKilled=votes.get(i).name;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tmafiaRuntime.postAlert(nameOfKilled+\" has died!\",nameOfKilled+\" has been killed.\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tremoveFromDisplay(killedLoc);//removing the location from display\n+\t\t\t\t\t}\n+\t\t\t\t};\n+\t\t\t\trunOnUiThread(notifyDeath);\n+\t\t\t}\n+\n+\n+\t\t};\n+\t\tmafiaRuntime.getRewriteMachine().setNotifyDeathActuator(notifyDeath);\n+\n+\t\tActuatorAction<Unit> notifyMafiaWin = new ActuatorAction<Unit>() {\n+\t\t\t@Override\n+\t\t\tpublic void doAction(Unit input) {\n+\t\t\t\tdead=true;\n+\t\t\t\trunOnUiThread(resetVotes);\n+\t\t\t\tmafiaRuntime.postAlert(\"Mafia wins!\",\"The Mafias have eliminated more Citizens than the number of Mafiosos in the game!\");\n+\n+\t\t\t}\n+\t\t};\n+\t\tmafiaRuntime.getRewriteMachine().setNotifyMafiaWinActuator(notifyMafiaWin);\n+\n+\t\tActuatorAction<Unit> notifyCitizensWin = new ActuatorAction<Unit>() {\n+\t\t\t@Override\n+\t\t\tpublic void doAction(Unit input) {\n+\t\t\t\tdead=true;\n+\t\t\t\trunOnUiThread(resetVotes);//resetting votes.\n+\t\t\t\tmafiaRuntime.postAlert(\"Citizens win!\",\"The Mafias have been eliminated!\");\n+\t\t\t}\n+\t\t};\n+\t\tmafiaRuntime.getRewriteMachine().setNotifyCitizensWinActuator(notifyCitizensWin);\n+\n+\t\tmafiaRuntime.startRewriteMachine();\n+\n+\t\tif(mafiaRuntime.isRewriteReady() && mafiaRuntime.isOwner()) {\n+\t\t\tthis.setMenuItemVisibility(R.id.action_start, true);\n+\t\t}\n+\t\tif(mafiaRuntime.isRewriteReady()) {\n+\t\t\tmafiaRuntime.getRewriteMachine().init();\n+\t\t\tmafiaRuntime.initTimeServices(handler);\n+\t\t}\n+\n+\t}\n+\n+\n+\n+\t//supplementary functions\n+\tprivate void removeFromDisplay(Integer killedLoc) {//ONLY RUN ON UI THREAD\n+\t\tint killedIndex=getSlotIndexByLoc(killedLoc);\n+\t\tvotes.remove(killedIndex);\n+\t\tarrayAdapter ad=new arrayAdapter(act,R.layout.array_adapter,R.id.name,R.id.Votes,votes);\n+\t\tListView lv=(ListView)findViewById(R.id.CombinedVotes);\n+\t\tlv.setAdapter(ad);\n+\t}\n+\tprivate int getSlotIndexByLoc(int Loc){ //Safe (will not return -1 unexpectedly)\n+\t\tfor(int i=0;i<votes.size();i++){\n+\t\t\tif(votes.get(i).location==Loc){\n+\t\t\t\treturn i;\n+\t\t\t}\n+\t\t}\n+\t\treturn -1;\n+\t}\n+\t// Trigger methods\n+\t// Initialize the game. Only group owner / moderator should be allowed to run this.\n+\tprotected void initializeGame() {\n+\t\tSimpMultiset<Integer> allPlayerLocs = Misc.to_mset( mafiaRuntime.getDirectory().getLocations() ) ;\n+\t\tint duration = LENGTH_OF_CYCLES_SECS;\n+\t\tmafiaRuntime.getRewriteMachine().addInitialize(allPlayerLocs, duration);\n+\t}\n+\n+\t// Start the game. Only group owner / moderator should be allowed to run this.\n+\tprotected void startGame() {\n+\t\tif(mafiaRuntime.isOwner()) {\n+\t\t\tmafiaRuntime.getRewriteMachine().addStart();\n+\t\t}\n+\t}\n+\n+\tprotected void markPlayer(int chosenLoc){\n+\t\tif(mafiaRuntime.isOwner()) {\n+\t\t\tmafiaRuntime.getRewriteMachine().addMark(chosenLoc);\n+\t\t}\n+\t}\n+\t// Kill a player. Only group owner / moderator should be allowed to run this.\n+\tprotected void killPlayer(int chosenLoc) {\n+\t\tif(mafiaRuntime.isOwner()) {\n+\t\t\tmafiaRuntime.getRewriteMachine().addKill(chosenLoc);\n+\t\t}\n+\t}\n+\n+\t// This activity chosens <chosenLoc> to be murdered. Only a mafia should be allowed to run this.\n+\tprotected void mafiaChangedVote(int chosenLoc) {\n+\t\t\tmafiaRuntime.getRewriteMachine().addMafiaChangedVote(chosenLoc);\n+\t}\n+\n+\t// This activity chosens <chosenLoc> to be executed. Only a citizen should be allowed to run this.\n+\tprotected void citizenChangedVote(int chosenLoc) {\n+\t\tmafiaRuntime.getRewriteMachine().addCitizenChangedVote(chosenLoc);\n+\t}\n+\n+\t@Override\n+\tpublic boolean onCreateOptionsMenu(Menu menu) {\n+\t\t// Inflate the menu; this adds items to the action bar if it is present.\n+\t\tgetMenuInflater().inflate(R.menu.mafia, menu);\n+\n+\t\toptions_menu = menu;\n+\t\treturn true;\n+\t}\n+\n+\tpublic void setMenuItemVisibility(int id, boolean visible) {\n+\t\tif (options_menu == null) {\n+\t\t\tString msg = \"Option menu is null\";\n+\t\t\treturn;\n+\t\t}\n+\t\tMenuItem item = options_menu.findItem(id);\n+\t\tif (item != null) {\n+\t\t\titem.setVisible(visible);\n+\t\t} else {\n+\t\t\tString msg = \"Failed to find item \" + id;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean onOptionsItemSelected(MenuItem item) {\n+\t\t// Handle action bar item clicks here. The action bar will\n+\t\t// automatically handle clicks on the Home/Up button, so long\n+\t\t// as you specify a parent activity in AndroidManifest.xml.\n+\t\tint id = item.getItemId();\n+\t\tswitch (id) {\n+\t\t\tcase R.id.action_settings: return true;\n+\t\t\tcase R.id.action_start:\n+\t\t\t\tif(!started) {\n+\t\t\t\t\tif (mafiaRuntime.isOwner()) {\n+\t\t\t\t\t\tinitializeGame();\n+\t\t\t\t\t\tstartGame();\n+\t\t\t\t\t\tstarted=true;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t}\n+\t\treturn super.onOptionsItemSelected(item);\n+\t}\n+\n+\tprotected void checkOffset() {\n+\t\t(new Thread() {\n+\t\t\t@Override\n+\t\t\tpublic void run() {\n+\t\t\t\tmafiaRuntime.postToast( String.format(\"Offset: %s\", mafiaRuntime.getLocalTimeOffset()) );\n+\t\t\t}\n+\t\t}).start();\n+\t}\n+\n+\t@Override\n+\tprotected void onResume() {\n+\t\tsuper.onResume();\n+\t\tmafiaRuntime.resumeNetworkNotifications();\n+\t}\n+\n+\t@Override\n+\tprotected void onPause() {\n+\t\tsuper.onPause();\n+\t\tmafiaRuntime.pauseNetworkNotifications();\n+\t}\n+\n+\t@Override\n+\tprotected void onDestroy() {\n+\t\tsuper.onDestroy();\n+\t\tmafiaRuntime.close();\n+\t}\n+\n+\t@Override\n+\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n+\t\tmafiaRuntime.handleOnActivityResults(requestCode);\n+\t}\n+\n+}"], "score": 1.0, "methods_t": ["ActuatorAction, Integer ActuatorAction, Long ActuatorAction, SimpMultiset, Integer ActuatorAction, Tuple2, IntegerInteger ActuatorAction, Tuple3, SimpMultiset, IntegerLongBoolean ActuatorAction, Unit AdapterView.OnItemClickListener ArrayList, Integer ArrayList, VoteSlot CoMingleAndroidRuntime, Mafia CountDownTimer DirectoryChangedListener DirectoryChosenListener, Message Handler LocalNodeInfoAvailableListener Runnable Thread VoteSlot add addCitizenChangedVote addDirectoryChangedListener addInitialize addKill addLocalNodeInfoAvailableListener addMafiaChangedVote addMark addStart arrayAdapter arrayAdapter2 checkOffset citizenChangedVote close contains findItem findViewById format get getApplicationContext getDefaultUri getDirectory getItemId getLocalTimeOffset getLocation getLocations getMenuInflater getNames getParent getRewriteMachine getRingtone getSlotIndexByLoc getSystemService handleOnActivityResults hasNext inflate init initRewriteMachine initStandardDirectorySetup initTimeServices initializeGame isOwner isRewriteReady iterator keySet killPlayer mafiaChangedVote markPlayer next pauseNetworkNotifications play postAlert postToast printStackTrace remove removeFromDisplay removeView resumeNetworkNotifications runOnUiThread scheduleAt setAdapter setContentView setMenuItemVisibility setNotifyCheckVotesActuator setNotifyCitizenChangedVoteActuator setNotifyCitizensWinActuator setNotifyDeathActuator setNotifyIsCitizenActuator setNotifyIsMafiaActuator setNotifyMafiaChangedVoteActuator setNotifyMafiaWinActuator setNotifyMarkedActuator setOnItemClickListener setSignalDayActuator setSignalNightActuator setText setVisible setWakeMafiaActuator setWarnDayActuator setWarnNightActuator setupDirectory size start startGame startMafiaRewriteMachine startRewriteMachine to_mset vibrate"], "_version_": 1526731454174724096, "subject_t": ["Added Mafia android studio source and precompiled dev apk"], "comments_t": ["\t\t\t\t// killedLoc Location that was nominated to be killed. \t\t\t\t// TODO: Implement <nightTimeSignalEvent>: long vibrate \t\t\t\t\t\tremoveFromDisplay(killedLoc);//removing the location from display \tBoolean Mafia=false; //value to indicate if mafia or not \t//supplementary functions \t\t\t\t// warnTime: Time to warn of approaching night \t\t\t\t// signalTime: Time to wake mafia \t\t// Actuator setup \tprivate void removeFromDisplay(Integer killedLoc) {//ONLY RUN ON UI THREAD \t\t// Inflate the menu; this adds items to the action bar if it is present. \t\t\t\t// signalTime: Time to signal approaching night \t// Kill a player. Only group owner / moderator should be allowed to run this. \t\t\t\t//fix stupid \t\t\t\t// signalTime: Time to signal approaching day \tArrayList<VoteSlot> votes; //arrayList of votes which serves as the base for the arrayAdapter. \t\t// as you specify a parent activity in AndroidManifest.xml. \t\t\t\t// TODO: Implement <dayTimeWarningEvent>: warning beep and count down UI display \t// This activity chosens <chosenLoc> to be executed. Only a citizen should be allowed to run this. \t\t\t\t// TODO: Notify that <citizenLoc> has voted for <voteLoc> to be executed. \t\t\t\t// TODO: Implement <wakeMafiaEvent>: long vibrate + UI display \t\t\tpublic void run() {//a runnable to reset the votes of everyone ONLY RUN ON UI THREAD \t// Start the game. Only group owner / moderator should be allowed to run this. \t// Initialize the game. Only group owner / moderator should be allowed to run this. \t\t// Handle action bar item clicks here. The action bar will \t// Trigger methods \t\t\t\t// TODO: Notify this activity of the death of <killedLoc> \t\t\t\trunOnUiThread(resetVotes);//resetting votes. \t// This activity chosens <chosenLoc> to be murdered. Only a mafia should be allowed to run this. \tprivate int getSlotIndexByLoc(int Loc){ //Safe (will not return -1 unexpectedly) \t\t\t\t\t\t\tfor(int i=0;i<votes.size();i++){ //find the name of the person killed for announcement. \t\t\t\t// TODO: Implement <nightTimeWarningEvent>: warning beep and count down UI display \t\t\t\t// TODO: Notify that <mafiaLoc> has voted for <voteLoc> to be murdered. \tint Night=-1; //value to control voting 1 means it's night 0 means it's day -1 means it's in transition so no one can vote \tboolean started=false;//game started boolean for init button control \t\t\t\t// TODO: Implement <dayTimeSignalEvent>: long vibrate \t\t// automatically handle clicks on the Home/Up button, so long"], "callsites_t": ["<unknown>.ActuatorAction, Tuple2, IntegerInteger() android.app.Activity.runOnUiThread(java.lang.Runnable) android.os.Vibrator.vibrate(int) android.content.ContextWrapper.getApplicationContext() android.app.Activity.findViewById(<unknown>) android.app.Activity.getMenuInflater() <unknown>.getLocation() comingle.mafiapartygame.MafiaActivity.markPlayer(<unknown>) <unknown>.getRewriteMachine() <unknown>.scheduleAt(java.lang.Runnable, long) <unknown>.isRewriteReady() comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(java.lang.Integer) comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(<unknown>) <unknown>.addStart() <unknown>.postAlert(java.lang.String, java.lang.String) comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(int) <unknown>.get(int) comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(<unknown>) comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(<unknown>) android.view.MenuItem.getItemId() android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter) <unknown>.getDirectory() android.app.Activity.runOnUiThread(java.lang.Runnable) <unknown>.CoMingleAndroidRuntime, Mafia(comingle.mafiapartygame.MafiaActivity, java.lang.Class, int, int, java.lang.String) <unknown>.size() <unknown>.setNotifyCitizenChangedVoteActuator(comingle.mafiapartygame.ActuatorAction) java.lang.Object.arrayAdapter2(android.app.Activity, <unknown>, <unknown>, <unknown>, java.util.ArrayList<comingle.mafiapartygame.VoteSlot>) <unknown>.get(int) <unknown>.isOwner() <unknown>.pauseNetworkNotifications() comingle.mafiapartygame.MafiaActivity.mafiaChangedVote(<unknown>) <unknown>.size() java.util.ArrayList<java.lang.Integer>.ArrayList, Integer() <unknown>.contains(<unknown>) .AdapterView.OnItemClickListener() <unknown>.ActuatorAction, Integer() <unknown>.setNotifyDeathActuator(comingle.mafiapartygame.ActuatorAction) android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter2) android.app.Activity.findViewById(<unknown>) java.util.Set.iterator() <unknown>.postAlert(java.lang.String, java.lang.String) <unknown>.getRewriteMachine() java.lang.Thread.start() java.lang.Object.arrayAdapter(android.app.Activity, <unknown>, <unknown>, <unknown>, java.util.ArrayList<comingle.mafiapartygame.VoteSlot>) android.os.CountDownTimer.start() <unknown>.init() android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter2) <unknown>.get(<unknown>) <unknown>.ActuatorAction, Unit() <unknown>.setNotifyMafiaWinActuator(comingle.mafiapartygame.ActuatorAction) android.widget.TextView.setText(java.lang.String) android.os.CountDownTimer.start() java.lang.Object.arrayAdapter(android.app.Activity, <unknown>, <unknown>, <unknown>, java.util.ArrayList<comingle.mafiapartygame.VoteSlot>) <unknown>.addDirectoryChangedListener() java.lang.Object.arrayAdapter(android.app.Activity, <unknown>, <unknown>, <unknown>, java.util.ArrayList<comingle.mafiapartygame.VoteSlot>) <unknown>.postAlert(java.lang.String, java.lang.String) android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter) <unknown>.ActuatorAction, SimpMultiset, Integer() android.app.Activity.runOnUiThread() <unknown>.getLocation() java.util.ArrayList<java.lang.Integer>.add(<unknown>) android.widget.AdapterView<android.widget.ListAdapter>.setOnItemClickListener() <unknown>.getRewriteMachine() <unknown>.scheduleAt(java.lang.Runnable, java.lang.Long) <unknown>.DirectoryChosenListener, Message() <unknown>.get(int) android.app.Activity.runOnUiThread() android.os.Handler.Handler() <unknown>.scheduleAt(java.lang.Runnable, java.lang.Long) <unknown>.setSignalDayActuator(comingle.mafiapartygame.ActuatorAction) <unknown>.isOwner() android.widget.AdapterView<android.widget.ListAdapter>.setOnItemClickListener() java.util.ArrayList<comingle.mafiapartygame.VoteSlot>.ArrayList, VoteSlot() java.lang.Object.VoteSlot(int, <unknown>, int) <unknown>.addKill(int) <unknown>.postAlert(java.lang.String, java.lang.String) comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(<unknown>) <unknown>.DirectoryChangedListener() android.app.Activity.runOnUiThread() <unknown>.setWarnDayActuator(comingle.mafiapartygame.ActuatorAction) <unknown>.postAlert(java.lang.String, java.lang.String) <unknown>.scheduleAt(java.lang.Runnable, java.lang.Long) comingle.mafiapartygame.MafiaActivity.removeFromDisplay(java.lang.Integer) android.app.Activity.setContentView(<unknown>) java.util.ArrayList<java.lang.Integer>.size() comingle.mafiapartygame.MafiaActivity.checkOffset() <unknown>.scheduleAt(java.lang.Runnable, java.lang.Long) android.app.Activity.runOnUiThread(java.lang.Runnable) <unknown>.remove(<unknown>) comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(java.lang.Integer) android.app.Activity.findViewById(<unknown>) <unknown>.postAlert(java.lang.String, java.lang.String) <unknown>.ActuatorAction, Long() java.util.Iterator<java.lang.Integer>.next() android.widget.TextView.setText(java.lang.String) <unknown>.initRewriteMachine() <unknown>.setNotifyIsMafiaActuator(comingle.mafiapartygame.ActuatorAction) <unknown>.ActuatorAction, Tuple3, SimpMultiset, IntegerLongBoolean() android.app.Activity.findViewById(<unknown>) android.widget.AdapterView<android.widget.ListAdapter>.setOnItemClickListener() <unknown>.get(int) <unknown>.add(<unknown>) <unknown>.setNotifyIsCitizenActuator(comingle.mafiapartygame.ActuatorAction) <unknown>.LocalNodeInfoAvailableListener() <unknown>.to_mset(<unknown>) <unknown>.getLocations() java.util.ArrayList<java.lang.Integer>.get(int) comingle.mafiapartygame.MafiaActivity.startMafiaRewriteMachine() <unknown>.add(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.initTimeServices(android.os.Handler) <unknown>.setNotifyCheckVotesActuator(comingle.mafiapartygame.ActuatorAction) java.lang.Object.arrayAdapter(android.app.Activity, <unknown>, <unknown>, <unknown>, java.util.ArrayList<comingle.mafiapartygame.VoteSlot>) comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(<unknown>) comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(<unknown>) android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter2) <unknown>.add(comingle.mafiapartygame.VoteSlot) android.app.Activity.findViewById(<unknown>) <unknown>.getRewriteMachine() <unknown>.isOwner() <unknown>.get(<unknown>) <unknown>.size() .Runnable() java.util.Map<java.lang.Integer,java.lang.String>.keySet() .Runnable() java.lang.Throwable.printStackTrace() <unknown>.setNotifyCitizensWinActuator(comingle.mafiapartygame.ActuatorAction) <unknown>.get(int) <unknown>.get(int) <unknown>.addCitizenChangedVote(int) <unknown>.addLocalNodeInfoAvailableListener() android.app.Activity.findViewById(<unknown>) android.media.RingtoneManager.getRingtone(android.content.Context, android.net.Uri) java.util.Iterator<java.lang.Integer>.hasNext() <unknown>.setNotifyMarkedActuator(comingle.mafiapartygame.ActuatorAction) android.view.ViewManager.removeView(android.widget.ListView) android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter) <unknown>.postAlert(java.lang.String, java.lang.String) android.view.View.getParent() android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter) <unknown>.isOwner() comingle.mafiapartygame.MafiaActivity.setMenuItemVisibility(<unknown>, boolean) comingle.mafiapartygame.MafiaActivity.setupDirectory() <unknown>.setSignalNightActuator(comingle.mafiapartygame.ActuatorAction) java.lang.Object.arrayAdapter(android.app.Activity, <unknown>, <unknown>, <unknown>, java.util.ArrayList<comingle.mafiapartygame.VoteSlot>) comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(int) android.widget.TextView.setText(java.lang.String) <unknown>.isOwner() <unknown>.resumeNetworkNotifications() <unknown>.getDirectory() <unknown>.isOwner() <unknown>.setNotifyMafiaChangedVoteActuator(comingle.mafiapartygame.ActuatorAction) android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter) android.app.Activity.runOnUiThread(java.lang.Runnable) android.app.Activity.runOnUiThread() <unknown>.getRewriteMachine() <unknown>.setWarnNightActuator(comingle.mafiapartygame.ActuatorAction) .Runnable() <unknown>.getDirectory() .Runnable() <unknown>.remove(<unknown>) comingle.mafiapartygame.MafiaActivity.startGame() <unknown>.addInitialize(comingle.mafiapartygame.SimpMultiset, int) <unknown>.get(int) <unknown>.get(<unknown>) android.view.MenuItem.setVisible(boolean) android.app.Activity.runOnUiThread() .CountDownTimer(int, int) android.app.Activity.runOnUiThread() <unknown>.get(int) android.view.Menu.findItem(int) java.lang.Object.arrayAdapter2(android.app.Activity, <unknown>, <unknown>, <unknown>, java.util.ArrayList<comingle.mafiapartygame.VoteSlot>) <unknown>.scheduleAt(java.lang.Runnable, java.lang.Long) <unknown>.setWakeMafiaActuator(comingle.mafiapartygame.ActuatorAction) <unknown>.close() <unknown>.getNames() <unknown>.remove(int) <unknown>.get(int) .Runnable() android.app.Activity.runOnUiThread() <unknown>.getLocalTimeOffset() <unknown>.postToast(<unknown>) java.util.Map<java.lang.Integer,java.lang.String>.get(int) <unknown>.getRewriteMachine() <unknown>.scheduleAt(java.lang.Runnable, int) <unknown>.addMafiaChangedVote(int) android.content.Context.getSystemService(java.lang.String) <unknown>.get(<unknown>) <unknown>.initStandardDirectorySetup(<unknown>, <unknown>, <unknown>, <unknown>, comingle.mafiapartygame.DirectoryChosenListener) java.lang.Object.arrayAdapter2(android.app.Activity, <unknown>, <unknown>, <unknown>, java.util.ArrayList<comingle.mafiapartygame.VoteSlot>) <unknown>.size() comingle.mafiapartygame.MafiaActivity.killPlayer(<unknown>) android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter) comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(int) android.media.Ringtone.play() android.app.Activity.runOnUiThread(java.lang.Runnable) <unknown>.postAlert(java.lang.String, java.lang.String) android.media.RingtoneManager.getDefaultUri(int) java.lang.String.format(java.lang.String, <unknown>) <unknown>.handleOnActivityResults(int) android.view.MenuInflater.inflate(<unknown>, android.view.Menu) .Thread() <unknown>.getLocation() <unknown>.postAlert(java.lang.String, java.lang.String) <unknown>.addMark(int) <unknown>.getRewriteMachine() comingle.mafiapartygame.MafiaActivity.initializeGame() <unknown>.startRewriteMachine() comingle.mafiapartygame.MafiaActivity.citizenChangedVote(<unknown>)"], "id": "sllam/comingle\u00003f28e15bfdff7857a10d30cb88457558c071aa08\u0000android_apps/CoMingleMafia/app/src/main/java/comingle/mafiapartygame/MafiaActivity.java", "callsites_cs": "<unknown>.ActuatorAction, Tuple2, IntegerInteger()#android.app.Activity.runOnUiThread(java.lang.Runnable)#android.os.Vibrator.vibrate(int)#android.content.ContextWrapper.getApplicationContext()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.getMenuInflater()#<unknown>.getLocation()#comingle.mafiapartygame.MafiaActivity.markPlayer(<unknown>)#<unknown>.getRewriteMachine()#<unknown>.scheduleAt(java.lang.Runnable, long)#<unknown>.isRewriteReady()#comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(java.lang.Integer)#comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(<unknown>)#<unknown>.addStart()#<unknown>.postAlert(java.lang.String, java.lang.String)#comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(int)#<unknown>.get(int)#comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(<unknown>)#comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(<unknown>)#android.view.MenuItem.getItemId()#android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter)#<unknown>.getDirectory()#android.app.Activity.runOnUiThread(java.lang.Runnable)#<unknown>.CoMingleAndroidRuntime, Mafia(comingle.mafiapartygame.MafiaActivity, java.lang.Class, int, int, java.lang.String)#<unknown>.size()#<unknown>.setNotifyCitizenChangedVoteActuator(comingle.mafiapartygame.ActuatorAction)#java.lang.Object.arrayAdapter2(android.app.Activity, <unknown>, <unknown>, <unknown>, java.util.ArrayList<comingle.mafiapartygame.VoteSlot>)#<unknown>.get(int)#<unknown>.isOwner()#<unknown>.pauseNetworkNotifications()#comingle.mafiapartygame.MafiaActivity.mafiaChangedVote(<unknown>)#<unknown>.size()#java.util.ArrayList<java.lang.Integer>.ArrayList, Integer()#<unknown>.contains(<unknown>)#.AdapterView.OnItemClickListener()#<unknown>.ActuatorAction, Integer()#<unknown>.setNotifyDeathActuator(comingle.mafiapartygame.ActuatorAction)#android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter2)#android.app.Activity.findViewById(<unknown>)#java.util.Set.iterator()#<unknown>.postAlert(java.lang.String, java.lang.String)#<unknown>.getRewriteMachine()#java.lang.Thread.start()#java.lang.Object.arrayAdapter(android.app.Activity, <unknown>, <unknown>, <unknown>, java.util.ArrayList<comingle.mafiapartygame.VoteSlot>)#android.os.CountDownTimer.start()#<unknown>.init()#android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter2)#<unknown>.get(<unknown>)#<unknown>.ActuatorAction, Unit()#<unknown>.setNotifyMafiaWinActuator(comingle.mafiapartygame.ActuatorAction)#android.widget.TextView.setText(java.lang.String)#android.os.CountDownTimer.start()#java.lang.Object.arrayAdapter(android.app.Activity, <unknown>, <unknown>, <unknown>, java.util.ArrayList<comingle.mafiapartygame.VoteSlot>)#<unknown>.addDirectoryChangedListener()#java.lang.Object.arrayAdapter(android.app.Activity, <unknown>, <unknown>, <unknown>, java.util.ArrayList<comingle.mafiapartygame.VoteSlot>)#<unknown>.postAlert(java.lang.String, java.lang.String)#android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter)#<unknown>.ActuatorAction, SimpMultiset, Integer()#android.app.Activity.runOnUiThread()#<unknown>.getLocation()#java.util.ArrayList<java.lang.Integer>.add(<unknown>)#android.widget.AdapterView<android.widget.ListAdapter>.setOnItemClickListener()#<unknown>.getRewriteMachine()#<unknown>.scheduleAt(java.lang.Runnable, java.lang.Long)#<unknown>.DirectoryChosenListener, Message()#<unknown>.get(int)#android.app.Activity.runOnUiThread()#android.os.Handler.Handler()#<unknown>.scheduleAt(java.lang.Runnable, java.lang.Long)#<unknown>.setSignalDayActuator(comingle.mafiapartygame.ActuatorAction)#<unknown>.isOwner()#android.widget.AdapterView<android.widget.ListAdapter>.setOnItemClickListener()#java.util.ArrayList<comingle.mafiapartygame.VoteSlot>.ArrayList, VoteSlot()#java.lang.Object.VoteSlot(int, <unknown>, int)#<unknown>.addKill(int)#<unknown>.postAlert(java.lang.String, java.lang.String)#comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(<unknown>)#<unknown>.DirectoryChangedListener()#android.app.Activity.runOnUiThread()#<unknown>.setWarnDayActuator(comingle.mafiapartygame.ActuatorAction)#<unknown>.postAlert(java.lang.String, java.lang.String)#<unknown>.scheduleAt(java.lang.Runnable, java.lang.Long)#comingle.mafiapartygame.MafiaActivity.removeFromDisplay(java.lang.Integer)#android.app.Activity.setContentView(<unknown>)#java.util.ArrayList<java.lang.Integer>.size()#comingle.mafiapartygame.MafiaActivity.checkOffset()#<unknown>.scheduleAt(java.lang.Runnable, java.lang.Long)#android.app.Activity.runOnUiThread(java.lang.Runnable)#<unknown>.remove(<unknown>)#comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(java.lang.Integer)#android.app.Activity.findViewById(<unknown>)#<unknown>.postAlert(java.lang.String, java.lang.String)#<unknown>.ActuatorAction, Long()#java.util.Iterator<java.lang.Integer>.next()#android.widget.TextView.setText(java.lang.String)#<unknown>.initRewriteMachine()#<unknown>.setNotifyIsMafiaActuator(comingle.mafiapartygame.ActuatorAction)#<unknown>.ActuatorAction, Tuple3, SimpMultiset, IntegerLongBoolean()#android.app.Activity.findViewById(<unknown>)#android.widget.AdapterView<android.widget.ListAdapter>.setOnItemClickListener()#<unknown>.get(int)#<unknown>.add(<unknown>)#<unknown>.setNotifyIsCitizenActuator(comingle.mafiapartygame.ActuatorAction)#<unknown>.LocalNodeInfoAvailableListener()#<unknown>.to_mset(<unknown>)#<unknown>.getLocations()#java.util.ArrayList<java.lang.Integer>.get(int)#comingle.mafiapartygame.MafiaActivity.startMafiaRewriteMachine()#<unknown>.add(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.initTimeServices(android.os.Handler)#<unknown>.setNotifyCheckVotesActuator(comingle.mafiapartygame.ActuatorAction)#java.lang.Object.arrayAdapter(android.app.Activity, <unknown>, <unknown>, <unknown>, java.util.ArrayList<comingle.mafiapartygame.VoteSlot>)#comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(<unknown>)#comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(<unknown>)#android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter2)#<unknown>.add(comingle.mafiapartygame.VoteSlot)#android.app.Activity.findViewById(<unknown>)#<unknown>.getRewriteMachine()#<unknown>.isOwner()#<unknown>.get(<unknown>)#<unknown>.size()#.Runnable()#java.util.Map<java.lang.Integer,java.lang.String>.keySet()#.Runnable()#java.lang.Throwable.printStackTrace()#<unknown>.setNotifyCitizensWinActuator(comingle.mafiapartygame.ActuatorAction)#<unknown>.get(int)#<unknown>.get(int)#<unknown>.addCitizenChangedVote(int)#<unknown>.addLocalNodeInfoAvailableListener()#android.app.Activity.findViewById(<unknown>)#android.media.RingtoneManager.getRingtone(android.content.Context, android.net.Uri)#java.util.Iterator<java.lang.Integer>.hasNext()#<unknown>.setNotifyMarkedActuator(comingle.mafiapartygame.ActuatorAction)#android.view.ViewManager.removeView(android.widget.ListView)#android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter)#<unknown>.postAlert(java.lang.String, java.lang.String)#android.view.View.getParent()#android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter)#<unknown>.isOwner()#comingle.mafiapartygame.MafiaActivity.setMenuItemVisibility(<unknown>, boolean)#comingle.mafiapartygame.MafiaActivity.setupDirectory()#<unknown>.setSignalNightActuator(comingle.mafiapartygame.ActuatorAction)#java.lang.Object.arrayAdapter(android.app.Activity, <unknown>, <unknown>, <unknown>, java.util.ArrayList<comingle.mafiapartygame.VoteSlot>)#comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(int)#android.widget.TextView.setText(java.lang.String)#<unknown>.isOwner()#<unknown>.resumeNetworkNotifications()#<unknown>.getDirectory()#<unknown>.isOwner()#<unknown>.setNotifyMafiaChangedVoteActuator(comingle.mafiapartygame.ActuatorAction)#android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter)#android.app.Activity.runOnUiThread(java.lang.Runnable)#android.app.Activity.runOnUiThread()#<unknown>.getRewriteMachine()#<unknown>.setWarnNightActuator(comingle.mafiapartygame.ActuatorAction)#.Runnable()#<unknown>.getDirectory()#.Runnable()#<unknown>.remove(<unknown>)#comingle.mafiapartygame.MafiaActivity.startGame()#<unknown>.addInitialize(comingle.mafiapartygame.SimpMultiset, int)#<unknown>.get(int)#<unknown>.get(<unknown>)#android.view.MenuItem.setVisible(boolean)#android.app.Activity.runOnUiThread()#.CountDownTimer(int, int)#android.app.Activity.runOnUiThread()#<unknown>.get(int)#android.view.Menu.findItem(int)#java.lang.Object.arrayAdapter2(android.app.Activity, <unknown>, <unknown>, <unknown>, java.util.ArrayList<comingle.mafiapartygame.VoteSlot>)#<unknown>.scheduleAt(java.lang.Runnable, java.lang.Long)#<unknown>.setWakeMafiaActuator(comingle.mafiapartygame.ActuatorAction)#<unknown>.close()#<unknown>.getNames()#<unknown>.remove(int)#<unknown>.get(int)#.Runnable()#android.app.Activity.runOnUiThread()#<unknown>.getLocalTimeOffset()#<unknown>.postToast(<unknown>)#java.util.Map<java.lang.Integer,java.lang.String>.get(int)#<unknown>.getRewriteMachine()#<unknown>.scheduleAt(java.lang.Runnable, int)#<unknown>.addMafiaChangedVote(int)#android.content.Context.getSystemService(java.lang.String)#<unknown>.get(<unknown>)#<unknown>.initStandardDirectorySetup(<unknown>, <unknown>, <unknown>, <unknown>, comingle.mafiapartygame.DirectoryChosenListener)#java.lang.Object.arrayAdapter2(android.app.Activity, <unknown>, <unknown>, <unknown>, java.util.ArrayList<comingle.mafiapartygame.VoteSlot>)#<unknown>.size()#comingle.mafiapartygame.MafiaActivity.killPlayer(<unknown>)#android.widget.ListView.setAdapter(comingle.mafiapartygame.arrayAdapter)#comingle.mafiapartygame.MafiaActivity.getSlotIndexByLoc(int)#android.media.Ringtone.play()#android.app.Activity.runOnUiThread(java.lang.Runnable)#<unknown>.postAlert(java.lang.String, java.lang.String)#android.media.RingtoneManager.getDefaultUri(int)#java.lang.String.format(java.lang.String, <unknown>)#<unknown>.handleOnActivityResults(int)#android.view.MenuInflater.inflate(<unknown>, android.view.Menu)#.Thread()#<unknown>.getLocation()#<unknown>.postAlert(java.lang.String, java.lang.String)#<unknown>.addMark(int)#<unknown>.getRewriteMachine()#comingle.mafiapartygame.MafiaActivity.initializeGame()#<unknown>.startRewriteMachine()#comingle.mafiapartygame.MafiaActivity.citizenChangedVote(<unknown>)"}, {"user_sni": "campbelg", "repo_sni": "OCLC-Developer-Network/oclc-auth-android-example", "imports_t": ["android.os.CountDownTimer android.content.Context android.widget.LinearLayout android.os.Bundle android.view.Menu android.webkit.WebView android.app.ProgressDialog java.util.HashMap android.widget.TextView android.view.View android.webkit.CookieManager android.app.Activity"], "email_sni": "campbelg@oclc.org", "contents_t": ["package org.oclc.mobile.authentication.android;\n\n/*******************************************************************************\n * Copyright (c) 2014 OCLC Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by\n * applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS\n * OF ANY KIND, either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n *\n ******************************************************************************/\n\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.app.ProgressDialog;\nimport android.content.Context;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.Menu;\nimport android.view.View;\nimport android.webkit.CookieManager;\nimport android.webkit.WebView;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\n\n/**\n * Displays the view for the application and handles UI interaction. The following resources are loaded into this\n * Activity:\n * <ul>\n * <li>res/layout/activity_main.xml - the view objects and their layout</li>\n * <li>/res/values/strings.xml - any strings that are displayed</li>\n * <li>/res/values/authentication.xml - list of strings containing authentication parameters</li>\n * </ul>\n * <p>\n * This class calls an instance of AuthenticatingWebView to handle the actual sign in process with the OCLC\n * Authentication servers. Call back methods are defined by interfaces in AuthenticatingWebViewCallbackMethods, so that\n * the AuthenticatingWebView can turn an activity indicator on and off, and return the authentication results for\n * display.\n * <p>\n * The request and result parameters are as follows:\n * <p>\n * Request Parameters - stored in prop. file res/values/authentication.xml:\n * <ul>\n * <li>authenticatingServerBaseUrl</li>\n * <li>client_id</li>\n * <li>authenticatingInstitutionId</li>\n * <li>contextInstitutionId</li>\n * <li>redirect_uri</li>\n * <li>response_type</li>\n * <li>scope</li>\n * </ul>\n * Returned Parameters - stored in HashMap authorizationReturnParameters:\n * <ul>\n * <li>accessToken</li>\n * <li>principalID</li>\n * <li>principalIDNS</li>\n * <li>context_institution_id</li>\n * <li>token_type</li>\n * <li>expires_in</li>\n * <li>expires_at</li>\n * </ul>\n * <p>\n * The Cookie Manager, myCookieManager, gives access to this app's cookies so that we can clear them when restarting the\n * sign-in activity from scratch.\n *\n * @see android.app.Activity\n */\npublic class MainActivity extends Activity implements AuthenticatingWebViewCallbackMethods {\n\n    /**\n     * Multiplier to convert seconds to milliseconds\n     */\n    private static final int SECONDS_TO_MILLISECONDS = 1000;\n\n    /**\n     * An extension that is passed a webview and uses it to handle authentication\n     */\n    private AuthenticatingWebView authenticatingWebView;\n\n    /**\n     * Holds the context of MainActivity so it can be passed to the WebView. The WebView uses that context to call back\n     * to the MainActivity to\n     * <ul>\n     * <li>Start the activity spinner.</li>\n     * <li>Stop the activity spinner.</li>\n     * <li>Display the authentication results.</li>\n     * </ul>\n     */\n    private Context myContext;\n\n    /**\n     * Handle for managing this application's cookies\n     */\n    private CookieManager myCookieManager;\n\n    /**\n     * Timer activated when authentication token is received to decrement the seconds remaining until the authentication\n     * token expires.\n     */\n    private CountDownTimer tokenCountDownTimer;\n\n    /**\n     * A progress dialog to indicate to the user that the app is waiting for an http response\n     */\n    private ProgressDialog myProgressDialog;\n\n    /**\n     * The webview used for authentication\n     */\n    private WebView webView;\n\n    /**\n     * The full URL of the Access Token request\n     */\n    private String requestUrl;\n\n    /**\n     * This method initializes the class and only fires once - when the app loads into memory. Once an app is\n     * initialized, it stays in the run state until the client runs out of memory or shuts off, which could be for days.\n     * This method does not fire when the app returns from the background to the foreground.\n     * <p>\n     * The method loads the layout from the xml file, instantiates an instance of the webview. A WebView is an embedded\n     * Chrome browser with no user controls, which we will use to handle OAuth2 authentication. Initially the webView is\n     * invisible. It is made visible to facilitate sign in, and hidden after a token is received so that the token can\n     * be displayed.\n     *\n     * @param savedInstanceState state information for the app\n     * @see android.app.Activity#onCreate(android.os.Bundle)\n     */\n    @Override\n    protected final void onCreate(final Bundle savedInstanceState) {\n\n        /*\n         * Set the context required for the progress dialog\n         */\n        myContext = this;\n\n        /*\n         * Required for all Android apps to pass the savedInstanceState to the parent\n         */\n        super.onCreate(savedInstanceState);\n\n        /*\n         * Loads the view elements from the xml file. R.layout.activity_main refers to res/layout/activity_main.xml\n         */\n        setContentView(R.layout.activity_main);\n\n        /*\n         * Get a handle to the webView whose position and size is defined in activity_main.xml\n         */\n        webView = (WebView) findViewById(R.id.webView);\n\n        /*\n         * Get a handle to the CookieManager, which is global for this app, and use it to enable cookies.\n         */\n        myCookieManager = CookieManager.getInstance();\n        myCookieManager.setAcceptCookie(true);\n\n        /*\n         * Build the request url by getting the request parameters from res/values/authentication.xml.\n         */\n        requestUrl = (new StringBuffer()).append(getString(R.string.authenticatingServerBaseUrl))\n            .append(\"/authorizeCode?client_id=\")\n            .append(getString(R.string.wskey))\n            .append(\"&authenticatingInstitutionId=\")\n            .append(getString(R.string.authenticatingInstitutionId))\n            .append(\"&contextInstitutionId=\")\n            .append(getString(R.string.contextInstitutionId))\n            .append(\"&redirect_uri=\")\n            .append(getString(R.string.redirectUrl))\n            .append(\"&response_type=\")\n            .append(getString(R.string.responseType))\n            .append(\"&scope=\")\n            .append(getString(R.string.scopes))\n            .toString();\n\n        if (getString(R.string.wskey).equals(\"\")) {\n            /*\n             * If the wskey is blank, then the user probably forgot to set the parameters in authentication.xml\n             */\n            LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n            resultLayout.setVisibility(View.VISIBLE);\n            ((TextView) findViewById(R.id.access_token)).setText(getString(R.string.authParamsNotSet));\n        } else {\n            /*\n             * Create the AuthenticatingWebView, a custom WebView, to make the url request. We also pass this class's\n             * context so that the AuthenticatingWebView can execute callbacks.\n             */\n            authenticatingWebView = new AuthenticatingWebView(webView, this);\n            authenticatingWebView.makeRequest(requestUrl);\n        }\n    }\n\n    /**\n     * Boilerplate code required by Android to display any menu xml that may exist in res/menu.\n     *\n     * @param menu the menu associated with this activity\n     * @return returns true to create the menu\n     */\n    @Override\n    public final boolean onCreateOptionsMenu(final Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.main, menu);\n        return true;\n    }\n\n    /**\n     * Standard form callback for the [Clear Cookies] button, whose properties are described in\n     * res/layout/activity_main.xml.\n     *\n     * @param view [Clear Cookies] button's view\n     */\n    public final void clearCookies(final View view) {\n\n        /*\n         * Removes the cookies associated with this app only - browser cookies and other app's cookies are not affected.\n         */\n        myCookieManager.removeAllCookie();\n    }\n\n    /**\n     * Standard form callback for the [Sign In Again] button, whose properties are described in\n     * res/layout/activity_main.xml.\n     *\n     * @param view [Sign In Again] button's view\n     */\n    public final void signInAgain(final View view) {\n\n        if (getString(R.string.wskey).equals(\"\")) {\n            /*\n             * If the wskey is blank, then the user probably forgot to set the parameters in authentication.xml\n             */\n            LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n            resultLayout.setVisibility(View.VISIBLE);\n            ((TextView) findViewById(R.id.access_token)).setText(getString(R.string.authParamsNotSet));\n        } else {\n            /*\n             * Clear the token count down timer if it is running and set the timer text to expired.\n             */\n            if (tokenCountDownTimer != null) {\n                tokenCountDownTimer.cancel();\n                tokenCountDownTimer = null;\n                ((TextView) findViewById(R.id.timeRemainingTextView)).setText(getString(R.string.time_remaining_expired));\n            }\n\n            /*\n             * Hide the text result views.\n             */\n            LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n            resultLayout.setVisibility(View.INVISIBLE);\n\n            /*\n             * Make another request.\n             */\n            authenticatingWebView.makeRequest(requestUrl);\n        }\n    }\n\n    /**\n     * Display a progress indicator while authenticating. Implements a callback function called by\n     * AuthenticatingWebViewCallbackMethods\n     */\n    @Override\n    public final void startProgressDialog() {\n\n        /*\n         * Create a progressDialog if it does not exist.\n         */\n        if (myProgressDialog == null) {\n            myProgressDialog = new ProgressDialog(myContext);\n            myProgressDialog.setTitle(getString(R.string.authenticating));\n            myProgressDialog.setMessage(getString(R.string.please_wait));\n            myProgressDialog.setCancelable(false);\n            myProgressDialog.setIndeterminate(true);\n        }\n\n        /*\n         * Show the progress dialog.\n         */\n        myProgressDialog.show();\n    }\n\n    /**\n     * Stop and destroy a progress indicator (if it exists). Implements a callback function called by\n     * AuthenticatingWebViewCallbackMethods.\n     */\n    @Override\n    public final void stopProgressDialog() {\n        myProgressDialog.hide();\n    }\n\n    /**\n     * Display the results by extracting the values from the Hash Map and inserting them into the TextViews which are\n     * defined in res/layout/activity_main.xml. Implements a callback function called by\n     * AuthenticatingWebViewCallbackMethods.\n     *\n     * @param authorizationReturnParameters A list of return params and values\n     */\n    @Override\n    public final void displayResults(final HashMap<String, String> authorizationReturnParameters) {\n\n        /*\n         * Make the text result views visible. Each result parameter's textview is grouped into a LinearLayout.\n         */\n        LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n        resultLayout.setVisibility(View.VISIBLE);\n\n        ((TextView) findViewById(R.id.access_token)).setText(authorizationReturnParameters.get(\"access_token\"));\n        ((TextView) findViewById(R.id.principalID)).setText(authorizationReturnParameters.get(\"principalID\"));\n        ((TextView) findViewById(R.id.principalIDNS)).setText(authorizationReturnParameters.get(\"principalIDNS\"));\n        ((TextView) findViewById(R.id.context_institution_id)).setText(authorizationReturnParameters.get(\"context_institution_id\"));\n        ((TextView) findViewById(R.id.token_type)).setText(authorizationReturnParameters.get(\"token_type\"));\n        ((TextView) findViewById(R.id.expires_in)).setText(authorizationReturnParameters.get(\"expires_in\"));\n        ((TextView) findViewById(R.id.expires_at)).setText(authorizationReturnParameters.get(\"expires_at\"));\n\n        /*\n         * Check if the token CountDownTimer, and cancel it if it does.\n         */\n        if (tokenCountDownTimer != null) {\n            tokenCountDownTimer.cancel();\n        }\n\n        /*\n         * Start a new token count down timer based on the time remaining returned with the token (time remaining is in\n         * seconds).\n         */\n        if (authorizationReturnParameters.get(\"expires_in\") != null) {\n            tokenCountDownTimer = new CountDownTimer(Integer.parseInt(authorizationReturnParameters.get(\"expires_in\")) * SECONDS_TO_MILLISECONDS,\n                SECONDS_TO_MILLISECONDS) {\n\n                /* Callback fires every 1000 ms. */\n                @Override\n                public void onTick(final long millisUntilFinished) {\n                    ((TextView) findViewById(R.id.timeRemainingTextView)).setText(getString(R.string.time_remaining) + millisUntilFinished\n                        / SECONDS_TO_MILLISECONDS);\n                }\n\n                /*\n                 * Callback fires when timer counts down to zero.\n                 */\n                @Override\n                public void onFinish() {\n                    ((TextView) findViewById(R.id.timeRemainingTextView)).setText(getString(R.string.time_remaining_expired));\n                }\n            }.start();\n        } else {\n            /*\n             * If the \"expires_in\" parameter is null, then something has gone wrong during authentication.\n             */\n            ((TextView) findViewById(R.id.timeRemainingTextView)).setText(getString(R.string.invalid_authentication_request));\n        }\n    }\n}\n"], "body_t": ["<empty>"], "date_tdt": "2014-01-14T21:07:07Z", "hash_sni": "4fc1d0aa1b77491fb90fe27cec5ee7919e09634d", "name_sni": "src/org/oclc/mobile/authentication/android/MainActivity.java", "patch_t": [" package org.oclc.mobile.authentication.android;\n \n /*******************************************************************************\n- * Copyright (c) 2013 OCLC Inc.\n+ * Copyright (c) 2014 OCLC Inc.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n  * use this file except in compliance with the License. You may obtain a copy of\n@@ -28,20 +28,18 @@ import android.widget.LinearLayout;\n import android.widget.TextView;\n \n /**\n- * Displays the view for the application and handles UI interaction. The\n- * following resources are loaded into this Activity:\n+ * Displays the view for the application and handles UI interaction. The following resources are loaded into this\n+ * Activity:\n  * <ul>\n  * <li>res/layout/activity_main.xml - the view objects and their layout</li>\n  * <li>/res/values/strings.xml - any strings that are displayed</li>\n- * <li>/res/values/authentication.xml - list of strings containing\n- * authentication parameters</li>\n+ * <li>/res/values/authentication.xml - list of strings containing authentication parameters</li>\n  * </ul>\n  * <p>\n- * This class calls an instance of AuthenticatingWebView to handle the actual\n- * sign in process with the OCLC Authentication servers. Call back methods are\n- * defined by interfaces in AuthenticatingWebViewCallbackMethods, so that the\n- * AuthenticatingWebView can turn an activity indicator on and off, and return\n- * the authentication results for display.\n+ * This class calls an instance of AuthenticatingWebView to handle the actual sign in process with the OCLC\n+ * Authentication servers. Call back methods are defined by interfaces in AuthenticatingWebViewCallbackMethods, so that\n+ * the AuthenticatingWebView can turn an activity indicator on and off, and return the authentication results for\n+ * display.\n  * <p>\n  * The request and result parameters are as follows:\n  * <p>\n@@ -66,13 +64,12 @@ import android.widget.TextView;\n  * <li>expires_at</li>\n  * </ul>\n  * <p>\n- * The Cookie Manager, myCookieManager, gives access to this app's cookies so\n- * that we can clear them when restarting the sign-in activity from scratch.\n+ * The Cookie Manager, myCookieManager, gives access to this app's cookies so that we can clear them when restarting the\n+ * sign-in activity from scratch.\n  *\n  * @see android.app.Activity\n  */\n-public class MainActivity extends Activity implements\n-AuthenticatingWebViewCallbackMethods {\n+public class MainActivity extends Activity implements AuthenticatingWebViewCallbackMethods {\n \n     /**\n      * Multiplier to convert seconds to milliseconds\n@@ -80,14 +77,13 @@ AuthenticatingWebViewCallbackMethods {\n     private static final int SECONDS_TO_MILLISECONDS = 1000;\n \n     /**\n-     * An extension that is passed a webview and uses it to handle\n-     * authentication\n+     * An extension that is passed a webview and uses it to handle authentication\n      */\n     private AuthenticatingWebView authenticatingWebView;\n \n     /**\n-     * Holds the context of MainActivity so it can be passed to the WebView. The\n-     * WebView uses that context to call back to the MainActivity to\n+     * Holds the context of MainActivity so it can be passed to the WebView. The WebView uses that context to call back\n+     * to the MainActivity to\n      * <ul>\n      * <li>Start the activity spinner.</li>\n      * <li>Stop the activity spinner.</li>\n@@ -102,14 +98,13 @@ AuthenticatingWebViewCallbackMethods {\n     private CookieManager myCookieManager;\n \n     /**\n-     * Timer activated when authentication token is received to decrement the\n-     * seconds remaining until the authentication token expires.\n+     * Timer activated when authentication token is received to decrement the seconds remaining until the authentication\n+     * token expires.\n      */\n     private CountDownTimer tokenCountDownTimer;\n \n     /**\n-     * A progress dialog to indicate to the user that the app is waiting for an\n-     * http response\n+     * A progress dialog to indicate to the user that the app is waiting for an http response\n      */\n     private ProgressDialog myProgressDialog;\n \n@@ -124,17 +119,14 @@ AuthenticatingWebViewCallbackMethods {\n     private String requestUrl;\n \n     /**\n-     * This method initializes the class and only fires once - when the app\n-     * loads into memory. Once an app is initialized, it stays in the run state\n-     * until the client runs out of memory or shuts off, which could be for\n-     * days. This method does not fire when the app returns from the background\n-     * to the foreground.\n+     * This method initializes the class and only fires once - when the app loads into memory. Once an app is\n+     * initialized, it stays in the run state until the client runs out of memory or shuts off, which could be for days.\n+     * This method does not fire when the app returns from the background to the foreground.\n      * <p>\n-     * The method loads the layout from the xml file, instantiates an instance\n-     * of the webview. A WebView is an embedded Chrome browser with no user\n-     * controls, which we will use to handle OAuth2 authentication. Initially\n-     * the webView is invisible. It is made visible to facilitate sign in, and\n-     * hidden after a token is received so that the token can be displayed.\n+     * The method loads the layout from the xml file, instantiates an instance of the webview. A WebView is an embedded\n+     * Chrome browser with no user controls, which we will use to handle OAuth2 authentication. Initially the webView is\n+     * invisible. It is made visible to facilitate sign in, and hidden after a token is received so that the token can\n+     * be displayed.\n      *\n      * @param savedInstanceState state information for the app\n      * @see android.app.Activity#onCreate(android.os.Bundle)\n@@ -142,67 +134,61 @@ AuthenticatingWebViewCallbackMethods {\n     @Override\n     protected final void onCreate(final Bundle savedInstanceState) {\n \n-        /**\n+        /*\n          * Set the context required for the progress dialog\n          */\n         myContext = this;\n \n-        /**\n-         * Required for all Android apps to pass the savedInstanceState to the\n-         * parent\n+        /*\n+         * Required for all Android apps to pass the savedInstanceState to the parent\n          */\n         super.onCreate(savedInstanceState);\n \n-        /**\n-         * Loads the view elements from the xml file. R.layout.activity_main\n-         * refers to res/layout/activity_main.xml\n+        /*\n+         * Loads the view elements from the xml file. R.layout.activity_main refers to res/layout/activity_main.xml\n          */\n         setContentView(R.layout.activity_main);\n \n-        /**\n-         * Get a handle to the webView whose position and size is defined in\n-         * activity_main.xml\n+        /*\n+         * Get a handle to the webView whose position and size is defined in activity_main.xml\n          */\n         webView = (WebView) findViewById(R.id.webView);\n \n-        /**\n-         * Get a handle to the CookieManager, which is global for this app, and\n-         * use it to enable cookies.\n+        /*\n+         * Get a handle to the CookieManager, which is global for this app, and use it to enable cookies.\n          */\n         myCookieManager = CookieManager.getInstance();\n         myCookieManager.setAcceptCookie(true);\n \n-        /**\n-         * Build the request url by getting the request parameters from\n-         * res/values/authentication.xml.\n+        /*\n+         * Build the request url by getting the request parameters from res/values/authentication.xml.\n          */\n-        requestUrl = new StringBuffer()\n-        .append(getString(R.string.authenticatingServerBaseUrl))\n-        .append(\"/authorizeCode?client_id=\")\n-        .append(getString(R.string.wskey))\n-        .append(\"&authenticatingInstitutionId=\")\n-        .append(getString(R.string.authenticatingInstitutionId))\n-        .append(\"&contextInstitutionId=\")\n-        .append(getString(R.string.contextInstitutionId))\n-        .append(\"&redirect_uri=\")\n-        .append(getString(R.string.redirectUrl))\n-        .append(\"&response_type=\")\n-        .append(getString(R.string.responseType)).append(\"&scope=\")\n-        .append(getString(R.string.scopes)).toString();\n+        requestUrl = (new StringBuffer()).append(getString(R.string.authenticatingServerBaseUrl))\n+            .append(\"/authorizeCode?client_id=\")\n+            .append(getString(R.string.wskey))\n+            .append(\"&authenticatingInstitutionId=\")\n+            .append(getString(R.string.authenticatingInstitutionId))\n+            .append(\"&contextInstitutionId=\")\n+            .append(getString(R.string.contextInstitutionId))\n+            .append(\"&redirect_uri=\")\n+            .append(getString(R.string.redirectUrl))\n+            .append(\"&response_type=\")\n+            .append(getString(R.string.responseType))\n+            .append(\"&scope=\")\n+            .append(getString(R.string.scopes))\n+            .toString();\n \n         if (getString(R.string.wskey).equals(\"\")) {\n-            // If the wskey is blank, then the user probably forgot to set the\n-            // parameters in authentication.xml\n+            /*\n+             * If the wskey is blank, then the user probably forgot to set the parameters in authentication.xml\n+             */\n             LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n             resultLayout.setVisibility(View.VISIBLE);\n-\n-            ((TextView) findViewById(R.id.access_token))\n-            .setText(\"You must set the authentication parameters in the authentication.xml properties file.\");\n+            ((TextView) findViewById(R.id.access_token)).setText(getString(R.string.authParamsNotSet));\n         } else {\n-            /**\n-             * Create the AuthenticatingWebView, a custom WebView, to make the url\n-             * request. We also pass this class's context so that the\n-             * AuthenticatingWebView can execute callbacks.\n+            /*\n+             * Create the AuthenticatingWebView, a custom WebView, to make the url request. We also pass this class's\n+             * context so that the AuthenticatingWebView can execute callbacks.\n              */\n             authenticatingWebView = new AuthenticatingWebView(webView, this);\n             authenticatingWebView.makeRequest(requestUrl);\n@@ -210,8 +196,7 @@ AuthenticatingWebViewCallbackMethods {\n     }\n \n     /**\n-     * Boilerplate code required by Android to display any menu xml that may\n-     * exist in res/menu.\n+     * Boilerplate code required by Android to display any menu xml that may exist in res/menu.\n      *\n      * @param menu the menu associated with this activity\n      * @return returns true to create the menu\n@@ -224,63 +209,66 @@ AuthenticatingWebViewCallbackMethods {\n     }\n \n     /**\n-     * Standard form callback for the [Clear Cookies] button, whose properties\n-     * are described in res/layout/activity_main.xml.\n+     * Standard form callback for the [Clear Cookies] button, whose properties are described in\n+     * res/layout/activity_main.xml.\n      *\n      * @param view [Clear Cookies] button's view\n      */\n     public final void clearCookies(final View view) {\n \n-        /**\n-         * Removes the cookies associated with this app only - browser cookies\n-         * and other app's cookies are not affected.\n+        /*\n+         * Removes the cookies associated with this app only - browser cookies and other app's cookies are not affected.\n          */\n         myCookieManager.removeAllCookie();\n     }\n \n     /**\n-     * Standard form callback for the [Sign In Again] button, whose properties\n-     * are described in res/layout/activity_main.xml.\n+     * Standard form callback for the [Sign In Again] button, whose properties are described in\n+     * res/layout/activity_main.xml.\n      *\n      * @param view [Sign In Again] button's view\n      */\n     public final void signInAgain(final View view) {\n \n-        if (!getString(R.string.wskey).equals(\"\")) {\n-            /**\n-             * Clear the token count down timer if it is running and set the timer\n-             * text to expired.\n+        if (getString(R.string.wskey).equals(\"\")) {\n+            /*\n+             * If the wskey is blank, then the user probably forgot to set the parameters in authentication.xml\n+             */\n+            LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n+            resultLayout.setVisibility(View.VISIBLE);\n+            ((TextView) findViewById(R.id.access_token)).setText(getString(R.string.authParamsNotSet));\n+        } else {\n+            /*\n+             * Clear the token count down timer if it is running and set the timer text to expired.\n              */\n             if (tokenCountDownTimer != null) {\n                 tokenCountDownTimer.cancel();\n                 tokenCountDownTimer = null;\n-                ((TextView) findViewById(R.id.timeRemainingTextView))\n-                .setText(getString(R.string.time_remaining_expired));\n+                ((TextView) findViewById(R.id.timeRemainingTextView)).setText(getString(R.string.time_remaining_expired));\n             }\n \n-            /**\n-             *  Hide the text result views.\n+            /*\n+             * Hide the text result views.\n              */\n             LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n             resultLayout.setVisibility(View.INVISIBLE);\n \n-            /**\n+            /*\n              * Make another request.\n              */\n-\n             authenticatingWebView.makeRequest(requestUrl);\n         }\n     }\n \n     /**\n-     * Display a progress indicator while authenticating. Implements a callback\n-     * function called by AuthenticatingWebViewCallbackMethods\n+     * Display a progress indicator while authenticating. Implements a callback function called by\n+     * AuthenticatingWebViewCallbackMethods\n      */\n     @Override\n     public final void startProgressDialog() {\n \n-        /**\n-         *  Create a progressDialog if it does not exist.\n+        /*\n+         * Create a progressDialog if it does not exist.\n          */\n         if (myProgressDialog == null) {\n             myProgressDialog = new ProgressDialog(myContext);\n@@ -290,15 +278,15 @@ AuthenticatingWebViewCallbackMethods {\n             myProgressDialog.setIndeterminate(true);\n         }\n \n-        /**\n-         *  Show the progress dialog.\n+        /*\n+         * Show the progress dialog.\n          */\n         myProgressDialog.show();\n     }\n \n     /**\n-     * Stop and destroy a progress indicator (if it exists). Implements a\n-     * callback function called by AuthenticatingWebViewCallbackMethods.\n+     * Stop and destroy a progress indicator (if it exists). Implements a callback function called by\n+     * AuthenticatingWebViewCallbackMethods.\n      */\n     @Override\n     public final void stopProgressDialog() {\n@@ -306,82 +294,64 @@ AuthenticatingWebViewCallbackMethods {\n     }\n \n     /**\n-     * Display the results by extracting the values from the Hash Map and\n-     * inserting them into the TextViews which are defined in\n-     * res/layout/activity_main.xml. Implements a callback function called by\n+     * Display the results by extracting the values from the Hash Map and inserting them into the TextViews which are\n+     * defined in res/layout/activity_main.xml. Implements a callback function called by\n      * AuthenticatingWebViewCallbackMethods.\n      *\n      * @param authorizationReturnParameters A list of return params and values\n      */\n     @Override\n-    public final void displayResults(\n-            final HashMap<String, String> authorizationReturnParameters) {\n+    public final void displayResults(final HashMap<String, String> authorizationReturnParameters) {\n \n-        /**\n-         * Make the text result views visible. Each result parameter's textview\n-         * is grouped into a LinearLayout.\n+        /*\n+         * Make the text result views visible. Each result parameter's textview is grouped into a LinearLayout.\n          */\n         LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n         resultLayout.setVisibility(View.VISIBLE);\n \n-        ((TextView) findViewById(R.id.access_token))\n-        .setText(authorizationReturnParameters.get(\"access_token\"));\n-        ((TextView) findViewById(R.id.principalID))\n-        .setText(authorizationReturnParameters.get(\"principalID\"));\n-        ((TextView) findViewById(R.id.principalIDNS))\n-        .setText(authorizationReturnParameters.get(\"principalIDNS\"));\n-        ((TextView) findViewById(R.id.context_institution_id))\n-        .setText(authorizationReturnParameters\n-                .get(\"context_institution_id\"));\n-        ((TextView) findViewById(R.id.token_type))\n-        .setText(authorizationReturnParameters.get(\"token_type\"));\n-        ((TextView) findViewById(R.id.expires_in))\n-        .setText(authorizationReturnParameters.get(\"expires_in\"));\n-        ((TextView) findViewById(R.id.expires_at))\n-        .setText(authorizationReturnParameters.get(\"expires_at\"));\n-\n-        /**\n-         *  Check if the token CountDownTimer, and cancel it if it does.\n+        ((TextView) findViewById(R.id.access_token)).setText(authorizationReturnParameters.get(\"access_token\"));\n+        ((TextView) findViewById(R.id.principalID)).setText(authorizationReturnParameters.get(\"principalID\"));\n+        ((TextView) findViewById(R.id.principalIDNS)).setText(authorizationReturnParameters.get(\"principalIDNS\"));\n+        ((TextView) findViewById(R.id.context_institution_id)).setText(authorizationReturnParameters.get(\"context_institution_id\"));\n+        ((TextView) findViewById(R.id.token_type)).setText(authorizationReturnParameters.get(\"token_type\"));\n+        ((TextView) findViewById(R.id.expires_in)).setText(authorizationReturnParameters.get(\"expires_in\"));\n+        ((TextView) findViewById(R.id.expires_at)).setText(authorizationReturnParameters.get(\"expires_at\"));\n+\n+        /*\n+         * Check if the token CountDownTimer, and cancel it if it does.\n          */\n         if (tokenCountDownTimer != null) {\n             tokenCountDownTimer.cancel();\n         }\n \n-        /**\n-         * Start a new token count down timer based on the time remaining\n-         * returned with the token (time remaining is in seconds).\n+        /*\n+         * Start a new token count down timer based on the time remaining returned with the token (time remaining is in\n+         * seconds).\n          */\n         if (authorizationReturnParameters.get(\"expires_in\") != null) {\n-            tokenCountDownTimer = new CountDownTimer(\n-                    Integer.parseInt(authorizationReturnParameters\n-                            .get(\"expires_in\")) * SECONDS_TO_MILLISECONDS,\n-                            SECONDS_TO_MILLISECONDS) {\n+            tokenCountDownTimer = new CountDownTimer(Integer.parseInt(authorizationReturnParameters.get(\"expires_in\")) * SECONDS_TO_MILLISECONDS,\n+                SECONDS_TO_MILLISECONDS) {\n \n                 /* Callback fires every 1000 ms. */\n                 @Override\n                 public void onTick(final long millisUntilFinished) {\n-                    ((TextView) findViewById(R.id.timeRemainingTextView))\n-                    .setText(getString(R.string.time_remaining)\n-                            + millisUntilFinished\n-                            / SECONDS_TO_MILLISECONDS);\n+                    ((TextView) findViewById(R.id.timeRemainingTextView)).setText(getString(R.string.time_remaining) + millisUntilFinished\n+                        / SECONDS_TO_MILLISECONDS);\n                 }\n \n-                /**\n-                 *  Callback fires when timer counts down to zero.\n+                /*\n+                 * Callback fires when timer counts down to zero.\n                  */\n                 @Override\n                 public void onFinish() {\n-                    ((TextView) findViewById(R.id.timeRemainingTextView))\n-                    .setText(getString(R.string.time_remaining_expired));\n+                    ((TextView) findViewById(R.id.timeRemainingTextView)).setText(getString(R.string.time_remaining_expired));\n                 }\n             }.start();\n         } else {\n-            /**\n-             * If the \"expires_in\" parameter is null, then something has gone\n-             * wrong during authentication.\n+            /*\n+             * If the \"expires_in\" parameter is null, then something has gone wrong during authentication.\n              */\n-            ((TextView) findViewById(R.id.timeRemainingTextView))\n-            .setText(getString(R.string.invalid_authentication_request));\n+            ((TextView) findViewById(R.id.timeRemainingTextView)).setText(getString(R.string.invalid_authentication_request));\n         }\n     }\n }"], "score": 1.0, "methods_t": ["AuthenticatingWebView CountDownTimer ProgressDialog StringBuffer append cancel equals findViewById get getInstance getMenuInflater getString hide inflate makeRequest parseInt removeAllCookie setAcceptCookie setCancelable setContentView setIndeterminate setMessage setText setTitle setVisibility show start toString"], "_version_": 1526731106262450176, "subject_t": ["Code review fixes, javadoc fixes, set width to 120 chars, moved 'missing params' message to a string file."], "comments_t": ["/** \n * Holds the context of MainActivity so it can be passed to the WebView. The WebView uses that context to call back to the MainActivity to <ul> <li>Start the activity spinner.</li> <li>Stop the activity spinner.</li> <li>Display the authentication results.</li> </ul>\n */\n /*\n* Build the request url by getting the request parameters from res/values/authentication.xml.\n*/\n /** \n * The webview used for authentication\n */\n /*\n* Make the text result views visible. Each result parameter's textview is grouped into a LinearLayout.\n*/\n /** \n * A progress dialog to indicate to the user that the app is waiting for an http response\n */\n /** \n * Display a progress indicator while authenticating. Implements a callback function called by AuthenticatingWebViewCallbackMethods\n */\n /*\n* Clear the token count down timer if it is running and set the timer text to expired.\n*/\n /*\n* Callback fires when timer counts down to zero.\n*/\n /*\n* Set the context required for the progress dialog\n*/\n /* Callback fires every 1000 ms. */\n /** \n * Standard form callback for the [Sign In Again] button, whose properties are described in res/layout/activity_main.xml.\n * @param view [Sign In Again] button's view\n */\n /*\n* If the \"expires_in\" parameter is null, then something has gone wrong during authentication.\n*/\n /** \n * Standard form callback for the [Clear Cookies] button, whose properties are described in res/layout/activity_main.xml.\n * @param view [Clear Cookies] button's view\n */\n /** \n * Displays the view for the application and handles UI interaction. The following resources are loaded into this Activity: <ul> <li>res/layout/activity_main.xml - the view objects and their layout</li> <li>/res/values/strings.xml - any strings that are displayed</li> <li>/res/values/authentication.xml - list of strings containing authentication parameters</li> </ul> <p> This class calls an instance of AuthenticatingWebView to handle the actual sign in process with the OCLC Authentication servers. Call back methods are defined by interfaces in AuthenticatingWebViewCallbackMethods, so that the AuthenticatingWebView can turn an activity indicator on and off, and return the authentication results for display. <p> The request and result parameters are as follows: <p> Request Parameters - stored in prop. file res/values/authentication.xml: <ul> <li>authenticatingServerBaseUrl</li> <li>client_id</li> <li>authenticatingInstitutionId</li> <li>contextInstitutionId</li> <li>redirect_uri</li> <li>response_type</li> <li>scope</li> </ul> Returned Parameters - stored in HashMap authorizationReturnParameters: <ul> <li>accessToken</li> <li>principalID</li> <li>principalIDNS</li> <li>context_institution_id</li> <li>token_type</li> <li>expires_in</li> <li>expires_at</li> </ul> <p> The Cookie Manager, myCookieManager, gives access to this app's cookies so that we can clear them when restarting the sign-in activity from scratch.\n * @see android.app.Activity\n */\n /*\n* Create a progressDialog if it does not exist.\n*/\n /** \n * An extension that is passed a webview and uses it to handle authentication\n */\n /** \n * Timer activated when authentication token is received to decrement the seconds remaining until the authentication token expires.\n */\n /*\n* Start a new token count down timer based on the time remaining returned with the token (time remaining is in\n* seconds).\n*/\n /** \n * Boilerplate code required by Android to display any menu xml that may exist in res/menu.\n * @param menu the menu associated with this activity\n * @return returns true to create the menu\n */\n /** \n * Stop and destroy a progress indicator (if it exists). Implements a callback function called by AuthenticatingWebViewCallbackMethods.\n */\n /*\n* Get a handle to the webView whose position and size is defined in activity_main.xml\n*/\n /** \n * Multiplier to convert seconds to milliseconds\n */\n /*\n* Removes the cookies associated with this app only - browser cookies and other app's cookies are not affected.\n*/\n /** \n * Display the results by extracting the values from the Hash Map and inserting them into the TextViews which are defined in res/layout/activity_main.xml. Implements a callback function called by AuthenticatingWebViewCallbackMethods.\n * @param authorizationReturnParameters A list of return params and values\n */\n /*\n* Required for all Android apps to pass the savedInstanceState to the parent\n*/\n /*\n* Hide the text result views.\n*/\n /** \n * The full URL of the Access Token request\n */\n /*\n* Show the progress dialog.\n*/\n /** \n * Handle for managing this application's cookies\n */\n /*\n* Check if the token CountDownTimer, and cancel it if it does.\n*/\n /*\n* If the wskey is blank, then the user probably forgot to set the parameters in authentication.xml\n*/\n /*\n* Create the AuthenticatingWebView, a custom WebView, to make the url request. We also pass this class's\n* context so that the AuthenticatingWebView can execute callbacks.\n*/\n         // Inflate the menu; this adds items to the action bar if it is present. /** \n * This method initializes the class and only fires once - when the app loads into memory. Once an app is initialized, it stays in the run state until the client runs out of memory or shuts off, which could be for days. This method does not fire when the app returns from the background to the foreground. <p> The method loads the layout from the xml file, instantiates an instance of the webview. A WebView is an embedded Chrome browser with no user controls, which we will use to handle OAuth2 authentication. Initially the webView is invisible. It is made visible to facilitate sign in, and hidden after a token is received so that the token can be displayed.\n * @param savedInstanceState state information for the app\n * @see android.app.Activity#onCreate(android.os.Bundle)\n */\n /*\n* Make another request.\n*/\n /*\n* Get a handle to the CookieManager, which is global for this app, and use it to enable cookies.\n*/\n /*\n* Loads the view elements from the xml file. R.layout.activity_main refers to res/layout/activity_main.xml\n*/\n"], "parents_ss": ["60bd9a4cdb91ff1ec818a4813e6d147acb75583f"], "id": "OCLC-Developer-Network/oclc-auth-android-example\u00004fc1d0aa1b77491fb90fe27cec5ee7919e09634d\u0000src/org/oclc/mobile/authentication/android/MainActivity.java", "callsites_cs": "java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#android.app.ProgressDialog.setIndeterminate(boolean)#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#<unknown>.makeRequest(java.lang.String)#<unknown>.toString()#<unknown>.equals(java.lang.String)#android.os.CountDownTimer.cancel()#<unknown>.append(<unknown>)#android.app.Activity.setContentView(<unknown>)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(<unknown>)#android.view.MenuInflater.inflate(<unknown>, android.view.Menu)#android.content.Context.getString(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.append(java.lang.String)#android.app.ProgressDialog.setMessage(<unknown>)#android.app.Dialog.setCancelable(boolean)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.os.CountDownTimer.start()#android.app.Activity.findViewById(<unknown>)#android.content.Context.getString(<unknown>)#android.content.Context.getString(<unknown>)#android.content.Context.getString(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.append(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#android.webkit.CookieManager.setAcceptCookie(boolean)#android.widget.TextView.setText(<unknown>)#<unknown>.append(java.lang.String)#<unknown>.makeRequest(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.view.View.setVisibility(int)#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#<unknown>.append(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.os.CountDownTimer.cancel()#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#java.lang.StringBuffer.append(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.app.Dialog.hide()#android.app.Activity.findViewById(<unknown>)#android.app.ProgressDialog.ProgressDialog(android.content.Context)#android.content.Context.getString(<unknown>)#android.app.Activity.findViewById(<unknown>)#.CountDownTimer(int, int)#android.content.Context.getString(<unknown>)#<unknown>.append(java.lang.String)#java.lang.StringBuffer.StringBuffer()#<unknown>.equals(java.lang.String)#android.content.Context.getString(<unknown>)#android.app.AlertDialog.setTitle(<unknown>)#<unknown>.append(<unknown>)#android.widget.TextView.setText(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.AuthenticatingWebView(android.webkit.WebView, org.oclc.mobile.authentication.android.MainActivity)#<unknown>.append(java.lang.String)#android.webkit.CookieManager.getInstance()#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.content.Context.getString(<unknown>)#android.content.Context.getString(<unknown>)#android.content.Context.getString(<unknown>)#android.content.Context.getString(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.append(<unknown>)#android.webkit.CookieManager.removeAllCookie()#<unknown>.append(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.lang.Integer.parseInt(java.lang.String)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(java.lang.String)#<unknown>.append(<unknown>)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.append(<unknown>)#android.app.Activity.getMenuInflater()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.app.Dialog.show()", "callsites_t": ["java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) android.app.ProgressDialog.setIndeterminate(boolean) java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) <unknown>.makeRequest(java.lang.String) <unknown>.toString() <unknown>.equals(java.lang.String) android.os.CountDownTimer.cancel() <unknown>.append(<unknown>) android.app.Activity.setContentView(<unknown>) android.content.Context.getString(<unknown>) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(<unknown>) android.view.MenuInflater.inflate(<unknown>, android.view.Menu) android.content.Context.getString(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.append(java.lang.String) android.app.ProgressDialog.setMessage(<unknown>) android.app.Dialog.setCancelable(boolean) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.os.CountDownTimer.start() android.app.Activity.findViewById(<unknown>) android.content.Context.getString(<unknown>) android.content.Context.getString(<unknown>) android.content.Context.getString(<unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.append(java.lang.String) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) android.webkit.CookieManager.setAcceptCookie(boolean) android.widget.TextView.setText(<unknown>) <unknown>.append(java.lang.String) <unknown>.makeRequest(java.lang.String) android.widget.TextView.setText(java.lang.String) android.view.View.setVisibility(int) java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) <unknown>.append(<unknown>) android.widget.TextView.setText(java.lang.String) android.os.CountDownTimer.cancel() java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) java.lang.StringBuffer.append(<unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.app.Dialog.hide() android.app.Activity.findViewById(<unknown>) android.app.ProgressDialog.ProgressDialog(android.content.Context) android.content.Context.getString(<unknown>) android.app.Activity.findViewById(<unknown>) .CountDownTimer(int, int) android.content.Context.getString(<unknown>) <unknown>.append(java.lang.String) java.lang.StringBuffer.StringBuffer() <unknown>.equals(java.lang.String) android.content.Context.getString(<unknown>) android.app.AlertDialog.setTitle(<unknown>) <unknown>.append(<unknown>) android.widget.TextView.setText(<unknown>) android.content.Context.getString(<unknown>) <unknown>.AuthenticatingWebView(android.webkit.WebView, org.oclc.mobile.authentication.android.MainActivity) <unknown>.append(java.lang.String) android.webkit.CookieManager.getInstance() android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.content.Context.getString(<unknown>) android.content.Context.getString(<unknown>) android.content.Context.getString(<unknown>) android.content.Context.getString(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.append(<unknown>) android.webkit.CookieManager.removeAllCookie() <unknown>.append(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) android.app.Activity.findViewById(<unknown>) java.lang.Integer.parseInt(java.lang.String) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(java.lang.String) <unknown>.append(<unknown>) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.append(<unknown>) android.app.Activity.getMenuInflater() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.app.Dialog.show()"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File android.view.Window com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity android.widget.ImageView java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate ImageView show_text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate EditText show_text_voice_camera_tag;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate View show_text_voice_camera_divider_amount_desc;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_update_entry;\n\tprivate TextView show_text_voice_camera_description_show;\n\tprivate ImageView show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.show_text_voice_camera_voice_details_separator);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag = (EditText) findViewById(R.id.show_text_voice_camera_tag);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_divider_amount_desc = findViewById(R.id.show_text_voice_camera_divider_amount_desc);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_update_entry = (Button) findViewById(R.id.show_text_voice_camera_update_entry);\n\t\tshow_text_voice_camera_description_show = (TextView) findViewById(R.id.show_text_voice_camera_description_show);\n\t\tshow_text_voice_camera_edit = (ImageView) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_description_show\n\t\t\t\t\t\t.setVisibility(View.GONE);\n\t\t\t\tshow_text_voice_camera_tag_textview.setVisibility(View.GONE);\n\t\t\t\tshow_text_voice_camera_tag.setVisibility(View.VISIBLE);\n\t\t\t\tshow_text_voice_camera_divider_amount_desc\n\t\t\t\t\t\t.setVisibility(View.GONE);\n\t\t\t\tshow_text_voice_camera_update_entry.setVisibility(View.VISIBLE);\n\t\t\t}\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tnew ShowDateHandler(this, mCalendar);\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_update_entry.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id\n\t\t\t\t\t\t+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button\n\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(new DisplayTime()\n\t\t\t\t\t\t\t\t\t.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tnew FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG)\n\t\t\t\t\t.show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_voice_details_separator\n\t\t\t\t.setVisibility(View.VISIBLE);\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_update_entry) {\n\t\t\tif (show_text_voice_camera_tag.isShown()) {\n\t\t\t\tif (show_text_voice_camera_tag.getText().toString() != \"\")\n\t\t\t\t\tsaveEntry();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivity(editIntent);\n\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn super.onKeyDown(keyCode, event);\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tif (show_text_voice_camera_tag.isShown()) {\n\t\t\tif (show_text_voice_camera_tag.getText().toString() != \"\")\n\t\t\t\tsaveEntry();\n\t\t}\n\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\tfinish();\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void saveEntry() {\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (show_text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, show_text_voice_camera_tag\n\t\t\t\t\t.getText().toString());\n\t\t}\n\n\t\t// //// ******* Update database if user added additional info *******\n\t\t// ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-01T08:14:33Z", "hash_sni": "a1158fe03ade54954b55fb1c596e101777b85be7", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" import com.vinsol.expensetracker.utils.FileDelete;\n \n import android.app.Activity;\n+import android.content.Intent;\n import android.os.Bundle;\n import android.os.CountDownTimer;\n import android.view.KeyEvent;\n@@ -40,6 +41,7 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \tprivate MyCount countDownTimer;\n \tprivate Button show_text_voice_camera_update_entry;\n \tprivate TextView show_text_voice_camera_description_show;\n+\tprivate ImageView show_text_voice_camera_edit;\n \n \tprivate AudioPlay mAudioPlay;\n \tprivate Long _id = null;\n@@ -66,6 +68,7 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n \t\tshow_text_voice_camera_update_entry = (Button) findViewById(R.id.show_text_voice_camera_update_entry);\n \t\tshow_text_voice_camera_description_show = (TextView) findViewById(R.id.show_text_voice_camera_description_show);\n+\t\tshow_text_voice_camera_edit = (ImageView) findViewById(R.id.show_text_voice_camera_edit);\n \n \t\tmDatabaseAdapter = new DatabaseAdapter(this);\n \n@@ -101,6 +104,7 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n \t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n \t\tshow_text_voice_camera_update_entry.setOnClickListener(this);\n+\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n \n \t\tif (android.os.Environment.getExternalStorageState().equals(\n \t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n@@ -228,6 +232,13 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t\t\t\tsaveEntry();\n \t\t\t}\n \t\t}\n+\t\t\n+\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n+\t\t\tIntent editIntent = new Intent(this, Voice.class);\n+\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n+\t\t\tstartActivity(editIntent);\n+\t\t\tfinish();\n+\t\t}\n \t}\n \n \t// /////// ********* CountdownTimer for Chronometer ********* //////////"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete HashMap, StringString Intent MyCount ShowDateHandler canRead cancel close contains containsKey deleteDatabaseEntryID editDatabase equals findViewById finish get getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getPlayBackTime getRepeatCount getString getStringArrayList getText isAudioPlaying isShown makeText onBackPressed open parseLong printStackTrace put putExtra requestWindowFeature saveEntry setContentView setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack stop stopPlayBack toString updateUI"], "_version_": 1526731139789619200, "subject_t": ["clears #18 clears #17"], "comments_t": ["\t\t// //// ****** If audio recording started then stop recording audio \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// or later, or by the code above on earlier versions of the platform. \t\t\t\t// *******////// \t\t// /////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// //// ******* Update database if user added additional info ******* \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t// ***** /////// \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file ********* \t// /// ****************** Handling back press of key ********** ///////////"], "parents_ss": ["1110dcc1957566af4bb4d4b1033c35e3447b7b2b"], "id": "vinsol/expense-tracker\u0000a1158fe03ade54954b55fb1c596e101777b85be7\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#com.vinsol.expensetracker.ShowVoiceActivity.saveEntry()#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.widget.Toast.show()#android.view.KeyEvent.getRepeatCount()#<unknown>.isAudioPlaying()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.open()#android.content.Context.getString(<unknown>)#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#android.app.Activity.finish()#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.view.View.setVisibility(int)#<unknown>.isAudioPlaying()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.lang.Throwable.printStackTrace()#android.app.Activity.findViewById(<unknown>)#java.io.File.File(java.lang.String)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.widget.Toast.show()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.app.Activity.requestWindowFeature(int)#android.os.CountDownTimer.cancel()#java.lang.CharSequence.toString()#java.lang.CharSequence.toString()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.EditText.getText()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#<unknown>.stopPlayBack()#java.util.Calendar.getInstance()#android.view.View.setVisibility(int)#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.ShowVoiceActivity.onBackPressed()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#android.view.View.setVisibility(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.show()#java.lang.Long.parseLong(java.lang.String)#android.widget.EditText.getText()#<unknown>.getDisplayTime(<unknown>)#android.widget.EditText.getText()#java.lang.String.equals(java.lang.String)#<unknown>.open()#android.view.View.setVisibility(int)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#android.app.Activity.findViewById(<unknown>)#com.vinsol.expensetracker.ShowVoiceActivity.saveEntry()#android.app.Activity.finish()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.isShown()#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#<unknown>.close()#android.widget.ImageView.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.isShown()#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.lang.Long.toString(java.lang.Long)#java.lang.CharSequence.toString()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)", "callsites_t": ["java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) com.vinsol.expensetracker.ShowVoiceActivity.saveEntry() android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) android.widget.Toast.show() android.view.KeyEvent.getRepeatCount() <unknown>.isAudioPlaying() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.open() android.content.Context.getString(<unknown>) <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) android.app.Activity.finish() <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.view.View.setVisibility(int) <unknown>.isAudioPlaying() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.lang.Throwable.printStackTrace() android.app.Activity.findViewById(<unknown>) java.io.File.File(java.lang.String) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.widget.Toast.show() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.app.Activity.requestWindowFeature(int) android.os.CountDownTimer.cancel() java.lang.CharSequence.toString() java.lang.CharSequence.toString() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.EditText.getText() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) <unknown>.stopPlayBack() java.util.Calendar.getInstance() android.view.View.setVisibility(int) java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.ShowVoiceActivity.onBackPressed() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() android.view.View.setVisibility(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.show() java.lang.Long.parseLong(java.lang.String) android.widget.EditText.getText() <unknown>.getDisplayTime(<unknown>) android.widget.EditText.getText() java.lang.String.equals(java.lang.String) <unknown>.open() android.view.View.setVisibility(int) <unknown>.getPlayBackTime() android.app.Activity.finish() android.app.Activity.findViewById(<unknown>) com.vinsol.expensetracker.ShowVoiceActivity.saveEntry() android.app.Activity.finish() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.isShown() java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) <unknown>.close() android.widget.ImageView.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.app.Activity.startActivity(android.content.Intent) android.view.View.isShown() android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.lang.Long.toString(java.lang.Long) java.lang.CharSequence.toString() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.view.View.OnClickListener android.os.Bundle android.widget.TextView android.widget.Button android.widget.RelativeLayout android.view.View android.util.Log android.view.Window com.vinsol.expensetracker.utils.AudioPlay android.app.Activity com.vinsol.expensetracker.utils.RecordingHelper com.vinsol.expensetracker.location.LocationLast android.os.SystemClock android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\n\npublic class Voice extends Activity implements OnClickListener{\n\t\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate String mFileName = \"test1\";\n\tprivate AudioPlay mAudioPlay;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\t\n\t\t///////   ****** No Title Bar   ********* /////////\n        \n        \n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        \n        setContentView(R.layout.text_voice_camera);\n        \n        \n        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n        \n        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n        \n        setGraphicsVoice();\n        controlVoiceChronometer();\n        setClickListeners();\n        \n        ////////   ********  Handle Date Bar   *********   ////////\n        new DateHandler(this);\n        \n        \n        ////////   ********   Starts Recording each time activity starts   ******   ///////\n        mRecordingHelper = new RecordingHelper(mFileName);\n\t\tmRecordingHelper.startRecording();\n\t\t\n\t\t\n\t\t////////*********     Get Last most accurate location info   *********   /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\t\t\n\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\tif(mRecordingHelper.isRecording()){\n\t\t\tmRecordingHelper.stopRecording();\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n\t\t\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\t\t\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n\t\t\n\t\t\n\t\t////  ***** if stop button pressed ****** //////\n\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n\t\t\tmRecordingHelper.stopRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t}\n\t\t\n\t\t\n\t\t////  ***** if play button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n\t\t\tmAudioPlay = new AudioPlay(mFileName);\n\t\t\tLog.v(\"hello\", text_voice_camera_time_details_chronometer.getText()+\"\");\n\t\t\t\n\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n\t\t\tif(!mAudioPlay.isAudioPlaying()){\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\t\t\n\t\t////  ***** if rerecord button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){}\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\t\t\t\n\t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n\t\t\tif(mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(mFileName);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\t}\n\t\n\t\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-17T13:10:27Z", "hash_sni": "c6e09ea52af1874cb5745afb10e44685ec535f8c", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" package com.vinsol.expensetracker;\n \n+import com.vinsol.expensetracker.location.LocationLast;\n import com.vinsol.expensetracker.utils.AudioPlay;\n import com.vinsol.expensetracker.utils.DisplayTime;\n import com.vinsol.expensetracker.utils.RecordingHelper;\n@@ -68,6 +69,9 @@ public class Voice extends Activity implements OnClickListener{\n \t\tmRecordingHelper.startRecording();\n \t\t\n \t\t\n+\t\t////////*********     Get Last most accurate location info   *********   /////////\n+\t\tLocationLast mLocationLast = new LocationLast(this);\n+\t\tmLocationLast.getLastLocation();\n \t}\n \t\n \t@Override"], "score": 1.0, "methods_t": ["AudioPlay DateHandler DisplayTime LocationLast MyCount OnChronometerTickListener RecordingHelper cancel controlVoiceChronometer elapsedRealtime findViewById getDisplayTime getId getLastLocation getPlayBackTime getText isAudioPlaying isRecording length requestWindowFeature setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setVisibility start startPlayBack startRecording stop stopPlayBack stopRecording v"], "_version_": 1526733686172549120, "subject_t": ["Added DatabaseAdapter"], "comments_t": ["\t\t//////   *****  Check whether audio is recording or not   *******   /////// \t//countdowntimer is an abstract class, so extend it and fill in methods         ///////   ***** Sets Title Voice Entry *********/////// \t\t///////   ****** No Title Bar   ********* /////////         ////////   ********    Initializing and assigning memory to UI Items **********    ///////// \t\t///////   ********     Adding On Click Actions to click listeners *********    ////////// \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******////// \t\t\t///////   *******   Chronometer Starts Countdown   ******  /////// \t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** /////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////       \t\t\t//////  ******  Restarts chronometer and recording   *******  //////// \t\t////////    *******    Adding Click Listeners to UI Items ******** ////////// \t\t////  ***** if stop button pressed ****** //////         ////////   ********   Starts Recording each time activity starts   ******   /////// \t\t////////*********     Get Last most accurate location info   *********   ///////// \t\t///////   ***** Sets Title Voice Entry *********/////// \t\t\t//////   ******   Handles UI items on button click  ******  ///////         //////   ******  Shows Voice Details ********//////// \t\t////  ***** if play button pressed ****** //////\t\t \t\t\t//////\t     ********   to handle playback of recorded file   *********   //////// \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////         ////////   ********  Handle Date Bar   *********   //////// \t\t////  ***** if rerecord button pressed ****** //////\t\t \t\t//////   ******   If audio recording started then stop recording audio   *****   ///////"], "parents_ss": ["c20f178370c9726c2807c583adba7736e827bce7"], "id": "vinsol/expense-tracker\u0000c6e09ea52af1874cb5745afb10e44685ec535f8c\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.isRecording()#android.view.View.setVisibility(int)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#android.widget.Chronometer.stop()#<unknown>.AudioPlay(java.lang.String)#<unknown>.stopPlayBack()#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.DisplayTime()#android.os.SystemClock.elapsedRealtime()#<unknown>.RecordingHelper(java.lang.String)#android.app.Activity.setContentView(<unknown>)#android.view.View.setVisibility(int)#<unknown>.getLastLocation()#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#android.app.Activity.findViewById(<unknown>)#com.vinsol.expensetracker.Voice.setClickListeners()#android.widget.Chronometer.setOnChronometerTickListener()#android.app.Activity.findViewById(<unknown>)#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#<unknown>.getPlayBackTime()#.OnChronometerTickListener()#android.view.View.setVisibility(int)#android.app.Activity.requestWindowFeature(int)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#<unknown>.RecordingHelper(java.lang.String)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.app.Activity.findViewById(<unknown>)#<unknown>.startPlayBack()#android.widget.TextView.getText()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#<unknown>.isRecording()#android.app.Activity.findViewById(<unknown>)#android.util.Log.v(java.lang.String, java.lang.String)#<unknown>.startRecording()#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)", "callsites_t": ["android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.isRecording() android.view.View.setVisibility(int) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() <unknown>.stopRecording() android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.controlVoiceChronometer() android.widget.Chronometer.stop() <unknown>.AudioPlay(java.lang.String) <unknown>.stopPlayBack() android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.DisplayTime() android.os.SystemClock.elapsedRealtime() <unknown>.RecordingHelper(java.lang.String) android.app.Activity.setContentView(<unknown>) android.view.View.setVisibility(int) <unknown>.getLastLocation() com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) android.app.Activity.findViewById(<unknown>) com.vinsol.expensetracker.Voice.setClickListeners() android.widget.Chronometer.setOnChronometerTickListener() android.app.Activity.findViewById(<unknown>) android.os.CountDownTimer.cancel() java.lang.CharSequence.length() <unknown>.getPlayBackTime() .OnChronometerTickListener() android.view.View.setVisibility(int) android.app.Activity.requestWindowFeature(int) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) <unknown>.RecordingHelper(java.lang.String) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.app.Activity.findViewById(<unknown>) <unknown>.startPlayBack() android.widget.TextView.getText() com.vinsol.expensetracker.Voice.setGraphicsVoice() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) android.view.View.getId() <unknown>.isRecording() android.app.Activity.findViewById(<unknown>) android.util.Log.v(java.lang.String, java.lang.String) <unknown>.startRecording() android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Yevhen Rezohlazov", "repo_sni": "Inego/Aglona-Reader-Android", "imports_t": ["android.os.CountDownTimer android.content.Context android.graphics.Paint android.graphics.RectF android.graphics.BitmapFactory android.util.AttributeSet android.graphics.PorterDuff android.widget.TextView android.view.View android.util.Log android.view.MotionEvent android.graphics.Bitmap android.graphics.Canvas"], "email_sni": "yevhen.rezohlazov@gmail.com", "contents_t": ["package ru.parallelbooks.aglonareader;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Canvas;\nimport android.graphics.Paint;\nimport android.graphics.PorterDuff;\nimport android.graphics.RectF;\nimport android.os.CountDownTimer;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.widget.TextView;\n\n\npublic class ParallelTextView extends View {\n\tParallelTextData pTD;\n\tMainActivity mainActivity;\n\n\tpublic float splitterMoveOffset;\n\n\tprivate final int BACKGROUND_COLOR = 0xFFFFFFFF;\n\n\tprivate float screenDensityX;\n\tprivate float screenDensityY;\n\tprivate float screenWidth;\n\tprivate float screenHeight;\n\n\tprivate final int STATE_IDLE              = 0;\n\tprivate final int STATE_POINTERDOWN       = 1;\n\tprivate final int STATE_DRAGGING_SPLITTER = 3;\n\tprivate final int STATE_DRAGGING_PAGE     = 4;\n\tprivate final int STATE_PAGEDRAGFINISHING = 5;\n\tprivate final int STATE_PAGEDRAGREVERTING = 6;\n\tprivate final int STATE_SCALING           = 7;\n\tprivate final int STATE_BRIGHTNESS_CHANGE = 8;\n\n\tprivate int state = STATE_IDLE;\n\n\tprivate int firstDownPointerId;\n\tprivate int secondDownPointerId;\n\tprivate float pointerDownPositionX;\n\tprivate float pointerDownPositionY;\n\n\tprivate float initialScalingDistance;\n\tprivate int initialFontProportion;\n\n\tprivate double initialBrightness;\n\n\tprivate long lastSingleTapTime;\n\tprivate final int DOUBLE_TAP_DELAY = 500;\n\n\tprivate LongTapTimer longTapTimer = new LongTapTimer();\n\tprivate final int LONG_TAP_DELAY = 500;\n\n\tprivate float MIN_MOVE_DELTA_INCH = 0.1f;\n\n\t// Bitmaps are made static to avoid memory leaks on Android 2.3.3 and lower\n\tprivate static Bitmap currentPageBitmap;\n\tprivate Canvas currentPageBitmapCanvas;\n\tprivate static Bitmap nextPageBitmap;\n\tprivate Canvas nextPageBitmapCanvas;\n\tprivate float initialFloatingPagePosition;\n\tprivate float floatingPagePosition;\n\n\tprivate boolean switchingToNextPage;\n\n\tprivate static Bitmap shadowBitmap;\n\tprivate float shadowWidth;\n\tprivate RectF shadowRect = new RectF();\n\n\tprivate boolean suppressParallelTextRedrawing = false;\n\n\tprivate long pageAnimationStartTime;\n\tprivate final long PAGE_ANIMATION_DURATION = 300;\n\n\tpublic ParallelTextView(Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t\tmainActivity = (MainActivity) context;\n\n\t\tif (shadowBitmap == null) {\n\t\t\tshadowBitmap = Bitmap.createBitmap(50, 1, Bitmap.Config.ARGB_8888);\n\t\t\tCanvas shadowBitmapCanvas = new Canvas(shadowBitmap);\n\t\t\tPaint shadowPaint = new Paint();\n\n\t\t\tfor (int i = 0; i < 50; ++i) {\n\t\t\t\tshadowPaint.setARGB(200 - i * 4, 0, 0, 0);\n\t\t\t\tshadowBitmapCanvas.drawPoint((float) i, 0.0f, shadowPaint);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void goToNextPage() {\n\t\tif (state == STATE_IDLE) {\n\t\t\tprepareSwitchToNextPage();\n\t\t\tsetState(STATE_PAGEDRAGFINISHING);\n\t\t\tstartPageAnimation(initialFloatingPagePosition);\n\t\t}\n\t}\n\n\tpublic void goToPreviousPage() {\n\t\tif (state == STATE_IDLE) {\n\t\t\tprepareSwitchToPrevPage();\n\t\t\tsetState(STATE_PAGEDRAGREVERTING);\n\t\t\tstartPageAnimation(initialFloatingPagePosition);\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onTouchEvent(MotionEvent event) {\n\t\tfinal int pointerIndex = event.getActionIndex();\n\t\tfinal int pointerId = event.getPointerId(pointerIndex);\n\t\tfinal float x = event.getX(pointerIndex);\n\t\tfinal float y = event.getY(pointerIndex);\n\n\t\tswitch (event.getActionMasked()) {\n\t\t\tcase MotionEvent.ACTION_DOWN:\n\t\t\tcase MotionEvent.ACTION_POINTER_DOWN:\n\t\t\t\tswitch (state) {\n\t\t\t\t\tcase STATE_IDLE:\n\t\t\t\t\t\tsetState(STATE_POINTERDOWN);\n\t\t\t\t\t\tlongTapTimer.start();\n\t\t\t\t\t\tpointerDownPositionX = x;\n\t\t\t\t\t\tpointerDownPositionY = y;\n\t\t\t\t\t\tfirstDownPointerId = pointerId;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_POINTERDOWN:\n\t\t\t\t\t\tlongTapTimer.cancel();\n\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n\t\t\t\t\t\t\tpTD.TurnAdvancedPopupOff();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetState(STATE_SCALING);\n\t\t\t\t\t\tsecondDownPointerId = pointerId;\n\t\t\t\t\t\tinitialScalingDistance = getDistance(x, y, pointerDownPositionX, pointerDownPositionY);\n\t\t\t\t\t\tinitialFontProportion = pTD.fontProportion;\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase MotionEvent.ACTION_MOVE:\n\t\t\t\tswitch (state) {\n\t\t\t\t\tcase STATE_POINTERDOWN:\n\t\t\t\t\t\tif (getHeightDiffInches(pointerDownPositionY, y) > MIN_MOVE_DELTA_INCH) { // vertical movement\n\t\t\t\t\t\t\tsetState(STATE_BRIGHTNESS_CHANGE);\n\t\t\t\t\t\t\tinitialBrightness = pTD.brightness;\n\t\t\t\t\t\t} else if (getWidthDiffInches(pointerDownPositionX, x) > MIN_MOVE_DELTA_INCH) { // horizontal movement\n\t\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal\n\t\t\t\t\t\t\t\t\t&& pTD.opState == 0 && pTD.XonSplitter(pointerDownPositionX, screenDensityX)) {\n\t\t\t\t\t\t\t\tpTD.opState = 1;\n\t\t\t\t\t\t\t\tsplitterMoveOffset = pointerDownPositionX - pTD.splitterPosition;\n\t\t\t\t\t\t\t\tsetState(STATE_DRAGGING_SPLITTER);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetState(STATE_DRAGGING_PAGE);\n\n\t\t\t\t\t\t\t\tif (x > pointerDownPositionX) { // going to prev page\n\t\t\t\t\t\t\t\t\tprepareSwitchToPrevPage();\n\t\t\t\t\t\t\t\t} else { // next page\n\t\t\t\t\t\t\t\t\tprepareSwitchToNextPage();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_SCALING:\n\t\t\t\t\t\tfloat fx = 0, fy = 0;\n\t\t\t\t\t\tboolean firstPointFound = false;\n\n\t\t\t\t\t\tfor (int pi = 0; pi < event.getPointerCount(); ++pi) {\n\t\t\t\t\t\t\tint pid = event.getPointerId(pi);\n\n\t\t\t\t\t\t\tif (pid == firstDownPointerId || pid == secondDownPointerId) {\n\t\t\t\t\t\t\t\tif (firstPointFound) {\n\t\t\t\t\t\t\t\t\tfinal float distance = getDistance(fx, fy, event.getX(pi), event.getY(pi));\n\t\t\t\t\t\t\t\t\tfinal float factor = distance / initialScalingDistance;\n\t\t\t\t\t\t\t\t\tpTD.fontProportion = (int)(initialFontProportion * factor);\n\t\t\t\t\t\t\t\t\tif (pTD.fontProportion < 0) {\n\t\t\t\t\t\t\t\t\t\tpTD.fontProportion = 0;\n\t\t\t\t\t\t\t\t\t} else if (pTD.fontProportion > 1000) {\n\t\t\t\t\t\t\t\t\t\tpTD.fontProportion = 1000;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tpTD.setFontSize(true);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfx = event.getX(pi);\n\t\t\t\t\t\t\t\t\tfy = event.getY(pi);\n\t\t\t\t\t\t\t\t\tfirstPointFound = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_DRAGGING_SPLITTER:\n\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal && pTD.opState == 1) {\n\t\t\t\t\t\t\tfloat newSplitterPosition = x - splitterMoveOffset;\n\n\t\t\t\t\t\t\tif (newSplitterPosition != pTD.splitterPosition) {\n\n\t\t\t\t\t\t\t\tpTD.setSplitterPosition(newSplitterPosition);\n\t\t\t\t\t\t\t\tpTD.SetSplitterRatioByPosition();\n\t\t\t\t\t\t\t\tpTD.ProcessLayoutChange(false);\n\t\t\t\t\t\t\t\tinvalidateParallelText();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_DRAGGING_PAGE:\n\t\t\t\t\t\tfinal float deltaX = x - pointerDownPositionX;\n\t\t\t\t\t\tfloatingPagePosition = initialFloatingPagePosition + deltaX;\n\t\t\t\t\t\tif (floatingPagePosition > 0.0f) {\n\t\t\t\t\t\t\tfloatingPagePosition = 0.0f;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinvalidate();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase STATE_BRIGHTNESS_CHANGE:\n\t\t\t\t\t\tfinal double delta = (y - pointerDownPositionY) / screenHeight * 2.0;\n\t\t\t\t\t\tpTD.brightness = initialBrightness + delta;\n\t\t\t\t\t\tif (pTD.brightness < 0.5) {\n\t\t\t\t\t\t\tpTD.brightness = 0.5f;\n\t\t\t\t\t\t} else if (pTD.brightness > 1.0) {\n\t\t\t\t\t\t\tpTD.brightness = 1.0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpTD.SetColorsByBrightness();\n\t\t\t\t\t\tinvalidateParallelText();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase MotionEvent.ACTION_UP:\n\t\t\tcase MotionEvent.ACTION_POINTER_UP:\n\t\t\t\tswitch (state) {\n\t\t\t\t\tcase STATE_SCALING:\n\t\t\t\t\t\tif (pointerId == firstDownPointerId) {\n\t\t\t\t\t\t\tfirstDownPointerId = -1;\n\t\t\t\t\t\t} else if (pointerId == secondDownPointerId) {\n\t\t\t\t\t\t\tsecondDownPointerId = -1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (firstDownPointerId == -1 && secondDownPointerId == -1) {\n\t\t\t\t\t\t\tsetState(STATE_IDLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_POINTERDOWN:\n\t\t\t\t\t\tfinal long time = System.currentTimeMillis();\n\n\t\t\t\t\t\tsetState(STATE_IDLE);\n\t\t\t\t\t\tif (time - lastSingleTapTime < DOUBLE_TAP_DELAY) {\n\t\t\t\t\t\t\tprocessDoubleTap();\n\t\t\t\t\t\t\tlastSingleTapTime = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprocessSingleTap(x, y);\n\t\t\t\t\t\t\tlastSingleTapTime = System.currentTimeMillis();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_DRAGGING_SPLITTER:\n\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal && pTD.opState == 1) {\n\t\t\t\t\t\t\tpTD.opState = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetState(STATE_IDLE);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_BRIGHTNESS_CHANGE:\n\t\t\t\t\t\tsetState(STATE_IDLE);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase STATE_DRAGGING_PAGE:\n\t\t\t\t\t\tif (switchingToNextPage) {\n\t\t\t\t\t\t\tif (!switchingToNextPage) { // revert page change\n\t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = true;\n\t\t\t\t\t\t\t\tpTD.ProcessPageDown();\n\t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsetState(STATE_PAGEDRAGFINISHING);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (switchingToNextPage) { // revert page change\n\t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = true;\n\t\t\t\t\t\t\t\tpTD.ProcessPageUp();\n\t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsetState(STATE_PAGEDRAGREVERTING);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstartPageAnimation(floatingPagePosition);\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate void prepareSwitchToNextPage() {\n\t\tswitchingToNextPage = true;\n\t\tsuppressParallelTextRedrawing = true;\n\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n\t\t\tpTD.TurnAdvancedPopupOff();\n\t\t}\n\t\tpTD.ProcessPageDown();\n\t\tsuppressParallelTextRedrawing = false;\n\t\tnextPageBitmapCanvas.drawColor(BACKGROUND_COLOR, PorterDuff.Mode.SRC);\n\t\tpTD.onDraw(nextPageBitmapCanvas);\n\t\tinitialFloatingPagePosition = 0;\n\t}\n\n\tprivate void prepareSwitchToPrevPage() {\n\t\tswitchingToNextPage = false;\n\t\tsuppressParallelTextRedrawing = true;\n\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n\t\t\tpTD.TurnAdvancedPopupOff();\n\t\t}\n\t\tpTD.ProcessPageUp();\n\t\tsuppressParallelTextRedrawing = false;\n\t\tnextPageBitmapCanvas.drawColor(BACKGROUND_COLOR, PorterDuff.Mode.SRC);\n\t\tpTD.onDraw(nextPageBitmapCanvas);\n\t\tswapBitmaps();\n\t\tinitialFloatingPagePosition = -screenWidth - shadowWidth;\n\t}\n\n\tprivate void swapBitmaps() {\n\t\tfinal Bitmap tempBitmap = nextPageBitmap;\n\t\tnextPageBitmap = currentPageBitmap;\n\t\tcurrentPageBitmap = tempBitmap;\n\n\t\tfinal Canvas tempCanvas = nextPageBitmapCanvas;\n\t\tnextPageBitmapCanvas = currentPageBitmapCanvas;\n\t\tcurrentPageBitmapCanvas = tempCanvas;\n\t}\n\n\tprivate void startPageAnimation(float ininitalPagePosition) {\n\t\tinitialFloatingPagePosition = ininitalPagePosition;\n\t\tpageAnimationStartTime = System.currentTimeMillis();\n\t\tinvalidate();\n\t}\n\n\tprivate void setState(int state) {\n\t\tLog.d(\"ParalleltextView\", \"State change: \" + this.state + \" -> \" + state);\n\t\tthis.state = state;\n\t}\n\n\tprivate void processSingleTap(float x, float y) {\n\t\tpTD.LastMouseX = x;\n\t\tpTD.LastMouseY = y;\n\n\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n\t\t\tpTD.ProcessMousePosition(true, true);\n\t\t}\n\t}\n\n\tprivate void processLongTap() {\n\t\tmainActivity.openContextMenu(this);\n\t}\n\n\tprivate void processDoubleTap() {\n\n\t}\n\n\t@Override\n\tprotected void onSizeChanged(int w, int h, int oldw, int oldh) {\n\t\tif (pTD == null)\n\t\t\treturn;\n\n\t\tif (currentPageBitmap != null) {\n\t\t\tcurrentPageBitmap.recycle();\n\t\t}\n\n\t\tif (nextPageBitmap != null) {\n\t\t\tnextPageBitmap.recycle();\n\t\t}\n\n\t\tcurrentPageBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);\n\t\tcurrentPageBitmapCanvas = new Canvas(currentPageBitmap);\n\t\tnextPageBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);\n\t\tnextPageBitmapCanvas = new Canvas(nextPageBitmap);\n\n\t\tif (!pTD.fontRangeSet) {\n\t\t\tpTD.setFontRange(w, h);\n\t\t\tpTD.setFontSize(false);\n\t\t}\n\t\t\n\t\tpTD.viewWidth = w;\n\t\tpTD.viewHeight = h;\n\t\tpTD.pTV = this;\n\t\tpTD.SetSplitterPositionByRatio();\n\t\tpTD.ProcessLayoutChange(true);\n\n\t\tscreenDensityX = getContext().getResources().getDisplayMetrics().xdpi;\n\t\tscreenDensityY = getContext().getResources().getDisplayMetrics().ydpi;\n\t\tscreenWidth = w;\n\t\tscreenHeight = h;\n\t\tshadowWidth = screenWidth / 25.0f;\n\n\t\tsuper.onSizeChanged(w, h, oldw, oldh);\n\t}\n\n\t@Override\n\tprotected void onDraw(Canvas canvas) {\n\t\tsuper.onDraw(canvas);\n\n\t\tif (state == STATE_PAGEDRAGFINISHING || state == STATE_PAGEDRAGREVERTING) // animating\n\t\t{\n\t\t\tfinal float finalPagePos = state == STATE_PAGEDRAGFINISHING ? (-screenWidth - shadowWidth) : 0.0f;\n\n\t\t\tfinal float coef = (System.currentTimeMillis() - pageAnimationStartTime) / (float)PAGE_ANIMATION_DURATION;\n\n\t\t\tif (coef >= 1.0f) {\n\t\t\t\tfloatingPagePosition = 0.0f;\n\n\t\t\t\tif (state == STATE_PAGEDRAGFINISHING) {\n\t\t\t\t\tswapBitmaps();\n\t\t\t\t}\n\n\t\t\t\tsetState(STATE_IDLE);\n\t\t\t} else {\n\t\t\t\tfinal float transformedCoef = ((float)Math.sin(coef * Math.PI - Math.PI / 2.0) + 1.0f) / 2.0f; // transform by sine\n\t\t\t\tfloatingPagePosition = initialFloatingPagePosition + (finalPagePos - initialFloatingPagePosition) * transformedCoef;\n\t\t\t\tinvalidate();\n\t\t\t}\n\t\t}\n\n\t\tif (state == STATE_DRAGGING_PAGE || state == STATE_PAGEDRAGFINISHING || state == STATE_PAGEDRAGREVERTING) {\n\t\t\tcanvas.drawBitmap(nextPageBitmap, 0, 0, null);\n\n\t\t\tfinal float shadowLeft = floatingPagePosition + screenWidth;\n\t\t\tfinal float shadowRight = shadowLeft + shadowWidth;\n\t\t\tshadowRect.set(shadowLeft, 0.0f, shadowRight, screenHeight);\n\t\t\tcanvas.drawBitmap(shadowBitmap, null, shadowRect, null);\n\t\t}\n\n\t\tcanvas.drawBitmap(currentPageBitmap, floatingPagePosition, 0, null);\n\t}\n\n\tpublic void invalidateParallelText() {\n\t\tif (suppressParallelTextRedrawing) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (pTD != null) {\n\t\t\tcurrentPageBitmapCanvas.drawColor(BACKGROUND_COLOR, PorterDuff.Mode.SRC);\n\t\t\tpTD.onDraw(currentPageBitmapCanvas);\n\t\t}\n\n\t\tinvalidate();\n\t}\n\n\tpublic void updateNoBookVisibility() {\n\t\t\n\t\tMainActivity mActivity = (MainActivity) getContext();\n\t\t\n\t\t((TextView)mActivity.findViewById(R.id.emptyBookView)).setVisibility(pTD.bookOpened ? View.INVISIBLE : View.VISIBLE);\n\t}\n\n\tprivate float getHeightDiffInches(float y1, float y2) {\n\t\treturn Math.abs(y1 - y2) / screenDensityY;\n\t}\n\n\tprivate float getWidthDiffInches(float x1, float x2) {\n\t\treturn Math.abs(x1 - x2) / screenDensityX;\n\t}\n\n\tprivate static float getDistance(float x1, float y1, float x2, float y2) {\n\t\tfinal float dX = x1 - x2;\n\t\tfinal float dY = y1 - y2;\n\t\treturn (float)Math.sqrt(dX * dX + dY * dY);\n\t}\n\n\tprivate class LongTapTimer extends CountDownTimer {\n\t\tpublic LongTapTimer() {\n\t\t\tsuper(LONG_TAP_DELAY, 1000000);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long l) {\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tmainActivity.runOnUiThread(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tif (state == STATE_POINTERDOWN) {\n\t\t\t\t\t\tsetState(STATE_IDLE);\n\t\t\t\t\t\tprocessLongTap();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2015-06-29T16:03:34Z", "hash_sni": "d178885417f99e0fcc5d3990127a1770db73184e", "name_sni": "app/src/main/java/ru/parallelbooks/aglonareader/ParallelTextView.java", "patch_t": [" package ru.parallelbooks.aglonareader;\n \n import android.content.Context;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n import android.graphics.Canvas;\n+import android.graphics.Paint;\n+import android.graphics.PorterDuff;\n+import android.graphics.RectF;\n+import android.os.CountDownTimer;\n import android.util.AttributeSet;\n+import android.util.Log;\n import android.view.MotionEvent;\n import android.view.View;\n import android.widget.TextView;\n \n-public class ParallelTextView extends View {\n \n+public class ParallelTextView extends View {\n \tParallelTextData pTD;\n+\tMainActivity mainActivity;\n \n \tpublic float splitterMoveOffset;\n \n-\tprivate float startX;\n-\n-\tprivate float startY;\n+\tprivate final int BACKGROUND_COLOR = 0xFFFFFFFF;\n \n \tprivate float screenDensityX;\n-\n \tprivate float screenDensityY;\n+\tprivate float screenWidth;\n+\tprivate float screenHeight;\n \n-\t// / in inches\n-\tprivate double distance(float dX, float dY) {\n-\n-\t\treturn Math.sqrt(dX * dX + dY * dY);\n-\n-\t}\n+\tprivate final int STATE_IDLE              = 0;\n+\tprivate final int STATE_POINTERDOWN       = 1;\n+\tprivate final int STATE_DRAGGING_SPLITTER = 3;\n+\tprivate final int STATE_DRAGGING_PAGE     = 4;\n+\tprivate final int STATE_PAGEDRAGFINISHING = 5;\n+\tprivate final int STATE_PAGEDRAGREVERTING = 6;\n+\tprivate final int STATE_SCALING           = 7;\n+\tprivate final int STATE_BRIGHTNESS_CHANGE = 8;\n \n-\t@Override\n-\tpublic boolean onTouchEvent(MotionEvent event) {\n+\tprivate int state = STATE_IDLE;\n \n-\t\tMainActivity mainActivity = (MainActivity) getContext();\n+\tprivate int firstDownPointerId;\n+\tprivate int secondDownPointerId;\n+\tprivate float pointerDownPositionX;\n+\tprivate float pointerDownPositionY;\n \n-\t\tswitch (event.getAction()) {\n-\t\tcase MotionEvent.ACTION_UP:\n+\tprivate float initialScalingDistance;\n+\tprivate int initialFontProportion;\n \n-\t\t\tif (mainActivity.seekBarMode != 0) {\n-\t\t\t\tmainActivity.setSeekBarMode(MainActivity.SEEKBAR_MODE_OFF);\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t\t\n-\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal) {\n-\t\t\t\tif (pTD.opState == 1) {\n-\t\t\t\t\tpTD.opState = 0;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n+\tprivate double initialBrightness;\n \n-\t\t\tpTD.LastMouseX = startX;\n-\t\t\tpTD.LastMouseY = startY;\n+\tprivate long lastSingleTapTime;\n+\tprivate final int DOUBLE_TAP_DELAY = 500;\n \n-\t\t\tfloat dstX = Math.abs((event.getX() - startX) / screenDensityX);\n+\tprivate LongTapTimer longTapTimer = new LongTapTimer();\n+\tprivate final int LONG_TAP_DELAY = 500;\n \n-\t\t\tfloat dstY = Math.abs((event.getY() - startY) / screenDensityY);\n+\tprivate float MIN_MOVE_DELTA_INCH = 0.1f;\n \n-\t\t\tdouble dst = distance(dstX, dstY);\n+\t// Bitmaps are made static to avoid memory leaks on Android 2.3.3 and lower\n+\tprivate static Bitmap currentPageBitmap;\n+\tprivate Canvas currentPageBitmapCanvas;\n+\tprivate static Bitmap nextPageBitmap;\n+\tprivate Canvas nextPageBitmapCanvas;\n+\tprivate float initialFloatingPagePosition;\n+\tprivate float floatingPagePosition;\n \n-\t\t\tif (dst < ParallelTextData.FINGERTIP\n-\t\t\t\t\t&& pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n+\tprivate boolean switchingToNextPage;\n \n-\t\t\t\tpTD.ProcessMousePosition(true, true);\n-\t\t\t\tbreak;\n+\tprivate static Bitmap shadowBitmap;\n+\tprivate float shadowWidth;\n+\tprivate RectF shadowRect = new RectF();\n \n-\t\t\t} else {\n+\tprivate boolean suppressParallelTextRedrawing = false;\n \n-\t\t\t\t\n+\tprivate long pageAnimationStartTime;\n+\tprivate final long PAGE_ANIMATION_DURATION = 300;\n \n-\t\t\t\t// Let's determine, which is MOAR\n-\t\t\t\t// x distance or y distance.\n-\t\t\t\t// and additional requirement is that the bigger to the smaller\n-\t\t\t\t// has to be at least two times\n+\tpublic ParallelTextView(Context context, AttributeSet attrs) {\n+\t\tsuper(context, attrs);\n+\t\tmainActivity = (MainActivity) context;\n \n-\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced)\n-\t\t\t\t\tpTD.TurnAdvancedPopupOff();\n+\t\tif (shadowBitmap == null) {\n+\t\t\tshadowBitmap = Bitmap.createBitmap(50, 1, Bitmap.Config.ARGB_8888);\n+\t\t\tCanvas shadowBitmapCanvas = new Canvas(shadowBitmap);\n+\t\t\tPaint shadowPaint = new Paint();\n \n+\t\t\tfor (int i = 0; i < 50; ++i) {\n+\t\t\t\tshadowPaint.setARGB(200 - i * 4, 0, 0, 0);\n+\t\t\t\tshadowBitmapCanvas.drawPoint((float) i, 0.0f, shadowPaint);\n \t\t\t}\n+\t\t}\n+\t}\n \n-\t\t\tProcessNavigation(event);\n-\n-\t\t\tbreak;\n+\tpublic void goToNextPage() {\n+\t\tif (state == STATE_IDLE) {\n+\t\t\tprepareSwitchToNextPage();\n+\t\t\tsetState(STATE_PAGEDRAGFINISHING);\n+\t\t\tstartPageAnimation(initialFloatingPagePosition);\n+\t\t}\n+\t}\n \n-\t\tcase MotionEvent.ACTION_DOWN:\n+\tpublic void goToPreviousPage() {\n+\t\tif (state == STATE_IDLE) {\n+\t\t\tprepareSwitchToPrevPage();\n+\t\t\tsetState(STATE_PAGEDRAGREVERTING);\n+\t\t\tstartPageAnimation(initialFloatingPagePosition);\n+\t\t}\n+\t}\n \n-\t\t\tif (mainActivity.seekBarMode != 0)\n+\t@Override\n+\tpublic boolean onTouchEvent(MotionEvent event) {\n+\t\tfinal int pointerIndex = event.getActionIndex();\n+\t\tfinal int pointerId = event.getPointerId(pointerIndex);\n+\t\tfinal float x = event.getX(pointerIndex);\n+\t\tfinal float y = event.getY(pointerIndex);\n+\n+\t\tswitch (event.getActionMasked()) {\n+\t\t\tcase MotionEvent.ACTION_DOWN:\n+\t\t\tcase MotionEvent.ACTION_POINTER_DOWN:\n+\t\t\t\tswitch (state) {\n+\t\t\t\t\tcase STATE_IDLE:\n+\t\t\t\t\t\tsetState(STATE_POINTERDOWN);\n+\t\t\t\t\t\tlongTapTimer.start();\n+\t\t\t\t\t\tpointerDownPositionX = x;\n+\t\t\t\t\t\tpointerDownPositionY = y;\n+\t\t\t\t\t\tfirstDownPointerId = pointerId;\n+\t\t\t\t\t\treturn true;\n+\t\t\t\t\tcase STATE_POINTERDOWN:\n+\t\t\t\t\t\tlongTapTimer.cancel();\n+\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n+\t\t\t\t\t\t\tpTD.TurnAdvancedPopupOff();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tsetState(STATE_SCALING);\n+\t\t\t\t\t\tsecondDownPointerId = pointerId;\n+\t\t\t\t\t\tinitialScalingDistance = getDistance(x, y, pointerDownPositionX, pointerDownPositionY);\n+\t\t\t\t\t\tinitialFontProportion = pTD.fontProportion;\n+\t\t\t\t\t\treturn true;\n+\t\t\t\t}\n \t\t\t\tbreak;\n-\n-\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal\n-\t\t\t\t\t&& pTD.opState == 0) {\n-\n-\t\t\t\tfloat eventX = event.getX();\n-\n-\t\t\t\tif (pTD.XonSplitter(eventX, screenDensityX)) {\n-\t\t\t\t\tpTD.opState = 1;\n-\t\t\t\t\tsplitterMoveOffset = eventX - pTD.splitterPosition;\n-\t\t\t\t\tbreak;\n+\t\t\tcase MotionEvent.ACTION_MOVE:\n+\t\t\t\tswitch (state) {\n+\t\t\t\t\tcase STATE_POINTERDOWN:\n+\t\t\t\t\t\tif (getHeightDiffInches(pointerDownPositionY, y) > MIN_MOVE_DELTA_INCH) { // vertical movement\n+\t\t\t\t\t\t\tsetState(STATE_BRIGHTNESS_CHANGE);\n+\t\t\t\t\t\t\tinitialBrightness = pTD.brightness;\n+\t\t\t\t\t\t} else if (getWidthDiffInches(pointerDownPositionX, x) > MIN_MOVE_DELTA_INCH) { // horizontal movement\n+\t\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal\n+\t\t\t\t\t\t\t\t\t&& pTD.opState == 0 && pTD.XonSplitter(pointerDownPositionX, screenDensityX)) {\n+\t\t\t\t\t\t\t\tpTD.opState = 1;\n+\t\t\t\t\t\t\t\tsplitterMoveOffset = pointerDownPositionX - pTD.splitterPosition;\n+\t\t\t\t\t\t\t\tsetState(STATE_DRAGGING_SPLITTER);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tsetState(STATE_DRAGGING_PAGE);\n+\n+\t\t\t\t\t\t\t\tif (x > pointerDownPositionX) { // going to prev page\n+\t\t\t\t\t\t\t\t\tprepareSwitchToPrevPage();\n+\t\t\t\t\t\t\t\t} else { // next page\n+\t\t\t\t\t\t\t\t\tprepareSwitchToNextPage();\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn true;\n+\t\t\t\t\tcase STATE_SCALING:\n+\t\t\t\t\t\tfloat fx = 0, fy = 0;\n+\t\t\t\t\t\tboolean firstPointFound = false;\n+\n+\t\t\t\t\t\tfor (int pi = 0; pi < event.getPointerCount(); ++pi) {\n+\t\t\t\t\t\t\tint pid = event.getPointerId(pi);\n+\n+\t\t\t\t\t\t\tif (pid == firstDownPointerId || pid == secondDownPointerId) {\n+\t\t\t\t\t\t\t\tif (firstPointFound) {\n+\t\t\t\t\t\t\t\t\tfinal float distance = getDistance(fx, fy, event.getX(pi), event.getY(pi));\n+\t\t\t\t\t\t\t\t\tfinal float factor = distance / initialScalingDistance;\n+\t\t\t\t\t\t\t\t\tpTD.fontProportion = (int)(initialFontProportion * factor);\n+\t\t\t\t\t\t\t\t\tif (pTD.fontProportion < 0) {\n+\t\t\t\t\t\t\t\t\t\tpTD.fontProportion = 0;\n+\t\t\t\t\t\t\t\t\t} else if (pTD.fontProportion > 1000) {\n+\t\t\t\t\t\t\t\t\t\tpTD.fontProportion = 1000;\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\tpTD.setFontSize(true);\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tfx = event.getX(pi);\n+\t\t\t\t\t\t\t\t\tfy = event.getY(pi);\n+\t\t\t\t\t\t\t\t\tfirstPointFound = true;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn true;\n+\t\t\t\t\tcase STATE_DRAGGING_SPLITTER:\n+\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal && pTD.opState == 1) {\n+\t\t\t\t\t\t\tfloat newSplitterPosition = x - splitterMoveOffset;\n+\n+\t\t\t\t\t\t\tif (newSplitterPosition != pTD.splitterPosition) {\n+\n+\t\t\t\t\t\t\t\tpTD.setSplitterPosition(newSplitterPosition);\n+\t\t\t\t\t\t\t\tpTD.SetSplitterRatioByPosition();\n+\t\t\t\t\t\t\t\tpTD.ProcessLayoutChange(false);\n+\t\t\t\t\t\t\t\tinvalidateParallelText();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn true;\n+\t\t\t\t\tcase STATE_DRAGGING_PAGE:\n+\t\t\t\t\t\tfinal float deltaX = x - pointerDownPositionX;\n+\t\t\t\t\t\tfloatingPagePosition = initialFloatingPagePosition + deltaX;\n+\t\t\t\t\t\tif (floatingPagePosition > 0.0f) {\n+\t\t\t\t\t\t\tfloatingPagePosition = 0.0f;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tinvalidate();\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase STATE_BRIGHTNESS_CHANGE:\n+\t\t\t\t\t\tfinal double delta = (y - pointerDownPositionY) / screenHeight * 2.0;\n+\t\t\t\t\t\tpTD.brightness = initialBrightness + delta;\n+\t\t\t\t\t\tif (pTD.brightness < 0.5) {\n+\t\t\t\t\t\t\tpTD.brightness = 0.5f;\n+\t\t\t\t\t\t} else if (pTD.brightness > 1.0) {\n+\t\t\t\t\t\t\tpTD.brightness = 1.0;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tpTD.SetColorsByBrightness();\n+\t\t\t\t\t\tinvalidateParallelText();\n+\t\t\t\t\t\tbreak;\n \t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tstartX = event.getX();\n-\t\t\tstartY = event.getY();\n+\t\t\t\tbreak;\n+\t\t\tcase MotionEvent.ACTION_UP:\n+\t\t\tcase MotionEvent.ACTION_POINTER_UP:\n+\t\t\t\tswitch (state) {\n+\t\t\t\t\tcase STATE_SCALING:\n+\t\t\t\t\t\tif (pointerId == firstDownPointerId) {\n+\t\t\t\t\t\t\tfirstDownPointerId = -1;\n+\t\t\t\t\t\t} else if (pointerId == secondDownPointerId) {\n+\t\t\t\t\t\t\tsecondDownPointerId = -1;\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tif (firstDownPointerId == -1 && secondDownPointerId == -1) {\n+\t\t\t\t\t\t\tsetState(STATE_IDLE);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn true;\n+\t\t\t\t\tcase STATE_POINTERDOWN:\n+\t\t\t\t\t\tfinal long time = System.currentTimeMillis();\n+\n+\t\t\t\t\t\tsetState(STATE_IDLE);\n+\t\t\t\t\t\tif (time - lastSingleTapTime < DOUBLE_TAP_DELAY) {\n+\t\t\t\t\t\t\tprocessDoubleTap();\n+\t\t\t\t\t\t\tlastSingleTapTime = 0;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tprocessSingleTap(x, y);\n+\t\t\t\t\t\t\tlastSingleTapTime = System.currentTimeMillis();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn true;\n+\t\t\t\t\tcase STATE_DRAGGING_SPLITTER:\n+\t\t\t\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal && pTD.opState == 1) {\n+\t\t\t\t\t\t\tpTD.opState = 0;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tsetState(STATE_IDLE);\n+\t\t\t\t\t\treturn true;\n+\t\t\t\t\tcase STATE_BRIGHTNESS_CHANGE:\n+\t\t\t\t\t\tsetState(STATE_IDLE);\n+\t\t\t\t\t\treturn true;\n+\t\t\t\t\tcase STATE_DRAGGING_PAGE:\n+\t\t\t\t\t\tif (switchingToNextPage) {\n+\t\t\t\t\t\t\tif (!switchingToNextPage) { // revert page change\n+\t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = true;\n+\t\t\t\t\t\t\t\tpTD.ProcessPageDown();\n+\t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = false;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tsetState(STATE_PAGEDRAGFINISHING);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tif (switchingToNextPage) { // revert page change\n+\t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = true;\n+\t\t\t\t\t\t\t\tpTD.ProcessPageUp();\n+\t\t\t\t\t\t\t\tsuppressParallelTextRedrawing = false;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tsetState(STATE_PAGEDRAGREVERTING);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tstartPageAnimation(floatingPagePosition);\n+\t\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t}\n \n-\t\t\tbreak;\n+\t\treturn false;\n+\t}\n \n-\t\tcase MotionEvent.ACTION_MOVE:\n+\tprivate void prepareSwitchToNextPage() {\n+\t\tswitchingToNextPage = true;\n+\t\tsuppressParallelTextRedrawing = true;\n+\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n+\t\t\tpTD.TurnAdvancedPopupOff();\n+\t\t}\n+\t\tpTD.ProcessPageDown();\n+\t\tsuppressParallelTextRedrawing = false;\n+\t\tnextPageBitmapCanvas.drawColor(BACKGROUND_COLOR, PorterDuff.Mode.SRC);\n+\t\tpTD.onDraw(nextPageBitmapCanvas);\n+\t\tinitialFloatingPagePosition = 0;\n+\t}\n \n-\t\t\tif (mainActivity.seekBarMode != 0)\n-\t\t\t\tbreak;\n+\tprivate void prepareSwitchToPrevPage() {\n+\t\tswitchingToNextPage = false;\n+\t\tsuppressParallelTextRedrawing = true;\n+\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n+\t\t\tpTD.TurnAdvancedPopupOff();\n+\t\t}\n+\t\tpTD.ProcessPageUp();\n+\t\tsuppressParallelTextRedrawing = false;\n+\t\tnextPageBitmapCanvas.drawColor(BACKGROUND_COLOR, PorterDuff.Mode.SRC);\n+\t\tpTD.onDraw(nextPageBitmapCanvas);\n+\t\tswapBitmaps();\n+\t\tinitialFloatingPagePosition = -screenWidth - shadowWidth;\n+\t}\n \n-\t\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Normal\n-\t\t\t\t\t&& pTD.opState == 1) {\n-\t\t\t\t// Move splitter\n+\tprivate void swapBitmaps() {\n+\t\tfinal Bitmap tempBitmap = nextPageBitmap;\n+\t\tnextPageBitmap = currentPageBitmap;\n+\t\tcurrentPageBitmap = tempBitmap;\n \n-\t\t\t\tfloat eventX = event.getX();\n+\t\tfinal Canvas tempCanvas = nextPageBitmapCanvas;\n+\t\tnextPageBitmapCanvas = currentPageBitmapCanvas;\n+\t\tcurrentPageBitmapCanvas = tempCanvas;\n+\t}\n \n-\t\t\t\tfloat newSplitterPosition = eventX - splitterMoveOffset;\n+\tprivate void startPageAnimation(float ininitalPagePosition) {\n+\t\tinitialFloatingPagePosition = ininitalPagePosition;\n+\t\tpageAnimationStartTime = System.currentTimeMillis();\n+\t\tinvalidate();\n+\t}\n \n-\t\t\t\tif (newSplitterPosition != pTD.splitterPosition) {\n+\tprivate void setState(int state) {\n+\t\tLog.d(\"ParalleltextView\", \"State change: \" + this.state + \" -> \" + state);\n+\t\tthis.state = state;\n+\t}\n \n-\t\t\t\t\tpTD.setSplitterPosition(newSplitterPosition);\n-\t\t\t\t\tpTD.SetSplitterRatioByPosition();\n-\t\t\t\t\tpTD.ProcessLayoutChange(false);\n-\t\t\t\t\tinvalidate();\n-\t\t\t\t}\n-\t\t\t}\n+\tprivate void processSingleTap(float x, float y) {\n+\t\tpTD.LastMouseX = x;\n+\t\tpTD.LastMouseY = y;\n \n+\t\tif (pTD.LayoutMode == ParallelTextData.LayoutMode_Advanced) {\n+\t\t\tpTD.ProcessMousePosition(true, true);\n \t\t}\n+\t}\n \n-\t\treturn true;\n+\tprivate void processLongTap() {\n+\t\tmainActivity.openContextMenu(this);\n \t}\n \n-\tprivate void ProcessNavigation(MotionEvent event) {\n-\t\t\n-\t\tif (pTD.Number() == 0)\n-\t\t\treturn;\n-\t\t\n-\t\tfloat part = pTD.LastMouseY / pTD.viewHeight;\n-\t\t\n-\t\t\n+\tprivate void processDoubleTap() {\n \n-\t\tif (part >= 0.75f)\n-\t\t\tpTD.ProcessPageDown();\n-\t\telse if (part >= 0.5f)\n-\t\t\tpTD.ProcessKeyDown();\n-\t\telse if (part >= 0.25f)\n-\t\t\tpTD.ProcessKeyUp();\n-\t\telse\n-\t\t\tpTD.ProcessPageUp();\n \t}\n \n \t@Override\n \tprotected void onSizeChanged(int w, int h, int oldw, int oldh) {\n \t\tif (pTD == null)\n \t\t\treturn;\n-\t\t\n+\n+\t\tif (currentPageBitmap != null) {\n+\t\t\tcurrentPageBitmap.recycle();\n+\t\t}\n+\n+\t\tif (nextPageBitmap != null) {\n+\t\t\tnextPageBitmap.recycle();\n+\t\t}\n+\n+\t\tcurrentPageBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);\n+\t\tcurrentPageBitmapCanvas = new Canvas(currentPageBitmap);\n+\t\tnextPageBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);\n+\t\tnextPageBitmapCanvas = new Canvas(nextPageBitmap);\n+\n \t\tif (!pTD.fontRangeSet) {\n \t\t\tpTD.setFontRange(w, h);\n \t\t\tpTD.setFontSize(false);\n@@ -167,25 +378,61 @@ public class ParallelTextView extends View {\n \n \t\tscreenDensityX = getContext().getResources().getDisplayMetrics().xdpi;\n \t\tscreenDensityY = getContext().getResources().getDisplayMetrics().ydpi;\n+\t\tscreenWidth = w;\n+\t\tscreenHeight = h;\n+\t\tshadowWidth = screenWidth / 25.0f;\n \n \t\tsuper.onSizeChanged(w, h, oldw, oldh);\n \t}\n \n-\tpublic ParallelTextView(Context context, AttributeSet attrs) {\n+\t@Override\n+\tprotected void onDraw(Canvas canvas) {\n+\t\tsuper.onDraw(canvas);\n \n-\t\tsuper(context, attrs);\n+\t\tif (state == STATE_PAGEDRAGFINISHING || state == STATE_PAGEDRAGREVERTING) // animating\n+\t\t{\n+\t\t\tfinal float finalPagePos = state == STATE_PAGEDRAGFINISHING ? (-screenWidth - shadowWidth) : 0.0f;\n \n-\t}\n+\t\t\tfinal float coef = (System.currentTimeMillis() - pageAnimationStartTime) / (float)PAGE_ANIMATION_DURATION;\n \n-\t@Override\n-\tprotected void onDraw(Canvas canvas) {\n+\t\t\tif (coef >= 1.0f) {\n+\t\t\t\tfloatingPagePosition = 0.0f;\n \n-\t\tsuper.onDraw(canvas);\n+\t\t\t\tif (state == STATE_PAGEDRAGFINISHING) {\n+\t\t\t\t\tswapBitmaps();\n+\t\t\t\t}\n+\n+\t\t\t\tsetState(STATE_IDLE);\n+\t\t\t} else {\n+\t\t\t\tfinal float transformedCoef = ((float)Math.sin(coef * Math.PI - Math.PI / 2.0) + 1.0f) / 2.0f; // transform by sine\n+\t\t\t\tfloatingPagePosition = initialFloatingPagePosition + (finalPagePos - initialFloatingPagePosition) * transformedCoef;\n+\t\t\t\tinvalidate();\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (state == STATE_DRAGGING_PAGE || state == STATE_PAGEDRAGFINISHING || state == STATE_PAGEDRAGREVERTING) {\n+\t\t\tcanvas.drawBitmap(nextPageBitmap, 0, 0, null);\n+\n+\t\t\tfinal float shadowLeft = floatingPagePosition + screenWidth;\n+\t\t\tfinal float shadowRight = shadowLeft + shadowWidth;\n+\t\t\tshadowRect.set(shadowLeft, 0.0f, shadowRight, screenHeight);\n+\t\t\tcanvas.drawBitmap(shadowBitmap, null, shadowRect, null);\n+\t\t}\n+\n+\t\tcanvas.drawBitmap(currentPageBitmap, floatingPagePosition, 0, null);\n+\t}\n+\n+\tpublic void invalidateParallelText() {\n+\t\tif (suppressParallelTextRedrawing) {\n+\t\t\treturn;\n+\t\t}\n \n \t\tif (pTD != null) {\n-\t\t\tpTD.onDraw(canvas);\n+\t\t\tcurrentPageBitmapCanvas.drawColor(BACKGROUND_COLOR, PorterDuff.Mode.SRC);\n+\t\t\tpTD.onDraw(currentPageBitmapCanvas);\n \t\t}\n \n+\t\tinvalidate();\n \t}\n \n \tpublic void updateNoBookVisibility() {\n@@ -195,8 +442,40 @@ public class ParallelTextView extends View {\n \t\t((TextView)mActivity.findViewById(R.id.emptyBookView)).setVisibility(pTD.bookOpened ? View.INVISIBLE : View.VISIBLE);\n \t}\n \n-\t\n+\tprivate float getHeightDiffInches(float y1, float y2) {\n+\t\treturn Math.abs(y1 - y2) / screenDensityY;\n+\t}\n+\n+\tprivate float getWidthDiffInches(float x1, float x2) {\n+\t\treturn Math.abs(x1 - x2) / screenDensityX;\n+\t}\n \n-\t\n+\tprivate static float getDistance(float x1, float y1, float x2, float y2) {\n+\t\tfinal float dX = x1 - x2;\n+\t\tfinal float dY = y1 - y2;\n+\t\treturn (float)Math.sqrt(dX * dX + dY * dY);\n+\t}\n+\n+\tprivate class LongTapTimer extends CountDownTimer {\n+\t\tpublic LongTapTimer() {\n+\t\t\tsuper(LONG_TAP_DELAY, 1000000);\n+\t\t}\n \n+\t\t@Override\n+\t\tpublic void onTick(long l) {\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void onFinish() {\n+\t\t\tmainActivity.runOnUiThread(new Runnable() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void run() {\n+\t\t\t\t\tif (state == STATE_POINTERDOWN) {\n+\t\t\t\t\t\tsetState(STATE_IDLE);\n+\t\t\t\t\t\tprocessLongTap();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\t}\n }"], "score": 1.0, "methods_t": ["Canvas LongTapTimer Paint ProcessLayoutChange ProcessMousePosition ProcessPageDown ProcessPageUp RectF Runnable SetColorsByBrightness SetSplitterPositionByRatio SetSplitterRatioByPosition TurnAdvancedPopupOff XonSplitter abs cancel createBitmap currentTimeMillis d drawBitmap drawColor drawPoint findViewById getActionIndex getActionMasked getContext getDisplayMetrics getDistance getHeightDiffInches getPointerCount getPointerId getResources getWidthDiffInches getX getY invalidate invalidateParallelText onDraw openContextMenu prepareSwitchToNextPage prepareSwitchToPrevPage processDoubleTap processLongTap processSingleTap recycle runOnUiThread set setARGB setFontRange setFontSize setSplitterPosition setState setVisibility sin sqrt start startPageAnimation swapBitmaps"], "_version_": 1526735516589883392, "subject_t": ["Reworked user interaction mechanics. 1. Menu can be called by long tap (as it was inaccesible on devices without hardware menu button) 2. Font size is controlled by two-finger scale gesture 3. Brightness is controlled by vertical swiping. 4. Pages are changed by horizontal swiping or volume buttons."], "comments_t": ["\t\t\t\t\t\tif (getHeightDiffInches(pointerDownPositionY, y) > MIN_MOVE_DELTA_INCH) { // vertical movement \t\t\t\t\t\t\tif (switchingToNextPage) { // revert page change \t\tif (state == STATE_PAGEDRAGFINISHING || state == STATE_PAGEDRAGREVERTING) // animating \t\t\t\t\t\t\t\t} else { // next page \t\t\t\t\t\t\t\tif (x > pointerDownPositionX) { // going to prev page \t\t\t\t\t\t\tif (!switchingToNextPage) { // revert page change \t// Bitmaps are made static to avoid memory leaks on Android 2.3.3 and lower \t\t\t\t\t\t} else if (getWidthDiffInches(pointerDownPositionX, x) > MIN_MOVE_DELTA_INCH) { // horizontal movement \t\t\t\tfinal float transformedCoef = ((float)Math.sin(coef * Math.PI - Math.PI / 2.0) + 1.0f) / 2.0f; // transform by sine"], "parents_ss": ["f057ac0aafea298ad34f04b067dc3d0edadb5742"], "id": "Inego/Aglona-Reader-Android\u0000d178885417f99e0fcc5d3990127a1770db73184e\u0000app/src/main/java/ru/parallelbooks/aglonareader/ParallelTextView.java", "callsites_cs": "ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, float, int, null)#android.content.Context.getResources()#java.lang.System.currentTimeMillis()#<unknown>.onDraw(android.graphics.Canvas)#android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode)#android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap.Config)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float)#.Runnable()#<unknown>.setFontSize(boolean)#ru.parallelbooks.aglonareader.ParallelTextView.swapBitmaps()#<unknown>.TurnAdvancedPopupOff()#android.view.MotionEvent.getX(int)#android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap.Config)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#<unknown>.ProcessPageUp()#<unknown>.setFontSize(boolean)#ru.parallelbooks.aglonareader.ParallelTextView.getWidthDiffInches(float, float)#java.lang.System.currentTimeMillis()#android.os.CountDownTimer.start()#ru.parallelbooks.aglonareader.ParallelTextView.processDoubleTap()#ru.parallelbooks.aglonareader.ParallelTextView.processLongTap()#android.content.res.Resources.getDisplayMetrics()#android.view.MotionEvent.getPointerCount()#android.view.View.invalidate()#java.lang.System.currentTimeMillis()#android.graphics.Paint.setARGB(int, int, int, int)#<unknown>.ProcessLayoutChange(boolean)#android.view.MotionEvent.getY(int)#android.graphics.Canvas.Canvas(android.graphics.Bitmap)#<unknown>.ProcessLayoutChange(boolean)#<unknown>.SetSplitterRatioByPosition()#android.view.MotionEvent.getActionMasked()#android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, null, android.graphics.RectF, null)#android.graphics.Bitmap.recycle()#ru.parallelbooks.aglonareader.ParallelTextView.LongTapTimer.LongTapTimer()#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#java.lang.Math.abs(float)#java.lang.Math.sqrt(float)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#android.view.View.invalidate()#ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToPrevPage()#<unknown>.SetColorsByBrightness()#ru.parallelbooks.aglonareader.ParallelTextView.getDistance(float, float, float, float)#ru.parallelbooks.aglonareader.ParallelTextView.swapBitmaps()#<unknown>.ProcessPageDown()#<unknown>.openContextMenu(ru.parallelbooks.aglonareader.ParallelTextView)#ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToNextPage()#ru.parallelbooks.aglonareader.ParallelTextView.getHeightDiffInches(float, float)#<unknown>.setSplitterPosition(float)#<unknown>.setFontRange(int, int)#android.view.MotionEvent.getActionIndex()#android.graphics.RectF.set(float, float, float, float)#ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float)#ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToPrevPage()#ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float)#android.graphics.Canvas.Canvas(android.graphics.Bitmap)#java.lang.Math.abs(float)#ru.parallelbooks.aglonareader.ParallelTextView.invalidateParallelText()#android.view.View.invalidate()#<unknown>.findViewById(<unknown>)#android.view.View.setVisibility(<unknown>)#android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#android.graphics.Canvas.Canvas(android.graphics.Bitmap)#<unknown>.onDraw(android.graphics.Canvas)#android.view.MotionEvent.getPointerId(int)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#<unknown>.SetSplitterPositionByRatio()#android.view.MotionEvent.getPointerId(int)#android.graphics.Canvas.drawPoint(float, float, android.graphics.Paint)#android.view.MotionEvent.getY(int)#android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, int, int, null)#android.view.View.getContext()#android.graphics.Bitmap.recycle()#android.graphics.RectF.RectF()#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.TurnAdvancedPopupOff()#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#<unknown>.XonSplitter(float, float)#android.view.MotionEvent.getX(int)#<unknown>.ProcessPageDown()#java.lang.Math.sin(double)#<unknown>.ProcessMousePosition(boolean, boolean)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#ru.parallelbooks.aglonareader.ParallelTextView.setState(int)#<unknown>.runOnUiThread()#android.view.View.invalidate()#ru.parallelbooks.aglonareader.ParallelTextView.getDistance(float, float, float, float)#ru.parallelbooks.aglonareader.ParallelTextView.processSingleTap(float, float)#android.graphics.Paint.Paint()#<unknown>.ProcessPageUp()#android.view.View.getContext()#<unknown>.onDraw(android.graphics.Canvas)#<unknown>.TurnAdvancedPopupOff()#android.os.CountDownTimer.cancel()#ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToNextPage()", "callsites_t": ["ru.parallelbooks.aglonareader.ParallelTextView.setState(int) android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, float, int, null) android.content.Context.getResources() java.lang.System.currentTimeMillis() <unknown>.onDraw(android.graphics.Canvas) android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode) android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap.Config) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float) .Runnable() <unknown>.setFontSize(boolean) ru.parallelbooks.aglonareader.ParallelTextView.swapBitmaps() <unknown>.TurnAdvancedPopupOff() android.view.MotionEvent.getX(int) android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap.Config) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) <unknown>.ProcessPageUp() <unknown>.setFontSize(boolean) ru.parallelbooks.aglonareader.ParallelTextView.getWidthDiffInches(float, float) java.lang.System.currentTimeMillis() android.os.CountDownTimer.start() ru.parallelbooks.aglonareader.ParallelTextView.processDoubleTap() ru.parallelbooks.aglonareader.ParallelTextView.processLongTap() android.content.res.Resources.getDisplayMetrics() android.view.MotionEvent.getPointerCount() android.view.View.invalidate() java.lang.System.currentTimeMillis() android.graphics.Paint.setARGB(int, int, int, int) <unknown>.ProcessLayoutChange(boolean) android.view.MotionEvent.getY(int) android.graphics.Canvas.Canvas(android.graphics.Bitmap) <unknown>.ProcessLayoutChange(boolean) <unknown>.SetSplitterRatioByPosition() android.view.MotionEvent.getActionMasked() android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, null, android.graphics.RectF, null) android.graphics.Bitmap.recycle() ru.parallelbooks.aglonareader.ParallelTextView.LongTapTimer.LongTapTimer() ru.parallelbooks.aglonareader.ParallelTextView.setState(int) java.lang.Math.abs(float) java.lang.Math.sqrt(float) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) android.view.View.invalidate() ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToPrevPage() <unknown>.SetColorsByBrightness() ru.parallelbooks.aglonareader.ParallelTextView.getDistance(float, float, float, float) ru.parallelbooks.aglonareader.ParallelTextView.swapBitmaps() <unknown>.ProcessPageDown() <unknown>.openContextMenu(ru.parallelbooks.aglonareader.ParallelTextView) ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToNextPage() ru.parallelbooks.aglonareader.ParallelTextView.getHeightDiffInches(float, float) <unknown>.setSplitterPosition(float) <unknown>.setFontRange(int, int) android.view.MotionEvent.getActionIndex() android.graphics.RectF.set(float, float, float, float) ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float) ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToPrevPage() ru.parallelbooks.aglonareader.ParallelTextView.startPageAnimation(float) android.graphics.Canvas.Canvas(android.graphics.Bitmap) java.lang.Math.abs(float) ru.parallelbooks.aglonareader.ParallelTextView.invalidateParallelText() android.view.View.invalidate() <unknown>.findViewById(<unknown>) android.view.View.setVisibility(<unknown>) android.graphics.Canvas.drawColor(int, android.graphics.PorterDuff.Mode) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) android.graphics.Canvas.Canvas(android.graphics.Bitmap) <unknown>.onDraw(android.graphics.Canvas) android.view.MotionEvent.getPointerId(int) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) <unknown>.SetSplitterPositionByRatio() android.view.MotionEvent.getPointerId(int) android.graphics.Canvas.drawPoint(float, float, android.graphics.Paint) android.view.MotionEvent.getY(int) android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, int, int, null) android.view.View.getContext() android.graphics.Bitmap.recycle() android.graphics.RectF.RectF() android.util.Log.d(java.lang.String, java.lang.String) <unknown>.TurnAdvancedPopupOff() ru.parallelbooks.aglonareader.ParallelTextView.setState(int) <unknown>.XonSplitter(float, float) android.view.MotionEvent.getX(int) <unknown>.ProcessPageDown() java.lang.Math.sin(double) <unknown>.ProcessMousePosition(boolean, boolean) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) ru.parallelbooks.aglonareader.ParallelTextView.setState(int) <unknown>.runOnUiThread() android.view.View.invalidate() ru.parallelbooks.aglonareader.ParallelTextView.getDistance(float, float, float, float) ru.parallelbooks.aglonareader.ParallelTextView.processSingleTap(float, float) android.graphics.Paint.Paint() <unknown>.ProcessPageUp() android.view.View.getContext() <unknown>.onDraw(android.graphics.Canvas) <unknown>.TurnAdvancedPopupOff() android.os.CountDownTimer.cancel() ru.parallelbooks.aglonareader.ParallelTextView.prepareSwitchToNextPage()"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button java.io.File android.view.Window com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity android.widget.ImageView java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener{\n\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate ImageView show_text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate EditText show_text_voice_camera_tag;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate View show_text_voice_camera_divider_amount_desc;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_update_entry;\n\tprivate TextView show_text_voice_camera_description_show;\n\t\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.show_text_voice_camera_voice_details_separator);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag = (EditText) findViewById(R.id.show_text_voice_camera_tag);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_divider_amount_desc = findViewById(R.id.show_text_voice_camera_divider_amount_desc);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_update_entry = (Button) findViewById(R.id.show_text_voice_camera_update_entry);\n\t\tshow_text_voice_camera_description_show= (TextView) findViewById(R.id.show_text_voice_camera_description_show);\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\t\t\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\t\t\n\t\tif(intentExtras.containsKey(\"mDisplayList\")){\n        \tmShowList = new ArrayList<String>();\n        \tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n        \t_id = Long.parseLong(mShowList.get(0));\n        \tString amount = mShowList.get(2);\n        \tString tag = mShowList.get(1);\n        \tif(!(amount.equals(\"\") || amount == null)){\n        \t\tif(!amount.contains(\"?\"))\n        \t\t\tshow_text_voice_camera_amount.setText(amount);\n        \t}\n        \tif(!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))){\n        \t\tshow_text_voice_camera_tag_textview.setText(tag);\n        \t} else {\n        \t\tshow_text_voice_camera_description_show.setVisibility(View.GONE);\n        \t\tshow_text_voice_camera_tag_textview.setVisibility(View.GONE);\n        \t\tshow_text_voice_camera_tag.setVisibility(View.VISIBLE);\n        \t\tshow_text_voice_camera_divider_amount_desc.setVisibility(View.GONE);\n        \t\tshow_text_voice_camera_update_entry.setVisibility(View.VISIBLE);\n        \t}\n        \tCalendar mCalendar = Calendar.getInstance();\n        \tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n        \tnew ShowDateHandler(this, mCalendar);\n        }\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_update_entry.setOnClickListener(this);\n\t\t\n\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n\t\t\tupdateUI();\n        \tif(intentExtras.containsKey(\"mDisplayList\")){\n        \t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\"+_id+\".amr\");\n        \t\t\n        \t\tif(tempFile.canRead()){\n        \t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n        \t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n        \t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n        \t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n        \t\t} else {\n        \t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n        \t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n        \t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n        \t\t}\n        \t}\n        } \n        else {\n        \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n        }\n\t\t\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t///////   ***** Sets Title Voice Entry *********///////\n        show_text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        show_text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        show_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_delete){\n\t\t\t\n\t\t\tif(_id != null){\n\t\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\t\ttry{\n\t\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t}catch(NullPointerException e){\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\n\t\t\t\tnew FileDelete(_id);\n\t\t\t\t\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_play_button){\n\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n\t\t\tmAudioPlay = new AudioPlay(_id+\"\",this);\n\t\t\t\n\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n\t\t\tif(!mAudioPlay.isAudioPlaying()){\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch(Exception e){}\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t}\t\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_update_entry){\n\t\t\tif(show_text_voice_camera_tag.isShown()){\n\t\t\t\tif(show_text_voice_camera_tag.getText().toString() != \"\")\n\t\t\t\t\tsaveEntry();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\t\n\t///// ******************  Handling back press of key   ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n\t     if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t    \t onBackPressed();\n\t    \t return super.onKeyDown(keyCode, event);\n\t      }\n\t    return super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t    // This will be called either automatically for you on 2.0    \n\t    // or later, or by the code above on earlier versions of the platform.\n\t\tif(show_text_voice_camera_tag.isShown()){\n\t\t\tif(show_text_voice_camera_tag.getText().toString() != \"\")\n\t\t\t\tsaveEntry();\n\t\t}\n\t\t\n\t\ttry{\n\t\t\tif(mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t}catch(Exception e){}\n\t    finish();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\t\t\n\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\ttry{\n\t\t\tif(mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch(Exception e){\n\t\t\t\n\t\t}\n\t\tsuper.onPause();\n\t}\n\t\n\tprivate void saveEntry() {\n\t\t///////    *******  Creating HashMap to update info   *******  ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\t\t\n\t\tif(show_text_voice_camera_tag.getText().toString() != \"\"){\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, show_text_voice_camera_tag.getText().toString());\n\t\t}\n\t\t\n\t\t//////    *******   Update database if user added additional info   *******  ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-28T06:46:26Z", "hash_sni": "2eb47b0e1acf769cc7d926d64a5e6b90df214c46", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" \tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n \tprivate MyCount countDownTimer;\n \tprivate Button show_text_voice_camera_update_entry;\n+\tprivate TextView show_text_voice_camera_description_show;\n \t\n \tprivate AudioPlay mAudioPlay;\n \tprivate Long _id = null;\n@@ -64,6 +65,7 @@ public class ShowVoiceActivity extends Activity implements OnClickListener{\n \t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n \t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n \t\tshow_text_voice_camera_update_entry = (Button) findViewById(R.id.show_text_voice_camera_update_entry);\n+\t\tshow_text_voice_camera_description_show= (TextView) findViewById(R.id.show_text_voice_camera_description_show);\n \t\t\n \t\tmDatabaseAdapter = new DatabaseAdapter(this);\n \t\t\n@@ -82,6 +84,7 @@ public class ShowVoiceActivity extends Activity implements OnClickListener{\n         \tif(!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))){\n         \t\tshow_text_voice_camera_tag_textview.setText(tag);\n         \t} else {\n+        \t\tshow_text_voice_camera_description_show.setVisibility(View.GONE);\n         \t\tshow_text_voice_camera_tag_textview.setVisibility(View.GONE);\n         \t\tshow_text_voice_camera_tag.setVisibility(View.VISIBLE);\n         \t\tshow_text_voice_camera_divider_amount_desc.setVisibility(View.GONE);"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime File FileDelete HashMap, StringString MyCount ShowDateHandler canRead cancel close contains containsKey deleteDatabaseEntryID editDatabase equals findViewById finish get getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getPlayBackTime getRepeatCount getString getStringArrayList getText isAudioPlaying isShown makeText onBackPressed open parseLong printStackTrace put requestWindowFeature saveEntry setContentView setOnClickListener setText setTimeInMillis setVisibility show start startPlayBack stop stopPlayBack toString updateUI"], "_version_": 1526735267785867264, "subject_t": ["Added Description and Amount heading"], "comments_t": ["\t//countdowntimer is an abstract class, so extend it and fill in methods         ///////   ***** Sets Title Voice Entry *********/////// \t    // This will be called either automatically for you on 2.0     \t\t\t///////   *******   Chronometer Starts Countdown   ******  /////// \t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** /////// \t///// ******************  Handling back press of key   ********** /////////// \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   //////// \t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t//////    *******   Update database if user added additional info   *******  /////// \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////       \t    // or later, or by the code above on earlier versions of the platform. \t\t\t//////   ******   Handles UI items on button click  ******  ///////         //////   ******  Shows Voice Details ********//////// \t\t\t//////\t     ********   to handle playback of recorded file   *********   //////// \t///////   ***** Sets Title Voice Entry *********/////// \t\t///////    *******  Creating HashMap to update info   *******  ////////"], "parents_ss": ["3136b8e48e3561c8e2073ded73bc26a3b96533ad"], "id": "vinsol/expense-tracker\u00002eb47b0e1acf769cc7d926d64a5e6b90df214c46\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#com.vinsol.expensetracker.ShowVoiceActivity.saveEntry()#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.widget.Toast.show()#android.view.KeyEvent.getRepeatCount()#<unknown>.isAudioPlaying()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.open()#android.content.Context.getString(<unknown>)#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.lang.String.contains(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#android.app.Activity.finish()#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.view.View.setVisibility(int)#<unknown>.isAudioPlaying()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.lang.Throwable.printStackTrace()#android.app.Activity.findViewById(<unknown>)#java.io.File.File(java.lang.String)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.widget.Toast.show()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.app.Activity.requestWindowFeature(int)#android.os.CountDownTimer.cancel()#java.lang.CharSequence.toString()#java.lang.CharSequence.toString()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.EditText.getText()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#<unknown>.stopPlayBack()#java.util.Calendar.getInstance()#android.view.View.setVisibility(int)#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.ShowVoiceActivity.onBackPressed()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#android.view.View.setVisibility(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.show()#java.lang.Long.parseLong(java.lang.String)#android.widget.EditText.getText()#<unknown>.getDisplayTime(<unknown>)#android.widget.EditText.getText()#java.lang.String.equals(java.lang.String)#<unknown>.open()#android.view.View.setVisibility(int)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#android.app.Activity.findViewById(<unknown>)#com.vinsol.expensetracker.ShowVoiceActivity.saveEntry()#android.app.Activity.finish()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.view.View.isShown()#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#<unknown>.close()#android.widget.ImageView.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.view.View.isShown()#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.lang.Long.toString(java.lang.Long)#java.lang.CharSequence.toString()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)", "callsites_t": ["java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) com.vinsol.expensetracker.ShowVoiceActivity.saveEntry() android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) android.widget.Toast.show() android.view.KeyEvent.getRepeatCount() <unknown>.isAudioPlaying() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.open() android.content.Context.getString(<unknown>) <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.lang.String.contains(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) android.app.Activity.finish() <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.view.View.setVisibility(int) <unknown>.isAudioPlaying() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.lang.Throwable.printStackTrace() android.app.Activity.findViewById(<unknown>) java.io.File.File(java.lang.String) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.widget.Toast.show() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.app.Activity.requestWindowFeature(int) android.os.CountDownTimer.cancel() java.lang.CharSequence.toString() java.lang.CharSequence.toString() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.EditText.getText() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) <unknown>.stopPlayBack() java.util.Calendar.getInstance() android.view.View.setVisibility(int) java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.ShowVoiceActivity.onBackPressed() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() android.view.View.setVisibility(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.show() java.lang.Long.parseLong(java.lang.String) android.widget.EditText.getText() <unknown>.getDisplayTime(<unknown>) android.widget.EditText.getText() java.lang.String.equals(java.lang.String) <unknown>.open() android.view.View.setVisibility(int) <unknown>.getPlayBackTime() android.app.Activity.finish() android.app.Activity.findViewById(<unknown>) com.vinsol.expensetracker.ShowVoiceActivity.saveEntry() android.app.Activity.finish() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.view.View.isShown() java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) <unknown>.close() android.widget.ImageView.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.view.View.isShown() android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.lang.Long.toString(java.lang.Long) java.lang.CharSequence.toString() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent android.view.Window com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class Voice extends Activity implements OnClickListener{\n\t\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\t\n\t\t///////   ****** No Title Bar   ********* /////////\n        \n        \n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        \n        setContentView(R.layout.text_voice_camera);\n        \n        \n        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n        \n        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n    \ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n    \ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n    \ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n    \tmDatabaseAdapter = new DatabaseAdapter(this);\n    \t\n    \t////////*********     Get id from intent extras     ********   ////////////\n        intentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n        _id = intentExtras.getLong(\"_id\");\n    \t\n        \n        \n        \n        ////////   ********  Handle Date Bar   *********   ////////\n        new DateHandler(this);\n        \n        \n        ////////   ********   Starts Recording each time activity starts   ******   ///////\n        if(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n        \tsetGraphicsVoice();\n        \tcontrolVoiceChronometer();\n        \tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n        \tmRecordingHelper.startRecording();\n        } \n        else {\n        \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n        }\n        setClickListeners();\n\t\t\n\t\t////////*********     Get Last most accurate location info   *********   /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t\t\n\t}\n\t\n\t\n\t\n\t@Override\n\tprotected void onPause() {\n\t\t\n\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t}\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n\t\t\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n\t\t\n\t\t\n\t\t////  ***** if stop button pressed ****** //////\n\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n\t\t\tmRecordingHelper.stopRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t}\n\t\t\n\t\t\n\t\t////  ***** if play button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n\t\t\tmAudioPlay = new AudioPlay(_id+\"\",this);\n\t\t\t\n\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n\t\t\tif(!mAudioPlay.isAudioPlaying()){\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\t\t\n\t\t////  ***** if rerecord button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){}\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\t\t\t\n\t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n\t\t\tif(mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\t\t\n\t\t////////********  Adding Action to save entry     *********    ///////////\n\t\t\n\t\tif(v.getId() == R.id.text_voice_camera_save_entry){\n\t\t\t///////    *******  Creating HashMap to update info   *******  ////////\n\t\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, text_voice_camera_amount.getText().toString());\n\t\t\t\n\t\t\tif(text_voice_camera_tag.getText().toString() != \"\"){\n\t\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t\t}\n\t\t\n\t\t\ttry{\n\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t} catch (Exception e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t//////    *******   Update database if user added additional info   *******  ///////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.editDatabase(_list);\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t}\n\t\n\t\n\t\t/////////     *********   Adding action if delete button **********  /////////\n\t\n\t\tif(v.getId() == R.id.text_voice_camera_delete){\n\t\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t}\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\n\t\t\tnew FileDelete(_id);\n\t\t\n\t\t\t//////   *******   Delete entry from database ********   /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n\t\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\t\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-24T09:26:01Z", "hash_sni": "25e71480e9736bfda391bbeb6def56bfac912cf4", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \n import com.vinsol.expensetracker.location.LocationLast;\n import com.vinsol.expensetracker.utils.AudioPlay;\n+import com.vinsol.expensetracker.utils.DateHelper;\n import com.vinsol.expensetracker.utils.DisplayTime;\n import com.vinsol.expensetracker.utils.FileDelete;\n import com.vinsol.expensetracker.utils.RecordingHelper;\n@@ -42,6 +43,7 @@ public class Voice extends Activity implements OnClickListener{\n \tprivate long _id;\n \tprivate Bundle intentExtras;\n \tprivate DatabaseAdapter mDatabaseAdapter;\n+\tprivate TextView text_voice_camera_date_bar_dateview;\n \t\n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n@@ -66,6 +68,7 @@ public class Voice extends Activity implements OnClickListener{\n         text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n     \ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n     \ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n+    \ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n     \tmDatabaseAdapter = new DatabaseAdapter(this);\n     \t\n     \t////////*********     Get id from intent extras     ********   ////////////\n@@ -97,6 +100,8 @@ public class Voice extends Activity implements OnClickListener{\n \t\t\n \t}\n \t\n+\t\n+\t\n \t@Override\n \tprotected void onPause() {\n \t\t\n@@ -235,6 +240,12 @@ public class Voice extends Activity implements OnClickListener{\n \t\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n \t\t\t}\n \t\t\n+\t\t\ttry{\n+\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n+\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n+\t\t\t} catch (Exception e){\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n \t\t\t//////    *******   Update database if user added additional info   *******  ///////\n \t\t\tmDatabaseAdapter.open();\n \t\t\tmDatabaseAdapter.editDatabase(_list);\n@@ -298,4 +309,6 @@ public class Voice extends Activity implements OnClickListener{\n \t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n \t\t}\n \t}\n+\t\n+\t\n }"], "score": 1.0, "methods_t": ["AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper cancel close controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish getBundleExtra getDisplayTime getExternalStorageState getId getIntent getLastLocation getLong getPlayBackTime getText getTimeMillis isAudioPlaying isRecording length makeText open printStackTrace put requestWindowFeature setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526735288364171264, "subject_t": ["Removed certain issues"], "comments_t": ["\t\t////////********  Adding Action to save entry     *********    /////////// \t//countdowntimer is an abstract class, so extend it and fill in methods         ///////   ***** Sets Title Voice Entry *********/////// \t\t///////   ****** No Title Bar   ********* /////////         ////////   ********    Initializing and assigning memory to UI Items **********    /////////     \t////////*********     Get id from intent extras     ********   //////////// \t\t\t///////    *******  Creating HashMap to update info   *******  //////// \t\t\t///////   *******   Chronometer Starts Countdown   ******  /////// \t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** /////// \t\t\t//////  ******  Restarts chronometer and recording   *******  //////// \t\t////////    *******    Adding Click Listeners to UI Items ******** ////////// \t\t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t////////*********     Get Last most accurate location info   *********   ///////// \t\t////  ***** if play button pressed ****** //////\t\t \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   //////// \t\t\t//////   *******   Delete entry from database ********   ///////// \t\t////  ***** if rerecord button pressed ****** //////\t\t \t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t///////   ********     Adding On Click Actions to click listeners *********    ////////// \t\t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******////// \t\t\t//////    *******   Update database if user added additional info   *******  /////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////       \t\t////  ***** if stop button pressed ****** //////         ////////   ********   Starts Recording each time activity starts   ******   /////// \t\t///////   ***** Sets Title Voice Entry *********/////// \t\t\t//////   ******   Handles UI items on button click  ******  ///////         //////   ******  Shows Voice Details ********//////// \t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////         ////////   ********  Handle Date Bar   *********   //////// \t\t/////////     *********   Adding action if delete button **********  /////////"], "parents_ss": ["68951a9cc591d45e5125b2630e69c80c321acca4"], "id": "vinsol/expense-tracker\u000025e71480e9736bfda391bbeb6def56bfac912cf4\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.isRecording()#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#<unknown>.getTimeMillis()#<unknown>.deleteDatabaseEntryID(java.lang.String)#android.app.Activity.getIntent()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.view.View.setVisibility(int)#<unknown>.getLastLocation()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.view.View.setVisibility(int)#android.widget.EditText.getText()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.app.Activity.finish()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#com.vinsol.expensetracker.Voice.setGraphicsVoice()#android.app.Activity.startActivity(android.content.Intent)#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#java.lang.CharSequence.toString()#java.lang.CharSequence.toString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#<unknown>.stopPlayBack()#android.view.View.setVisibility(int)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#<unknown>.DisplayTime()#android.os.SystemClock.elapsedRealtime()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#android.os.Environment.getExternalStorageState()#android.widget.Chronometer.setOnChronometerTickListener()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.lang.CharSequence.length()#<unknown>.getPlayBackTime()#.OnChronometerTickListener()#android.app.Activity.requestWindowFeature(int)#<unknown>.open()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#android.view.View.setVisibility(int)#android.widget.Toast.show()#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#<unknown>.DateHelper(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.startPlayBack()#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#<unknown>.isRecording()#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.isRecording() <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() <unknown>.getPlayBackTime() <unknown>.stopRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.view.View.setVisibility(int) android.widget.Chronometer.start() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) <unknown>.getTimeMillis() <unknown>.deleteDatabaseEntryID(java.lang.String) android.app.Activity.getIntent() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.view.View.setVisibility(int) <unknown>.getLastLocation() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.view.View.setVisibility(int) android.widget.EditText.getText() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.app.Activity.finish() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) com.vinsol.expensetracker.Voice.setGraphicsVoice() android.app.Activity.startActivity(android.content.Intent) android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() java.lang.CharSequence.toString() java.lang.CharSequence.toString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) com.vinsol.expensetracker.Voice.controlVoiceChronometer() <unknown>.stopPlayBack() android.view.View.setVisibility(int) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) <unknown>.DisplayTime() android.os.SystemClock.elapsedRealtime() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) android.os.Environment.getExternalStorageState() android.widget.Chronometer.setOnChronometerTickListener() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.lang.CharSequence.length() <unknown>.getPlayBackTime() .OnChronometerTickListener() android.app.Activity.requestWindowFeature(int) <unknown>.open() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) android.view.View.setVisibility(int) android.widget.Toast.show() android.view.View.setVisibility(int) android.widget.Chronometer.start() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) <unknown>.DateHelper(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.startPlayBack() java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) android.view.View.getId() <unknown>.isRecording() android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Tyler Holland", "repo_sni": "Tywholland/SimpleTimer", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent android.view.Menu android.widget.EditText android.view.MenuItem android.content.SharedPreferences android.widget.TextView android.preference.PreferenceManager android.view.View android.app.Activity java.util.Calendar"], "email_sni": "tywholland@gmail.com", "contents_t": ["package com.tywholland.simpletimer;\n\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.preference.PreferenceManager;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class SimpleTimerActivity extends Activity {\n\tprivate static final String ALARM_TIME = \"alarmkey\";\n\tprivate static final String ALARM_NAME = \"alarmnamekey\";\n\tprivate static final int TIME_MAX_LENGTH = 6;\n\n\tprivate Button mStartButton;\n\tprivate Button mNumpad1;\n\tprivate Button mNumpad2;\n\tprivate Button mNumpad3;\n\tprivate Button mNumpad4;\n\tprivate Button mNumpad5;\n\tprivate Button mNumpad6;\n\tprivate Button mNumpad7;\n\tprivate Button mNumpad8;\n\tprivate Button mNumpad9;\n\tprivate Button mNumpad0;\n\tprivate Button mStopButton;\n\tprivate TextView mTimeView;\n\tprivate EditText mAlarmNameView;\n\tprivate AlarmApplication mAlarmApplication;\n\tprivate CountDownTimer mCountDownTimer;\n\tprivate boolean mCountingDown;\n\n\t@Override\n\tpublic boolean onCreateOptionsMenu(Menu menu) {\n\t\tgetMenuInflater().inflate(R.menu.menu, menu);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic boolean onOptionsItemSelected(MenuItem item) {\n\t\tswitch (item.getItemId()) {\n\t\tcase R.id.menu_settings:\n\t\t\tstartActivity(new Intent(getApplicationContext(), Settings.class));\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn super.onOptionsItemSelected(item);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tmAlarmApplication = (AlarmApplication) getApplicationContext();\n\t\tif (PreferenceManager.getDefaultSharedPreferences(\n\t\t\t\tgetApplicationContext()).getBoolean(\n\t\t\t\tgetString(R.string.key_button_placement), true)) {\n\t\t\tsetContentView(R.layout.activity_main);\n\t\t} else {\n\t\t\tsetContentView(R.layout.activity_main_bottom_start);\n\t\t}\n\t\tmCountingDown = false;\n\n\t\trestoreText();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tif (PreferenceManager.getDefaultSharedPreferences(\n\t\t\t\tgetApplicationContext()).getBoolean(\n\t\t\t\tgetString(R.string.key_button_placement), true)) {\n\t\t\tsetContentView(R.layout.activity_main);\n\t\t} else {\n\t\t\tsetContentView(R.layout.activity_main_bottom_start);\n\t\t}\n\t\tmStartButton = (Button) findViewById(R.id.startbutton);\n\t\tmStartButton.setOnClickListener(new OnClickListener() {\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmAlarmApplication.stopTimer();\n\t\t\t\tmAlarmApplication.setAlarmName(mAlarmNameView.getText().toString());\n\t\t\t\tmAlarmApplication.startTimer(AlarmUtil\n\t\t\t\t\t\t.convertStringToMilliseconds(mAlarmApplication\n\t\t\t\t\t\t\t\t.getTimeString()));\n\t\t\t\tstopTextCountdown();\n\t\t\t\tstartTextCountdown();\n\t\t\t\tmAlarmApplication.setTimeString(\"\");\n\t\t\t\tmCountingDown = true;\n\t\t\t\tupdateButtons();\n\t\t\t}\n\t\t});\n\t\tmStopButton = (Button) findViewById(R.id.stopbutton);\n\t\tmStopButton.setOnClickListener(new OnClickListener() {\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmAlarmApplication.setTimeString(\"\");\n\t\t\t\tmAlarmApplication.setAlarmName(\"\");\n\t\t\t\tmAlarmNameView.setText(\"\");\n\t\t\t\tmTimeView.setText(R.string.default_time);\n\t\t\t\tmAlarmApplication.stopTimer();\n\t\t\t\tstopTextCountdown();\n\t\t\t\tmCountingDown = false;\n\t\t\t\tupdateButtons();\n\t\t\t}\n\t\t});\n\t\tmAlarmNameView = (EditText) findViewById(R.id.alarmNameEditText);\n\t\tmAlarmNameView.setText(mAlarmApplication.getAlarmName());\n\t\tmAlarmNameView.clearFocus();\n\t\tmTimeView = (TextView) findViewById(R.id.timerTextView);\n\t\tmNumpad0 = (Button) findViewById(R.id.numpad0);\n\t\tmNumpad1 = (Button) findViewById(R.id.numpad1);\n\t\tmNumpad2 = (Button) findViewById(R.id.numpad2);\n\t\tmNumpad3 = (Button) findViewById(R.id.numpad3);\n\t\tmNumpad4 = (Button) findViewById(R.id.numpad4);\n\t\tmNumpad5 = (Button) findViewById(R.id.numpad5);\n\t\tmNumpad6 = (Button) findViewById(R.id.numpad6);\n\t\tmNumpad7 = (Button) findViewById(R.id.numpad7);\n\t\tmNumpad8 = (Button) findViewById(R.id.numpad8);\n\t\tmNumpad9 = (Button) findViewById(R.id.numpad9);\n\t\tmNumpad0.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad1.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad2.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad3.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad4.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad5.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad6.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad7.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad8.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad9.setOnClickListener(numpadButtonClickListener());\n\t\tupdateTimeView();\n\t\tupdateButtons();\n\t\tif (mCountDownTimer != null) {\n\t\t\tmCountDownTimer.cancel();\n\t\t}\n\t\tstartTextCountdown();\n\t\tif (!mCountingDown) {\n\t\t\t// Stop timer when app is launched if timer is not active\n\t\t\tmAlarmApplication.stopTimer();\n\t\t}\n\t}\n\n\tprivate void restoreText() {\n\t\tSharedPreferences settings = getPreferences(0);\n\t\tif (settings != null) {\n\t\t\tlong milliseconds = settings.getLong(ALARM_TIME, 0);\n\t\t\tCalendar c = Calendar.getInstance();\n\t\t\tc.setTimeInMillis(milliseconds);\n\t\t\tmAlarmApplication.setCurrentAlarmCalendar(c);\n\t\t\tString alarmName = settings.getString(ALARM_NAME, \"\");\n\t\t\tmAlarmApplication.setAlarmName(alarmName);\n\t\t}\n\t}\n\n\tprivate void startTextCountdown() {\n\t\tCalendar c = mAlarmApplication.getCurrentAlarmCalendar();\n\t\tif (c != null && c.getTimeInMillis() != 0) {\n\t\t\tlong alarmTime = c.getTimeInMillis();\n\t\t\tlong currentTime = Calendar.getInstance().getTimeInMillis();\n\t\t\tlong timeDifference = alarmTime - currentTime;\n\t\t\tif (timeDifference > 0) {\n\t\t\t\tmCountingDown = true;\n\t\t\t} else {\n\t\t\t\tmCountingDown = false;\n\t\t\t}\n\t\t\tmCountDownTimer = new CountDownTimer(timeDifference, 1000) {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\t\t\tmTimeView\n\t\t\t\t\t\t\t.setText(AlarmUtil\n\t\t\t\t\t\t\t\t\t.getTimeStringFromMilliseconds(millisUntilFinished));\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onFinish() {\n\t\t\t\t\tmTimeView.setText(R.string.default_time);\n\t\t\t\t\tmCountingDown = false;\n\t\t\t\t}\n\t\t\t};\n\t\t\tmCountDownTimer.start();\n\t\t} else {\n\t\t\tmCountingDown = false;\n\t\t}\n\t\tupdateButtons();\n\t}\n\n\tprivate void stopTextCountdown() {\n\t\tif (mCountDownTimer != null) {\n\t\t\tmCountDownTimer.cancel();\n\t\t}\n\t}\n\n\tprivate OnClickListener numpadButtonClickListener() {\n\t\treturn new OnClickListener() {\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tif (!mCountingDown) {\n\t\t\t\t\tif (mAlarmApplication.getTimeString().length() < TIME_MAX_LENGTH) {\n\t\t\t\t\t\tmAlarmApplication.appendToTimeString(((Button) v)\n\t\t\t\t\t\t\t\t.getText().toString());\n\t\t\t\t\t\tupdateTimeView();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tToast.makeText(getApplicationContext(),\n\t\t\t\t\t\t\t\tR.string.time_too_long_warning,\n\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate void updateButtons() {\n\t\tmStartButton.setEnabled(!mCountingDown);\n\t\tmNumpad0.setEnabled(!mCountingDown);\n\t\tmNumpad1.setEnabled(!mCountingDown);\n\t\tmNumpad2.setEnabled(!mCountingDown);\n\t\tmNumpad3.setEnabled(!mCountingDown);\n\t\tmNumpad4.setEnabled(!mCountingDown);\n\t\tmNumpad5.setEnabled(!mCountingDown);\n\t\tmNumpad6.setEnabled(!mCountingDown);\n\t\tmNumpad7.setEnabled(!mCountingDown);\n\t\tmNumpad8.setEnabled(!mCountingDown);\n\t\tmNumpad9.setEnabled(!mCountingDown);\n\t}\n\n\tprivate void updateTimeView() {\n\t\tInteger hours = AlarmUtil.getHoursFromTimeString(mAlarmApplication\n\t\t\t\t.getTimeString());\n\t\tInteger minutes = AlarmUtil.getMinutesFromTimeString(mAlarmApplication\n\t\t\t\t.getTimeString());\n\t\tInteger seconds = AlarmUtil.getSecondsFromTimeString(mAlarmApplication\n\t\t\t\t.getTimeString());\n\t\tmTimeView.setText(String.format(\"%02d\", hours) + \":\"\n\t\t\t\t+ String.format(\"%02d\", minutes) + \":\"\n\t\t\t\t+ String.format(\"%02d\", seconds));\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\t\tsuper.onPause();\n\t\tSharedPreferences settings = getPreferences(0);\n\t\tSharedPreferences.Editor editor = settings.edit();\n\t\teditor.putString(ALARM_NAME, mAlarmNameView.getText().toString());\n\t\teditor.commit();\n\t}\n\n\t@Override\n\tprotected void onStop() {\n\t\tsuper.onStop();\n\t\tSharedPreferences settings = getPreferences(0);\n\t\tSharedPreferences.Editor editor = settings.edit();\n\t\teditor.putLong(ALARM_TIME, mAlarmApplication.getCurrentAlarmCalendar()\n\t\t\t\t.getTimeInMillis());\n\t\teditor.commit();\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2012-10-30T02:13:34Z", "hash_sni": "5b5ad2d22e71342168aaf62aa0cdede71045f09e", "name_sni": "src/com/tywholland/simpletimer/SimpleTimerActivity.java", "patch_t": [" import android.view.View;\n import android.view.View.OnClickListener;\n import android.widget.Button;\n+import android.widget.EditText;\n import android.widget.TextView;\n import android.widget.Toast;\n \n public class SimpleTimerActivity extends Activity {\n \tprivate static final String ALARM_TIME = \"alarmkey\";\n+\tprivate static final String ALARM_NAME = \"alarmnamekey\";\n \tprivate static final int TIME_MAX_LENGTH = 6;\n \n \tprivate Button mStartButton;\n@@ -33,6 +35,7 @@ public class SimpleTimerActivity extends Activity {\n \tprivate Button mNumpad0;\n \tprivate Button mStopButton;\n \tprivate TextView mTimeView;\n+\tprivate EditText mAlarmNameView;\n \tprivate AlarmApplication mAlarmApplication;\n \tprivate CountDownTimer mCountDownTimer;\n \tprivate boolean mCountingDown;\n@@ -67,7 +70,7 @@ public class SimpleTimerActivity extends Activity {\n \t\t}\n \t\tmCountingDown = false;\n \n-\t\trestoreTime();\n+\t\trestoreText();\n \t}\n \n \t@Override\n@@ -84,6 +87,7 @@ public class SimpleTimerActivity extends Activity {\n \t\tmStartButton.setOnClickListener(new OnClickListener() {\n \t\t\tpublic void onClick(View v) {\n \t\t\t\tmAlarmApplication.stopTimer();\n+\t\t\t\tmAlarmApplication.setAlarmName(mAlarmNameView.getText().toString());\n \t\t\t\tmAlarmApplication.startTimer(AlarmUtil\n \t\t\t\t\t\t.convertStringToMilliseconds(mAlarmApplication\n \t\t\t\t\t\t\t\t.getTimeString()));\n@@ -98,6 +102,8 @@ public class SimpleTimerActivity extends Activity {\n \t\tmStopButton.setOnClickListener(new OnClickListener() {\n \t\t\tpublic void onClick(View v) {\n \t\t\t\tmAlarmApplication.setTimeString(\"\");\n+\t\t\t\tmAlarmApplication.setAlarmName(\"\");\n+\t\t\t\tmAlarmNameView.setText(\"\");\n \t\t\t\tmTimeView.setText(R.string.default_time);\n \t\t\t\tmAlarmApplication.stopTimer();\n \t\t\t\tstopTextCountdown();\n@@ -105,6 +111,9 @@ public class SimpleTimerActivity extends Activity {\n \t\t\t\tupdateButtons();\n \t\t\t}\n \t\t});\n+\t\tmAlarmNameView = (EditText) findViewById(R.id.alarmNameEditText);\n+\t\tmAlarmNameView.setText(mAlarmApplication.getAlarmName());\n+\t\tmAlarmNameView.clearFocus();\n \t\tmTimeView = (TextView) findViewById(R.id.timerTextView);\n \t\tmNumpad0 = (Button) findViewById(R.id.numpad0);\n \t\tmNumpad1 = (Button) findViewById(R.id.numpad1);\n@@ -138,13 +147,15 @@ public class SimpleTimerActivity extends Activity {\n \t\t}\n \t}\n \n-\tprivate void restoreTime() {\n+\tprivate void restoreText() {\n \t\tSharedPreferences settings = getPreferences(0);\n \t\tif (settings != null) {\n \t\t\tlong milliseconds = settings.getLong(ALARM_TIME, 0);\n \t\t\tCalendar c = Calendar.getInstance();\n \t\t\tc.setTimeInMillis(milliseconds);\n \t\t\tmAlarmApplication.setCurrentAlarmCalendar(c);\n+\t\t\tString alarmName = settings.getString(ALARM_NAME, \"\");\n+\t\t\tmAlarmApplication.setAlarmName(alarmName);\n \t\t}\n \t}\n \n@@ -230,6 +241,15 @@ public class SimpleTimerActivity extends Activity {\n \t\t\t\t+ String.format(\"%02d\", minutes) + \":\"\n \t\t\t\t+ String.format(\"%02d\", seconds));\n \t}\n+\t\n+\t@Override\n+\tprotected void onPause() {\n+\t\tsuper.onPause();\n+\t\tSharedPreferences settings = getPreferences(0);\n+\t\tSharedPreferences.Editor editor = settings.edit();\n+\t\teditor.putString(ALARM_NAME, mAlarmNameView.getText().toString());\n+\t\teditor.commit();\n+\t}\n \n \t@Override\n \tprotected void onStop() {"], "score": 1.0, "methods_t": ["CountDownTimer Intent OnClickListener appendToTimeString cancel clearFocus commit convertStringToMilliseconds edit findViewById format getAlarmName getApplicationContext getBoolean getCurrentAlarmCalendar getDefaultSharedPreferences getHoursFromTimeString getInstance getItemId getLong getMenuInflater getMinutesFromTimeString getPreferences getSecondsFromTimeString getString getText getTimeInMillis getTimeString getTimeStringFromMilliseconds inflate length makeText numpadButtonClickListener putLong putString restoreText setAlarmName setContentView setCurrentAlarmCalendar setEnabled setOnClickListener setText setTimeInMillis setTimeString show start startActivity startTextCountdown startTimer stopTextCountdown stopTimer toString updateButtons updateTimeView"], "_version_": 1526735832875008000, "subject_t": ["Fixed Issue 11 and 13"], "comments_t": ["\t\t\t// Stop timer when app is launched if timer is not active"], "parents_ss": ["f464913e9be4e7d6f73790ae21d37fbf73a33bea"], "id": "Tywholland/SimpleTimer\u00005b5ad2d22e71342168aaf62aa0cdede71045f09e\u0000src/com/tywholland/simpletimer/SimpleTimerActivity.java", "callsites_cs": "android.app.Activity.setContentView(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.Calendar.getInstance()#.CountDownTimer(long, int)#android.app.Activity.findViewById(<unknown>)#android.content.SharedPreferences.edit()#<unknown>.getHoursFromTimeString(<unknown>)#android.content.ContextWrapper.getApplicationContext()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#.OnClickListener()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setEnabled(boolean)#java.lang.String.format(java.lang.String, java.lang.Integer)#<unknown>.stopTimer()#<unknown>.getTimeStringFromMilliseconds(long)#android.view.MenuInflater.inflate(<unknown>, android.view.Menu)#java.lang.CharSequence.toString()#android.widget.TextView.setEnabled(boolean)#java.lang.String.format(java.lang.String, java.lang.Integer)#java.util.Calendar.getInstance()#android.app.Activity.getMenuInflater()#android.view.View.setOnClickListener(android.view.View.OnClickListener)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#android.content.Context.getString(<unknown>)#android.os.CountDownTimer.cancel()#android.app.Activity.findViewById(<unknown>)#<unknown>.setTimeString(java.lang.String)#android.content.SharedPreferences.Editor.putString(java.lang.String, java.lang.String)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#android.app.Activity.findViewById(<unknown>)#<unknown>.getCurrentAlarmCalendar()#android.widget.TextView.getText()#android.widget.TextView.setEnabled(boolean)#android.view.View.setOnClickListener()#android.view.MenuItem.getItemId()#com.tywholland.simpletimer.SimpleTimerActivity.updateTimeView()#android.view.View.setOnClickListener(android.view.View.OnClickListener)#<unknown>.stopTimer()#android.view.View.setOnClickListener(android.view.View.OnClickListener)#<unknown>.setAlarmName(java.lang.String)#<unknown>.length()#<unknown>.getMinutesFromTimeString(<unknown>)#android.app.Activity.setContentView(<unknown>)#android.widget.TextView.setEnabled(boolean)#android.widget.EditText.getText()#<unknown>.getAlarmName()#com.tywholland.simpletimer.SimpleTimerActivity.updateButtons()#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setEnabled(boolean)#android.app.Activity.findViewById(<unknown>)#android.content.Intent.Intent(android.content.Context, java.lang.Class)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.startActivity(android.content.Intent)#android.app.Activity.findViewById(<unknown>)#com.tywholland.simpletimer.SimpleTimerActivity.stopTextCountdown()#com.tywholland.simpletimer.SimpleTimerActivity.startTextCountdown()#android.widget.TextView.setText(java.lang.String)#android.content.SharedPreferences.Editor.commit()#android.app.Activity.findViewById(<unknown>)#<unknown>.getTimeString()#android.app.Activity.findViewById(<unknown>)#android.content.SharedPreferences.edit()#android.app.Activity.getPreferences(int)#android.app.Activity.setContentView(<unknown>)#android.content.SharedPreferences.getBoolean(<unknown>, boolean)#android.view.View.clearFocus()#<unknown>.show()#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#java.util.Calendar.getTimeInMillis()#<unknown>.getCurrentAlarmCalendar()#<unknown>.startTimer(<unknown>)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#<unknown>.getTimeInMillis()#android.content.SharedPreferences.Editor.commit()#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setEnabled(boolean)#android.content.SharedPreferences.getLong(java.lang.String, int)#android.widget.TextView.setText(<unknown>)#com.tywholland.simpletimer.SimpleTimerActivity.updateButtons()#android.widget.Toast.makeText(android.content.Context, <unknown>, int)#android.content.ContextWrapper.getApplicationContext()#java.lang.CharSequence.toString()#android.widget.TextView.setText(<unknown>)#<unknown>.setAlarmName(java.lang.String)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.widget.TextView.setEnabled(boolean)#<unknown>.getTimeString()#android.widget.TextView.setText(<unknown>)#<unknown>.setCurrentAlarmCalendar(java.util.Calendar)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#android.os.CountDownTimer.start()#android.widget.TextView.setEnabled(boolean)#android.content.Context.getString(<unknown>)#android.widget.TextView.setEnabled(boolean)#com.tywholland.simpletimer.SimpleTimerActivity.updateTimeView()#com.tywholland.simpletimer.SimpleTimerActivity.updateButtons()#android.content.ContextWrapper.getApplicationContext()#android.app.Activity.setContentView(<unknown>)#java.lang.CharSequence.toString()#android.view.View.setOnClickListener(android.view.View.OnClickListener)#<unknown>.getSecondsFromTimeString(<unknown>)#android.widget.EditText.getText()#<unknown>.appendToTimeString(java.lang.String)#java.util.Calendar.getTimeInMillis()#java.lang.String.format(java.lang.String, java.lang.Integer)#android.widget.TextView.setEnabled(boolean)#android.content.ContextWrapper.getApplicationContext()#android.widget.TextView.setEnabled(boolean)#android.app.Activity.getPreferences(int)#android.content.SharedPreferences.getBoolean(<unknown>, boolean)#<unknown>.convertStringToMilliseconds(<unknown>)#com.tywholland.simpletimer.SimpleTimerActivity.numpadButtonClickListener()#com.tywholland.simpletimer.SimpleTimerActivity.startTextCountdown()#.OnClickListener()#<unknown>.setAlarmName(java.lang.String)#android.content.SharedPreferences.Editor.putLong(java.lang.String, <unknown>)#<unknown>.getTimeString()#android.view.View.setOnClickListener()#android.view.View.setOnClickListener(android.view.View.OnClickListener)#android.app.Activity.getPreferences(int)#android.app.Activity.findViewById(<unknown>)#com.tywholland.simpletimer.SimpleTimerActivity.restoreText()#android.view.View.setOnClickListener(android.view.View.OnClickListener)#android.os.CountDownTimer.cancel()", "callsites_t": ["android.app.Activity.setContentView(<unknown>) android.widget.TextView.setText(<unknown>) java.util.Calendar.getInstance() .CountDownTimer(long, int) android.app.Activity.findViewById(<unknown>) android.content.SharedPreferences.edit() <unknown>.getHoursFromTimeString(<unknown>) android.content.ContextWrapper.getApplicationContext() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) .OnClickListener() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setEnabled(boolean) java.lang.String.format(java.lang.String, java.lang.Integer) <unknown>.stopTimer() <unknown>.getTimeStringFromMilliseconds(long) android.view.MenuInflater.inflate(<unknown>, android.view.Menu) java.lang.CharSequence.toString() android.widget.TextView.setEnabled(boolean) java.lang.String.format(java.lang.String, java.lang.Integer) java.util.Calendar.getInstance() android.app.Activity.getMenuInflater() android.view.View.setOnClickListener(android.view.View.OnClickListener) android.view.View.setOnClickListener(android.view.View.OnClickListener) android.content.Context.getString(<unknown>) android.os.CountDownTimer.cancel() android.app.Activity.findViewById(<unknown>) <unknown>.setTimeString(java.lang.String) android.content.SharedPreferences.Editor.putString(java.lang.String, java.lang.String) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) android.app.Activity.findViewById(<unknown>) <unknown>.getCurrentAlarmCalendar() android.widget.TextView.getText() android.widget.TextView.setEnabled(boolean) android.view.View.setOnClickListener() android.view.MenuItem.getItemId() com.tywholland.simpletimer.SimpleTimerActivity.updateTimeView() android.view.View.setOnClickListener(android.view.View.OnClickListener) <unknown>.stopTimer() android.view.View.setOnClickListener(android.view.View.OnClickListener) <unknown>.setAlarmName(java.lang.String) <unknown>.length() <unknown>.getMinutesFromTimeString(<unknown>) android.app.Activity.setContentView(<unknown>) android.widget.TextView.setEnabled(boolean) android.widget.EditText.getText() <unknown>.getAlarmName() com.tywholland.simpletimer.SimpleTimerActivity.updateButtons() android.app.Activity.findViewById(<unknown>) android.widget.TextView.setEnabled(boolean) android.app.Activity.findViewById(<unknown>) android.content.Intent.Intent(android.content.Context, java.lang.Class) android.app.Activity.findViewById(<unknown>) android.app.Activity.startActivity(android.content.Intent) android.app.Activity.findViewById(<unknown>) com.tywholland.simpletimer.SimpleTimerActivity.stopTextCountdown() com.tywholland.simpletimer.SimpleTimerActivity.startTextCountdown() android.widget.TextView.setText(java.lang.String) android.content.SharedPreferences.Editor.commit() android.app.Activity.findViewById(<unknown>) <unknown>.getTimeString() android.app.Activity.findViewById(<unknown>) android.content.SharedPreferences.edit() android.app.Activity.getPreferences(int) android.app.Activity.setContentView(<unknown>) android.content.SharedPreferences.getBoolean(<unknown>, boolean) android.view.View.clearFocus() <unknown>.show() android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) java.util.Calendar.getTimeInMillis() <unknown>.getCurrentAlarmCalendar() <unknown>.startTimer(<unknown>) android.view.View.setOnClickListener(android.view.View.OnClickListener) <unknown>.getTimeInMillis() android.content.SharedPreferences.Editor.commit() android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) android.widget.TextView.setEnabled(boolean) android.content.SharedPreferences.getLong(java.lang.String, int) android.widget.TextView.setText(<unknown>) com.tywholland.simpletimer.SimpleTimerActivity.updateButtons() android.widget.Toast.makeText(android.content.Context, <unknown>, int) android.content.ContextWrapper.getApplicationContext() java.lang.CharSequence.toString() android.widget.TextView.setText(<unknown>) <unknown>.setAlarmName(java.lang.String) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.widget.TextView.setEnabled(boolean) <unknown>.getTimeString() android.widget.TextView.setText(<unknown>) <unknown>.setCurrentAlarmCalendar(java.util.Calendar) android.view.View.setOnClickListener(android.view.View.OnClickListener) android.view.View.setOnClickListener(android.view.View.OnClickListener) android.os.CountDownTimer.start() android.widget.TextView.setEnabled(boolean) android.content.Context.getString(<unknown>) android.widget.TextView.setEnabled(boolean) com.tywholland.simpletimer.SimpleTimerActivity.updateTimeView() com.tywholland.simpletimer.SimpleTimerActivity.updateButtons() android.content.ContextWrapper.getApplicationContext() android.app.Activity.setContentView(<unknown>) java.lang.CharSequence.toString() android.view.View.setOnClickListener(android.view.View.OnClickListener) <unknown>.getSecondsFromTimeString(<unknown>) android.widget.EditText.getText() <unknown>.appendToTimeString(java.lang.String) java.util.Calendar.getTimeInMillis() java.lang.String.format(java.lang.String, java.lang.Integer) android.widget.TextView.setEnabled(boolean) android.content.ContextWrapper.getApplicationContext() android.widget.TextView.setEnabled(boolean) android.app.Activity.getPreferences(int) android.content.SharedPreferences.getBoolean(<unknown>, boolean) <unknown>.convertStringToMilliseconds(<unknown>) com.tywholland.simpletimer.SimpleTimerActivity.numpadButtonClickListener() com.tywholland.simpletimer.SimpleTimerActivity.startTextCountdown() .OnClickListener() <unknown>.setAlarmName(java.lang.String) android.content.SharedPreferences.Editor.putLong(java.lang.String, <unknown>) <unknown>.getTimeString() android.view.View.setOnClickListener() android.view.View.setOnClickListener(android.view.View.OnClickListener) android.app.Activity.getPreferences(int) android.app.Activity.findViewById(<unknown>) com.tywholland.simpletimer.SimpleTimerActivity.restoreText() android.view.View.setOnClickListener(android.view.View.OnClickListener) android.os.CountDownTimer.cancel()"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener android.os.Bundle android.view.Window java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class Voice extends Activity implements OnClickListener{\n\t\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\t\n\t\t///////   ****** No Title Bar   ********* /////////\n        \n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        setContentView(R.layout.text_voice_camera);\n        \n        \n        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n        \n        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n    \ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n    \ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n    \ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n    \tmDatabaseAdapter = new DatabaseAdapter(this);\n    \t\n    \t////////*********     Get id from intent extras     ********   ////////////\n        intentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n        _id = intentExtras.getLong(\"_id\");\n    \t\n        if(intentExtras.containsKey(\"mDisplayList\")){\n        \tmEditList = new ArrayList<String>();\n        \tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n        \t_id = Long.parseLong(mEditList.get(0));\n        \tString amount = mEditList.get(2);\n        \tString tag = mEditList.get(1);\n        \tif(!(amount.equals(\"\") || amount == null)){\n        \t\tif(!amount.contains(\"?\"))\n        \t\t\ttext_voice_camera_amount.setText(amount);\n        \t}\n        \tif(!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))){\n        \t\ttext_voice_camera_tag.setText(tag);\n        \t}\n        }\n        \n        \n        ////////   ********  Handle Date Bar   *********   ////////\n        if(intentExtras.containsKey(\"mDisplayList\")){\n        \tnew DateHandler(this , Long.parseLong(mEditList.get(6)));\n        } else if(intentExtras.containsKey(\"timeInMillis\")) {\n        \tnew DateHandler(this ,intentExtras.getLong(\"timeInMillis\"));\n        } else {\n        \tnew DateHandler(this);\n        }\n        \n        \n        ////////   ********   Starts Recording each time activity starts   ******   ///////\n        if(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n        \tsetGraphicsVoice();\n        \t\n        \tif(intentExtras.containsKey(\"mDisplayList\")){\n        \t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\"+_id+\".amr\");\n        \t\t\n        \t\tif(tempFile.canRead()){\n        \t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n        \t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n        \t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n        \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n        \t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n        \t\t} else {\n        \t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n        \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n        \t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n        \t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n        \t\t}\n        \t} else {\n        \t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n        \t\tmRecordingHelper.startRecording();\n        \t\tcontrolVoiceChronometer();\n        \t}\n        } \n        else {\n        \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n        }\n        setClickListeners();\n\t\t\n\t\t////////*********     Get Last most accurate location info   *********   /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\t\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\n\t\n\t@Override\n\tprotected void onPause() {\n\t\t\n\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\ttry{\n\t\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n\t\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch(Exception e){\n\t\t\t\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n\t\t\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n\t\t\n\t\t\n\t\t////  ***** if stop button pressed ****** //////\n\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n\t\t\ttry{\n\t\t\t\tif(mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e){}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch(Exception e){}\n\t\t\ttry{\n\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t}catch(NullPointerException e){\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t////  ***** if play button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n\t\t\tmAudioPlay = new AudioPlay(_id+\"\",this);\n\t\t\t\n\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n\t\t\tif(!mAudioPlay.isAudioPlaying()){\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\t\t\n\t\t////  ***** if rerecord button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){}\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\t\t\t\n\t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n\t\t\tif(mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\t\t\n\t\t////////********  Adding Action to save entry     *********    ///////////\n\t\t\n\t\tif(v.getId() == R.id.text_voice_camera_save_entry){\n\t\t\tsaveEntry();\n\t\t}\n\t\n\t\n\t\t/////////     *********   Adding action if delete button **********  /////////\n\t\n\t\tif(v.getId() == R.id.text_voice_camera_delete){\n\t\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\t\ttry{\n\t\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\n\t\t\tnew FileDelete(_id);\n\t\t\n\t\t\t//////   *******   Delete entry from database ********   /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n\t\n\tprivate void saveEntry() {\n\t\t///////    *******  Creating HashMap to update info   *******  ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\t\t\n\t\tif(!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")){\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double)((int)((mAmount+0.005)*100.0)/100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\t\n\t\tif(text_voice_camera_tag.getText().toString() != \"\"){\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\t\t\n\t\tif(!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)){\n\t\t\ttry{\n\t\t\t\tif(!intentExtras.containsKey(\"mDisplayList\")){\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t} else {\n\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mEditList.get(6)));\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t}\n\t\t\t} catch (Exception e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t//////    *******   Update database if user added additional info   *******  ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tif(!intentExtras.containsKey(\"timeInMillis\")  && !intentExtras.containsKey(\"mDisplayList\")){\n\t\t\t Intent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\t startActivity(intentExpenseListing);\n\t\t}\n\t}\n\n\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\t\n\t\n\t///// ******************  Handling back press of key   ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n\t     if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t    \t onBackPressed();\n\t    \t return true;\n\t      }\n\t    return super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t    // This will be called either automatically for you on 2.0    \n\t    // or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry{\n\t\t\tif(mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t}catch(Exception e){}\n\t    return;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-27T21:06:39Z", "hash_sni": "541702b3ee44e9bc211d6aa123f76410add5f0bb", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \t\t\t\tif(mAudioPlay.isAudioPlaying())\n \t\t\t\t\tmAudioPlay.stopPlayBack();\n \t\t\t} catch(Exception e){}\n-\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n+\t\t\ttry{\n+\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n+\t\t\t}catch(NullPointerException e){\n+\t\t\t\t\n+\t\t\t}\n \t\t}\n \t\t\n \t\t\n@@ -400,6 +404,7 @@ public class Voice extends Activity implements OnClickListener{\n \tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n \t     if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n \t    \t onBackPressed();\n+\t    \t return true;\n \t      }\n \t    return super.onKeyDown(keyCode, event);\n \t}"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime File FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLastLocation getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put requestWindowFeature saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526733523985104896, "subject_t": ["Removed bugs and app now stable"], "comments_t": ["\t\t////////********  Adding Action to save entry     *********    /////////// \t//countdowntimer is an abstract class, so extend it and fill in methods \t\t///////   ****** No Title Bar   ********* /////////         ////////   ********    Initializing and assigning memory to UI Items **********    /////////     \t////////*********     Get id from intent extras     ********   //////////// \t\t\t///////   *******   Chronometer Starts Countdown   ******  /////// \t\t\t//////  ******  Restarts chronometer and recording   *******  //////// \t///// ******************  Handling back press of key   ********** /////////// \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   //////// \t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******////// \t\t////  ***** if stop button pressed ****** ////// \t\t///////   ***** Sets Title Voice Entry *********/////// \t\t\t//////   ******   Handles UI items on button click  ******  ///////         ////////   ********  Handle Date Bar   *********   ////////         ///////   ***** Sets Title Voice Entry *********/////// \t    // This will be called either automatically for you on 2.0     \t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** /////// \t\t////////    *******    Adding Click Listeners to UI Items ******** ////////// \t\t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t////////*********     Get Last most accurate location info   *********   ///////// \t\t////  ***** if play button pressed ****** //////\t\t \t\t\t//////   *******   Delete entry from database ********   ///////// \t\t////  ***** if rerecord button pressed ****** //////\t\t \t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t//////    *******   Update database if user added additional info   *******  /////// \t\t///////   ********     Adding On Click Actions to click listeners *********    ////////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////               ////////   ********   Starts Recording each time activity starts   ******   /////// \t    // or later, or by the code above on earlier versions of the platform.         //////   ******  Shows Voice Details ********//////// \t\t\t//////\t     ********   to handle playback of recorded file   *********   //////// \t\t///////    *******  Creating HashMap to update info   *******  //////// \t\t/////////     *********   Adding action if delete button **********  /////////"], "parents_ss": ["3136b8e48e3561c8e2073ded73bc26a3b96533ad"], "id": "vinsol/expense-tracker\u0000541702b3ee44e9bc211d6aa123f76410add5f0bb\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.widget.TextView.setText(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#<unknown>.deleteDatabaseEntryID(java.lang.String)#java.util.Calendar.setTimeInMillis(long)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.app.Activity.finish()#java.io.File.File(java.lang.String)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#<unknown>.getLastLocation()#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#android.widget.TextView.getText()#<unknown>.DisplayTime()#android.view.KeyEvent.getRepeatCount()#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.requestWindowFeature(int)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#<unknown>.isRecording()#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() java.lang.Long.parseLong(java.lang.String) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.widget.TextView.setText(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.lang.Long.toString(long) <unknown>.deleteDatabaseEntryID(java.lang.String) java.util.Calendar.setTimeInMillis(long) <unknown>.getTimeMillis() android.app.Activity.getIntent() android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.app.Activity.finish() java.io.File.File(java.lang.String) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) <unknown>.getLastLocation() android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() android.widget.TextView.getText() <unknown>.DisplayTime() android.view.KeyEvent.getRepeatCount() <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.requestWindowFeature(int) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) <unknown>.isRecording() android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "rrtigga", "repo_sni": "rrtigga/GetDisciplined", "imports_t": ["android.text.Spannable android.widget.CheckBox android.app.Notification android.text.SpannableString android.view.View.OnClickListener android.content.Context android.os.Bundle android.content.DialogInterface android.widget.CompoundButton android.view.Menu com.triggertrap.seekarc.SeekArc android.view.MenuInflater java.util.ArrayList android.widget.SeekBar.OnSeekBarChangeListener java.util.Date android.app.PendingIntent android.graphics.Typeface android.content.SharedPreferences com.ibc.android.demo.appslist.app.HeartBeat android.widget.TextView android.net.Uri android.app.admin.DevicePolicyManager android.os.CountDownTimer android.app.AlarmManager android.widget.Toast android.content.Intent java.util.Map android.app.NotificationManager android.content.ComponentName android.content.pm.ActivityInfo android.widget.SeekBar android.view.MenuItem android.app.AlertDialog android.support.v7.app.ActionBarActivity android.view.View android.util.Log"], "email_sni": "rrtigga@ucdavis.edu", "contents_t": ["package com.spicycurryman.getdisciplined10.app;\n\nimport android.app.AlarmManager;\nimport android.app.AlertDialog;\nimport android.app.Notification;\nimport android.app.NotificationManager;\nimport android.app.PendingIntent;\nimport android.app.admin.DevicePolicyManager;\nimport android.content.ComponentName;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.content.pm.ActivityInfo;\nimport android.graphics.Typeface;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.support.v7.app.ActionBarActivity;\nimport android.text.Spannable;\nimport android.text.SpannableString;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.CheckBox;\nimport android.widget.CompoundButton;\nimport android.widget.SeekBar;\nimport android.widget.SeekBar.OnSeekBarChangeListener;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.ibc.android.demo.appslist.app.HeartBeat;\nimport com.triggertrap.seekarc.SeekArc;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.Map;\n\npublic class MainActivity extends ActionBarActivity {\n    private SeekArc mSeekArc;\n    private SeekBar mRotation;\n    private SeekBar mStartAngle;\n    private SeekBar mSweepAngle;\n    private SeekBar mArcWidth;\n    private SeekBar mProgressWidth;\n    private CheckBox mRoundedEdges;\n    private CheckBox mTouchInside;\n    private CheckBox mClockwise;\n    private TextView mSeekArcProgress;\n    private TextView mSeekArcMinuteProgress;\n\n\n\n    //will show the time\n    private TextView number_text;\n\n    private TextView minute_text;\n\n    private TextView little_hour_text2;\n    private TextView little_minute_text2;\n\n\n\n    CountDownTimer countDownTimer;          // built in android class CountDownTimer\n    long totalTimeCountInMilliseconds;\n    long timeBlinkInMilliseconds;           // start time of start blinking\n    boolean blink;\n\n\n    SharedPreferences startimerPreferences;\n    SharedPreferences endTimerPreferences;\n    SharedPreferences endservice;\n\n\n    ArrayList<String> packagezList;\n    SharedPreferences sharedPrefsapp;\n    Map<String, ?> allEntries;\n\n\n    long timerstarted; //this is when the user hit start timer.\n    long timerends; //this is the time when the time when the timer will end;\n    long reopened; //this is when time when the user reopens the application;\n\n\n\n    long newtotalTimeCountInMilliseconds;\n\n\n    // Consider showing drawable scrubber after pressing H M or S\n\n\n\n\n    CircleButton block_button1;\n    CircleButton start_timer;\n\n\n    int hourint, minuteint;\n\n\n    private static final int REQUEST_CODE = 0;\n    private DevicePolicyManager mDPM;\n    private ComponentName mAdminName;\n\n    public boolean onCreateOptionsMenu(Menu menu){\n        MenuInflater inflater = getMenuInflater();\n        inflater.inflate(R.menu.main, menu);\n        return true;\n    }\n\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n            case R.id.setting_drop:\n                Intent sharingIntent = new Intent(android.content.Intent.ACTION_SEND);\n                sharingIntent.setType(\"text/plain\");\n                String shareBody = \"Hey you gotta check out this app I found, GetDisciplined! It really helps me stay focused! http://play.google.com/store/apps/details?id=com.spicycurryman.getdisciplined10.app \";\n                sharingIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, \"Check out GetDisciplined\");\n                sharingIntent.putExtra(android.content.Intent.EXTRA_TEXT, shareBody);\n                startActivity(Intent.createChooser(sharingIntent, \"Share via\"));\n                return true;\n            case R.id.follow_us_drop:\n                Intent followintent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://www.twitter.com/getdisciplined\"));\n                startActivity(followintent);\n                return true;\n            case R.id.feedback_drop:\n                Intent emailIntent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(\n                        \"mailto\",\"getdisciplinedapp@gmail.com\", null));\n                startActivity(Intent.createChooser(emailIntent, \"Send email...\"));\n                return true;\n\n\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n\n\n    @Override\n    protected void onResume()\n    {\n        super.onResume();\n        ApplicationCheck.activityResumed();\n\n\n        try\n        {\n            // Initiate DevicePolicyManager.\n            mDPM = (DevicePolicyManager)getSystemService(Context.DEVICE_POLICY_SERVICE);\n            // Set DeviceAdminDemo Receiver for active the component with different option\n            mAdminName = new ComponentName(this, DeviceAdmin.class);\n\n            if (!mDPM.isAdminActive(mAdminName)) {\n                // try to become active\n                Intent intent = new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN);\n                intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, mAdminName);\n                intent.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION,\n                        \"\\nIt's time to GetDisciplined! ;)\"+\n                        \"\\n It\u2019s this simple: \\n\" +\n                        \"1) Drag the red circle scrubber on the top to set the amount of time for how long you want the apps to be blocked for\\n\" +\n                        \"(Press the hour time and drag the scrubber to set the time for hours and press the minute time and drag the scrubber to set the time for minutes)\\n\" +\n                        \"2) Press the list button and check the distracting apps you want to block\\n\" +\n                        \"3) Press the timer button to start the time\");\n                startActivityForResult(intent, REQUEST_CODE);\n            }\n            else\n            {\n                // Already is a device administrator, can do security operations now.\n                //mDPM.lockNow();\n            }\n        } catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n    }\n\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\n        super.onCreate(savedInstanceState);\n        setTheme(R.style.Theme_Light_appalled);\n\n        setContentView(R.layout.merge);\n\n\n\n        try\n        {\n            // Initiate DevicePolicyManager.\n            mDPM = (DevicePolicyManager)getSystemService(Context.DEVICE_POLICY_SERVICE);\n            // Set DeviceAdminDemo Receiver for active the component with different option\n            mAdminName = new ComponentName(this, DeviceAdmin.class);\n\n            if (!mDPM.isAdminActive(mAdminName)) {\n                // try to become active\n                Intent intent = new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN);\n                intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, mAdminName);\n                intent.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION,\n                        \"\\nIt's time to GetDisciplined! ;)\"+\n                                \"\\n It\u2019s this simple: \\n\" +\n                                \"1) Drag the red circle scrubber on the top to set the amount of time for how long you want the apps to be blocked for\\n\" +\n                                \"(Press the hour time and drag the scrubber to set the time for hours and press the minute time and drag the scrubber to set the time for minutes)\\n\" +\n                                \"2) Press the list button and check the distracting apps you want to block\\n\" +\n                                \"3) Press the timer button to start the time\");\n                startActivityForResult(intent, REQUEST_CODE);\n            }\n            else\n            {\n                // Already is a device administrator, can do security operations now.\n                //mDPM.lockNow();\n            }\n        } catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n\n\n        // here is where the service is started.\n        //startService(new Intent(this, HeartBeat.class));\n\n/*\n        Intent iHeartBeatService = new Intent(this, HeartBeat.class);\n        PendingIntent piHeartBeatService = PendingIntent.getService(this, 0, iHeartBeatService, PendingIntent.FLAG_UPDATE_CURRENT);\n        AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);\n        alarmManager.cancel(piHeartBeatService);\n        alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), 300000, piHeartBeatService);\n*/\n\n\n        Intent ishintent = new Intent(this, HeartBeat.class);\n        PendingIntent pintent = PendingIntent.getService(this, 0, ishintent, 0);\n        AlarmManager alarm = (AlarmManager)getSystemService(Context.ALARM_SERVICE);\n        alarm.cancel(pintent);\n        alarm.setRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(),150000, pintent);\n        getApplicationContext().startService(ishintent);\n\n\n\n\n\n        //set views\n\n        start_timer = (CircleButton) findViewById(R.id.start_button);\n        number_text = (TextView) findViewById(R.id.hour_progress_number);\n        minute_text = (TextView) findViewById(R.id.minute_progress_number);\n\n\n        //getReferenceOfViews ();                         // get all views\n        setActionListeners ();\n\n        // This determine what the actual \"countdown\" time will be.\n        //totalTimeCountInMilliseconds = 60 * 1000;      // time count for 3 minutes = 180 seconds\n        //timeBlinkInMilliseconds = 30 * 1000;\n\n        //Make sure you find out why it appears after a whole 1 second after the app appears\n        SpannableString s = new SpannableString(\"GetDisciplined\");\n        s.setSpan(new TypefaceSpan(this, \"miso.otf\"), 0, s.length(),\n                Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n\n// Update the action bar title with the TypefaceSpan instance\n        android.support.v7.app.ActionBar actionBar = getSupportActionBar();\n        actionBar.setTitle(s);\n        // set the action bar in this activity as the home\n        actionBar.setHomeButtonEnabled(true);\n\n        //Listeners for the buttons\n        addListenerOnButton();\n\n\n\n        //Editing Button Text\n\n\n\n        number_text = (TextView)findViewById(R.id.hour_progress_number);\n        number_text.setTypeface(Typeface.createFromAsset(getAssets(), \"fonts/roboto-thin.ttf\"));\n\n        minute_text = (TextView)findViewById(R.id.minute_progress_number);\n        minute_text.setTypeface(Typeface.createFromAsset(getAssets(), \"fonts/roboto-thin.ttf\"));\n\n\n        little_hour_text2 = (TextView)findViewById(R.id.little_hour_text2);\n        little_hour_text2.setTypeface(Typeface.createFromAsset(getAssets(), \"fonts/roboto-thin.ttf\"));\n\n        little_minute_text2 = (TextView)findViewById(R.id.little_minute_text2);\n        little_minute_text2.setTypeface(Typeface.createFromAsset(getAssets(), \"fonts/roboto-thin.ttf\"));\n\n\n        mSeekArc = (SeekArc) findViewById(R.id.seekArc);\n\n\n//Here is the actual \"hour progress number\" aka the TextView that changes as the scrubber is dragged around\n        mSeekArcProgress = (TextView) findViewById(R.id.hour_progress_number);\n\n        mSeekArcMinuteProgress = (TextView) findViewById(R.id.minute_progress_number);\n\n\n        startimerPreferences = getPreferences(MODE_APPEND);\n\n        Date startDate = new Date(startimerPreferences.getLong(\"time\", 0));\n        timerstarted = startDate.getTime();\n\n\n        endTimerPreferences = getPreferences(MODE_APPEND);\n        Date endDate = new Date(endTimerPreferences.getLong(\"endtime\", 0));\n        timerends = endDate.getTime();\n\n\n        Date openagain = new Date(System.currentTimeMillis());\n        reopened = openagain.getTime();\n\n\n        //make textview selectable\n\n        View.OnClickListener clickListener = new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n\n                if((v.getId() == R.id.hour_progress_number)){\n                    number_text.setTextColor(getResources().getColor(R.color.black));\n                    little_hour_text2.setTextColor(getResources().getColor(R.color.black));\n\n\n\n\n\n                    minute_text.setTextColor(getResources().getColor(R.color.red_highlight));\n                    little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n\n\n\n\n\n                    //corresponding button logic should below here\n                    mSeekArc.setOnSeekArcChangeListener(new SeekArc.OnSeekArcChangeListener() {\n\n                        @Override\n                        public void onStopTrackingTouch(SeekArc seekArc) {\n                        }\n                        @Override\n                        public void onStartTrackingTouch(SeekArc seekArc) {\n                            number_text.setTextColor(getResources().getColor(R.color.black));\n                        }\n\n\n                        //This sets the actual string for the hours\n                        @Override\n                        public void onProgressChanged(SeekArc seekArc, int progress,\n                                                      boolean fromUser) {\n\n                            int progress_count = 0;\n\n                            for (int i=0;i<24;i=i+1)\n                            {\n\n                                if (progress ==120) {\n                                    mSeekArcProgress.setText(\"24\");\n\n                                }\n                                else if (progress == progress_count)\n                                {\n                                    mSeekArcProgress.setText(String.valueOf(String.format(\"%02d\",i)));\n                                }\n\n                                progress_count = progress_count + 5;\n\n                            }\n                        }\n                    });\n                } else if((v.getId() == R.id.minute_progress_number)){\n\n                    minute_text.setTextColor(getResources().getColor(R.color.black));\n                    little_minute_text2.setTextColor(getResources().getColor(R.color.black));\n\n\n\n                    number_text.setTextColor(getResources().getColor(R.color.red_highlight));\n                    little_hour_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n\n\n\n\n                    //corresponding button logic should below here\n\n                    mSeekArc.setOnSeekArcChangeListener(new SeekArc.OnSeekArcChangeListener() {\n\n\n                        @Override\n                        public void onStopTrackingTouch(SeekArc seekArc) {\n                        }\n                        @Override\n                        public void onStartTrackingTouch(SeekArc seekArc) {\n                            minute_text.setTextColor(getResources().getColor(R.color.black));\n                        }\n\n\n                        //This sets the actual string for the minutes\n                        @Override\n                        public void onProgressChanged(SeekArc seekArc, int progress,\n                                                      boolean fromUser) {\n                            int progress_count = 0;\n\n                            for (int i=0;i<120;i++)\n                            {\n\n                                if (progress ==120) {\n                                    mSeekArcMinuteProgress.setText(\"00\");\n\n\n\n\n                                }\n                                else if (progress == progress_count)\n                                {\n                                    mSeekArcMinuteProgress.setText(String.valueOf(String.format(\"%02d\",i)));\n                                }\n\n                                progress_count = progress_count + 2;\n\n\n                            }\n\n                        }\n                    });\n                }\n\n            }\n        };\n\n        findViewById(R.id.hour_progress_number).setOnClickListener(clickListener);\n        findViewById(R.id.minute_progress_number).setOnClickListener(clickListener);\n\n\n        findViewById(R.id.minute_progress_number).performClick();\n\n\n\n        mRotation = (SeekBar) findViewById(R.id.rotation);\n        mStartAngle = (SeekBar) findViewById(R.id.startAngle);\n        mSweepAngle  = (SeekBar) findViewById(R.id.sweepAngle);\n        mArcWidth = (SeekBar) findViewById(R.id.arcWidth);\n        mProgressWidth = (SeekBar) findViewById(R.id.progressWidth);\n        mRoundedEdges = (CheckBox) findViewById(R.id.roundedEdges);\n        mTouchInside = (CheckBox) findViewById(R.id.touchInside);\n        mClockwise = (CheckBox) findViewById(R.id.clockwise);\n\n        mRotation.setProgress(mSeekArc.getArcRotation());\n        mStartAngle.setProgress(mSeekArc.getStartAngle());\n        mSweepAngle.setProgress(mSeekArc.getSweepAngle());\n        mArcWidth.setProgress(mSeekArc.getArcWidth());\n        mProgressWidth.setProgress(mSeekArc.getProgressWidth());\n\n\n        mRotation.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n            @Override\n            public void onStopTrackingTouch(SeekBar arg0) {\n\n            }\n            @Override\n            public void onStartTrackingTouch(SeekBar arg0) {\n            }\n\n            @Override\n            public void onProgressChanged(SeekBar view, int progress, boolean fromUser) {\n                mSeekArc.setArcRotation(progress);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mStartAngle.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n            @Override\n            public void onStopTrackingTouch(SeekBar arg0) {\n\n            }\n            @Override\n            public void onStartTrackingTouch(SeekBar arg0) {\n            }\n\n            @Override\n            public void onProgressChanged(SeekBar view, int progress, boolean fromUser) {\n                mSeekArc.setStartAngle(progress);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mSweepAngle.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n            @Override\n            public void onStopTrackingTouch(SeekBar arg0) {\n\n            }\n            @Override\n            public void onStartTrackingTouch(SeekBar arg0) {\n            }\n\n            @Override\n            public void onProgressChanged(SeekBar view, int progress, boolean fromUser) {\n                mSeekArc.setSweepAngle(progress);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mArcWidth.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n            @Override\n            public void onStopTrackingTouch(SeekBar arg0) {\n\n            }\n            @Override\n            public void onStartTrackingTouch(SeekBar arg0) {\n            }\n\n            @Override\n            public void onProgressChanged(SeekBar view, int progress, boolean fromUser) {\n                mSeekArc.setArcWidth(progress);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mProgressWidth.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n            @Override\n            public void onStopTrackingTouch(SeekBar arg0) {\n\n            }\n            @Override\n            public void onStartTrackingTouch(SeekBar arg0) {\n            }\n\n            @Override\n            public void onProgressChanged(SeekBar view, int progress, boolean fromUser) {\n                mSeekArc.setProgressWidth(progress);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mRoundedEdges.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(CompoundButton buttonView,boolean isChecked) {\n                mSeekArc.setRoundedEdges(isChecked);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mTouchInside.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(CompoundButton buttonView,boolean isChecked) {\n                mSeekArc.setTouchInSide(false);\n            }\n        });\n\n        mClockwise.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(CompoundButton buttonView,boolean isChecked) {\n                mSeekArc.setClockwise(isChecked);\n                mSeekArc.invalidate();\n            }\n        });\n\n\n        if(timerstarted > 0)\n        {\n            if(reopened <timerends){\n                //start countdown timer with new time.\n                //set countdowntime to timerends-reopen.\n\n                newtotalTimeCountInMilliseconds = timerends-reopened;\n\n\n                number_text.setTextColor(getResources().getColor(R.color.red_highlight));\n                little_hour_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n\n                minute_text.setTextColor(getResources().getColor(R.color.red_highlight));\n                little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n\n\n\n\n                // yo\n\n                number_text.setClickable(false);\n\n                minute_text.setClickable(false);\n\n\n\n\n\n\n                countDownTimer = new CountDownTimer(newtotalTimeCountInMilliseconds, 500) {\n                    // 500 means, onTick function will be called at every 500 milliseconds\n\n                    @Override\n                    public void onTick(long leftTimeInMilliseconds) {\n\n                        long seconds = leftTimeInMilliseconds / 1000;\n                        mSeekArc.setVisibility(View.INVISIBLE);\n                        start_timer.setVisibility(View.INVISIBLE);\n                        //block_button1.setVisibility(View.INVISIBLE);\n\n\n                        if (leftTimeInMilliseconds < timeBlinkInMilliseconds) {\n                            // textViewShowTime.setTextAppearance(getApplicationContext(), R.style.blinkText);\n                            // change the style of the textview .. giving a red alert style\n\n                            if (blink) {\n                                number_text.setVisibility(View.VISIBLE);\n                                minute_text.setVisibility(View.VISIBLE);\n\n\n                                // if blink is true, textview will be visible\n                            } else {\n                                number_text.setVisibility(View.INVISIBLE);\n                                minute_text.setVisibility(View.INVISIBLE);\n\n\n                            }\n\n                            blink = !blink;         // toggle the value of blink\n                        }\n\n                        minute_text.setText(String.format(\"%02d\", (seconds / 60) % 60));\n                        number_text.setText(String.format(\"%02d\", seconds / 3600));                     // format the textview to show the easily readable format\n                    }\n\n\n                    @Override\n                    public void onFinish() {\n                        // this function will be called when the timecount is finished\n                        //textViewShowTime.setText(\"Time up!\");\n                        number_text.setVisibility(View.VISIBLE);\n                        minute_text.setVisibility(View.VISIBLE);\n                        mSeekArc.setVisibility(View.VISIBLE);\n                        start_timer.setVisibility(View.VISIBLE);\n\n                        number_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                        minute_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                        little_hour_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                        little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                        number_text.setClickable(true);\n\n                        minute_text.setClickable(true);\n\n\n\n\n\n                    }\n\n                }.start();\n\n\n\n            }\n        }\n\n    }\n\n    private static final long TIME_INTERVAL = 2000; // # milliseconds, desired time passed between two back presses.\n    private long mBackPressed;\n\n    @Override\n    public void onBackPressed()\n    {\n        if (mBackPressed + TIME_INTERVAL > System.currentTimeMillis())\n        {\n            super.onBackPressed();\n            return;\n        }\n        else { Toast.makeText(getBaseContext(), \"Tap back button again to exit\", Toast.LENGTH_SHORT).show(); }\n\n        mBackPressed = System.currentTimeMillis();\n    }\n\n    public void addListenerOnButton() {\n\n        final Context context = this;\n\n        block_button1 = (CircleButton) findViewById(R.id.block_button);\n\n        block_button1.setOnClickListener(new OnClickListener() {\n\n            @Override\n            public void onClick(View arg0) {\n\n                Intent intent = new Intent(context, InstalledAppActivity.class);\n                startActivity(intent);\n\n            }\n\n        });\n\n    }\n\n    private void setActionListeners() {\n\n        number_text = (TextView) findViewById(R.id.hour_progress_number);\n        minute_text = (TextView) findViewById(R.id.minute_progress_number);\n\n        start_timer.setOnClickListener(new View.OnClickListener() {\n\n            @Override\n            public void onClick(View view) {\n\n                AlertDialog.Builder zeroerror = new AlertDialog.Builder(MainActivity.this)\n                        .setMessage(\"Dude, you didn't set a time! :P\")\n                        .setNegativeButton(\"Whoops! My bad!\", new DialogInterface.OnClickListener() {\n                            public void onClick(DialogInterface dialog, int which) {\n                                Log.d(\"AlertDialog\", \"Negative\");\n                                dialog.cancel();\n                            }\n                        });\n\n\n                AlertDialog alertzero = zeroerror.create();\n\n\n                AlertDialog.Builder noapp = new AlertDialog.Builder(MainActivity.this)\n                        .setMessage(\"Hey silly! You didn't select any apps to block!\")\n                        .setNegativeButton(\"Oh, silly me!\", new DialogInterface.OnClickListener() {\n                            public void onClick(DialogInterface dialog, int which) {\n                                Log.d(\"AlertDialog\", \"Negative\");\n                                dialog.cancel();\n                            }\n                        });\n\n\n                AlertDialog zeroapp = noapp.create();\n\n\n\n                hourint = Integer.valueOf(number_text.getText().toString());\n\n                minuteint = Integer.valueOf(minute_text.getText().toString());\n\n\n\n                AlertDialog.Builder timeset = new AlertDialog.Builder(MainActivity.this)\n\n\n                        .setMessage(\"Are you sure you want to block the selected apps for \"+ hourint +\" hour(s) and \"+ minuteint + \" minutes?!\")\n                        .setPositiveButton(\"Yeah man!\", new DialogInterface.OnClickListener() {\n\n\n\n                            public void onClick(DialogInterface dialog, int which) {\n\n                                number_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                minute_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                little_hour_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                number_text.setClickable(false);\n\n                                minute_text.setClickable(false);\n\n\n                                hourint = Integer.valueOf(number_text.getText().toString());\n\n                                minuteint = Integer.valueOf(minute_text.getText().toString());\n\n\n                                //Make sure it stays alive no matter what until stopservice is called when the timer runs out\n\n\n                                Date currenttime = new Date(System.currentTimeMillis());\n\n                                timerstarted = currenttime.getTime();\n                                startimerPreferences = getPreferences(MODE_APPEND);\n                                SharedPreferences.Editor starteditor = startimerPreferences.edit();\n                                starteditor.putLong(\"time\", timerstarted);\n                                starteditor.apply();\n\n\n                                Date endtime = new Date(System.currentTimeMillis());\n\n\n                                if ((((hourint * 60 * 60) + (minuteint * 60)  ) * 1000) > 0) {\n                                    timerends = endtime.getTime() + (((hourint * 60 * 60) + (minuteint * 60) ) * 1000);\n\n\n                                } else {\n                                    timerends = 0;\n                                }\n\n\n                                Log.e(\"This is the end time:  \", timerends + \"\");\n                                endTimerPreferences = getPreferences(MODE_APPEND);\n                                SharedPreferences.Editor endeditor = endTimerPreferences.edit();\n                                endeditor.putLong(\"endtime\", timerends);\n                                endeditor.apply();\n\n                                endservice = getApplicationContext().getSharedPreferences(\"endservice\", Context.MODE_PRIVATE);\n                                SharedPreferences.Editor serviceeditor = endservice.edit();\n                                serviceeditor.putLong(\"endservice\", timerstarted + (((hourint * 60 * 60) + (minuteint * 60) ) * 1000));\n                                Log.e(\"Check out this time:  \", timerends + \"\");\n\n                                serviceeditor.apply();\n\n\n                                totalTimeCountInMilliseconds = (((hourint * 60 * 60) + (minuteint * 60) ) * 1000);      // time count\n                                timeBlinkInMilliseconds = 30 * 1000;\n\n                                countDownTimer = new CountDownTimer(totalTimeCountInMilliseconds, 500) {\n                                    // 500 means, onTick function will be called at every 500 milliseconds\n\n                                    @Override\n                                    public void onTick(long leftTimeInMilliseconds) {\n\n                                        long seconds = leftTimeInMilliseconds / 1000;\n                                        mSeekArc.setVisibility(View.INVISIBLE);\n                                        start_timer.setVisibility(View.INVISIBLE);\n                                        //block_button1.setVisibility(View.INVISIBLE);\n\n\n                                        if (leftTimeInMilliseconds < timeBlinkInMilliseconds) {\n                                            // textViewShowTime.setTextAppearance(getApplicationContext(), R.style.blinkText);\n                                            // change the style of the textview .. giving a red alert style\n\n                                            if (blink) {\n                                                number_text.setVisibility(View.VISIBLE);\n                                                minute_text.setVisibility(View.VISIBLE);\n\n\n                                                // if blink is true, textview will be visible\n                                            } else {\n                                                number_text.setVisibility(View.INVISIBLE);\n                                                minute_text.setVisibility(View.INVISIBLE);\n\n\n                                            }\n\n                                            blink = !blink;         // toggle the value of blink\n                                        }\n\n                                        minute_text.setText(String.format(\"%02d\", (seconds / 60) % 60));\n                                        number_text.setText(String.format(\"%02d\", seconds / 3600));                     // format the textview to show the easily readable format\n                                    }\n\n\n                                    @Override\n                                    public void onFinish() {\n                                        number_text.setVisibility(View.VISIBLE);\n                                        minute_text.setVisibility(View.VISIBLE);\n                                        mSeekArc.setVisibility(View.VISIBLE);\n                                        start_timer.setVisibility(View.VISIBLE);\n\n\n                                        number_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                        minute_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                        little_hour_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                        little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                        number_text.setClickable(true);\n\n                                        minute_text.setClickable(true);\n\n\n                                        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n                                        Notification myNotification = new Notification(R.drawable.ic_launcher, \"Time's up!\", System.currentTimeMillis());\n                                        Context context = getApplicationContext();\n                                        String notificationTitle = \"Apps are now unlocked!\";\n                                        String notificationText = \"Great job being productive! ;)\";\n                                        Intent myIntent = new Intent(MainActivity.this, MainActivity.class);\n                                        PendingIntent pendingIntent = PendingIntent.getActivity(MainActivity.this, 0,   myIntent, Intent.FILL_IN_ACTION);\n                                        myNotification.flags |= Notification.FLAG_AUTO_CANCEL;\n                                        myNotification.setLatestEventInfo(context, notificationTitle, notificationText, pendingIntent);\n                                        notificationManager.notify(1, myNotification);\n\n\n                                    }\n\n                                }.start();\n                            }\n                        });\n                timeset.setNegativeButton(\"Nope!\", new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int which) {\n                        Log.d(\"AlertDialog\", \"Negative\");\n                        dialog.cancel();\n                    }\n                });\n\n\n                AlertDialog timerright = timeset.create();\n\n                hourint = Integer.valueOf(number_text.getText().toString());\n\n                minuteint = Integer.valueOf(minute_text.getText().toString());\n\n\n\n\n                sharedPrefsapp = getApplicationContext().getSharedPreferences(\"appdb\", Context.MODE_PRIVATE);\n                allEntries= null;\n                allEntries = sharedPrefsapp.getAll();\n                packagezList= null;\n\n                packagezList = new ArrayList<String>();\n\n                for (Map.Entry<String, ?> entry : allEntries.entrySet()) {\n                    packagezList.add(entry.getKey());\n\n                }\n\n\n\n                if((((hourint * 60 * 60) + (minuteint * 60)  ) * 1000) == 0)\n                {\n                    alertzero.show();\n                }\n\n                else if (packagezList.size() ==0){\n                    noapp.show();\n                }\n\n\n\n                else\n                {\n                    timerright.show();\n                }\n\n            }\n\n\n        });\n    }\n\n\n    @Override\n    protected void onPause() {\n        super.onPause();\n        ApplicationCheck.activityPaused();\n    }\n\n\n}\n"], "body_t": ["<empty>"], "date_tdt": "2015-06-19T02:09:12Z", "hash_sni": "d8d2a0a3b0e3790188a5d932f1541eca3f9c33cb", "name_sni": "app/src/main/java/com/spicycurryman/getdisciplined10/app/MainActivity.java", "patch_t": [" package com.spicycurryman.getdisciplined10.app;\n \n-import android.app.ActionBar;\n import android.app.AlarmManager;\n import android.app.AlertDialog;\n import android.app.Notification;\n@@ -266,7 +265,7 @@ public class MainActivity extends ActionBarActivity {\n                 Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n \n // Update the action bar title with the TypefaceSpan instance\n-        ActionBar actionBar = getActionBar();\n+        android.support.v7.app.ActionBar actionBar = getSupportActionBar();\n         actionBar.setTitle(s);\n         // set the action bar in this activity as the home\n         actionBar.setHomeButtonEnabled(true);\n@@ -294,15 +293,6 @@ public class MainActivity extends ActionBarActivity {\n         little_minute_text2.setTypeface(Typeface.createFromAsset(getAssets(), \"fonts/roboto-thin.ttf\"));\n \n \n-\n-\n-\n-\n-\n-\n-\n-\n-\n         mSeekArc = (SeekArc) findViewById(R.id.seekArc);\n \n \n@@ -316,13 +306,11 @@ public class MainActivity extends ActionBarActivity {\n \n         Date startDate = new Date(startimerPreferences.getLong(\"time\", 0));\n         timerstarted = startDate.getTime();\n-        Log.e(\"This is the start time!!!!!:  \", timerstarted + \"\");\n \n \n         endTimerPreferences = getPreferences(MODE_APPEND);\n         Date endDate = new Date(endTimerPreferences.getLong(\"endtime\", 0));\n         timerends = endDate.getTime();\n-        Log.e(\"This is the end time!!!!!:  \", timerends + \"\");\n \n \n         Date openagain = new Date(System.currentTimeMillis());\n@@ -652,10 +640,6 @@ public class MainActivity extends ActionBarActivity {\n                         minute_text.setVisibility(View.VISIBLE);\n                         mSeekArc.setVisibility(View.VISIBLE);\n                         start_timer.setVisibility(View.VISIBLE);\n-                        //block_button1.setVisibility(View.VISIBLE);\n-\n-\n-\n \n                         number_text.setTextColor(getResources().getColor(R.color.red_highlight));\n \n@@ -665,13 +649,6 @@ public class MainActivity extends ActionBarActivity {\n \n                         little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n \n-\n-\n-\n-\n-\n-\n-\n                         number_text.setClickable(true);\n \n                         minute_text.setClickable(true);\n@@ -691,10 +668,6 @@ public class MainActivity extends ActionBarActivity {\n \n     }\n \n-\n-\n-\n-\n     private static final long TIME_INTERVAL = 2000; // # milliseconds, desired time passed between two back presses.\n     private long mBackPressed;\n \n@@ -711,7 +684,6 @@ public class MainActivity extends ActionBarActivity {\n         mBackPressed = System.currentTimeMillis();\n     }\n \n-    // for the on click activity responses for each of the 3 buttons on the menu\n     public void addListenerOnButton() {\n \n         final Context context = this;\n@@ -732,7 +704,6 @@ public class MainActivity extends ActionBarActivity {\n \n     }\n \n-\n     private void setActionListeners() {\n \n         number_text = (TextView) findViewById(R.id.hour_progress_number);\n@@ -740,19 +711,9 @@ public class MainActivity extends ActionBarActivity {\n \n         start_timer.setOnClickListener(new View.OnClickListener() {\n \n-\n-\n-\n-\n-\n-\n             @Override\n             public void onClick(View view) {\n \n-\n-\n-\n-\n                 AlertDialog.Builder zeroerror = new AlertDialog.Builder(MainActivity.this)\n                         .setMessage(\"Dude, you didn't set a time! :P\")\n                         .setNegativeButton(\"Whoops! My bad!\", new DialogInterface.OnClickListener() {\n@@ -804,44 +765,22 @@ public class MainActivity extends ActionBarActivity {\n \n                                 little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n \n-\n-\n-\n-\n-\n-                                // yo\n-\n                                 number_text.setClickable(false);\n \n                                 minute_text.setClickable(false);\n \n \n-\n-\n-\n-\n-                                Log.d(\"AlertDialog\", \"Positive\");\n-\n                                 hourint = Integer.valueOf(number_text.getText().toString());\n \n                                 minuteint = Integer.valueOf(minute_text.getText().toString());\n \n \n-                                Log.i(\"YourActivity\", \"Hours: \" + hourint);\n-\n-                                Log.i(\"YourActivity\", \"Minutes: \" + minuteint);\n-\n-\n                                 //Make sure it stays alive no matter what until stopservice is called when the timer runs out\n \n \n-                                //Intent intent = new Intent(getApplicationContext(), HeartBeat.class);\n-                                //startService(intent);\n-\n                                 Date currenttime = new Date(System.currentTimeMillis());\n \n                                 timerstarted = currenttime.getTime();\n-                                Log.e(\"This is the current time:  \", timerstarted + \"\");\n                                 startimerPreferences = getPreferences(MODE_APPEND);\n                                 SharedPreferences.Editor starteditor = startimerPreferences.edit();\n                                 starteditor.putLong(\"time\", timerstarted);\n@@ -850,7 +789,6 @@ public class MainActivity extends ActionBarActivity {\n \n                                 Date endtime = new Date(System.currentTimeMillis());\n \n-                                //timerends = endtime.getTime() + (((hourint * 60 * 60) + (minuteint * 60) + (secondint)) * 1000);\n \n                                 if ((((hourint * 60 * 60) + (minuteint * 60)  ) * 1000) > 0) {\n                                     timerends = endtime.getTime() + (((hourint * 60 * 60) + (minuteint * 60) ) * 1000);\n@@ -917,17 +855,10 @@ public class MainActivity extends ActionBarActivity {\n \n                                     @Override\n                                     public void onFinish() {\n-                                        // this function will be called when the timecount is finished\n-                                        //textViewShowTime.setText(\"Time up!\");\n                                         number_text.setVisibility(View.VISIBLE);\n                                         minute_text.setVisibility(View.VISIBLE);\n                                         mSeekArc.setVisibility(View.VISIBLE);\n                                         start_timer.setVisibility(View.VISIBLE);\n-                                        //block_button1.setVisibility(View.VISIBLE);\n-\n-\n-\n-\n \n \n                                         number_text.setTextColor(getResources().getColor(R.color.red_highlight));\n@@ -938,26 +869,11 @@ public class MainActivity extends ActionBarActivity {\n \n                                         little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n \n-\n-\n-\n-\n-\n-\n                                         number_text.setClickable(true);\n \n                                         minute_text.setClickable(true);\n \n \n-\n-\n-\n-                                        //Make sure it stops for good.\n-\n-                                        //Intent intent = new Intent(getApplicationContext(), HeartBeat.class);\n-                                        //stopService(intent);\n-\n-\n                                         NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n                                         Notification myNotification = new Notification(R.drawable.ic_launcher, \"Time's up!\", System.currentTimeMillis());\n                                         Context context = getApplicationContext();\n@@ -1022,7 +938,6 @@ public class MainActivity extends ActionBarActivity {\n                     timerright.show();\n                 }\n \n-                // textViewShowTime.setTextAppearance(getApplicationContext(), R.style.normalText);\n             }\n \n "], "score": 1.0, "methods_t": ["AlertDialog.Builder ArrayList, String ComponentName CompoundButton.OnCheckedChangeListener CountDownTimer Date DialogInterface.OnClickListener Intent Notification OnClickListener OnSeekBarChangeListener SeekArc.OnSeekArcChangeListener SpannableString TypefaceSpan View.OnClickListener activityPaused activityResumed add addListenerOnButton apply cancel create createChooser createFromAsset currentTimeMillis d e edit entrySet findViewById format fromParts getActivity getAll getApplicationContext getArcRotation getArcWidth getAssets getBaseContext getColor getId getItemId getKey getLong getMenuInflater getPreferences getProgressWidth getResources getService getSharedPreferences getStartAngle getSupportActionBar getSweepAngle getSystemService getText getTime inflate invalidate isAdminActive length makeText notify parse performClick printStackTrace putExtra putLong setActionListeners setArcRotation setArcWidth setClickable setClockwise setContentView setHomeButtonEnabled setLatestEventInfo setMessage setNegativeButton setOnCheckedChangeListener setOnClickListener setOnSeekArcChangeListener setOnSeekBarChangeListener setPositiveButton setProgress setProgressWidth setRepeating setRequestedOrientation setRoundedEdges setSpan setStartAngle setSweepAngle setText setTextColor setTheme setTitle setTouchInSide setType setTypeface setVisibility show size start startActivity startActivityForResult startService toString valueOf"], "_version_": 1526736443194474496, "subject_t": ["Took out log statements, and fixed red action bar for android L"], "comments_t": ["// Update the action bar title with the TypefaceSpan instance         //make textview selectable                             blink = !blink;         // toggle the value of blink         //Listeners for the buttons         //set views             // Initiate DevicePolicyManager.                                     // 500 means, onTick function will be called at every 500 milliseconds                 //set countdowntime to timerends-reopen.     private static final long TIME_INTERVAL = 2000; // # milliseconds, desired time passed between two back presses.                             // change the style of the textview .. giving a red alert style                 // try to become active                 // yo             // Set DeviceAdminDemo Receiver for active the component with different option                     // 500 means, onTick function will be called at every 500 milliseconds         //Editing Button Text                                             // textViewShowTime.setTextAppearance(getApplicationContext(), R.style.blinkText);         //timeBlinkInMilliseconds = 30 * 1000;                                             blink = !blink;         // toggle the value of blink                 //start countdown timer with new time.     long timerends; //this is the time when the time when the timer will end;                 //mDPM.lockNow();                                 totalTimeCountInMilliseconds = (((hourint * 60 * 60) + (minuteint * 60) ) * 1000);      // time count                                             // change the style of the textview .. giving a red alert style         // here is where the service is started.     CountDownTimer countDownTimer;          // built in android class CountDownTimer                 // Already is a device administrator, can do security operations now.     // Consider showing drawable scrubber after pressing H M or S     long reopened; //this is when time when the user reopens the application;                                         //block_button1.setVisibility(View.INVISIBLE);                         // this function will be called when the timecount is finished         //Make sure you find out why it appears after a whole 1 second after the app appears                     //corresponding button logic should below here                             // textViewShowTime.setTextAppearance(getApplicationContext(), R.style.blinkText);                         //This sets the actual string for the hours         //totalTimeCountInMilliseconds = 60 * 1000;      // time count for 3 minutes = 180 seconds     //will show the time     long timeBlinkInMilliseconds;           // start time of start blinking         //getReferenceOfViews ();                         // get all views         // set the action bar in this activity as the home                                 // if blink is true, textview will be visible                         //This sets the actual string for the minutes /*\nIntent iHeartBeatService = new Intent(this, HeartBeat.class);\nPendingIntent piHeartBeatService = PendingIntent.getService(this, 0, iHeartBeatService, PendingIntent.FLAG_UPDATE_CURRENT);\nAlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);\nalarmManager.cancel(piHeartBeatService);\nalarmManager.setRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), 300000, piHeartBeatService);\n*/\n                         number_text.setText(String.format(\"%02d\", seconds / 3600));                     // format the textview to show the easily readable format         //startService(new Intent(this, HeartBeat.class));                                                 // if blink is true, textview will be visible                                 //Make sure it stays alive no matter what until stopservice is called when the timer runs out                         //textViewShowTime.setText(\"Time up!\");     long timerstarted; //this is when the user hit start timer.         // This determine what the actual \"countdown\" time will be. //Here is the actual \"hour progress number\" aka the TextView that changes as the scrubber is dragged around                         //block_button1.setVisibility(View.INVISIBLE);                                         number_text.setText(String.format(\"%02d\", seconds / 3600));                     // format the textview to show the easily readable format"], "parents_ss": ["f38f9005f1970d3044f83dcb3c622d82ff1e8b08"], "id": "rrtigga/GetDisciplined\u0000d8d2a0a3b0e3790188a5d932f1541eca3f9c33cb\u0000app/src/main/java/com/spicycurryman/getdisciplined10/app/MainActivity.java", "callsites_cs": "android.os.CountDownTimer.start()#<unknown>.setContentView(<unknown>)#android.app.admin.DevicePolicyManager.isAdminActive(android.content.ComponentName)#android.content.Intent.Intent(java.lang.String)#android.content.SharedPreferences.edit()#android.view.View.setVisibility(int)#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setTextColor(<unknown>)#<unknown>.startActivityForResult(android.content.Intent, int)#java.lang.CharSequence.toString()#<unknown>.getResources()#.OnSeekBarChangeListener()#<unknown>.findViewById(<unknown>)#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#android.view.View.setClickable(boolean)#<unknown>.SeekArc.OnSeekArcChangeListener()#<unknown>.activityPaused()#<unknown>.getSystemService(java.lang.String)#android.widget.TextView.setTextColor(<unknown>)#<unknown>.getApplicationContext()#android.widget.TextView.setTextColor(<unknown>)#<unknown>.getSystemService(java.lang.String)#<unknown>.getSystemService(java.lang.String)#android.content.SharedPreferences.Editor.putLong(java.lang.String, long)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.AlarmManager.cancel(android.app.PendingIntent)#<unknown>.setVisibility(int)#<unknown>.getArcWidth()#android.widget.TextView.setText(<unknown>)#android.widget.ProgressBar.setProgress(<unknown>)#android.graphics.Typeface.createFromAsset(<unknown>, java.lang.String)#<unknown>.getAssets()#android.widget.TextView.getText()#android.widget.ProgressBar.setProgress(<unknown>)#<unknown>.getPreferences(<unknown>)#android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, )#android.view.View.setVisibility(int)#android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, )#android.widget.TextView.setText(<unknown>)#android.widget.ProgressBar.setProgress(<unknown>)#java.lang.System.currentTimeMillis()#<unknown>.setOnSeekArcChangeListener()#<unknown>.getSharedPreferences(java.lang.String, int)#android.widget.TextView.setTextColor(<unknown>)#.CountDownTimer(long, int)#<unknown>.getProgressWidth()#<unknown>.setVisibility(int)#android.widget.TextView.setText(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setClickable(boolean)#<unknown>.getPreferences(<unknown>)#android.content.SharedPreferences.Editor.apply()#java.lang.System.currentTimeMillis()#<unknown>.findViewById(<unknown>)#<unknown>.setTouchInSide(boolean)#.CompoundButton.OnCheckedChangeListener()#<unknown>.startActivity(android.content.Intent)#<unknown>.startActivity(android.content.Intent)#<unknown>.findViewById(<unknown>)#<unknown>.setOnSeekArcChangeListener()#<unknown>.findViewById(<unknown>)#android.text.SpannableString.SpannableString(java.lang.String)#<unknown>.getResources()#android.app.AlertDialog.Builder.create()#<unknown>.setTheme(<unknown>)#<unknown>.findViewById(<unknown>)#android.content.Intent.Intent(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class)#<unknown>.getColor(<unknown>)#android.content.Intent.createChooser(android.content.Intent, java.lang.String)#java.util.Date.Date(long)#android.content.SharedPreferences.Editor.apply()#android.app.AlertDialog.Builder.setMessage(java.lang.String)#<unknown>.setVisibility(int)#<unknown>.setVisibility(int)#<unknown>.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#<unknown>.setSweepAngle(int)#android.app.PendingIntent.getService(com.spicycurryman.getdisciplined10.app.MainActivity, int, android.content.Intent, int)#java.lang.Throwable.printStackTrace()#android.widget.SeekBar.setOnSeekBarChangeListener()#android.view.View.setVisibility(int)#<unknown>.getColor(<unknown>)#<unknown>.findViewById(<unknown>)#<unknown>.setProgressWidth(int)#android.widget.TextView.setTextColor(<unknown>)#<unknown>.getApplicationContext()#android.view.View.setVisibility(int)#<unknown>.setVisibility(int)#<unknown>.findViewById(<unknown>)#java.util.Map.Entry<java.lang.String,>.getKey()#android.view.View.setVisibility(int)#java.util.Date.getTime()#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setTypeface(<unknown>)#java.util.Date.Date(long)#android.widget.TextView.setTextColor(<unknown>)#<unknown>.startActivityForResult(android.content.Intent, int)#<unknown>.getSystemService(java.lang.String)#java.lang.String.format(java.lang.String, long)#android.widget.Toast.makeText(<unknown>, java.lang.String, int)#.OnClickListener()#.View.OnClickListener()#<unknown>.setVisibility(int)#java.lang.Integer.valueOf(java.lang.String)#android.app.Dialog.show()#android.content.SharedPreferences.getAll()#android.widget.CompoundButton.setOnCheckedChangeListener()#android.widget.TextView.setTextColor(<unknown>)#<unknown>.getColor(<unknown>)#android.widget.SeekBar.setOnSeekBarChangeListener()#<unknown>.setTitle(android.text.SpannableString)#android.view.View.setVisibility(int)#android.widget.TextView.setTextColor(<unknown>)#android.content.Intent.Intent(java.lang.String, android.net.Uri)#android.widget.TextView.setTypeface(<unknown>)#<unknown>.setOnClickListener()#<unknown>.setArcWidth(int)#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, android.content.ComponentName)#android.content.SharedPreferences.getLong(java.lang.String, int)#android.view.View.getId()#<unknown>.getSupportActionBar()#android.content.SharedPreferences.getLong(java.lang.String, int)#android.os.CountDownTimer.start()#android.widget.SeekBar.setOnSeekBarChangeListener()#android.view.View.setVisibility(int)#java.util.Map<java.lang.String,>.entrySet()#android.app.AlertDialog.Builder.AlertDialog.Builder(com.spicycurryman.getdisciplined10.app.MainActivity)#<unknown>.startActivity(android.content.Intent)#android.app.Dialog.show()#<unknown>.findViewById(<unknown>)#android.content.ComponentName.ComponentName(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class)#android.widget.TextView.getText()#android.app.Notification.Notification(<unknown>, java.lang.String, long)#<unknown>.getSharedPreferences(java.lang.String, int)#android.widget.TextView.getText()#<unknown>.getColor(<unknown>)#<unknown>.getStartAngle()#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setTextColor(<unknown>)#<unknown>.setOnClickListener(android.view.View.OnClickListener)#java.lang.String.format(java.lang.String, long)#android.widget.SeekBar.setOnSeekBarChangeListener()#android.widget.TextView.setText(<unknown>)#android.content.Intent.putExtra(java.lang.String, java.lang.String)#android.widget.TextView.setTextColor(<unknown>)#android.content.Intent.putExtra(java.lang.String, java.lang.String)#android.content.SharedPreferences.Editor.putLong(java.lang.String, long)#android.view.MenuInflater.inflate(<unknown>, android.view.Menu)#java.lang.Throwable.printStackTrace()#android.widget.TextView.getText()#android.widget.TextView.setTextColor(<unknown>)#<unknown>.setOnClickListener(android.view.View.OnClickListener)#android.content.SharedPreferences.edit()#android.content.DialogInterface.cancel()#<unknown>.getApplicationContext()#<unknown>.TypefaceSpan(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.String)#android.content.Intent.Intent(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class)#android.widget.ProgressBar.setProgress(<unknown>)#android.view.View.setClickable(boolean)#android.content.Intent.Intent(java.lang.String, android.net.Uri)#<unknown>.findViewById(<unknown>)#android.view.View.setClickable(boolean)#java.lang.String.format(java.lang.String, int)#<unknown>.getResources()#<unknown>.getResources()#android.widget.TextView.setTextColor(<unknown>)#<unknown>.setStartAngle(int)#java.util.Date.getTime()#.View.OnClickListener()#.DialogInterface.OnClickListener()#android.app.admin.DevicePolicyManager.isAdminActive(android.content.ComponentName)#java.lang.String.format(java.lang.String, long)#<unknown>.getBaseContext()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#<unknown>.getMenuInflater()#android.widget.TextView.setTextColor(<unknown>)#android.content.Intent.setType(java.lang.String)#android.widget.TextView.setText(<unknown>)#<unknown>.getResources()#com.spicycurryman.getdisciplined10.app.MainActivity.addListenerOnButton()#<unknown>.getArcRotation()#android.view.View.setClickable(boolean)#android.app.AlertDialog.Builder.setPositiveButton(java.lang.String, )#<unknown>.findViewById(<unknown>)#<unknown>.findViewById(<unknown>)#<unknown>.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setClickable(boolean)#android.content.Intent.Intent(android.content.Context, java.lang.Class)#android.widget.TextView.setTextColor(<unknown>)#android.text.SpannableStringInternal.length()#<unknown>.getColor(<unknown>)#java.util.Date.getTime()#android.view.View.setClickable(boolean)#android.widget.ProgressBar.setProgress(<unknown>)#<unknown>.startService(android.content.Intent)#android.widget.TextView.setTextColor(<unknown>)#java.util.Date.Date(long)#<unknown>.setRoundedEdges(boolean)#<unknown>.getResources()#java.lang.CharSequence.toString()#android.widget.TextView.setText(java.lang.String)#<unknown>.setOnClickListener()#java.lang.CharSequence.toString()#android.content.Intent.Intent(java.lang.String)#android.widget.CompoundButton.setOnCheckedChangeListener()#android.content.Intent.putExtra(java.lang.String, android.content.ComponentName)#android.app.AlertDialog.Builder.show()#android.content.ComponentName.ComponentName(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class)#android.app.NotificationManager.notify(int, android.app.Notification)#android.widget.TextView.setTextColor(<unknown>)#android.widget.CompoundButton.setOnCheckedChangeListener()#<unknown>.invalidate()#<unknown>.setVisibility(int)#<unknown>.show()#java.util.ArrayList<java.lang.String>.ArrayList, String()#.CountDownTimer(long, int)#android.net.Uri.fromParts(java.lang.String, java.lang.String, null)#android.app.AlertDialog.Builder.create()#android.net.Uri.parse(java.lang.String)#android.widget.TextView.setTypeface(<unknown>)#java.lang.CharSequence.toString()#<unknown>.getColor(<unknown>)#android.content.Intent.createChooser(android.content.Intent, java.lang.String)#android.content.SharedPreferences.edit()#android.widget.TextView.setTextColor(<unknown>)#<unknown>.setHomeButtonEnabled(boolean)#<unknown>.activityResumed()#android.app.PendingIntent.getActivity(com.spicycurryman.getdisciplined10.app.MainActivity, int, android.content.Intent, int)#android.util.Log.e(java.lang.String, java.lang.String)#<unknown>.findViewById(<unknown>)#java.util.Date.Date(long)#<unknown>.performClick()#android.widget.TextView.setTextColor(<unknown>)#android.app.AlertDialog.Builder.create()#<unknown>.getApplicationContext()#<unknown>.setClockwise(boolean)#java.lang.Integer.valueOf(java.lang.String)#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setText(<unknown>)#<unknown>.setRequestedOrientation(int)#java.lang.System.currentTimeMillis()#android.app.Notification.setLatestEventInfo(android.content.Context, java.lang.String, java.lang.String, android.app.PendingIntent)#<unknown>.getSweepAngle()#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setTextColor(<unknown>)#android.content.SharedPreferences.Editor.putLong(java.lang.String, long)#<unknown>.findViewById(<unknown>)#java.lang.Integer.valueOf(java.lang.String)#java.util.ArrayList<java.lang.String>.size()#android.content.SharedPreferences.Editor.apply()#android.app.AlarmManager.setRepeating(int, long, int, android.app.PendingIntent)#<unknown>.invalidate()#java.lang.System.currentTimeMillis()#android.content.Intent.Intent(java.lang.String)#android.app.AlertDialog.Builder.setMessage(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.view.View.setClickable(boolean)#<unknown>.setArcRotation(int)#java.lang.String.valueOf(<unknown>)#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setTypeface(<unknown>)#<unknown>.getColor(<unknown>)#java.lang.String.format(java.lang.String, long)#android.util.Log.e(java.lang.String, java.lang.String)#<unknown>.findViewById(<unknown>)#<unknown>.findViewById(<unknown>)#android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, )#android.widget.TextView.setTextColor(<unknown>)#android.text.SpannableString.setSpan(com.spicycurryman.getdisciplined10.app.TypefaceSpan, int, int, int)#android.view.MenuItem.getItemId()#com.spicycurryman.getdisciplined10.app.MainActivity.setActionListeners()#android.app.AlertDialog.Builder.setMessage(java.lang.String)#java.lang.Integer.valueOf(java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.findViewById(<unknown>)#<unknown>.setVisibility(int)#android.widget.SeekBar.setOnSeekBarChangeListener()#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)", "callsites_t": ["android.os.CountDownTimer.start() <unknown>.setContentView(<unknown>) android.app.admin.DevicePolicyManager.isAdminActive(android.content.ComponentName) android.content.Intent.Intent(java.lang.String) android.content.SharedPreferences.edit() android.view.View.setVisibility(int) android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setTextColor(<unknown>) <unknown>.startActivityForResult(android.content.Intent, int) java.lang.CharSequence.toString() <unknown>.getResources() .OnSeekBarChangeListener() <unknown>.findViewById(<unknown>) java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, java.lang.String) android.view.View.setClickable(boolean) <unknown>.SeekArc.OnSeekArcChangeListener() <unknown>.activityPaused() <unknown>.getSystemService(java.lang.String) android.widget.TextView.setTextColor(<unknown>) <unknown>.getApplicationContext() android.widget.TextView.setTextColor(<unknown>) <unknown>.getSystemService(java.lang.String) <unknown>.getSystemService(java.lang.String) android.content.SharedPreferences.Editor.putLong(java.lang.String, long) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.AlarmManager.cancel(android.app.PendingIntent) <unknown>.setVisibility(int) <unknown>.getArcWidth() android.widget.TextView.setText(<unknown>) android.widget.ProgressBar.setProgress(<unknown>) android.graphics.Typeface.createFromAsset(<unknown>, java.lang.String) <unknown>.getAssets() android.widget.TextView.getText() android.widget.ProgressBar.setProgress(<unknown>) <unknown>.getPreferences(<unknown>) android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, ) android.view.View.setVisibility(int) android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, ) android.widget.TextView.setText(<unknown>) android.widget.ProgressBar.setProgress(<unknown>) java.lang.System.currentTimeMillis() <unknown>.setOnSeekArcChangeListener() <unknown>.getSharedPreferences(java.lang.String, int) android.widget.TextView.setTextColor(<unknown>) .CountDownTimer(long, int) <unknown>.getProgressWidth() <unknown>.setVisibility(int) android.widget.TextView.setText(<unknown>) android.view.View.setVisibility(int) android.view.View.setClickable(boolean) <unknown>.getPreferences(<unknown>) android.content.SharedPreferences.Editor.apply() java.lang.System.currentTimeMillis() <unknown>.findViewById(<unknown>) <unknown>.setTouchInSide(boolean) .CompoundButton.OnCheckedChangeListener() <unknown>.startActivity(android.content.Intent) <unknown>.startActivity(android.content.Intent) <unknown>.findViewById(<unknown>) <unknown>.setOnSeekArcChangeListener() <unknown>.findViewById(<unknown>) android.text.SpannableString.SpannableString(java.lang.String) <unknown>.getResources() android.app.AlertDialog.Builder.create() <unknown>.setTheme(<unknown>) <unknown>.findViewById(<unknown>) android.content.Intent.Intent(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class) <unknown>.getColor(<unknown>) android.content.Intent.createChooser(android.content.Intent, java.lang.String) java.util.Date.Date(long) android.content.SharedPreferences.Editor.apply() android.app.AlertDialog.Builder.setMessage(java.lang.String) <unknown>.setVisibility(int) <unknown>.setVisibility(int) <unknown>.startActivity(android.content.Intent) android.view.View.setVisibility(int) <unknown>.setSweepAngle(int) android.app.PendingIntent.getService(com.spicycurryman.getdisciplined10.app.MainActivity, int, android.content.Intent, int) java.lang.Throwable.printStackTrace() android.widget.SeekBar.setOnSeekBarChangeListener() android.view.View.setVisibility(int) <unknown>.getColor(<unknown>) <unknown>.findViewById(<unknown>) <unknown>.setProgressWidth(int) android.widget.TextView.setTextColor(<unknown>) <unknown>.getApplicationContext() android.view.View.setVisibility(int) <unknown>.setVisibility(int) <unknown>.findViewById(<unknown>) java.util.Map.Entry<java.lang.String,>.getKey() android.view.View.setVisibility(int) java.util.Date.getTime() android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setTypeface(<unknown>) java.util.Date.Date(long) android.widget.TextView.setTextColor(<unknown>) <unknown>.startActivityForResult(android.content.Intent, int) <unknown>.getSystemService(java.lang.String) java.lang.String.format(java.lang.String, long) android.widget.Toast.makeText(<unknown>, java.lang.String, int) .OnClickListener() .View.OnClickListener() <unknown>.setVisibility(int) java.lang.Integer.valueOf(java.lang.String) android.app.Dialog.show() android.content.SharedPreferences.getAll() android.widget.CompoundButton.setOnCheckedChangeListener() android.widget.TextView.setTextColor(<unknown>) <unknown>.getColor(<unknown>) android.widget.SeekBar.setOnSeekBarChangeListener() <unknown>.setTitle(android.text.SpannableString) android.view.View.setVisibility(int) android.widget.TextView.setTextColor(<unknown>) android.content.Intent.Intent(java.lang.String, android.net.Uri) android.widget.TextView.setTypeface(<unknown>) <unknown>.setOnClickListener() <unknown>.setArcWidth(int) java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, android.content.ComponentName) android.content.SharedPreferences.getLong(java.lang.String, int) android.view.View.getId() <unknown>.getSupportActionBar() android.content.SharedPreferences.getLong(java.lang.String, int) android.os.CountDownTimer.start() android.widget.SeekBar.setOnSeekBarChangeListener() android.view.View.setVisibility(int) java.util.Map<java.lang.String,>.entrySet() android.app.AlertDialog.Builder.AlertDialog.Builder(com.spicycurryman.getdisciplined10.app.MainActivity) <unknown>.startActivity(android.content.Intent) android.app.Dialog.show() <unknown>.findViewById(<unknown>) android.content.ComponentName.ComponentName(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class) android.widget.TextView.getText() android.app.Notification.Notification(<unknown>, java.lang.String, long) <unknown>.getSharedPreferences(java.lang.String, int) android.widget.TextView.getText() <unknown>.getColor(<unknown>) <unknown>.getStartAngle() android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setTextColor(<unknown>) <unknown>.setOnClickListener(android.view.View.OnClickListener) java.lang.String.format(java.lang.String, long) android.widget.SeekBar.setOnSeekBarChangeListener() android.widget.TextView.setText(<unknown>) android.content.Intent.putExtra(java.lang.String, java.lang.String) android.widget.TextView.setTextColor(<unknown>) android.content.Intent.putExtra(java.lang.String, java.lang.String) android.content.SharedPreferences.Editor.putLong(java.lang.String, long) android.view.MenuInflater.inflate(<unknown>, android.view.Menu) java.lang.Throwable.printStackTrace() android.widget.TextView.getText() android.widget.TextView.setTextColor(<unknown>) <unknown>.setOnClickListener(android.view.View.OnClickListener) android.content.SharedPreferences.edit() android.content.DialogInterface.cancel() <unknown>.getApplicationContext() <unknown>.TypefaceSpan(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.String) android.content.Intent.Intent(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class) android.widget.ProgressBar.setProgress(<unknown>) android.view.View.setClickable(boolean) android.content.Intent.Intent(java.lang.String, android.net.Uri) <unknown>.findViewById(<unknown>) android.view.View.setClickable(boolean) java.lang.String.format(java.lang.String, int) <unknown>.getResources() <unknown>.getResources() android.widget.TextView.setTextColor(<unknown>) <unknown>.setStartAngle(int) java.util.Date.getTime() .View.OnClickListener() .DialogInterface.OnClickListener() android.app.admin.DevicePolicyManager.isAdminActive(android.content.ComponentName) java.lang.String.format(java.lang.String, long) <unknown>.getBaseContext() android.content.Intent.putExtra(java.lang.String, java.lang.String) <unknown>.getMenuInflater() android.widget.TextView.setTextColor(<unknown>) android.content.Intent.setType(java.lang.String) android.widget.TextView.setText(<unknown>) <unknown>.getResources() com.spicycurryman.getdisciplined10.app.MainActivity.addListenerOnButton() <unknown>.getArcRotation() android.view.View.setClickable(boolean) android.app.AlertDialog.Builder.setPositiveButton(java.lang.String, ) <unknown>.findViewById(<unknown>) <unknown>.findViewById(<unknown>) <unknown>.findViewById(<unknown>) android.view.View.setVisibility(int) android.view.View.setClickable(boolean) android.content.Intent.Intent(android.content.Context, java.lang.Class) android.widget.TextView.setTextColor(<unknown>) android.text.SpannableStringInternal.length() <unknown>.getColor(<unknown>) java.util.Date.getTime() android.view.View.setClickable(boolean) android.widget.ProgressBar.setProgress(<unknown>) <unknown>.startService(android.content.Intent) android.widget.TextView.setTextColor(<unknown>) java.util.Date.Date(long) <unknown>.setRoundedEdges(boolean) <unknown>.getResources() java.lang.CharSequence.toString() android.widget.TextView.setText(java.lang.String) <unknown>.setOnClickListener() java.lang.CharSequence.toString() android.content.Intent.Intent(java.lang.String) android.widget.CompoundButton.setOnCheckedChangeListener() android.content.Intent.putExtra(java.lang.String, android.content.ComponentName) android.app.AlertDialog.Builder.show() android.content.ComponentName.ComponentName(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class) android.app.NotificationManager.notify(int, android.app.Notification) android.widget.TextView.setTextColor(<unknown>) android.widget.CompoundButton.setOnCheckedChangeListener() <unknown>.invalidate() <unknown>.setVisibility(int) <unknown>.show() java.util.ArrayList<java.lang.String>.ArrayList, String() .CountDownTimer(long, int) android.net.Uri.fromParts(java.lang.String, java.lang.String, null) android.app.AlertDialog.Builder.create() android.net.Uri.parse(java.lang.String) android.widget.TextView.setTypeface(<unknown>) java.lang.CharSequence.toString() <unknown>.getColor(<unknown>) android.content.Intent.createChooser(android.content.Intent, java.lang.String) android.content.SharedPreferences.edit() android.widget.TextView.setTextColor(<unknown>) <unknown>.setHomeButtonEnabled(boolean) <unknown>.activityResumed() android.app.PendingIntent.getActivity(com.spicycurryman.getdisciplined10.app.MainActivity, int, android.content.Intent, int) android.util.Log.e(java.lang.String, java.lang.String) <unknown>.findViewById(<unknown>) java.util.Date.Date(long) <unknown>.performClick() android.widget.TextView.setTextColor(<unknown>) android.app.AlertDialog.Builder.create() <unknown>.getApplicationContext() <unknown>.setClockwise(boolean) java.lang.Integer.valueOf(java.lang.String) android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setText(<unknown>) <unknown>.setRequestedOrientation(int) java.lang.System.currentTimeMillis() android.app.Notification.setLatestEventInfo(android.content.Context, java.lang.String, java.lang.String, android.app.PendingIntent) <unknown>.getSweepAngle() android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setTextColor(<unknown>) android.content.SharedPreferences.Editor.putLong(java.lang.String, long) <unknown>.findViewById(<unknown>) java.lang.Integer.valueOf(java.lang.String) java.util.ArrayList<java.lang.String>.size() android.content.SharedPreferences.Editor.apply() android.app.AlarmManager.setRepeating(int, long, int, android.app.PendingIntent) <unknown>.invalidate() java.lang.System.currentTimeMillis() android.content.Intent.Intent(java.lang.String) android.app.AlertDialog.Builder.setMessage(java.lang.String) android.widget.TextView.setText(java.lang.String) android.view.View.setClickable(boolean) <unknown>.setArcRotation(int) java.lang.String.valueOf(<unknown>) android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setTypeface(<unknown>) <unknown>.getColor(<unknown>) java.lang.String.format(java.lang.String, long) android.util.Log.e(java.lang.String, java.lang.String) <unknown>.findViewById(<unknown>) <unknown>.findViewById(<unknown>) android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, ) android.widget.TextView.setTextColor(<unknown>) android.text.SpannableString.setSpan(com.spicycurryman.getdisciplined10.app.TypefaceSpan, int, int, int) android.view.MenuItem.getItemId() com.spicycurryman.getdisciplined10.app.MainActivity.setActionListeners() android.app.AlertDialog.Builder.setMessage(java.lang.String) java.lang.Integer.valueOf(java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.findViewById(<unknown>) <unknown>.setVisibility(int) android.widget.SeekBar.setOnSeekBarChangeListener() android.view.View.setVisibility(int) android.view.View.setVisibility(int)"]}, {"user_sni": "Yu Chen Hou", "repo_sni": "icechen1/WordLookup", "imports_t": ["android.os.CountDownTimer android.view.Gravity android.util.Log android.widget.Toast android.widget.TextView"], "email_sni": "houyuchen66@gmail.com", "contents_t": ["package com.icechen1.wordlookup;\n\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.Gravity;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class ShowToast {\n\tpublic static void show(String definition){\n\t    long length = 2000;\n\t    String sLength = MainActivity.ShowLength;\n\t    if (sLength.equals(\"Short\")){\n\t\t    length = 2000;\n\t    }\n\t    \n\t    if (sLength.equals(\"Normal\")){\n\t\t    length = 5000;\n\t    }\n\t    \n\t    if (sLength.equals(\"Long\")){\n\t\t    length = 9000;\n\t    }\n\t    \n\t    if (sLength.equals(\"Very Long\")){\n\t\t    length = 15000;\n\t    }\n\t    Log.d(\"WORDLOOKUP\",\"sLength = \" + sLength + \" length = \" + length);\n    \t//CharSequence text = definition;\n    \tint duration = Toast.LENGTH_SHORT; //TODO Option this\n    \t//Toast toast = Toast.makeText(MainActivity.context, text, duration);\n    \tfinal Toast toast = new Toast(MainActivity.context);\n    \tTextView textbox = MainActivity.textbox;\n    \ttextbox.setText(definition);\n    \ttoast.setGravity(Gravity.BOTTOM, 0, 0);\n    \ttoast.setView(MainActivity.layout);\n    \ttoast.setDuration(duration);\n    \ttoast.show();\n    \t\n    \tnew CountDownTimer(length, 1000)\n    \t{\n\n    \t    public void onTick(long millisUntilFinished) {toast.show();}\n    \t    public void onFinish() {toast.show();}\n\n    \t}.start();\n\t}\n}\n"], "body_t": ["latest version of the app"], "date_tdt": "2013-05-23T23:48:18Z", "hash_sni": "af760754214bc02ddd2f2b04c7174a0007734fe1", "name_sni": "src/com/icechen1/wordlookup/ShowToast.java", "patch_t": ["+package com.icechen1.wordlookup;\n+\n+import android.os.CountDownTimer;\n+import android.util.Log;\n+import android.view.Gravity;\n+import android.widget.TextView;\n+import android.widget.Toast;\n+\n+public class ShowToast {\n+\tpublic static void show(String definition){\n+\t    long length = 2000;\n+\t    String sLength = MainActivity.ShowLength;\n+\t    if (sLength.equals(\"Short\")){\n+\t\t    length = 2000;\n+\t    }\n+\t    \n+\t    if (sLength.equals(\"Normal\")){\n+\t\t    length = 5000;\n+\t    }\n+\t    \n+\t    if (sLength.equals(\"Long\")){\n+\t\t    length = 9000;\n+\t    }\n+\t    \n+\t    if (sLength.equals(\"Very Long\")){\n+\t\t    length = 15000;\n+\t    }\n+\t    Log.d(\"WORDLOOKUP\",\"sLength = \" + sLength + \" length = \" + length);\n+    \t//CharSequence text = definition;\n+    \tint duration = Toast.LENGTH_SHORT; //TODO Option this\n+    \t//Toast toast = Toast.makeText(MainActivity.context, text, duration);\n+    \tfinal Toast toast = new Toast(MainActivity.context);\n+    \tTextView textbox = MainActivity.textbox;\n+    \ttextbox.setText(definition);\n+    \ttoast.setGravity(Gravity.BOTTOM, 0, 0);\n+    \ttoast.setView(MainActivity.layout);\n+    \ttoast.setDuration(duration);\n+    \ttoast.show();\n+    \t\n+    \tnew CountDownTimer(length, 1000)\n+    \t{\n+\n+    \t    public void onTick(long millisUntilFinished) {toast.show();}\n+    \t    public void onFinish() {toast.show();}\n+\n+    \t}.start();\n+\t}\n+}"], "score": 1.0, "methods_t": ["CountDownTimer Toast d equals setDuration setGravity setText setView show start"], "_version_": 1526737350565036033, "subject_t": ["Initial commit"], "comments_t": ["    \t//Toast toast = Toast.makeText(MainActivity.context, text, duration);     \t//CharSequence text = definition;     \tint duration = Toast.LENGTH_SHORT; //TODO Option this"], "callsites_t": ["android.widget.Toast.Toast(<unknown>) android.widget.TextView.setText(java.lang.String) android.widget.Toast.setView(<unknown>) android.os.CountDownTimer.start() java.lang.String.equals(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.Toast.show() android.widget.Toast.setGravity(int, int, int) .CountDownTimer(long, int) android.widget.Toast.show() java.lang.String.equals(java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) android.widget.Toast.setDuration(int) java.lang.String.equals(java.lang.String) android.widget.Toast.show()"], "id": "icechen1/WordLookup\u0000af760754214bc02ddd2f2b04c7174a0007734fe1\u0000src/com/icechen1/wordlookup/ShowToast.java", "callsites_cs": "android.widget.Toast.Toast(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.widget.Toast.setView(<unknown>)#android.os.CountDownTimer.start()#java.lang.String.equals(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.Toast.show()#android.widget.Toast.setGravity(int, int, int)#.CountDownTimer(long, int)#android.widget.Toast.show()#java.lang.String.equals(java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#android.widget.Toast.setDuration(int)#java.lang.String.equals(java.lang.String)#android.widget.Toast.show()"}, {"user_sni": "Ashwini Kumar Singh Chandel", "repo_sni": "ash242186/VideoStreaming", "imports_t": ["android.os.CountDownTimer android.view.View.OnClickListener android.os.Bundle android.widget.Button android.widget.CompoundButton android.media.MediaPlayer android.media.MediaPlayer.OnSeekCompleteListener android.media.MediaPlayer.OnPreparedListener android.content.pm.ActivityInfo android.widget.ToggleButton android.widget.ProgressBar android.widget.CompoundButton.OnCheckedChangeListener android.media.MediaPlayer.OnVideoSizeChangedListener android.media.MediaPlayer.OnBufferingUpdateListener android.widget.TextView android.media.MediaPlayer.OnErrorListener android.net.Uri android.view.View android.util.Log android.app.Activity"], "email_sni": "chandelashwini@gmail.com", "contents_t": ["package com.example.steaming;\n\n\nimport android.app.Activity;\nimport android.content.pm.ActivityInfo;\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnBufferingUpdateListener;\nimport android.media.MediaPlayer.OnErrorListener;\nimport android.media.MediaPlayer.OnPreparedListener;\nimport android.media.MediaPlayer.OnSeekCompleteListener;\nimport android.media.MediaPlayer.OnVideoSizeChangedListener;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.CompoundButton;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport android.widget.ToggleButton;\nimport android.widget.CompoundButton.OnCheckedChangeListener;\n\npublic class MainActivity extends Activity implements OnPreparedListener, OnErrorListener{\n\n\tprivate String TAG = getClass().getSimpleName();\n\tprivate Button stop;\n\tprivate ToggleButton playtogglebutton;\n\tprivate TextView timeEnd, timeElapsed;\n\tprivate ProgressBar progressBar, loading;\n\tprivate MyVideoView videoviewer;\n\tprivate CountDownTimer timer;\n\tprivate int mVideoWidth, mVideoHeight;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.onCreate(savedInstanceState);\n\t\tSystem.out.println(getString(R.string.orientation) +\"--------------------------orientation value\");\n\t\tif(getString(R.string.orientation).equalsIgnoreCase(\"landscape\"))\n\t\t\tsetRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n\t\telse\n\t\t\tsetRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\n\t\tsetContentView(R.layout.activity_main);\n\t\t\n\t\tloading = (ProgressBar) findViewById(R.id.loading);\n\t     \n\t\tstop = (Button) findViewById(R.id.stop);\n\t\tplaytogglebutton = (ToggleButton) findViewById(R.id.playtogglebutton);\n\t\ttimeElapsed = (TextView) findViewById(R.id.timeElapsed);\n\t\ttimeEnd = (TextView) findViewById(R.id.timeEnd);\n\t\tprogressBar = (ProgressBar) findViewById(R.id.progressBar);\n\t\t\t\n\t\t\n\t\t\n\t\tvideoviewer = (MyVideoView) findViewById(R.id.videoviewer);\n\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v4.cache1.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYESARFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v5.cache5.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYDSANFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.youtube.com/v/OwMCw2VG04I\")); //not working\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://daily3gp.com/vids/747.3gp\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://commonsware.com/misc/test2.3gp\"));\n\t\tvideoviewer.setVideoURI(Uri.parse(\"http://www.ooklnet.com/files/381/381489/video.mp4\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://184.72.239.149/vod/mp4:BigBuckBunny_115k.mov\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://dl.dropbox.com/u/80419/santa.mp4\"));\n\t\tvideoviewer.requestFocus();\n\t\tvideoviewer.setKeepScreenOn(true);\n\t\tvideoviewer.setOnErrorListener(this);\n\t\tvideoviewer.setOnPreparedListener(this);\n\t\t//loading.show();\n\t\t\n\t\t/*stop.setOnClickListener(new OnClickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onClick(View arg0) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\tstopMedia();\n\t\t\t}\n\t\t});*/\n\t}\n\t\n\tprivate OnClickListener stoplistener = new OnClickListener() {\n\t\t\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\tstopMedia();\n\t\t}\n\t};\n\n\tprivate OnCheckedChangeListener checkedchangelistener =  new OnCheckedChangeListener(){\n\n\t\t@Override\n\t\tpublic void onCheckedChanged(CompoundButton arg0, boolean isChecked) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\t/*pause player*/\n\t\t\tif(isChecked){\n\t\t\t\tSystem.out.println(\"player pause\");\n\t\t\t\tplayMedia(false);\n\t\t\t}\n\t\t\t/*play player*/\n\t\t\telse{\n\t\t\t\tSystem.out.println(\"player play\");\n\t\t\t\tplayMedia(true);\n\t\t\t}\n\t\t}};\n\t\t\n\t\t@Override\n\t\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\t//loading.hide();\n\t\t\treturn false;\n\t\t}\n\t\t\n\t@Override\n\tpublic void onPrepared(MediaPlayer mp) {\n\t\t// TODO Auto-generated method stub\n\t\tLog.d(TAG, \"media player preparing.......\");\n\t\tmp.setLooping(true);\n\t\t//loading.hide();\n\t\tplaytogglebutton.setOnCheckedChangeListener(checkedchangelistener);\n\t\tstop.setOnClickListener(stoplistener);\n\t\tloading.setVisibility(View.GONE);\n\n\t\tmVideoWidth = mp.getVideoWidth();\n        mVideoHeight = mp.getVideoHeight();\n\t\t//onVideoSizeChangedListener declaration\n\t\tmp.setOnVideoSizeChangedListener(new OnVideoSizeChangedListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onVideoSizeChanged(MediaPlayer mp, int width, int height) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\tLog.d(TAG, \"onVideoSizeChanged called \" + width + \":\" + height);\n\t\t\t\tif (width == 0 || height == 0) {\n\t\t            Log.e(TAG, \"invalid video width(\" + width + \") or height(\" + height + \")\");\n\t\t            return;\n\t\t        }\n\t\t        mVideoWidth = width;\n\t\t        mVideoHeight = height;\n\t\t        playMedia(true);\n\t\t\t}\n\t\t});\n\t\t// onSeekCompletionListener declaration\n\t\tmp.setOnSeekCompleteListener(new OnSeekCompleteListener() {\n\t\t\t// show current frame after changing the playback position\n\t\t\t@Override\n\t\t\tpublic void onSeekComplete(MediaPlayer mp) {\n\t\t\t\tif (!mp.isPlaying()) {\n\t\t\t\t\t//playMedia(true);\n\t\t\t\t\tSystem.out.println(\"inside the setOnSeekCompleteListener\");\n\t\t\t\t\tplayMedia(false);\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"inside------ the setOnSeekCompleteListener\");\n\t\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n\t\t\t}\n\t\t});\n\n\t\tmp.setOnCompletionListener(null);\n\t\t// onBufferingUpdateListener declaration\n\t\tmp.setOnBufferingUpdateListener(new OnBufferingUpdateListener() {\n\t\t\t// show updated information about the buffering progress\n\t\t\t@Override\n\t\t\tpublic void onBufferingUpdate(MediaPlayer mp, int percent) {\n\t\t\t\tLog.d(TAG, \"percent: \" + percent);\n\t\t\t\tprogressBar.setSecondaryProgress(percent);\n\t\t\t}\n\t\t});\n\t\t\n\n\t\tint time = videoviewer.getDuration();\n\t\tint time_elapsed = videoviewer.getCurrentPosition();\n\t\tprogressBar.setProgress(time_elapsed);\n\n\t\t// update current playback time every 500ms until stop\n\t\ttimer = new CountDownTimer(time, 500) {\n\n\t\t\t@Override\n\t\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n\t\t\t\tfloat a = videoviewer.getCurrentPosition();\n\t\t\t\tfloat b = videoviewer.getDuration();\n\t\t\t\tprogressBar.setProgress((int) (a / b * 100));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onFinish() {\n\t\t\t\tstopMedia();\n\t\t\t}\n\t\t};\n\n\t\t\n\t\t\n\t\ttimeEnd.setText(countTime(time));\n\t\ttimeElapsed.setText(countTime(time_elapsed));\n\t\tplayMedia(true);\n\t}\n\n\t/**\n     * Convert time from milliseconds into minutes and seconds, proper to media player\n     * \n     * @param miliseconds\tmedia content time in milliseconds\n     * @return\ttime in format minutes:seconds\n     */\n    public String countTime(int miliseconds) {\n    \tString timeInMinutes = new String();\n    \tint minutes = miliseconds / 60000;\n    \tint seconds = (miliseconds % 60000)/1000;\n    \ttimeInMinutes = minutes + \":\" + (seconds<10?\"0\" + seconds:seconds);\n\t\treturn timeInMinutes;\n    }\n    \n    /**\n     * Start or Pause playback of media content\n     * \n     * @param v\tView the touch event has been dispatched to\n     */\n\tpublic void playMedia(boolean isplay) {\n\t\tSystem.err.println(\"height:- \"+mVideoHeight);\n\t\tSystem.err.println(\"width:- \"+mVideoWidth);\n\t\t\tif (isplay) {\n\t\t\t\tvideoviewer.changeVideoSize(mVideoWidth, mVideoHeight);\n\t\t\t\tvideoviewer.start();\n\t\t\t\ttimer.start();\n\t\t\t} else {\n\t\t\t\tvideoviewer.pause();\n\t\t\t\ttimer.cancel();\n\t\t\t}\n\t\t\n    }\n    \n    /**\n     * Pause and rewind to beginning of the media content\n     * \n     * @param v\tView the touch event has been dispatched to\n     */\n\tpublic void stopMedia() {\n\t\tif (videoviewer.getCurrentPosition() != 0) {\n\t\t\t\n\t\t\tplaytogglebutton.setChecked(true);\n\t\t\t\n\t\t\tvideoviewer.pause();\n\t\t\tvideoviewer.seekTo(0);\n\t\t\ttimer.cancel();\n\n\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n\t\t\tprogressBar.setProgress(0);\n\t\t}\n\t}\n\n\n\t@Override\n\tprotected void onStop() {\n\t\t// TODO Auto-generated method stub\n\t\tif(videoviewer != null)\n\t\t\tvideoviewer.stopPlayback();\n\t\tif (timer != null) {\n\t\t\ttimer.cancel();\n\t\t}\n\t\tsuper.onStop();\n\t}\n\n\t\n\n\t\n\n}\n"], "body_t": ["add waiting icon\nadd play/pause and stop functionality\nresolve null pointer issue"], "date_tdt": "2013-09-18T07:37:19Z", "hash_sni": "595001dc69484d7e884728d2aa50f3b0a993f208", "name_sni": "src/com/example/steaming/MainActivity.java", "patch_t": [" package com.example.steaming;\n \n \n-\n-\n import android.app.Activity;\n import android.content.pm.ActivityInfo;\n import android.media.MediaPlayer;\n@@ -39,7 +37,11 @@ public class MainActivity extends Activity implements OnPreparedListener, OnErro\n \tprotected void onCreate(Bundle savedInstanceState) {\n \t\t// TODO Auto-generated method stub\n \t\tsuper.onCreate(savedInstanceState);\n-\t\tsetRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n+\t\tSystem.out.println(getString(R.string.orientation) +\"--------------------------orientation value\");\n+\t\tif(getString(R.string.orientation).equalsIgnoreCase(\"landscape\"))\n+\t\t\tsetRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n+\t\telse\n+\t\t\tsetRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\n \t\tsetContentView(R.layout.activity_main);\n \t\t\n \t\tloading = (ProgressBar) findViewById(R.id.loading);\n@@ -62,13 +64,21 @@ public class MainActivity extends Activity implements OnPreparedListener, OnErro\n \t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://184.72.239.149/vod/mp4:BigBuckBunny_115k.mov\"));\n \t\t//videoviewer.setVideoURI(Uri.parse(\"http://dl.dropbox.com/u/80419/santa.mp4\"));\n \t\tvideoviewer.requestFocus();\n-\t\tvideoviewer.requestFocus();\n \t\tvideoviewer.setKeepScreenOn(true);\n \t\tvideoviewer.setOnErrorListener(this);\n \t\tvideoviewer.setOnPreparedListener(this);\n+\t\t//loading.show();\n \t\t\n+\t\t/*stop.setOnClickListener(new OnClickListener() {\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic void onClick(View arg0) {\n+\t\t\t\t// TODO Auto-generated method stub\n+\t\t\t\tstopMedia();\n+\t\t\t}\n+\t\t});*/\n \t}\n-\n+\t\n \tprivate OnClickListener stoplistener = new OnClickListener() {\n \t\t\n \t\t@Override\n@@ -76,6 +86,7 @@ public class MainActivity extends Activity implements OnPreparedListener, OnErro\n \t\t\tstopMedia();\n \t\t}\n \t};\n+\n \tprivate OnCheckedChangeListener checkedchangelistener =  new OnCheckedChangeListener(){\n \n \t\t@Override\n@@ -97,7 +108,6 @@ public class MainActivity extends Activity implements OnPreparedListener, OnErro\n \t\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n \t\t\t// TODO Auto-generated method stub\n \t\t\t//loading.hide();\n-\t\t\tloading.setVisibility(View.GONE);\n \t\t\treturn false;\n \t\t}\n \t\t\n@@ -150,7 +160,7 @@ public class MainActivity extends Activity implements OnPreparedListener, OnErro\n \t\t\t// show updated information about the buffering progress\n \t\t\t@Override\n \t\t\tpublic void onBufferingUpdate(MediaPlayer mp, int percent) {\n-\t\t\t\tLog.d(this.getClass().getName(), \"percent: \" + percent);\n+\t\t\t\tLog.d(TAG, \"percent: \" + percent);\n \t\t\t\tprogressBar.setSecondaryProgress(percent);\n \t\t\t}\n \t\t});\n@@ -247,5 +257,9 @@ public class MainActivity extends Activity implements OnPreparedListener, OnErro\n \t\t}\n \t\tsuper.onStop();\n \t}\n+\n \t\n+\n+\t\n+\n }\n\\ No newline at end of file"], "score": 1.0, "methods_t": ["CountDownTimer OnBufferingUpdateListener OnCheckedChangeListener OnClickListener OnSeekCompleteListener OnVideoSizeChangedListener String cancel changeVideoSize countTime d e equalsIgnoreCase findViewById getClass getCurrentPosition getDuration getSimpleName getString getVideoHeight getVideoWidth isPlaying parse pause playMedia println requestFocus seekTo setChecked setContentView setKeepScreenOn setLooping setOnBufferingUpdateListener setOnCheckedChangeListener setOnClickListener setOnCompletionListener setOnErrorListener setOnPreparedListener setOnSeekCompleteListener setOnVideoSizeChangedListener setProgress setRequestedOrientation setSecondaryProgress setText setVideoURI setVisibility start stopMedia stopPlayback"], "_version_": 1526737213886300160, "subject_t": ["update code with waiting icon"], "comments_t": ["\t\t\t//loading.hide(); \t\t//onVideoSizeChangedListener declaration \t\t// onBufferingUpdateListener declaration \t\t//loading.show(); /** \n * Convert time from milliseconds into minutes and seconds, proper to media player\n * @param miliseconds\tmedia content time in milliseconds\n * @return\ttime in format minutes:seconds\n */\n \t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.youtube.com/v/OwMCw2VG04I\")); //not working \t\t\t\t// TODO Auto-generated method stub \t\t\t// show updated information about the buffering progress /*stop.setOnClickListener(new OnClickListener() {\n\n@Override\npublic void onClick(View arg0) {\n// TODO Auto-generated method stub\nstopMedia();\n}\n});*/\n \t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://184.72.239.149/vod/mp4:BigBuckBunny_115k.mov\")); \t\t// TODO Auto-generated method stub /** \n * Pause and rewind to beginning of the media content\n * @param v\tView the touch event has been dispatched to\n */\n \t\t//loading.hide(); \t\t//videoviewer.setVideoURI(Uri.parse(\"http://daily3gp.com/vids/747.3gp\")); \t\t//videoviewer.setVideoURI(Uri.parse(\"http://commonsware.com/misc/test2.3gp\")); /** \n * Start or Pause playback of media content\n * @param v\tView the touch event has been dispatched to\n */\n /*play player*/\n /*pause player*/\n \t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v5.cache5.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYDSANFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\")); \t\t// update current playback time every 500ms until stop \t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v4.cache1.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYESARFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\")); \t\t// onSeekCompletionListener declaration \t\t//videoviewer.setVideoURI(Uri.parse(\"http://dl.dropbox.com/u/80419/santa.mp4\")); \t\t\t// TODO Auto-generated method stub \t\t\t// show current frame after changing the playback position \t\t\t\t\t//playMedia(true);"], "parents_ss": ["a20fe512f918168760508400bccbf859b553a078"], "id": "ash242186/VideoStreaming\u0000595001dc69484d7e884728d2aa50f3b0a993f208\u0000src/com/example/steaming/MainActivity.java", "callsites_cs": "java.lang.Class.getSimpleName()#com.example.steaming.MainActivity.countTime(<unknown>)#com.example.steaming.MainActivity.playMedia(boolean)#java.lang.String.String()#<unknown>.getDuration()#com.example.steaming.MainActivity.countTime(<unknown>)#<unknown>.pause()#android.media.MediaPlayer.setLooping(boolean)#java.io.PrintStream.println(java.lang.String)#com.example.steaming.MainActivity.playMedia(boolean)#<unknown>.getCurrentPosition()#android.media.MediaPlayer.setOnSeekCompleteListener()#android.app.Activity.setRequestedOrientation(int)#android.media.MediaPlayer.setOnVideoSizeChangedListener()#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#com.example.steaming.MainActivity.countTime(int)#android.widget.CompoundButton.setOnCheckedChangeListener(android.widget.CompoundButton.OnCheckedChangeListener)#android.widget.TextView.setText(java.lang.String)#android.content.Context.getString(<unknown>)#<unknown>.start()#java.io.PrintStream.println(<unknown>)#java.lang.Object.getClass()#android.util.Log.d(java.lang.String, java.lang.String)#android.os.CountDownTimer.cancel()#.OnBufferingUpdateListener()#<unknown>.getCurrentPosition()#android.app.Activity.findViewById(<unknown>)#<unknown>.getDuration()#com.example.steaming.MainActivity.playMedia(boolean)#android.util.Log.d(java.lang.String, java.lang.String)#android.widget.ProgressBar.setProgress(int)#com.example.steaming.MainActivity.playMedia(boolean)#android.widget.ToggleButton.setChecked(boolean)#android.util.Log.d(java.lang.String, java.lang.String)#java.io.PrintStream.println(java.lang.String)#<unknown>.pause()#android.app.Activity.setRequestedOrientation(int)#.CountDownTimer(int, int)#android.app.Activity.findViewById(<unknown>)#android.widget.ProgressBar.setSecondaryProgress(int)#android.media.MediaPlayer.getVideoHeight()#android.util.Log.e(java.lang.String, java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.equalsIgnoreCase(java.lang.String)#com.example.steaming.MainActivity.stopMedia()#android.os.CountDownTimer.cancel()#<unknown>.setOnErrorListener(com.example.steaming.MainActivity)#android.widget.TextView.setText(java.lang.String)#<unknown>.requestFocus()#com.example.steaming.MainActivity.stopMedia()#com.example.steaming.MainActivity.countTime(<unknown>)#.OnCheckedChangeListener()#android.widget.TextView.setText(<unknown>)#java.io.PrintStream.println(java.lang.String)#<unknown>.stopPlayback()#android.media.MediaPlayer.setOnBufferingUpdateListener()#<unknown>.changeVideoSize(int, int)#android.media.MediaPlayer.isPlaying()#android.app.Activity.findViewById(<unknown>)#android.os.CountDownTimer.start()#android.net.Uri.parse(java.lang.String)#android.media.MediaPlayer.setOnCompletionListener(null)#android.widget.TextView.setText(<unknown>)#android.widget.ProgressBar.setVisibility(int)#android.os.CountDownTimer.cancel()#com.example.steaming.MainActivity.countTime(int)#java.io.PrintStream.println(java.lang.String)#.OnClickListener()#.OnSeekCompleteListener()#android.app.Activity.setContentView(<unknown>)#.OnVideoSizeChangedListener()#<unknown>.getCurrentPosition()#android.app.Activity.findViewById(<unknown>)#<unknown>.setVideoURI(android.net.Uri)#<unknown>.seekTo(int)#<unknown>.getCurrentPosition()#java.io.PrintStream.println(java.lang.String)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#com.example.steaming.MainActivity.playMedia(boolean)#android.widget.ProgressBar.setProgress(int)#<unknown>.setKeepScreenOn(boolean)#android.app.Activity.findViewById(<unknown>)#android.widget.ProgressBar.setProgress(int)#java.io.PrintStream.println(java.lang.String)#<unknown>.setOnPreparedListener(com.example.steaming.MainActivity)#android.media.MediaPlayer.getVideoWidth()", "callsites_t": ["java.lang.Class.getSimpleName() com.example.steaming.MainActivity.countTime(<unknown>) com.example.steaming.MainActivity.playMedia(boolean) java.lang.String.String() <unknown>.getDuration() com.example.steaming.MainActivity.countTime(<unknown>) <unknown>.pause() android.media.MediaPlayer.setLooping(boolean) java.io.PrintStream.println(java.lang.String) com.example.steaming.MainActivity.playMedia(boolean) <unknown>.getCurrentPosition() android.media.MediaPlayer.setOnSeekCompleteListener() android.app.Activity.setRequestedOrientation(int) android.media.MediaPlayer.setOnVideoSizeChangedListener() android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) com.example.steaming.MainActivity.countTime(int) android.widget.CompoundButton.setOnCheckedChangeListener(android.widget.CompoundButton.OnCheckedChangeListener) android.widget.TextView.setText(java.lang.String) android.content.Context.getString(<unknown>) <unknown>.start() java.io.PrintStream.println(<unknown>) java.lang.Object.getClass() android.util.Log.d(java.lang.String, java.lang.String) android.os.CountDownTimer.cancel() .OnBufferingUpdateListener() <unknown>.getCurrentPosition() android.app.Activity.findViewById(<unknown>) <unknown>.getDuration() com.example.steaming.MainActivity.playMedia(boolean) android.util.Log.d(java.lang.String, java.lang.String) android.widget.ProgressBar.setProgress(int) com.example.steaming.MainActivity.playMedia(boolean) android.widget.ToggleButton.setChecked(boolean) android.util.Log.d(java.lang.String, java.lang.String) java.io.PrintStream.println(java.lang.String) <unknown>.pause() android.app.Activity.setRequestedOrientation(int) .CountDownTimer(int, int) android.app.Activity.findViewById(<unknown>) android.widget.ProgressBar.setSecondaryProgress(int) android.media.MediaPlayer.getVideoHeight() android.util.Log.e(java.lang.String, java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.equalsIgnoreCase(java.lang.String) com.example.steaming.MainActivity.stopMedia() android.os.CountDownTimer.cancel() <unknown>.setOnErrorListener(com.example.steaming.MainActivity) android.widget.TextView.setText(java.lang.String) <unknown>.requestFocus() com.example.steaming.MainActivity.stopMedia() com.example.steaming.MainActivity.countTime(<unknown>) .OnCheckedChangeListener() android.widget.TextView.setText(<unknown>) java.io.PrintStream.println(java.lang.String) <unknown>.stopPlayback() android.media.MediaPlayer.setOnBufferingUpdateListener() <unknown>.changeVideoSize(int, int) android.media.MediaPlayer.isPlaying() android.app.Activity.findViewById(<unknown>) android.os.CountDownTimer.start() android.net.Uri.parse(java.lang.String) android.media.MediaPlayer.setOnCompletionListener(null) android.widget.TextView.setText(<unknown>) android.widget.ProgressBar.setVisibility(int) android.os.CountDownTimer.cancel() com.example.steaming.MainActivity.countTime(int) java.io.PrintStream.println(java.lang.String) .OnClickListener() .OnSeekCompleteListener() android.app.Activity.setContentView(<unknown>) .OnVideoSizeChangedListener() <unknown>.getCurrentPosition() android.app.Activity.findViewById(<unknown>) <unknown>.setVideoURI(android.net.Uri) <unknown>.seekTo(int) <unknown>.getCurrentPosition() java.io.PrintStream.println(java.lang.String) android.view.View.setOnClickListener(android.view.View.OnClickListener) com.example.steaming.MainActivity.playMedia(boolean) android.widget.ProgressBar.setProgress(int) <unknown>.setKeepScreenOn(boolean) android.app.Activity.findViewById(<unknown>) android.widget.ProgressBar.setProgress(int) java.io.PrintStream.println(java.lang.String) <unknown>.setOnPreparedListener(com.example.steaming.MainActivity) android.media.MediaPlayer.getVideoWidth()"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener android.os.Bundle android.view.Window java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\t// ///// ****** No Title Bar ********* /////////\n\n\t\tthis.requestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items\n\t\t// ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n\t\t\t\t//TODO \n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ******\n\t\t// ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\n\t\t// //////********* Get Last most accurate location info *********\n\t\t// /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText()\n\t\t\t\t.toString();\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t\t.getText().length() > 5) {\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock\n\t\t\t\t\t.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\")\n\t\t\t\t&& !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount\n\t\t\t\t\t.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText()\n\t\t\t\t\t.toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString()\n\t\t\t\t.equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(\n\t\t\t\t\t\t\ttext_voice_camera_date_bar_dateview.getText()\n\t\t\t\t\t\t\t\t\t.toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,\n\t\t\t\t\t\t\tmDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(MainActivity.mCurrentLocation != null  && setLocation == true){\n\t\t\tif (!MainActivity.mCurrentLocation.equals(\"\")) {\n\t\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION,MainActivity.mCurrentLocation);\n\t\t\t}\n\t\t}\n\t\t// //// ******* Update database if user added additional info *******\n\t\t// ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tif (!intentExtras.containsKey(\"timeInMillis\")\n\t\t\t\t&& !intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-01T12:04:05Z", "hash_sni": "6e2b273cd790726e04a2d9c30035646fc5bc2636", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \tprivate TextView text_voice_camera_date_bar_dateview;\n \tprivate String dateViewString;\n \tprivate ArrayList<String> mEditList;\n-\tprivate boolean setLocation;\n+\tprivate boolean setLocation = false; \n+\tprivate boolean setUnknown = false;\n \n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n@@ -96,8 +97,11 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t\tif (!amount.contains(\"?\"))\n \t\t\t\t\ttext_voice_camera_amount.setText(amount);\n \t\t\t}\n-\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n-\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n+\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n+\t\t\t\t//TODO \n+\t\t\t\tsetUnknown = true;\n+\t\t\t}\n+\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n \t\t\t\ttext_voice_camera_tag.setText(tag);\n \t\t\t}\n \t\t}\n@@ -117,25 +121,18 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n \t\t\tsetGraphicsVoice();\n \n-\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n-\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id\n-\t\t\t\t\t\t+ \".amr\");\n+\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n+\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n \n \t\t\t\tif (tempFile.canRead()) {\n \t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n \t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n \t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n-\t\t\t\t\ttext_voice_camera_rerecord_button\n-\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n-\t\t\t\t\ttext_voice_camera_time_details_chronometer\n-\t\t\t\t\t\t\t.setText(new DisplayTime()\n-\t\t\t\t\t\t\t\t\t.getDisplayTime(mAudioPlay\n-\t\t\t\t\t\t\t\t\t\t\t.getPlayBackTime()));\n+\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n+\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n \t\t\t\t} else {\n-\t\t\t\t\ttext_voice_camera_time_details_chronometer\n-\t\t\t\t\t\t\t.setText(\"Audio File Missing\");\n-\t\t\t\t\ttext_voice_camera_rerecord_button\n-\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n+\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n+\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n \t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n \t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n \t\t\t\t}\n@@ -145,8 +142,7 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t\tcontrolVoiceChronometer();\n \t\t\t}\n \t\t} else {\n-\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG)\n-\t\t\t\t\t.show();\n+\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n \t\t}\n \t\tsetClickListeners();\n "], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime File FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLastLocation getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put requestWindowFeature saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526743289054625792, "subject_t": ["ExpenseListing Unknown Entry click listener added.  Closes #20"], "comments_t": ["\t\t// ///// ****** No Title Bar ********* ///////// \t\t// or later, or by the code above on earlier versions of the platform. \t\t// /////// \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// //// ******* Update database if user added additional info ******* \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //////********* Get Last most accurate location info ********* \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// //// ****** If audio recording started then stop recording audio \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t\t//TODO  \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// ////// ******** Starts Recording each time activity starts ****** \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// ***** /////// \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// ********** ///////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["b7635040f8b5d83d94f35f2ee7eb3ee9e85eef31"], "id": "vinsol/expense-tracker\u00006e2b273cd790726e04a2d9c30035646fc5bc2636\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.widget.TextView.setText(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.app.Activity.finish()#java.io.File.File(java.lang.String)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#<unknown>.getLastLocation()#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#<unknown>.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#android.widget.TextView.getText()#<unknown>.DisplayTime()#android.view.KeyEvent.getRepeatCount()#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.requestWindowFeature(int)#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#<unknown>.isRecording()#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.widget.TextView.setText(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.lang.Long.toString(long) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.app.Activity.finish() java.io.File.File(java.lang.String) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) <unknown>.getLastLocation() android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) <unknown>.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() android.widget.TextView.getText() <unknown>.DisplayTime() android.view.KeyEvent.getRepeatCount() <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.requestWindowFeature(int) android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) <unknown>.isRecording() android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "anthonylynch90", "repo_sni": "anthonylynch90/Android_Attack_app", "imports_t": ["android.location.LocationListener android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.content.Context java.io.IOException android.database.Cursor android.view.SurfaceView android.os.Bundle android.content.DialogInterface android.location.Criteria android.widget.Button android.content.Intent android.view.Window android.view.WindowManager android.view.SurfaceHolder android.content.pm.ActivityInfo android.location.LocationManager android.media.CamcorderProfile android.media.MediaRecorder android.view.KeyEvent android.location.Location android.widget.TextView android.app.AlertDialog android.view.View android.util.Log android.app.Activity"], "email_sni": "anthony-lynch@hotmail.com", "contents_t": ["package com.attack.android;\n\nimport java.io.IOException;\n\nimport android.app.Activity;\nimport android.app.AlertDialog;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.pm.ActivityInfo;\nimport android.database.Cursor;\nimport android.location.Criteria;\nimport android.location.Location;\nimport android.location.LocationListener;\nimport android.location.LocationManager;\nimport android.media.CamcorderProfile;\nimport android.media.MediaRecorder;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.KeyEvent;\nimport android.view.SurfaceHolder;\nimport android.view.SurfaceView;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.view.WindowManager;\nimport android.widget.Button;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class CameraView extends Activity implements SurfaceHolder.Callback{\n\tprivate MediaRecorder recorder; \n\tprivate LocationManager locManager;\n\tprivate LocationListener locListener;\n\tprivate SurfaceHolder holder;\n\tpublic  static Button activate;\n\tprivate boolean recording = false;\n\tprivate boolean match;\n\tprivate static Context context;\n\tprivate DeactivateDialog dialog;\n\tprivate int videoNum;\n\tprivate int timerNum = 0;\n\tprivate Intent sms;\n\tpublic VoiceRecognition voice;\n\tprivate Database db = new Database(this);\n\n\t\n        public void onCreate(Bundle savedInstanceState) {\n                super.onCreate(savedInstanceState);\n                \n                requestWindowFeature(Window.FEATURE_NO_TITLE);\n                getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,\n                        WindowManager.LayoutParams.FLAG_FULLSCREEN);\n                getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n                setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\n\n                recorder = new MediaRecorder();\n                if(getIntent() != null) { \n        \t\t\tBundle extras = getIntent().getExtras();\n        \t\t\tvideoNum = extras != null ? extras.getInt(\"value\") : 0;\n        \t\t}\n        \t\t\n                //sets the view to the surface_view.xml file.\n                setContentView(R.layout.surface_view);\n\n                SurfaceView cameraView = (SurfaceView) findViewById(R.id.surface_camera);\n                holder = cameraView.getHolder();\n                holder.addCallback(this);\n                holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n                recorder.setPreviewDisplay(holder.getSurface());\n                context = this;\n                dialog = new DeactivateDialog(context);\n                onClick();\n                checkGPS();\n                createGpsIntent();\n                resetVoiceRecognition(); \t         \n        }\n        \n        \n        private void checkGPS() {\n    \t\tLocationManager locMan = (LocationManager) getSystemService(LOCATION_SERVICE);\n    \t\tboolean gpsEnabled = locMan.isProviderEnabled(LocationManager.GPS_PROVIDER);\n    \t\tif(!gpsEnabled){\n    \t\t\tcreateDialog();\n    \t\t}\n    \t}\n        \n        public void createDialog(){\n    \t\tAlertDialog.Builder alert = new AlertDialog.Builder(this);\n    \t\talert.setTitle(R.string.gps_message);\n    \t\talert.setPositiveButton(R.string.gps_settings, new DialogInterface.OnClickListener() {\n    \n    \t\t    public void onClick(DialogInterface dialog, int which) {\n    \t\t\t\tstartActivityForResult(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS), 0);\n    \t\t\t\treturn;\n    \t\t    }\n    \t\t});\n\n    \t\talert.setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\n    \t\n    \t\t    public void onClick(DialogInterface dialog, int which) {\n    \t\t        return;\n    \t\t    }\n    \t\t});\n    \t\talert.create();\n    \t\talert.show();\n    \t}\n\n\t\tprivate void initRecorder() {\n\t\t\trecorder.reset();\n            recorder.setAudioSource(MediaRecorder.AudioSource.DEFAULT);\n            recorder.setVideoSource(MediaRecorder.VideoSource.DEFAULT);\n\n            CamcorderProfile cpHigh = CamcorderProfile\n                    .get(CamcorderProfile.QUALITY_HIGH);\n            recorder.setProfile(cpHigh);\n            recorder.setOutputFile(\"/sdcard/videocapture_example\"+videoNum+\".mp4\");\n            recorder.setMaxDuration(8000);\n            \n            recorder.setMaxFileSize(5000000); // Approximately 5 megabytes\n            try {\n                recorder.prepare(); \n            } catch (IOException e) {\n                e.printStackTrace();\n                finish();\n            }\n            \n        }\n        \n\tprivate void onClick() {\n\t\tactivate = (Button) findViewById(R.id.activate);\n\t\tfinal Button deactivate = (Button) findViewById(R.id.deactivate);\n\t\tfinal Button settings = (Button) findViewById(R.id.settings);\n\t\tfinal TextView timer = (TextView) findViewById(R.id.timer);\n\t\tactivate.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) { \n            \tactivate.setVisibility(View.INVISIBLE);\n            \tif(voice != null){\n            \t\tvoice.recognizer.destroy();\n            \t\tvoice = null;\n            \t}\n            \tdeactivate.setVisibility(View.VISIBLE);\n            \ttimer.setVisibility(View.VISIBLE);\n            \tsettings.setVisibility(View.INVISIBLE);\n            \tcheckRecording();\n            \tstartAlert();\n            }\n        });\n\t\t\n\t\tdeactivate.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) { \n            \tdialog.showDialog();\n            } \n        });\n\t\t\n\t\tsettings.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {  \n            \tlocManager.removeUpdates(locListener);\n            \tif(voice != null){\n            \t\tvoice.recognizer.destroy();\n            \t\tvoice = null;\n            \t}\n            \tIntent settings = new Intent(getBaseContext(), Settings.class);\n            \tsettings.putExtra(\"value\", videoNum);\n            \tonDestroy();\n        \t\tstartActivity(settings);\n            }\n        });\n\t}\n\t\n\tprivate void startAlert() {\n\t\tfinal Button activate = (Button) findViewById(R.id.activate);\n\t\tfinal Button deactivate = (Button) findViewById(R.id.deactivate);\n\t\tfinal Button settings = (Button) findViewById(R.id.settings);\n\t\tfinal TextView timer = (TextView) findViewById(R.id.timer);\n\t\tCountDownTimer start = new CountDownTimer(10000,1000){\n\n            @Override\n            public void onTick(long miliseconds){\n            \tif(miliseconds/1000 >= 0 && dialog.check()!=true){\n            \t\tString val = getResources().getString(R.string.seconds_remaining);\n            \t\ttimer.setText(val +(miliseconds/1000));\n            \t}\n            \tif(dialog.check()==true){\n            \t\ttimer.setText(R.string.send_has_been_deactivated);\n            \t}\n            \tmatch = dialog.check();\n            \tif(match == true&&timerNum==0){\n            \t\tcheckRecording();\n            \t\tToast.makeText(getApplicationContext(), R.string.information_not_sent_, 5000).show();\n            \t}\n            }\n\n            @Override\n            public void onFinish(){\n            \tfinal String loc = db.getLocation();\n            \tfinal String[] personalInfo = db.getPersonalDetails();\n            \tfinal Cursor contacts = db.getContacts();\n            \t\n            \tif(match == false){\n            \t\tresetVoiceRecognition();\n            \t\tsendSms(loc);\n            \t\tcheckRecording();\n            \t\t\tif(db.hasGmail()){\n            \t\t\t\tThread s = new Thread(new Runnable(){\n            \t\t\t\n        \t\t\t\t\t\tpublic void run() {\n        \t\t\t\t\t\t\tString args[] = db.getGmail();\n                    \t\t\t\tGmailSender sender = new GmailSender(args[0], args[1]);\n                    \t\t\t\t\n                    \t\t\t\tCursor c = db.getEmailContacts();\n                    \t\t\t\twhile(c.moveToNext()){\n                    \t\t\t\t\ttry {\n\n                \t\t\t\t\t\t\tLog.e(args[0], args[1]);\n\t\t\t\t\t\t\t\t\t\t\tsender.sendMail(loc, args[0], c.getString(c.getColumnIndex(\"emailAddress\")));\n\t\t\t\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t\t\t\tLog.e(\"SendMail\", e.getMessage(), e);\n\t\t\t\t\t\t\t\t\t\t} \n                    \t\t\t\t}\n        \t\t\t\t\t\t}\n                    \t\t\t\n                    \t\t}); \n                    \t\ts.start();\n                    \t\t\n            \t\t\t\t\n            \t\t\t}\n            \t\tToast.makeText(getApplicationContext(), \"Information sent\", 5000).show();\n            \t}\n            }\n        }.start();\n\t}\n\t\n\tpublic void resetVoiceRecognition(){\n\t\tif(db.getActivationState().equals(\"ON\")){\n\t\t\tLog.e(\"is\", \"Is on\");\n\t\t\tvoice = new VoiceRecognition(context);\n\t\t}\n\t}\n\t\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n\t    if (keyCode == KeyEvent.KEYCODE_BACK ||keyCode == KeyEvent.KEYCODE_HOME) {\n\t    \tButton activate = (Button) findViewById(R.id.activate);\n\t    \tif(activate.getVisibility() == View.VISIBLE){\n\t    \t\tmoveTaskToBack(true);\n\t    \t\tonDestroy();\n\t            return true;\n\t    \t}\n\t    \treturn true;\n\t    }\n\n\t    return super.onKeyDown(keyCode, event);\n\t}\n\t\n\tprivate void sendSms(String location){\n\t\tsms = new Intent(this, SMS.class);\n\t\tsms.putExtra(\"location\", location);\n    \tthis.startService(sms);\n\t}\n\t\n\tprivate void createGpsIntent() {\n\t\tString l = db.getLocation();\n\t\tif(l == null){\n\t\t\tdb.addLocation(\"No Value\");\n\t\t}\n\t\tlocManager = (LocationManager)getSystemService(Context.LOCATION_SERVICE);\n\t\tCriteria criteria = new Criteria();\n\t\tString provider = locManager.getBestProvider(criteria, false);\n\t\tlocManager.getLastKnownLocation(provider);\n\t\tlocListener = new MyLocationListener(this);\n\t\tlocManager.requestLocationUpdates( LocationManager.GPS_PROVIDER, 1000, 2, locListener);\n\t}\n\n\n\tpublic void surfaceChanged(SurfaceHolder holder, int format, int width,\n\t\t\tint height) {\n\t\t\n\t}\n\n\tpublic void checkRecording() {\n\t    if (recording) {\n\t    \trecorder.stop();\n\t    \trecording = false;\n\t    \tvideoNum = videoNum+1;\n\t    \ttimerNum = timerNum+1;\n\t        // Let's initRecorder so we can record again\n\t       // initRecorder();\n\t        Intent camera = new Intent(this, CameraView.class);\n\t        camera.putExtra(\"value\", videoNum);\n\t        super.finish();\n\t        startActivity(camera);\n\t    } else {\n\t    \tinitRecorder();\n\t        recording = true;\n\t        recorder.start();\n\t    }\n\t}\n\n\tpublic void surfaceCreated(SurfaceHolder holder) {\n\t\t\n\t}\n\n\tpublic void surfaceDestroyed(SurfaceHolder holder) { \n\t    if (recording) {\n\t        recorder.stop();\n\t        recording = false;\n\t    }\n\t    recorder.release();\n\t    finish();\n\t}\n\t\t\n\tpublic void onDestroy(){\n\t\tsuper.onDestroy();\n\t\ttry{\n\t\t\tthis.stopService(sms);\n\t\t}catch(Exception e){}\n\t\ttry{\n\t\t\tvoice.recognizer.destroy();\n\t\t}catch(Exception e){}\n\t\tif(locManager != null){\n\t\t\tlocManager.removeUpdates(locListener);\n\t\t}\n\t\t\n\t}\n\t\n\n}\n"], "body_t": ["<empty>"], "date_tdt": "2012-12-08T15:13:48Z", "hash_sni": "bebf2c2261013f3bb323ff4314cc8f8a200fd466", "name_sni": "src/com/attack/android/CameraView.java", "patch_t": ["+package com.attack.android;\n+\n+import java.io.IOException;\n+\n+import android.app.Activity;\n+import android.app.AlertDialog;\n+import android.content.Context;\n+import android.content.DialogInterface;\n+import android.content.Intent;\n+import android.content.pm.ActivityInfo;\n+import android.database.Cursor;\n+import android.location.Criteria;\n+import android.location.Location;\n+import android.location.LocationListener;\n+import android.location.LocationManager;\n+import android.media.CamcorderProfile;\n+import android.media.MediaRecorder;\n+import android.os.Bundle;\n+import android.os.CountDownTimer;\n+import android.util.Log;\n+import android.view.KeyEvent;\n+import android.view.SurfaceHolder;\n+import android.view.SurfaceView;\n+import android.view.View;\n+import android.view.View.OnClickListener;\n+import android.view.Window;\n+import android.view.WindowManager;\n+import android.widget.Button;\n+import android.widget.TextView;\n+import android.widget.Toast;\n+\n+public class CameraView extends Activity implements SurfaceHolder.Callback{\n+\tprivate MediaRecorder recorder; \n+\tprivate LocationManager locManager;\n+\tprivate LocationListener locListener;\n+\tprivate SurfaceHolder holder;\n+\tpublic  static Button activate;\n+\tprivate boolean recording = false;\n+\tprivate boolean match;\n+\tprivate static Context context;\n+\tprivate DeactivateDialog dialog;\n+\tprivate int videoNum;\n+\tprivate int timerNum = 0;\n+\tprivate Intent sms;\n+\tpublic VoiceRecognition voice;\n+\tprivate Database db = new Database(this);\n+\n+\t\n+        public void onCreate(Bundle savedInstanceState) {\n+                super.onCreate(savedInstanceState);\n+                \n+                requestWindowFeature(Window.FEATURE_NO_TITLE);\n+                getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,\n+                        WindowManager.LayoutParams.FLAG_FULLSCREEN);\n+                getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n+                setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\n+\n+                recorder = new MediaRecorder();\n+                if(getIntent() != null) { \n+        \t\t\tBundle extras = getIntent().getExtras();\n+        \t\t\tvideoNum = extras != null ? extras.getInt(\"value\") : 0;\n+        \t\t}\n+        \t\t\n+                //sets the view to the surface_view.xml file.\n+                setContentView(R.layout.surface_view);\n+\n+                SurfaceView cameraView = (SurfaceView) findViewById(R.id.surface_camera);\n+                holder = cameraView.getHolder();\n+                holder.addCallback(this);\n+                holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n+                recorder.setPreviewDisplay(holder.getSurface());\n+                context = this;\n+                dialog = new DeactivateDialog(context);\n+                onClick();\n+                checkGPS();\n+                createGpsIntent();\n+                resetVoiceRecognition(); \t         \n+        }\n+        \n+        \n+        private void checkGPS() {\n+    \t\tLocationManager locMan = (LocationManager) getSystemService(LOCATION_SERVICE);\n+    \t\tboolean gpsEnabled = locMan.isProviderEnabled(LocationManager.GPS_PROVIDER);\n+    \t\tif(!gpsEnabled){\n+    \t\t\tcreateDialog();\n+    \t\t}\n+    \t}\n+        \n+        public void createDialog(){\n+    \t\tAlertDialog.Builder alert = new AlertDialog.Builder(this);\n+    \t\talert.setTitle(R.string.gps_message);\n+    \t\talert.setPositiveButton(R.string.gps_settings, new DialogInterface.OnClickListener() {\n+    \n+    \t\t    public void onClick(DialogInterface dialog, int which) {\n+    \t\t\t\tstartActivityForResult(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS), 0);\n+    \t\t\t\treturn;\n+    \t\t    }\n+    \t\t});\n+\n+    \t\talert.setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\n+    \t\n+    \t\t    public void onClick(DialogInterface dialog, int which) {\n+    \t\t        return;\n+    \t\t    }\n+    \t\t});\n+    \t\talert.create();\n+    \t\talert.show();\n+    \t}\n+\n+\t\tprivate void initRecorder() {\n+\t\t\trecorder.reset();\n+            recorder.setAudioSource(MediaRecorder.AudioSource.DEFAULT);\n+            recorder.setVideoSource(MediaRecorder.VideoSource.DEFAULT);\n+\n+            CamcorderProfile cpHigh = CamcorderProfile\n+                    .get(CamcorderProfile.QUALITY_HIGH);\n+            recorder.setProfile(cpHigh);\n+            recorder.setOutputFile(\"/sdcard/videocapture_example\"+videoNum+\".mp4\");\n+            recorder.setMaxDuration(8000);\n+            \n+            recorder.setMaxFileSize(5000000); // Approximately 5 megabytes\n+            try {\n+                recorder.prepare(); \n+            } catch (IOException e) {\n+                e.printStackTrace();\n+                finish();\n+            }\n+            \n+        }\n+        \n+\tprivate void onClick() {\n+\t\tactivate = (Button) findViewById(R.id.activate);\n+\t\tfinal Button deactivate = (Button) findViewById(R.id.deactivate);\n+\t\tfinal Button settings = (Button) findViewById(R.id.settings);\n+\t\tfinal TextView timer = (TextView) findViewById(R.id.timer);\n+\t\tactivate.setOnClickListener(new OnClickListener() {\n+            public void onClick(View v) { \n+            \tactivate.setVisibility(View.INVISIBLE);\n+            \tif(voice != null){\n+            \t\tvoice.recognizer.destroy();\n+            \t\tvoice = null;\n+            \t}\n+            \tdeactivate.setVisibility(View.VISIBLE);\n+            \ttimer.setVisibility(View.VISIBLE);\n+            \tsettings.setVisibility(View.INVISIBLE);\n+            \tcheckRecording();\n+            \tstartAlert();\n+            }\n+        });\n+\t\t\n+\t\tdeactivate.setOnClickListener(new OnClickListener() {\n+            public void onClick(View v) { \n+            \tdialog.showDialog();\n+            } \n+        });\n+\t\t\n+\t\tsettings.setOnClickListener(new OnClickListener() {\n+            public void onClick(View v) {  \n+            \tlocManager.removeUpdates(locListener);\n+            \tif(voice != null){\n+            \t\tvoice.recognizer.destroy();\n+            \t\tvoice = null;\n+            \t}\n+            \tIntent settings = new Intent(getBaseContext(), Settings.class);\n+            \tsettings.putExtra(\"value\", videoNum);\n+            \tonDestroy();\n+        \t\tstartActivity(settings);\n+            }\n+        });\n+\t}\n+\t\n+\tprivate void startAlert() {\n+\t\tfinal Button activate = (Button) findViewById(R.id.activate);\n+\t\tfinal Button deactivate = (Button) findViewById(R.id.deactivate);\n+\t\tfinal Button settings = (Button) findViewById(R.id.settings);\n+\t\tfinal TextView timer = (TextView) findViewById(R.id.timer);\n+\t\tCountDownTimer start = new CountDownTimer(10000,1000){\n+\n+            @Override\n+            public void onTick(long miliseconds){\n+            \tif(miliseconds/1000 >= 0 && dialog.check()!=true){\n+            \t\tString val = getResources().getString(R.string.seconds_remaining);\n+            \t\ttimer.setText(val +(miliseconds/1000));\n+            \t}\n+            \tif(dialog.check()==true){\n+            \t\ttimer.setText(R.string.send_has_been_deactivated);\n+            \t}\n+            \tmatch = dialog.check();\n+            \tif(match == true&&timerNum==0){\n+            \t\tcheckRecording();\n+            \t\tToast.makeText(getApplicationContext(), R.string.information_not_sent_, 5000).show();\n+            \t}\n+            }\n+\n+            @Override\n+            public void onFinish(){\n+            \tfinal String loc = db.getLocation();\n+            \tfinal String[] personalInfo = db.getPersonalDetails();\n+            \tfinal Cursor contacts = db.getContacts();\n+            \t\n+            \tif(match == false){\n+            \t\tresetVoiceRecognition();\n+            \t\tsendSms(loc);\n+            \t\tcheckRecording();\n+            \t\t\tif(db.hasGmail()){\n+            \t\t\t\tThread s = new Thread(new Runnable(){\n+            \t\t\t\n+        \t\t\t\t\t\tpublic void run() {\n+        \t\t\t\t\t\t\tString args[] = db.getGmail();\n+                    \t\t\t\tGmailSender sender = new GmailSender(args[0], args[1]);\n+                    \t\t\t\t\n+                    \t\t\t\tCursor c = db.getEmailContacts();\n+                    \t\t\t\twhile(c.moveToNext()){\n+                    \t\t\t\t\ttry {\n+\n+                \t\t\t\t\t\t\tLog.e(args[0], args[1]);\n+\t\t\t\t\t\t\t\t\t\t\tsender.sendMail(loc, args[0], c.getString(c.getColumnIndex(\"emailAddress\")));\n+\t\t\t\t\t\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\t\t\t\t\t\tLog.e(\"SendMail\", e.getMessage(), e);\n+\t\t\t\t\t\t\t\t\t\t} \n+                    \t\t\t\t}\n+        \t\t\t\t\t\t}\n+                    \t\t\t\n+                    \t\t}); \n+                    \t\ts.start();\n+                    \t\t\n+            \t\t\t\t\n+            \t\t\t}\n+            \t\tToast.makeText(getApplicationContext(), \"Information sent\", 5000).show();\n+            \t}\n+            }\n+        }.start();\n+\t}\n+\t\n+\tpublic void resetVoiceRecognition(){\n+\t\tif(db.getActivationState().equals(\"ON\")){\n+\t\t\tLog.e(\"is\", \"Is on\");\n+\t\t\tvoice = new VoiceRecognition(context);\n+\t\t}\n+\t}\n+\t\n+\tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n+\t    if (keyCode == KeyEvent.KEYCODE_BACK ||keyCode == KeyEvent.KEYCODE_HOME) {\n+\t    \tButton activate = (Button) findViewById(R.id.activate);\n+\t    \tif(activate.getVisibility() == View.VISIBLE){\n+\t    \t\tmoveTaskToBack(true);\n+\t    \t\tonDestroy();\n+\t            return true;\n+\t    \t}\n+\t    \treturn true;\n+\t    }\n+\n+\t    return super.onKeyDown(keyCode, event);\n+\t}\n+\t\n+\tprivate void sendSms(String location){\n+\t\tsms = new Intent(this, SMS.class);\n+\t\tsms.putExtra(\"location\", location);\n+    \tthis.startService(sms);\n+\t}\n+\t\n+\tprivate void createGpsIntent() {\n+\t\tString l = db.getLocation();\n+\t\tif(l == null){\n+\t\t\tdb.addLocation(\"No Value\");\n+\t\t}\n+\t\tlocManager = (LocationManager)getSystemService(Context.LOCATION_SERVICE);\n+\t\tCriteria criteria = new Criteria();\n+\t\tString provider = locManager.getBestProvider(criteria, false);\n+\t\tlocManager.getLastKnownLocation(provider);\n+\t\tlocListener = new MyLocationListener(this);\n+\t\tlocManager.requestLocationUpdates( LocationManager.GPS_PROVIDER, 1000, 2, locListener);\n+\t}\n+\n+\n+\tpublic void surfaceChanged(SurfaceHolder holder, int format, int width,\n+\t\t\tint height) {\n+\t\t\n+\t}\n+\n+\tpublic void checkRecording() {\n+\t    if (recording) {\n+\t    \trecorder.stop();\n+\t    \trecording = false;\n+\t    \tvideoNum = videoNum+1;\n+\t    \ttimerNum = timerNum+1;\n+\t        // Let's initRecorder so we can record again\n+\t       // initRecorder();\n+\t        Intent camera = new Intent(this, CameraView.class);\n+\t        camera.putExtra(\"value\", videoNum);\n+\t        super.finish();\n+\t        startActivity(camera);\n+\t    } else {\n+\t    \tinitRecorder();\n+\t        recording = true;\n+\t        recorder.start();\n+\t    }\n+\t}\n+\n+\tpublic void surfaceCreated(SurfaceHolder holder) {\n+\t\t\n+\t}\n+\n+\tpublic void surfaceDestroyed(SurfaceHolder holder) { \n+\t    if (recording) {\n+\t        recorder.stop();\n+\t        recording = false;\n+\t    }\n+\t    recorder.release();\n+\t    finish();\n+\t}\n+\t\t\n+\tpublic void onDestroy(){\n+\t\tsuper.onDestroy();\n+\t\ttry{\n+\t\t\tthis.stopService(sms);\n+\t\t}catch(Exception e){}\n+\t\ttry{\n+\t\t\tvoice.recognizer.destroy();\n+\t\t}catch(Exception e){}\n+\t\tif(locManager != null){\n+\t\t\tlocManager.removeUpdates(locListener);\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\n+}"], "score": 1.0, "methods_t": ["AlertDialog.Builder CountDownTimer Criteria Database DeactivateDialog DialogInterface.OnClickListener GmailSender Intent MediaRecorder MyLocationListener OnClickListener Runnable Thread VoiceRecognition addCallback addFlags addLocation check checkGPS checkRecording create createDialog createGpsIntent destroy e equals findViewById finish get getActivationState getApplicationContext getBaseContext getBestProvider getColumnIndex getContacts getEmailContacts getExtras getGmail getHolder getInt getIntent getLastKnownLocation getLocation getMessage getPersonalDetails getResources getString getSurface getSystemService getVisibility getWindow hasGmail initRecorder isProviderEnabled makeText moveTaskToBack moveToNext onClick onDestroy prepare printStackTrace putExtra release removeUpdates requestLocationUpdates requestWindowFeature reset resetVoiceRecognition sendMail sendSms setAudioSource setContentView setFlags setMaxDuration setMaxFileSize setNegativeButton setOnClickListener setOutputFile setPositiveButton setPreviewDisplay setProfile setRequestedOrientation setText setTitle setType setVideoSource setVisibility show showDialog start startActivity startActivityForResult startAlert startService stop stopService"], "_version_": 1526740699652816896, "subject_t": ["Pushing up attack application project on to repo"], "comments_t": ["\t        // Let's initRecorder so we can record again \t       // initRecorder();                 //sets the view to the surface_view.xml file.             recorder.setMaxFileSize(5000000); // Approximately 5 megabytes"], "callsites_t": ["android.app.Activity.findViewById(<unknown>) android.content.Intent.Intent(com.attack.android.CameraView, java.lang.Class) android.view.View.setOnClickListener() android.database.Cursor.getString(int) android.content.ContextWrapper.getApplicationContext() android.app.Activity.getWindow() android.media.CamcorderProfile.get(int) com.attack.android.CameraView.resetVoiceRecognition() android.view.ContextThemeWrapper.getResources() <unknown>.getContacts() android.media.MediaRecorder.start() .CountDownTimer(int, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.startActivity(android.content.Intent) <unknown>.sendMail(java.lang.String, java.lang.String, java.lang.String) android.database.Cursor.getColumnIndex(java.lang.String) <unknown>.destroy() android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, ) android.database.Cursor.moveToNext() com.attack.android.CameraView.startAlert() android.widget.TextView.setText(java.lang.String) android.widget.Toast.makeText(android.content.Context, <unknown>, int) android.content.Intent.putExtra(java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.setRequestedOrientation(int) java.lang.Thread.Thread() android.media.MediaRecorder.release() <unknown>.Database(com.attack.android.CameraView) android.view.SurfaceHolder.addCallback(com.attack.android.CameraView) .DialogInterface.OnClickListener() <unknown>.getLocation() android.media.MediaRecorder.stop() android.view.SurfaceHolder.getSurface() <unknown>.getPersonalDetails() android.app.Activity.getSystemService(java.lang.String) android.util.Log.e(java.lang.String, java.lang.String, java.lang.Exception) android.view.View.setVisibility(int) android.util.Log.e(java.lang.String, java.lang.String) android.location.LocationManager.getLastKnownLocation(java.lang.String) android.app.Activity.getIntent() android.view.View.setVisibility(int) android.app.Activity.finish() android.media.MediaRecorder.MediaRecorder() android.location.Criteria.Criteria() <unknown>.getLocation() android.location.LocationManager.getBestProvider(android.location.Criteria, boolean) android.media.MediaRecorder.setVideoSource(int) <unknown>.showDialog() android.view.SurfaceView.getHolder() <unknown>.show() .OnClickListener() android.content.ContextWrapper.startService(android.content.Intent) android.media.MediaRecorder.reset() <unknown>.getGmail() <unknown>.MyLocationListener(com.attack.android.CameraView) com.attack.android.CameraView.resetVoiceRecognition() android.content.Intent.putExtra(java.lang.String, int) android.view.Window.addFlags(int) android.media.MediaRecorder.setOutputFile(java.lang.String) android.view.View.setOnClickListener() com.attack.android.CameraView.onDestroy() android.content.Intent.putExtra(java.lang.String, java.lang.String) android.location.LocationManager.removeUpdates(android.location.LocationListener) android.app.Activity.findViewById(<unknown>) com.attack.android.CameraView.checkRecording() android.app.Activity.finish() java.lang.Thread.start() android.view.SurfaceHolder.setType(int) <unknown>.check() android.content.ContextWrapper.getBaseContext() android.app.AlertDialog.Builder.setPositiveButton(<unknown>, ) android.content.res.Resources.getString(<unknown>) android.media.MediaRecorder.setMaxDuration(int) <unknown>.GmailSender(java.lang.String, java.lang.String) android.location.LocationManager.removeUpdates(android.location.LocationListener) <unknown>.hasGmail() <unknown>.equals(java.lang.String) android.media.MediaRecorder.setPreviewDisplay(android.view.Surface) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.util.Log.e(java.lang.String, java.lang.String) com.attack.android.CameraView.initRecorder() android.app.Activity.setContentView(<unknown>) android.view.Window.setFlags(int, int) <unknown>.DeactivateDialog(android.content.Context) android.app.AlertDialog.Builder.AlertDialog.Builder(com.attack.android.CameraView) android.app.Activity.findViewById(<unknown>) android.app.AlertDialog.Builder.setTitle(<unknown>) .Runnable() android.view.View.getVisibility() android.widget.TextView.setText(<unknown>) com.attack.android.CameraView.onClick() android.app.AlertDialog.Builder.show() android.os.Bundle.getInt(java.lang.String) com.attack.android.CameraView.createGpsIntent() android.content.Intent.getExtras() com.attack.android.CameraView.checkRecording() <unknown>.addLocation(java.lang.String) <unknown>.getActivationState() android.widget.Toast.show() android.widget.Toast.makeText(android.content.Context, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.media.MediaRecorder.stop() android.app.Activity.getSystemService(java.lang.String) java.lang.Throwable.printStackTrace() <unknown>.getEmailContacts() android.location.LocationManager.requestLocationUpdates(java.lang.String, int, int, android.location.LocationListener) android.media.MediaRecorder.prepare() android.app.Activity.moveTaskToBack(boolean) android.app.Activity.requestWindowFeature(int) <unknown>.VoiceRecognition(android.content.Context) android.content.Intent.Intent(java.lang.String) android.app.Activity.startActivityForResult(android.content.Intent, int) com.attack.android.CameraView.checkGPS() android.content.ContextWrapper.stopService(android.content.Intent) android.os.CountDownTimer.start() android.app.Activity.findViewById(<unknown>) android.content.ContextWrapper.getApplicationContext() android.app.Activity.findViewById(<unknown>) android.media.MediaRecorder.setProfile(android.media.CamcorderProfile) android.content.Intent.Intent(android.content.Context, java.lang.Class) android.app.AlertDialog.Builder.create() java.lang.Throwable.getMessage() com.attack.android.CameraView.sendSms(java.lang.String) com.attack.android.CameraView.onDestroy() android.location.LocationManager.isProviderEnabled(java.lang.String) <unknown>.destroy() android.media.MediaRecorder.setAudioSource(int) com.attack.android.CameraView.createDialog() android.app.Activity.startActivity(android.content.Intent) android.view.View.setOnClickListener() android.app.Activity.findViewById(<unknown>) com.attack.android.CameraView.checkRecording() android.media.MediaRecorder.setMaxFileSize(int) android.app.Activity.findViewById(<unknown>) android.content.Intent.Intent(com.attack.android.CameraView, java.lang.Class)"], "id": "anthonylynch90/Android_Attack_app\u0000bebf2c2261013f3bb323ff4314cc8f8a200fd466\u0000src/com/attack/android/CameraView.java", "callsites_cs": "android.app.Activity.findViewById(<unknown>)#android.content.Intent.Intent(com.attack.android.CameraView, java.lang.Class)#android.view.View.setOnClickListener()#android.database.Cursor.getString(int)#android.content.ContextWrapper.getApplicationContext()#android.app.Activity.getWindow()#android.media.CamcorderProfile.get(int)#com.attack.android.CameraView.resetVoiceRecognition()#android.view.ContextThemeWrapper.getResources()#<unknown>.getContacts()#android.media.MediaRecorder.start()#.CountDownTimer(int, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.startActivity(android.content.Intent)#<unknown>.sendMail(java.lang.String, java.lang.String, java.lang.String)#android.database.Cursor.getColumnIndex(java.lang.String)#<unknown>.destroy()#android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, )#android.database.Cursor.moveToNext()#com.attack.android.CameraView.startAlert()#android.widget.TextView.setText(java.lang.String)#android.widget.Toast.makeText(android.content.Context, <unknown>, int)#android.content.Intent.putExtra(java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.setRequestedOrientation(int)#java.lang.Thread.Thread()#android.media.MediaRecorder.release()#<unknown>.Database(com.attack.android.CameraView)#android.view.SurfaceHolder.addCallback(com.attack.android.CameraView)#.DialogInterface.OnClickListener()#<unknown>.getLocation()#android.media.MediaRecorder.stop()#android.view.SurfaceHolder.getSurface()#<unknown>.getPersonalDetails()#android.app.Activity.getSystemService(java.lang.String)#android.util.Log.e(java.lang.String, java.lang.String, java.lang.Exception)#android.view.View.setVisibility(int)#android.util.Log.e(java.lang.String, java.lang.String)#android.location.LocationManager.getLastKnownLocation(java.lang.String)#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.media.MediaRecorder.MediaRecorder()#android.location.Criteria.Criteria()#<unknown>.getLocation()#android.location.LocationManager.getBestProvider(android.location.Criteria, boolean)#android.media.MediaRecorder.setVideoSource(int)#<unknown>.showDialog()#android.view.SurfaceView.getHolder()#<unknown>.show()#.OnClickListener()#android.content.ContextWrapper.startService(android.content.Intent)#android.media.MediaRecorder.reset()#<unknown>.getGmail()#<unknown>.MyLocationListener(com.attack.android.CameraView)#com.attack.android.CameraView.resetVoiceRecognition()#android.content.Intent.putExtra(java.lang.String, int)#android.view.Window.addFlags(int)#android.media.MediaRecorder.setOutputFile(java.lang.String)#android.view.View.setOnClickListener()#com.attack.android.CameraView.onDestroy()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#android.location.LocationManager.removeUpdates(android.location.LocationListener)#android.app.Activity.findViewById(<unknown>)#com.attack.android.CameraView.checkRecording()#android.app.Activity.finish()#java.lang.Thread.start()#android.view.SurfaceHolder.setType(int)#<unknown>.check()#android.content.ContextWrapper.getBaseContext()#android.app.AlertDialog.Builder.setPositiveButton(<unknown>, )#android.content.res.Resources.getString(<unknown>)#android.media.MediaRecorder.setMaxDuration(int)#<unknown>.GmailSender(java.lang.String, java.lang.String)#android.location.LocationManager.removeUpdates(android.location.LocationListener)#<unknown>.hasGmail()#<unknown>.equals(java.lang.String)#android.media.MediaRecorder.setPreviewDisplay(android.view.Surface)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.util.Log.e(java.lang.String, java.lang.String)#com.attack.android.CameraView.initRecorder()#android.app.Activity.setContentView(<unknown>)#android.view.Window.setFlags(int, int)#<unknown>.DeactivateDialog(android.content.Context)#android.app.AlertDialog.Builder.AlertDialog.Builder(com.attack.android.CameraView)#android.app.Activity.findViewById(<unknown>)#android.app.AlertDialog.Builder.setTitle(<unknown>)#.Runnable()#android.view.View.getVisibility()#android.widget.TextView.setText(<unknown>)#com.attack.android.CameraView.onClick()#android.app.AlertDialog.Builder.show()#android.os.Bundle.getInt(java.lang.String)#com.attack.android.CameraView.createGpsIntent()#android.content.Intent.getExtras()#com.attack.android.CameraView.checkRecording()#<unknown>.addLocation(java.lang.String)#<unknown>.getActivationState()#android.widget.Toast.show()#android.widget.Toast.makeText(android.content.Context, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.media.MediaRecorder.stop()#android.app.Activity.getSystemService(java.lang.String)#java.lang.Throwable.printStackTrace()#<unknown>.getEmailContacts()#android.location.LocationManager.requestLocationUpdates(java.lang.String, int, int, android.location.LocationListener)#android.media.MediaRecorder.prepare()#android.app.Activity.moveTaskToBack(boolean)#android.app.Activity.requestWindowFeature(int)#<unknown>.VoiceRecognition(android.content.Context)#android.content.Intent.Intent(java.lang.String)#android.app.Activity.startActivityForResult(android.content.Intent, int)#com.attack.android.CameraView.checkGPS()#android.content.ContextWrapper.stopService(android.content.Intent)#android.os.CountDownTimer.start()#android.app.Activity.findViewById(<unknown>)#android.content.ContextWrapper.getApplicationContext()#android.app.Activity.findViewById(<unknown>)#android.media.MediaRecorder.setProfile(android.media.CamcorderProfile)#android.content.Intent.Intent(android.content.Context, java.lang.Class)#android.app.AlertDialog.Builder.create()#java.lang.Throwable.getMessage()#com.attack.android.CameraView.sendSms(java.lang.String)#com.attack.android.CameraView.onDestroy()#android.location.LocationManager.isProviderEnabled(java.lang.String)#<unknown>.destroy()#android.media.MediaRecorder.setAudioSource(int)#com.attack.android.CameraView.createDialog()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setOnClickListener()#android.app.Activity.findViewById(<unknown>)#com.attack.android.CameraView.checkRecording()#android.media.MediaRecorder.setMaxFileSize(int)#android.app.Activity.findViewById(<unknown>)#android.content.Intent.Intent(com.attack.android.CameraView, java.lang.Class)"}, {"user_sni": "kingws", "repo_sni": "CardinalNow/Android-CountdownTimer", "imports_t": ["android.view.animation.RotateAnimation android.os.CountDownTimer android.text.format.Time android.view.animation.Animation com.todddavies.components.progressbar.ProgressWheel android.app.Activity android.os.Bundle android.widget.TextView"], "email_sni": "king.wshane@gmail.com", "contents_t": ["package com.cardinalsolutions.countdowntimer;\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.text.format.Time;\nimport android.view.animation.Animation;\nimport android.view.animation.RotateAnimation;\nimport android.widget.TextView;\nimport com.todddavies.components.progressbar.ProgressWheel;\n\n/**\n * Countdown Timer\n *\n * CountdownTimerActivity is the main activity of this application.  To configure  is a utility class that allows the developer to turn off logging by setting the LOGGING\n * flag to false prior to generating an APK.\n *\n * @author Shane King\n *         28 Aug 2014\n *         10:00\n */\npublic class CountdownTimerActivity extends Activity {\n\n\tprivate static final String TAG = \"CountdownTimer\";\n\n\tprivate TextView mCountdownNote;\n\tprivate ProgressWheel mDaysWheel;\n\tprivate TextView mDaysLabel;\n\tprivate ProgressWheel mHoursWheel;\n\tprivate TextView mHoursLabel;\n\tprivate ProgressWheel mMinutesWheel;\n\tprivate TextView mMinutesLabel;\n\tprivate ProgressWheel mSecondsWheel;\n\tprivate TextView mSecondsLabel;\n\n\t// Timer setup\n\tTime conferenceTime = new Time(Time.getCurrentTimezone());\n\tint hour = 22;\n\tint minute = 33;\n\tint second = 0;\n\tint monthDay = 28;\n\t// month is zero based...7 == August\n\tint month = 7;\n\tint year;\n\n\t// Values displayed by the timer\n\tprivate int mDisplayDays;\n\tprivate int mDisplayHours;\n\tprivate int mDisplayMinutes;\n\tprivate int mDisplaySeconds;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_countdown_timer);\n\n\t\tconfigureViews();\n\t\tconfigureConferenceDate();\n\n\t}\n\n\tprivate void configureViews() {\n\t\t\n\t\tthis.conferenceTime.setToNow();\n\t\tthis.year = conferenceTime.year;\n\n\t\tthis.mCountdownNote = (TextView) findViewById(R.id.activity_countdown_timer_note);\n\t\tthis.mDaysWheel = (ProgressWheel) findViewById(R.id.activity_countdown_timer_days);\n\t\tthis.mHoursWheel = (ProgressWheel) findViewById(R.id.activity_countdown_timer_hours);\n\t\tthis.mMinutesWheel = (ProgressWheel) findViewById(R.id.activity_countdown_timer_minutes);\n\t\tthis.mSecondsWheel = (ProgressWheel) findViewById(R.id.activity_countdown_timer_seconds);\n\t\tthis.mDaysLabel = (TextView) findViewById(R.id.activity_countdown_timer_days_text);\n\t\tthis.mHoursLabel = (TextView) findViewById(R.id.activity_countdown_timer_hours_text);\n\t\tthis.mMinutesLabel = (TextView) findViewById(R.id.activity_countdown_timer_minutes_text);\n\t\tthis.mSecondsLabel = (TextView) findViewById(R.id.activity_countdown_timer_seconds_text);\n\n\t}\n\n\tprivate void configureConferenceDate() {\n\t\tconferenceTime.set(second, minute, hour, monthDay, month, year);\n\t\tconferenceTime.normalize(true);\n\t\tlong confMillis = conferenceTime.toMillis(true);\n\n\t\tTime nowTime = new Time(Time.getCurrentTimezone());\n\t\tnowTime.setToNow();\n\t\tnowTime.normalize(true);\n\t\tlong nowMillis = nowTime.toMillis(true);\n\n\t\tlong milliDiff = confMillis - nowMillis;\n\n\t\tnew CountDownTimer(milliDiff, 1000) {\n\n\t\t\t@Override\n\t\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\t\t// decompose difference into days, hours, minutes and seconds\n\t\t\t\tCountdownTimerActivity.this.mDisplayDays = (int) ((millisUntilFinished / 1000) / 86400);\n\t\t\t\tCountdownTimerActivity.this.mDisplayHours = (int) (((millisUntilFinished / 1000) - (CountdownTimerActivity.this.mDisplayDays * 86400)) / 3600);\n\t\t\t\tCountdownTimerActivity.this.mDisplayMinutes = (int) (((millisUntilFinished / 1000) - ((CountdownTimerActivity.this.mDisplayDays * 86400) + (CountdownTimerActivity.this.mDisplayHours * 3600))) / 60);\n\t\t\t\tCountdownTimerActivity.this.mDisplaySeconds = (int) ((millisUntilFinished / 1000) % 60);\n\n\t\t\t\tCountdownTimerActivity.this.mDaysWheel.setText(String.valueOf(CountdownTimerActivity.this.mDisplayDays));\n\t\t\t\tCountdownTimerActivity.this.mDaysWheel.setProgress(CountdownTimerActivity.this.mDisplayDays);\n\n\t\t\t\tCountdownTimerActivity.this.mHoursWheel.setText(String.valueOf(CountdownTimerActivity.this.mDisplayHours));\n\t\t\t\tCountdownTimerActivity.this.mHoursWheel.setProgress(CountdownTimerActivity.this.mDisplayHours * 15);\n\n\t\t\t\tCountdownTimerActivity.this.mMinutesWheel.setText(String.valueOf(CountdownTimerActivity.this.mDisplayMinutes));\n\t\t\t\tCountdownTimerActivity.this.mMinutesWheel.setProgress(CountdownTimerActivity.this.mDisplayMinutes * 6);\n\n\t\t\t\tAnimation an = new RotateAnimation(0.0f, 90.0f, 250f, 273f);\n\t\t\t\tan.setFillAfter(true);\n\n\t\t\t\tCountdownTimerActivity.this.mSecondsWheel.setText(String.valueOf(CountdownTimerActivity.this.mDisplaySeconds));\n\t\t\t\tCountdownTimerActivity.this.mSecondsWheel.setProgress(CountdownTimerActivity.this.mDisplaySeconds * 6);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onFinish() {\n\t\t\t\t//TODO: this is where you would launch a subsequent activity if you'd like.  I'm currently just setting the seconds to zero\n\t\t\t\tLogger.d(TAG, \"Timer Finished...\");\n\t\t\t\tCountdownTimerActivity.this.mSecondsWheel.setText(\"0\");\n\t        \t\tCountdownTimerActivity.this.mSecondsWheel.setProgress(0);\n\t\t\t}\n\t\t}.start();\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2015-06-15T20:26:41Z", "hash_sni": "32fd6a437b80c8b97468b5c0ee423f2d9525f4cf", "name_sni": "app/src/main/java/com/cardinalsolutions/countdowntimer/CountdownTimerActivity.java", "patch_t": [" \tint monthDay = 28;\n \t// month is zero based...7 == August\n \tint month = 7;\n-\tint year = conferenceTime.year;\n+\tint year;\n \n \t// Values displayed by the timer\n \tprivate int mDisplayDays;\n@@ -59,6 +59,9 @@ public class CountdownTimerActivity extends Activity {\n \t}\n \n \tprivate void configureViews() {\n+\t\t\n+\t\tthis.conferenceTime.setToNow();\n+\t\tthis.year = conferenceTime.year;\n \n \t\tthis.mCountdownNote = (TextView) findViewById(R.id.activity_countdown_timer_note);\n \t\tthis.mDaysWheel = (ProgressWheel) findViewById(R.id.activity_countdown_timer_days);\n@@ -72,14 +75,6 @@ public class CountdownTimerActivity extends Activity {\n \n \t}\n \n-\tprivate void closeActivity() {\n-\t\t// Start your subsequent activity here.  Increasing year so timer will never go away for\n-\t\t// demo purposes only.  Remove next 2 lines of code in your app!!\n-\t\tyear = year + 1;\n-\t\tconfigureConferenceDate();\n-\n-\t}\n-\n \tprivate void configureConferenceDate() {\n \t\tconferenceTime.set(second, minute, hour, monthDay, month, year);\n \t\tconferenceTime.normalize(true);\n@@ -120,9 +115,10 @@ public class CountdownTimerActivity extends Activity {\n \n \t\t\t@Override\n \t\t\tpublic void onFinish() {\n+\t\t\t\t//TODO: this is where you would launch a subsequent activity if you'd like.  I'm currently just setting the seconds to zero\n \t\t\t\tLogger.d(TAG, \"Timer Finished...\");\n-\t\t\t\t// This is where you would launch the activity for \n-\t\t\t\tcloseActivity();\n+\t\t\t\tCountdownTimerActivity.this.mSecondsWheel.setText(\"0\");\n+\t        \t\tCountdownTimerActivity.this.mSecondsWheel.setProgress(0);\n \t\t\t}\n \t\t}.start();\n \t}"], "score": 1.0, "methods_t": ["CountDownTimer RotateAnimation Time configureConferenceDate configureViews d findViewById getCurrentTimezone normalize set setContentView setFillAfter setProgress setText setToNow start toMillis valueOf"], "_version_": 1526740583692894208, "subject_t": ["- fixing bug in year value"], "comments_t": ["\t\t\t\t// decompose difference into days, hours, minutes and seconds /** \n * Countdown Timer CountdownTimerActivity is the main activity of this application.  To configure  is a utility class that allows the developer to turn off logging by setting the LOGGING flag to false prior to generating an APK.\n * @author Shane King28 Aug 2014 10:00\n */\n \t// month is zero based...7 == August \t// Values displayed by the timer \t\t\t\t//TODO: this is where you would launch a subsequent activity if you'd like.  I'm currently just setting the seconds to zero \t// Timer setup"], "parents_ss": ["ee94a68b44876147d209e589574ac5612c749e74"], "id": "CardinalNow/Android-CountdownTimer\u000032fd6a437b80c8b97468b5c0ee423f2d9525f4cf\u0000app/src/main/java/com/cardinalsolutions/countdowntimer/CountdownTimerActivity.java", "callsites_cs": "android.text.format.Time.Time(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.setText(java.lang.String)#<unknown>.setText(java.lang.String)#android.text.format.Time.toMillis(boolean)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#.CountDownTimer(long, int)#<unknown>.setProgress(int)#android.view.animation.Animation.setFillAfter(boolean)#android.text.format.Time.setToNow()#android.text.format.Time.normalize(boolean)#java.lang.String.valueOf(int)#<unknown>.setText(java.lang.String)#android.text.format.Time.set(int, int, int, int, int, int)#java.lang.String.valueOf(int)#android.text.format.Time.normalize(boolean)#<unknown>.setText(java.lang.String)#<unknown>.setProgress(int)#java.lang.String.valueOf(int)#<unknown>.d(java.lang.String, java.lang.String)#android.text.format.Time.getCurrentTimezone()#com.cardinalsolutions.countdowntimer.CountdownTimerActivity.configureViews()#com.cardinalsolutions.countdowntimer.CountdownTimerActivity.configureConferenceDate()#android.text.format.Time.toMillis(boolean)#java.lang.String.valueOf(int)#<unknown>.setText(java.lang.String)#android.view.animation.RotateAnimation.RotateAnimation(float, float, float, float)#<unknown>.setProgress(int)#android.app.Activity.setContentView(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.text.format.Time.setToNow()#android.os.CountDownTimer.start()#<unknown>.setProgress(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.setProgress(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.text.format.Time.Time(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.text.format.Time.getCurrentTimezone()", "callsites_t": ["android.text.format.Time.Time(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.setText(java.lang.String) <unknown>.setText(java.lang.String) android.text.format.Time.toMillis(boolean) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) .CountDownTimer(long, int) <unknown>.setProgress(int) android.view.animation.Animation.setFillAfter(boolean) android.text.format.Time.setToNow() android.text.format.Time.normalize(boolean) java.lang.String.valueOf(int) <unknown>.setText(java.lang.String) android.text.format.Time.set(int, int, int, int, int, int) java.lang.String.valueOf(int) android.text.format.Time.normalize(boolean) <unknown>.setText(java.lang.String) <unknown>.setProgress(int) java.lang.String.valueOf(int) <unknown>.d(java.lang.String, java.lang.String) android.text.format.Time.getCurrentTimezone() com.cardinalsolutions.countdowntimer.CountdownTimerActivity.configureViews() com.cardinalsolutions.countdowntimer.CountdownTimerActivity.configureConferenceDate() android.text.format.Time.toMillis(boolean) java.lang.String.valueOf(int) <unknown>.setText(java.lang.String) android.view.animation.RotateAnimation.RotateAnimation(float, float, float, float) <unknown>.setProgress(int) android.app.Activity.setContentView(<unknown>) android.app.Activity.findViewById(<unknown>) android.text.format.Time.setToNow() android.os.CountDownTimer.start() <unknown>.setProgress(int) android.app.Activity.findViewById(<unknown>) <unknown>.setProgress(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.text.format.Time.Time(java.lang.String) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.text.format.Time.getCurrentTimezone()"]}, {"user_sni": "\u4e66\u5446\u5b50", "repo_sni": "pedant/sweet-alert-dialog", "imports_t": ["android.os.CountDownTimer cn.pedant.SweetAlert.SweetAlertDialog android.os.Bundle android.view.View android.app.Activity"], "email_sni": "yanyuetian@gmail.com", "contents_t": ["package cn.pedant.SweetAlert.sample;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.View;\n\nimport cn.pedant.SweetAlert.SweetAlertDialog;\n\npublic class SampleActivity extends Activity implements View.OnClickListener {\n\n    private int i = -1;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.sample_activity);\n        findViewById(R.id.basic_test).setOnClickListener(this);\n        findViewById(R.id.under_text_test).setOnClickListener(this);\n        findViewById(R.id.error_text_test).setOnClickListener(this);\n        findViewById(R.id.success_text_test).setOnClickListener(this);\n        findViewById(R.id.warning_confirm_test).setOnClickListener(this);\n        findViewById(R.id.warning_cancel_test).setOnClickListener(this);\n        findViewById(R.id.custom_img_test).setOnClickListener(this);\n        findViewById(R.id.progress_dialog).setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.basic_test:\n                // default title \"Here's a message!\"\n                SweetAlertDialog sd = new SweetAlertDialog(this);\n                sd.setCancelable(true);\n                sd.setCanceledOnTouchOutside(true);\n                sd.show();\n                break;\n            case R.id.under_text_test:\n                new SweetAlertDialog(this)\n                        .setContentText(\"It's pretty, isn't it?\")\n                        .show();\n                break;\n            case R.id.error_text_test:\n                new SweetAlertDialog(this, SweetAlertDialog.ERROR_TYPE)\n                        .setTitleText(\"Oops...\")\n                        .setContentText(\"Something went wrong!\")\n                        .show();\n                break;\n            case R.id.success_text_test:\n                new SweetAlertDialog(this, SweetAlertDialog.SUCCESS_TYPE)\n                        .setTitleText(\"Good job!\")\n                        .setContentText(\"You clicked the button!\")\n                        .show();\n                break;\n            case R.id.warning_confirm_test:\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\n                        .setTitleText(\"Are you sure?\")\n                        .setContentText(\"Won't be able to recover this file!\")\n                        .setConfirmText(\"Yes,delete it!\")\n                        .setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {\n                        @Override\n                        public void onClick(SweetAlertDialog sDialog) {\n                            // reuse previous dialog instance\n                            sDialog.setTitleText(\"Deleted!\")\n                                    .setContentText(\"Your imaginary file has been deleted!\")\n                                    .setConfirmText(\"OK\")\n                                    .setConfirmClickListener(null)\n                                    .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);\n                        }\n                        })\n                        .show();\n                break;\n            case R.id.warning_cancel_test:\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\n                        .setTitleText(\"Are you sure?\")\n                        .setContentText(\"Won't be able to recover this file!\")\n                        .setCancelText(\"No,cancel plx!\")\n                        .setConfirmText(\"Yes,delete it!\")\n                        .showCancelButton(true)\n                        .setCancelClickListener(new SweetAlertDialog.OnSweetClickListener() {\n                            @Override\n                            public void onClick(SweetAlertDialog sDialog) {\n                                // reuse previous dialog instance, keep widget user state, reset them if you need\n                                sDialog.setTitleText(\"Cancelled!\")\n                                        .setContentText(\"Your imaginary file is safe :)\")\n                                        .setConfirmText(\"OK\")\n                                        .showCancelButton(false)\n                                        .setCancelClickListener(null)\n                                        .setConfirmClickListener(null)\n                                        .changeAlertType(SweetAlertDialog.ERROR_TYPE);\n\n                                // or you can new a SweetAlertDialog to show\n                               /* sDialog.dismiss();\n                                new SweetAlertDialog(SampleActivity.this, SweetAlertDialog.ERROR_TYPE)\n                                        .setTitleText(\"Cancelled!\")\n                                        .setContentText(\"Your imaginary file is safe :)\")\n                                        .setConfirmText(\"OK\")\n                                        .show();*/\n                            }\n                        })\n                        .setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {\n                            @Override\n                            public void onClick(SweetAlertDialog sDialog) {\n                                sDialog.setTitleText(\"Deleted!\")\n                                        .setContentText(\"Your imaginary file has been deleted!\")\n                                        .setConfirmText(\"OK\")\n                                        .showCancelButton(false)\n                                        .setCancelClickListener(null)\n                                        .setConfirmClickListener(null)\n                                        .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);\n                            }\n                        })\n                        .show();\n                break;\n            case R.id.custom_img_test:\n                new SweetAlertDialog(this, SweetAlertDialog.CUSTOM_IMAGE_TYPE)\n                        .setTitleText(\"Sweet!\")\n                        .setContentText(\"Here's a custom image.\")\n                        .setCustomImage(R.drawable.custom_img)\n                        .show();\n                break;\n            case R.id.progress_dialog:\n                final SweetAlertDialog progressSweetAlertDialog = new SweetAlertDialog(this, SweetAlertDialog.PROGRESS_TYPE)\n                        .setContentText(\"Loading... For ten seconds than close. Every second change color.\")\n                        .spin();\n\n                progressSweetAlertDialog.show();\n                new CountDownTimer(10000, 1000) {\n\n                    public void onTick(long millisUntilFinished) {\n                        i++;\n                        switch (i){\n                            case 0:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.red_btn_bg_color));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.red_btn_bg_color));\n                                break;\n                            case 1:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.blue_btn_bg_color));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.blue_btn_bg_color));\n                                break;\n                            case 2:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.gray_btn_bg_pressed_color));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.gray_btn_bg_pressed_color));\n                                break;\n                            case 3:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_deep_teal_500));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_deep_teal_500));\n                                break;\n                            case 4:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_deep_teal_500));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_deep_teal_500));\n                                break;\n                            case 5:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_blue_grey_950));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_blue_grey_950));\n                                break;\n                            case 6:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_deep_teal_200));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_deep_teal_200));\n                                break;\n                            case 7:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.material_blue_grey_800));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.material_blue_grey_800));\n                                break;\n                            case 8:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.warning_stroke_color));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.warning_stroke_color));\n                                break;\n                            case 9:\n                                progressSweetAlertDialog.setBarColor(getResources().getColor(R.color.success_stroke_color));\n                                progressSweetAlertDialog.setProgressMessageColor(getResources().getColor(R.color.success_stroke_color));\n                                break;\n                        }\n                    }\n\n                    public void onFinish() {\n                        i = -1;\n                        progressSweetAlertDialog.dismissWithAnimation();\n                    }\n                }.start();\n                break;\n        }\n    }\n}\n"], "body_t": ["support progress dialog style"], "date_tdt": "2014-12-04T09:16:02Z", "hash_sni": "388ceb08f17dbf632d65375bea63dde1dcebf333", "name_sni": "sample/src/main/java/cn/pedant/SweetAlert/sample/SampleActivity.java", "patch_t": ["<empty>"], "score": 1.0, "methods_t": ["CountDownTimer SweetAlertDialog SweetAlertDialog.OnSweetClickListener changeAlertType dismissWithAnimation findViewById getColor getId getResources setBarColor setCancelClickListener setCancelText setCancelable setCanceledOnTouchOutside setConfirmClickListener setConfirmText setContentText setContentView setCustomImage setOnClickListener setProgressMessageColor setTitleText show showCancelButton spin start"], "_version_": 1526740892706144256, "subject_t": ["Merge pull request #18 from croccio/master"], "comments_t": ["                                // reuse previous dialog instance, keep widget user state, reset them if you need /* sDialog.dismiss();\nnew SweetAlertDialog(SampleActivity.this, SweetAlertDialog.ERROR_TYPE)\n.setTitleText(\"Cancelled!\")\n.setContentText(\"Your imaginary file is safe :)\")\n.setConfirmText(\"OK\")\n.show();*/\n                                 // or you can new a SweetAlertDialog to show                 // default title \"Here's a message!\"                             // reuse previous dialog instance"], "parents_ss": ["6f1ec4ec8c79b8424ecfe79d161b900a21128e91", "14d531f134a795bc48ac66ac47bab46fb3d2cf26"], "id": "pedant/sweet-alert-dialog\u0000388ceb08f17dbf632d65375bea63dde1dcebf333\u0000sample/src/main/java/cn/pedant/SweetAlert/sample/SampleActivity.java", "callsites_cs": "<unknown>.setProgressMessageColor(<unknown>)#<unknown>.setProgressMessageColor(<unknown>)#<unknown>.setConfirmClickListener(null)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#<unknown>.setTitleText(java.lang.String)#android.content.res.Resources.getColor(<unknown>)#<unknown>.show()#<unknown>.show()#<unknown>.setConfirmClickListener()#<unknown>.setProgressMessageColor(<unknown>)#<unknown>.setTitleText(java.lang.String)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#android.content.res.Resources.getColor(<unknown>)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setTitleText(java.lang.String)#.CountDownTimer(int, int)#android.app.Activity.findViewById(<unknown>)#<unknown>.setTitleText(java.lang.String)#<unknown>.show()#android.content.res.Resources.getColor(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.setConfirmText(java.lang.String)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#android.content.res.Resources.getColor(<unknown>)#<unknown>.setBarColor(<unknown>)#android.content.res.Resources.getColor(<unknown>)#<unknown>.setConfirmText(java.lang.String)#<unknown>.show()#<unknown>.SweetAlertDialog.OnSweetClickListener()#<unknown>.showCancelButton(boolean)#<unknown>.setContentText(java.lang.String)#android.content.res.Resources.getColor(<unknown>)#<unknown>.spin()#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.dismissWithAnimation()#android.app.Activity.findViewById(<unknown>)#<unknown>.showCancelButton(boolean)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#android.view.ContextThemeWrapper.getResources()#android.content.res.Resources.getColor(<unknown>)#android.os.CountDownTimer.start()#<unknown>.showCancelButton(boolean)#<unknown>.setConfirmClickListener(null)#<unknown>.setBarColor(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.setBarColor(<unknown>)#<unknown>.setProgressMessageColor(<unknown>)#<unknown>.setBarColor(<unknown>)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.changeAlertType(<unknown>)#<unknown>.setProgressMessageColor(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.show()#<unknown>.setConfirmText(java.lang.String)#<unknown>.setCancelClickListener(null)#<unknown>.setConfirmText(java.lang.String)#<unknown>.setBarColor(<unknown>)#<unknown>.setProgressMessageColor(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.setProgressMessageColor(<unknown>)#android.content.res.Resources.getColor(<unknown>)#<unknown>.show()#<unknown>.setCustomImage(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.setContentText(java.lang.String)#<unknown>.setBarColor(<unknown>)#<unknown>.setConfirmClickListener()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.setCanceledOnTouchOutside(boolean)#<unknown>.setTitleText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#<unknown>.setProgressMessageColor(<unknown>)#<unknown>.show()#android.app.Activity.findViewById(<unknown>)#<unknown>.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setCancelable(boolean)#<unknown>.setBarColor(<unknown>)#<unknown>.setCancelClickListener(null)#android.app.Activity.findViewById(<unknown>)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#<unknown>.show()#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#android.content.res.Resources.getColor(<unknown>)#<unknown>.setTitleText(java.lang.String)#<unknown>.setProgressMessageColor(<unknown>)#<unknown>.changeAlertType(<unknown>)#<unknown>.setCancelClickListener()#<unknown>.setContentText(java.lang.String)#<unknown>.setCancelText(java.lang.String)#<unknown>.setBarColor(<unknown>)#<unknown>.changeAlertType(<unknown>)#<unknown>.setBarColor(<unknown>)#android.app.Activity.setContentView(<unknown>)#<unknown>.setConfirmClickListener(null)", "callsites_t": ["<unknown>.setProgressMessageColor(<unknown>) <unknown>.setProgressMessageColor(<unknown>) <unknown>.setConfirmClickListener(null) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) <unknown>.setTitleText(java.lang.String) android.content.res.Resources.getColor(<unknown>) <unknown>.show() <unknown>.show() <unknown>.setConfirmClickListener() <unknown>.setProgressMessageColor(<unknown>) <unknown>.setTitleText(java.lang.String) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) android.content.res.Resources.getColor(<unknown>) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setTitleText(java.lang.String) .CountDownTimer(int, int) android.app.Activity.findViewById(<unknown>) <unknown>.setTitleText(java.lang.String) <unknown>.show() android.content.res.Resources.getColor(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.setConfirmText(java.lang.String) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) android.content.res.Resources.getColor(<unknown>) <unknown>.setBarColor(<unknown>) android.content.res.Resources.getColor(<unknown>) <unknown>.setConfirmText(java.lang.String) <unknown>.show() <unknown>.SweetAlertDialog.OnSweetClickListener() <unknown>.showCancelButton(boolean) <unknown>.setContentText(java.lang.String) android.content.res.Resources.getColor(<unknown>) <unknown>.spin() <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.dismissWithAnimation() android.app.Activity.findViewById(<unknown>) <unknown>.showCancelButton(boolean) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) android.view.ContextThemeWrapper.getResources() android.content.res.Resources.getColor(<unknown>) android.os.CountDownTimer.start() <unknown>.showCancelButton(boolean) <unknown>.setConfirmClickListener(null) <unknown>.setBarColor(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.setBarColor(<unknown>) <unknown>.setProgressMessageColor(<unknown>) <unknown>.setBarColor(<unknown>) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.changeAlertType(<unknown>) <unknown>.setProgressMessageColor(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.show() <unknown>.setConfirmText(java.lang.String) <unknown>.setCancelClickListener(null) <unknown>.setConfirmText(java.lang.String) <unknown>.setBarColor(<unknown>) <unknown>.setProgressMessageColor(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.setProgressMessageColor(<unknown>) android.content.res.Resources.getColor(<unknown>) <unknown>.show() <unknown>.setCustomImage(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.setContentText(java.lang.String) <unknown>.setBarColor(<unknown>) <unknown>.setConfirmClickListener() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.setCanceledOnTouchOutside(boolean) <unknown>.setTitleText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.view.View.getId() java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) <unknown>.setProgressMessageColor(<unknown>) <unknown>.show() android.app.Activity.findViewById(<unknown>) <unknown>.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setCancelable(boolean) <unknown>.setBarColor(<unknown>) <unknown>.setCancelClickListener(null) android.app.Activity.findViewById(<unknown>) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) <unknown>.show() <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) android.content.res.Resources.getColor(<unknown>) <unknown>.setTitleText(java.lang.String) <unknown>.setProgressMessageColor(<unknown>) <unknown>.changeAlertType(<unknown>) <unknown>.setCancelClickListener() <unknown>.setContentText(java.lang.String) <unknown>.setCancelText(java.lang.String) <unknown>.setBarColor(<unknown>) <unknown>.changeAlertType(<unknown>) <unknown>.setBarColor(<unknown>) android.app.Activity.setContentView(<unknown>) <unknown>.setConfirmClickListener(null)"]}, {"user_sni": "Alok Vaish", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast"], "email_sni": "alok@alok-PC.(none)", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items\n\t\t// ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n\t\t\t\t//TODO \n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ******\n\t\t// ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\n\t\t// //////********* Get Last most accurate location info *********\n\t\t// /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText()\n\t\t\t\t.toString();\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t\t.getText().length() > 5) {\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock\n\t\t\t\t\t.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\")\n\t\t\t\t&& !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount\n\t\t\t\t\t.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText()\n\t\t\t\t\t.toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString()\n\t\t\t\t.equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(\n\t\t\t\t\t\t\ttext_voice_camera_date_bar_dateview.getText()\n\t\t\t\t\t\t\t\t\t.toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,\n\t\t\t\t\t\t\tmDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(MainActivity.mCurrentLocation != null  && setLocation == true){\n\t\t\tif (!MainActivity.mCurrentLocation.equals(\"\")) {\n\t\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION,MainActivity.mCurrentLocation);\n\t\t\t}\n\t\t}\n\t\t// //// ******* Update database if user added additional info *******\n\t\t// ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tif (!intentExtras.containsKey(\"timeInMillis\")\n\t\t\t\t&& !intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-06T08:00:47Z", "hash_sni": "6ed22d5f8955769c49965f5e0ec77859e0995402", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" import android.view.KeyEvent;\n import android.view.View;\n import android.view.View.OnClickListener;\n-import android.view.Window;\n import android.widget.Button;\n import android.widget.Chronometer;\n import android.widget.Chronometer.OnChronometerTickListener;\n@@ -55,9 +54,6 @@ public class Voice extends Activity implements OnClickListener {\n \tprotected void onCreate(Bundle savedInstanceState) {\n \t\tsuper.onCreate(savedInstanceState);\n \n-\t\t// ///// ****** No Title Bar ********* /////////\n-\n-\t\tthis.requestWindowFeature(Window.FEATURE_NO_TITLE);\n \t\tsetContentView(R.layout.text_voice_camera);\n \n \t\t// ////// ******** Initializing and assigning memory to UI Items"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime File FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLastLocation getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526741187525869568, "subject_t": ["For no title bar- applying theme at application level"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// /////// \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// //// ******* Update database if user added additional info ******* \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //////********* Get Last most accurate location info ********* \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// //// ****** If audio recording started then stop recording audio \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t\t//TODO  \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// ////// ******** Starts Recording each time activity starts ****** \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// ***** /////// \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// ********** ///////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["409c513b7463d099754b68925f55c7f57319840b"], "id": "vinsol/expense-tracker\u00006ed22d5f8955769c49965f5e0ec77859e0995402\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.widget.TextView.setText(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.app.Activity.finish()#java.io.File.File(java.lang.String)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#<unknown>.getLastLocation()#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#<unknown>.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#android.widget.TextView.getText()#<unknown>.DisplayTime()#android.view.KeyEvent.getRepeatCount()#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#<unknown>.isRecording()#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.widget.TextView.setText(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.lang.Long.toString(long) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.app.Activity.finish() java.io.File.File(java.lang.String) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) <unknown>.getLastLocation() android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) <unknown>.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() android.widget.TextView.getText() <unknown>.DisplayTime() android.view.KeyEvent.getRepeatCount() <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) <unknown>.isRecording() android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Alok Vaish", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity java.util.Calendar"], "email_sni": "alok@alok-PC.(none)", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate RelativeLayout dateBarRelativeLayout;\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t}\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tnew ShowDateHandler(this, mCalendar);\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id\n\t\t\t\t\t\t+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button\n\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(new DisplayTime()\n\t\t\t\t\t\t\t\t\t.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tnew FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG)\n\t\t\t\t\t.show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivity(editIntent);\n\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-06T08:00:47Z", "hash_sni": "6ed22d5f8955769c49965f5e0ec77859e0995402", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" import android.os.CountDownTimer;\n import android.view.View;\n import android.view.View.OnClickListener;\n-import android.view.Window;\n import android.widget.Button;\n import android.widget.Chronometer;\n import android.widget.RelativeLayout;\n@@ -44,7 +43,7 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n \t\tsuper.onCreate(savedInstanceState);\n-\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n+\n \t\tsetContentView(R.layout.show_text_voice_camera);\n \t\t\n \t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); "], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getDrawable getExternalStorageState getId getInstance getIntent getPlayBackTime getResources getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putExtra setBackgroundDrawable setContentView setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack stop stopPlayBack toString updateUI"], "_version_": 1526741187557326848, "subject_t": ["For no title bar- applying theme at application level"], "comments_t": ["\t\t// //// ****** If audio recording started then stop recording audio \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t// ***** /////// \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["45743dbcb8929dde178d12bb814b367564b9bd8b"], "id": "vinsol/expense-tracker\u00006ed22d5f8955769c49965f5e0ec77859e0995402\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.widget.Toast.show()#<unknown>.isAudioPlaying()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.open()#android.content.Context.getString(<unknown>)#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.view.ContextThemeWrapper.getResources()#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#android.os.CountDownTimer.cancel()#android.app.Activity.findViewById(<unknown>)#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setBackgroundDrawable(<unknown>)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#android.view.View.setVisibility(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.show()#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.res.Resources.getDrawable(<unknown>)#android.view.View.setVisibility(int)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.app.Activity.startActivity(android.content.Intent)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#android.view.View.setVisibility(int)", "callsites_t": ["java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) android.widget.Toast.show() <unknown>.isAudioPlaying() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.open() android.content.Context.getString(<unknown>) <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.view.ContextThemeWrapper.getResources() android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() java.io.File.File(java.lang.String) android.widget.Toast.show() android.os.CountDownTimer.cancel() android.app.Activity.findViewById(<unknown>) <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setBackgroundDrawable(<unknown>) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.app.Activity.findViewById(<unknown>) java.io.File.canRead() android.view.View.setVisibility(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.show() java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.content.res.Resources.getDrawable(<unknown>) android.view.View.setVisibility(int) <unknown>.getPlayBackTime() android.app.Activity.finish() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.app.Activity.startActivity(android.content.Intent) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener com.vinsol.expensetracker.utils.DisplayDate android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.StringProcessing com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayDate;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\nimport com.vinsol.expensetracker.utils.StringProcessing;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\tprivate Boolean isChanged = false;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\")) {\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry)) || mEditList.get(5).equals(getString(R.string.unknown))){\n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ****** ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio  ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\tisChanged = true;\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif(mRecordingHelper != null)\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\t\n\t\t\tif(intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\t\tIntent mIntent = new Intent(this, ShowTextActivity.class);\n\t\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t\tBundle tempBundle = new Bundle();\n\t\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\t\tmEditList = new ArrayList<String>();\n\t\t\t\tmEditList.addAll(listOnResult);\n\t\t\t\tmIntent.putExtra(\"textShowBundle\", tempBundle);\n\t\t\t\tsetResult(Activity.RESULT_CANCELED, mIntent);\n\t\t\t}\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,mDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\t\t ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\t\n\t\t\n\t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tBundle mToHighLight = new Bundle();\n\t\t\tmToHighLight.putString(\"toHighLight\", _list.get(DatabaseAdapter.KEY_ID));\n\t\t\tintentExpenseListing.putExtras(mToHighLight);\n\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t} else {\n\t\t\t\n\t\t\tIntent mIntent = new Intent(this, ShowVoiceActivity.class);\n\t\t\tBundle tempBundle = new Bundle();\n\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\tlistOnResult.add(mEditList.get(0));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_TAG));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_AMOUNT));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n\t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDateDate(_list.get(DatabaseAdapter.KEY_DATE_TIME)));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(3));\n\t\t\t}\t\t\t\t\n\t\t\tif((!mEditList.get(1).equals(listOnResult.get(1))) || (!mEditList.get(2).equals(new StringProcessing().getStringDoubleDecimal(listOnResult.get(2)))) || isChanged ) {\n\t\t\t\tShowTextActivity.favID = null;\n\t\t\t\tHashMap<String, String> listForFav = new HashMap<String, String>();\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_FAVORITE, \"\");\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_ID, mEditList.get(0));\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.editDatabase(listForFav);\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t} else if(ShowVoiceActivity.favID == null) {\n\t\t\t\t\tlistOnResult.add(mEditList.get(4));\n\t\t\t\t}\n\t\t\t\telse { \n\t\t\t\t\tlistOnResult.add(ShowVoiceActivity.favID);\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(5));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n\t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(6));\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(7));\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList.addAll(listOnResult);\n\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\tmIntent.putExtra(\"voiceShowBundle\", tempBundle);\n\t\t\tsetResult(Activity.RESULT_OK, mIntent);\n\t\t}\n\t\tfinish();\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-13T09:28:11Z", "hash_sni": "9d1f59532156aa83ffccdcb90b0cee58bc293315", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \t\t\t\t\ttext_voice_camera_amount.setText(amount);\n \t\t\t\t}\n \t\t\t}\n-\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n+\t\t\tif(tag.equals(getString(R.string.unknown_entry)) || mEditList.get(5).equals(getString(R.string.unknown))){\n \t\t\t\tsetUnknown = true;\n \t\t\t}\n \t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay Bundle DatabaseAdapter DateHandler DateHelper DisplayDate DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper StringProcessing add addAll addFlags canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLocationDate getLocationDateDate getLong getPlayBackTime getRepeatCount getString getStringArrayList getStringDoubleDecimal getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put putExtra putExtras putString putStringArrayList saveEntry setBase setClickListeners setContentView setFirstDayOfWeek setGraphicsVoice setOnChronometerTickListener setOnClickListener setResult setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim"], "_version_": 1526744653566574592, "subject_t": ["Dialog open on list fotter click"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// ////// ******** Starts Recording each time activity starts ****** /////// \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items ********** ///////// \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// //// ******* Update database if user added additional info *******\t\t /////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t// //// ****** If audio recording started then stop recording audio  ***** /////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["67f6b011b817b50c5090672798396298673fbf4c"], "id": "vinsol/expense-tracker\u00009d1f59532156aa83ffccdcb90b0cee58bc293315\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#<unknown>.getLocationDateDate(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.os.Bundle.putString(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#<unknown>.getLocationDate(<unknown>, java.lang.String)#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.Bundle()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#java.lang.String.equals(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setResult(int, android.content.Intent)#android.widget.TextView.getText()#android.content.Intent.putExtras(android.os.Bundle)#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.StringProcessing()#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.DisplayDate()#<unknown>.isAudioPlaying()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.widget.TextView.getText()#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.view.KeyEvent.getRepeatCount()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.content.Intent.addFlags(int)#android.os.Bundle.Bundle()#android.app.Activity.setResult(int, android.content.Intent)#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#<unknown>.isRecording()#java.lang.String.equals(<unknown>)#<unknown>.getStringDoubleDecimal(java.lang.String)#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) <unknown>.getLocationDateDate(<unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.os.Bundle.putString(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.util.ArrayList<java.lang.String>.get(int) java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() <unknown>.getLocationDate(<unknown>, java.lang.String) android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.Bundle() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) java.lang.String.equals(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setResult(int, android.content.Intent) android.widget.TextView.getText() android.content.Intent.putExtras(android.os.Bundle) <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.StringProcessing() android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.DisplayDate() <unknown>.isAudioPlaying() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() java.util.ArrayList<java.lang.String>.add(<unknown>) android.widget.TextView.getText() <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.add(java.lang.String) android.view.KeyEvent.getRepeatCount() java.util.ArrayList<java.lang.String>.add(<unknown>) android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.ArrayList<java.lang.String>.ArrayList, String() android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.content.Intent.addFlags(int) android.os.Bundle.Bundle() android.app.Activity.setResult(int, android.content.Intent) android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) <unknown>.isRecording() java.lang.String.equals(<unknown>) <unknown>.getStringDoubleDecimal(java.lang.String) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Bryan Yan", "repo_sni": "bryan-y88/Musics_Around", "imports_t": ["android.content.BroadcastReceiver com.example.musicsaround.Timer android.os.CountDownTimer android.net.wifi.p2p.WifiP2pManager.Channel com.example.musicsaround.dj.DJActivity com.example.musicsaround.R android.widget.Toast android.net.wifi.p2p.WifiP2pInfo android.content.IntentFilter android.content.Context android.os.Bundle android.content.DialogInterface android.content.Intent android.view.Menu android.view.MenuInflater android.net.wifi.p2p.WifiP2pManager android.net.wifi.WifiManager android.app.ProgressDialog android.net.wifi.p2p.WifiP2pDevice android.view.MenuItem android.net.wifi.p2p.WifiP2pManager.ChannelListener com.example.musicsaround.speaker.ClientDeviceListFragment.SpeakerFragmentListener android.widget.TextView android.util.Log android.net.wifi.p2p.WifiP2pConfig android.app.Activity android.net.wifi.p2p.WifiP2pManager.ActionListener"], "email_sni": "bryan.y88@gmail.com", "contents_t": ["package com.example.musicsaround.speaker;\n\nimport android.app.Activity;\nimport android.app.ProgressDialog;\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.net.wifi.WifiManager;\nimport android.net.wifi.p2p.WifiP2pConfig;\nimport android.net.wifi.p2p.WifiP2pDevice;\nimport android.net.wifi.p2p.WifiP2pInfo;\nimport android.net.wifi.p2p.WifiP2pManager;\nimport android.net.wifi.p2p.WifiP2pManager.ActionListener;\nimport android.net.wifi.p2p.WifiP2pManager.Channel;\nimport android.net.wifi.p2p.WifiP2pManager.ChannelListener;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.example.musicsaround.R;\nimport com.example.musicsaround.Timer;\nimport com.example.musicsaround.dj.DJActivity;\nimport com.example.musicsaround.speaker.ClientDeviceListFragment.SpeakerFragmentListener;\n\npublic class SpeakerActivity extends Activity implements ChannelListener,\n\t\tSpeakerFragmentListener\n{\n\tpublic final static int SPEAKER_MODE = 1;\n\n\tpublic static final String TAG = \"Speaker Mode Activity\";\n\tprivate WifiP2pManager manager;\n\tprivate boolean isWifiP2pEnabled = false;\n\tprivate boolean channelRetried = false;\n\tProgressDialog progressDialog = null;\n\n\tprivate Timer timer;\n\tprivate CountDownTimer keepAliveTimer;\n\t// keep the Wifi alive every 5 seconds\n\tprivate static final int KEEPALIVE_INTERVAL = 5000;\n\n\tprivate final IntentFilter intentFilter = new IntentFilter();\n\tprivate Channel channel;\n\tprivate BroadcastReceiver receiver = null;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState)\n\t{\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_speaker);\n\n\t\t// add necessary intent values to be matched.\n\t\tintentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);\n\t\tintentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);\n\t\tintentFilter\n\t\t\t\t.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);\n\t\tintentFilter\n\t\t\t\t.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);\n\n\t\tmanager = (WifiP2pManager) getSystemService(Context.WIFI_P2P_SERVICE);\n\t\tchannel = manager.initialize(this, getMainLooper(), null);\n\n\t\tTextView txt_time = (TextView) this.findViewById(R.id.txt_speaker_time);\n\n\t\t// start a timer with 25 ms precision\n\t\tthis.timer = new Timer(Timer.DEFAULT_TIMER_PRECISION);\n\t\t// asynchronous call to start a timer\n\t\tthis.timer.startTimer();\n\n\t\tkeepAliveTimer = new CountDownTimer(KEEPALIVE_INTERVAL,\n\t\t\t\tKEEPALIVE_INTERVAL)\n\t\t{\n\n\t\t\t@Override\n\t\t\tpublic void onTick(long millisUntilFinished)\n\t\t\t{\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onFinish()\n\t\t\t{\n\t\t\t\tenableWifi();\n\t\t\t\tkeepAliveTimer.start();\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic void enableWifi()\n\t{\n\t\tWifiManager wifiManager = (WifiManager) this\n\t\t\t\t.getSystemService(this.WIFI_SERVICE);\n\n\t\twifiManager.setWifiEnabled(true);\n\t}\n\n\t/** register the BroadcastReceiver with the intent values to be matched */\n\t@Override\n\tpublic void onResume()\n\t{\n\t\tsuper.onResume();\n\t\treceiver = new ClientWiFiDirectBR(manager, channel, this);\n\t\tregisterReceiver(receiver, intentFilter);\n\n\t\t// ***Start discovering right away!\n\t\tdiscoverDevices();\n\t\tkeepAliveTimer.start();\n\n\t\tToast.makeText(SpeakerActivity.this, \"Discovery Initiated\",\n\t\t\t\tToast.LENGTH_SHORT).show();\n\t}\n\n\t/**\n\t * UI to show the discovery process\n\t */\n\tpublic void onInitiateDiscovery()\n\t{\n\t\tif (progressDialog != null && progressDialog.isShowing())\n\t\t{\n\t\t\tprogressDialog.dismiss();\n\t\t}\n\n\t\tprogressDialog = ProgressDialog.show(this, \"Press back to cancel\",\n\t\t\t\t\"Finding DJs\", true, true,\n\t\t\t\tnew DialogInterface.OnCancelListener()\n\t\t\t\t{\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onCancel(DialogInterface dialog)\n\t\t\t\t\t{\n\t\t\t\t\t\t// stop discovery\n\t\t\t\t\t\tmanager.stopPeerDiscovery(channel,\n\t\t\t\t\t\t\t\tnew WifiP2pManager.ActionListener()\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void onFailure(int reason)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// Toast.makeText(DJActivity.this,\n\t\t\t\t\t\t\t\t\t\t// \"Stopping Discovery Failed : \" +\n\t\t\t\t\t\t\t\t\t\t// reason,\n\t\t\t\t\t\t\t\t\t\t// Toast.LENGTH_SHORT).show();\n\t\t\t\t\t\t\t\t\t\tLog.e(TAG,\n\t\t\t\t\t\t\t\t\t\t\t\t\"Stopping Discovery Failed. Error Code is: \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ reason);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void onSuccess()\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tLog.d(TAG, \"Discovery stopped.\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tpublic void discoverDevices()\n\t{\n\t\t// TODO: need a better non-blocking UI to notify users we are\n\t\t// discovering\n\t\t// onInitiateDiscovery();\n\n\t\t// first turn on the wifi p2p\n\t\tWifiManager wifiManager = (WifiManager) this\n\t\t\t\t.getSystemService(this.WIFI_SERVICE);\n\n\t\twifiManager.setWifiEnabled(true);\n\n\t\tchannelRetried = false;\n\n\t\tmanager.discoverPeers(channel, new WifiP2pManager.ActionListener()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void onSuccess()\n\t\t\t{\n\t\t\t\t// Toast.makeText(DJActivity.this,\n\t\t\t\t// \"Discovery Initiated\",\n\t\t\t\t// Toast.LENGTH_SHORT).show();\n\n\t\t\t\tLog.d(TAG, \"Discovery Initiated.\");\n\t\t\t}\n\n\t\t\t// if we failed, then stop the discovery and start again\n\t\t\t@Override\n\t\t\tpublic void onFailure(int reasonCode)\n\t\t\t{\n\t\t\t\tLog.e(TAG, \"Discovery Failed. Error Code is: \" + reasonCode);\n\t\t\t\tmanager.stopPeerDiscovery(channel,\n\t\t\t\t\t\tnew WifiP2pManager.ActionListener()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void onFailure(int reason)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Toast.makeText(DJActivity.this,\n\t\t\t\t\t\t\t\t// \"Stopping Discovery Failed : \" + reason,\n\t\t\t\t\t\t\t\t// Toast.LENGTH_SHORT).show();\n\t\t\t\t\t\t\t\tLog.e(TAG,\n\t\t\t\t\t\t\t\t\t\t\"Stopping Discovery Failed. Error Code is: \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ reason);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void onSuccess()\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmanager.discoverPeers(channel,\n\t\t\t\t\t\t\t\t\t\tnew WifiP2pManager.ActionListener()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t\t\tpublic void onSuccess()\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tToast.makeText(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSpeakerActivity.this,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Discoverying DJs\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tToast.LENGTH_SHORT)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.show();\n\n\t\t\t\t\t\t\t\t\t\t\t\tLog.d(TAG,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Discovery Initiated.\");\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t\t\tpublic void onFailure(int reasonCode)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tLog.e(TAG,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Discovery Failed. Error Code is: \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ reasonCode);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t@Override\n\tpublic void onPause()\n\t{\n\t\tsuper.onPause();\n\t\tunregisterReceiver(receiver);\n\t\tkeepAliveTimer.cancel();\n\t}\n\n\t@Override\n\tpublic void onDestroy()\n\t{\n\t\t// also need to disconnect the clients, which is handled by disconnect\n\t\t// method\n\t\tdisconnect();\n\n\t\tsuper.onDestroy();\n\t}\n\n\t@Override\n\tpublic boolean onCreateOptionsMenu(Menu menu)\n\t{\n\t\tMenuInflater inflater = getMenuInflater();\n\t\tinflater.inflate(R.menu.wifidirect, menu);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic boolean onOptionsItemSelected(MenuItem item)\n\t{\n\t\tswitch (item.getItemId())\n\t\t{\n\t\t\tcase R.id.atn_direct_enable:\n\t\t\t\tif (manager != null && channel != null)\n\t\t\t\t{\n\t\t\t\t\t// Since this is the system wireless settings activity, it's\n\t\t\t\t\t// not going to send us a result. We will be notified by\n\t\t\t\t\t// WiFiDeviceBroadcastReceiver instead.\n\t\t\t\t\tIntent intent = new Intent();\n\t\t\t\t\t// jump to wi-fi Direct settings\n\t\t\t\t\tintent.setClassName(\"com.android.settings\",\n\t\t\t\t\t\t\t\"com.android.settings.Settings$WifiP2pSettingsActivity\");\n\n\t\t\t\t\tstartActivity(intent);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tLog.e(TAG, \"channel or manager is null\");\n\t\t\t\t}\n\t\t\t\treturn true;\n\n\t\t\tcase R.id.atn_direct_discover:\n\t\t\t\tdiscoverDevices();\n\t\t\t\treturn true;\n\n\t\t\tdefault:\n\t\t\t\treturn super.onOptionsItemSelected(item);\n\t\t}\n\t}\n\n\t/**\n\t * Remove all peers and clear all fields. This is called on\n\t * BroadcastReceiver receiving a state change event. This is merely an UI\n\t * update.\n\t */\n\tpublic void resetDeviceList()\n\t{\n\t\tClientDeviceListFragment fragmentList = (ClientDeviceListFragment) getFragmentManager()\n\t\t\t\t.findFragmentById(R.id.frag_speakers_devices);\n\n\t\tif (fragmentList != null)\n\t\t{\n\t\t\tfragmentList.clearPeers();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void showDetails(WifiP2pDevice device)\n\t{\n\t\t// TODO: This is for debugging, showing the device details\n\t\tSpeakerMusicFragment fragMusic = (SpeakerMusicFragment) getFragmentManager()\n\t\t\t\t.findFragmentById(R.id.fragment_speakermusic);\n\t}\n\n\t@Override\n\tpublic void showInfo(WifiP2pInfo info)\n\t{\n\t\tSpeakerMusicFragment fragMusic = (SpeakerMusicFragment) getFragmentManager()\n\t\t\t\t.findFragmentById(R.id.fragment_speakermusic);\n\n\t\tif (info.isGroupOwner)\n\t\t{\n\t\t\t// fragMusic.setDebugText(\"I am the group owner.\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// fragMusic.setDebugText(\"I am not the group owner.\");\n\t\t}\n\t}\n\n\t/*\n\t * Cancel an ongoing connection in progress. We won't actually use this\n\t * method all that much\n\t * \n\t * (non-Javadoc)\n\t * \n\t * @see\n\t * com.example.musicsaround.dj.ServerDeviceListFragment.DJFragmentListener\n\t * #cancelDisconnect()\n\t */\n\t@Override\n\tpublic void cancelDisconnect()\n\t{\n\t\t/*\n\t\t * A cancel abort request by user. Disconnect i.e. removeGroup if\n\t\t * already connected. Else, request WifiP2pManager to abort the ongoing\n\t\t * request\n\t\t */\n\t\tif (manager != null)\n\t\t{\n\t\t\tLog.d(TAG, \"Someone requested a cancel connect!\");\n\n\t\t\tfinal ClientDeviceListFragment fragment = (ClientDeviceListFragment) getFragmentManager()\n\t\t\t\t\t.findFragmentById(R.id.frag_speakers_devices);\n\n\t\t\tif (fragment.getDevice() == null\n\t\t\t\t\t|| fragment.getDevice().status == WifiP2pDevice.CONNECTED)\n\t\t\t{\n\t\t\t\t// disconnect();\n\t\t\t}\n\t\t\telse if (fragment.getDevice().status == WifiP2pDevice.AVAILABLE\n\t\t\t\t\t|| fragment.getDevice().status == WifiP2pDevice.INVITED\n\t\t\t\t\t|| fragment.getDevice().status == WifiP2pDevice.CONNECTED)\n\t\t\t{\n\t\t\t\tmanager.cancelConnect(channel, new ActionListener()\n\t\t\t\t{\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onSuccess()\n\t\t\t\t\t{\n\t\t\t\t\t\t// Toast.makeText(DJActivity.this,\n\t\t\t\t\t\t// \"Aborting connection\",\n\t\t\t\t\t\t// Toast.LENGTH_SHORT).show();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onFailure(int reasonCode)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Toast.makeText(\n\t\t\t\t\t\t// DJActivity.this,\n\t\t\t\t\t\t// \"Connect abort request failed. Reason Code: \"\n\t\t\t\t\t\t// + reasonCode, Toast.LENGTH_SHORT)\n\t\t\t\t\t\t// .show();\n\t\t\t\t\t\tLog.e(TAG,\n\t\t\t\t\t\t\t\t\"Could not abort connection, the reason is: \"\n\t\t\t\t\t\t\t\t\t\t+ reasonCode);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t * This is the main method to connect to a device through Wi-Fi Direct!\n\t * \n\t * (non-Javadoc)\n\t * \n\t * @see com.example.musicsaround.speaker.ClientDeviceListFragment.\n\t * SpeakerFragmentListener#connect(android.net.wifi.p2p.WifiP2pConfig)\n\t */\n\t@Override\n\tpublic void connect(WifiP2pConfig config)\n\t{\n\t\tif (manager == null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t// in Speaker mode, we don't want to become the group owner\n\t\tWifiP2pConfig newConfig = config;\n\t\tnewConfig.groupOwnerIntent = SPEAKER_MODE;\n\n\t\tmanager.connect(channel, newConfig, new ActionListener()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void onSuccess()\n\t\t\t{\n\t\t\t\t// WiFiDirectBroadcastReceiver will notify us. Ignore for now.\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onFailure(int reason)\n\t\t\t{\n\t\t\t\tToast.makeText(SpeakerActivity.this,\n\t\t\t\t\t\t\"Connection failed. Retrying...\", Toast.LENGTH_SHORT)\n\t\t\t\t\t\t.show();\n\t\t\t\tLog.e(TAG,\n\t\t\t\t\t\t\"Wi-fi Direct connection failed. The error code is: \"\n\t\t\t\t\t\t\t\t+ reason);\n\t\t\t}\n\t\t});\n\n\t}\n\n\t@Override\n\tpublic void disconnect()\n\t{\n\t\tif (manager == null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: why do we have to remove the whole group upon disconnect?\n\t\t// perhaps we only need to do so upon exiting DJ mode\n\t\tmanager.removeGroup(channel, new ActionListener()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void onFailure(int reasonCode)\n\t\t\t{\n\t\t\t\tLog.e(TAG, \"Disconnect failed. Reason is: \" + reasonCode);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onSuccess()\n\t\t\t{\n\t\t\t\tToast.makeText(SpeakerActivity.this, \"Disconnected.\",\n\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\t\tLog.d(TAG, \"Disconnected from a device.\");\n\t\t\t}\n\t\t});\n\n\t\t// also need to disconnect the clients\n\t\tClientDeviceListFragment fragmentList = (ClientDeviceListFragment) getFragmentManager()\n\t\t\t\t.findFragmentById(R.id.frag_speakers_devices);\n\n\t\tif (fragmentList != null)\n\t\t{\n\t\t\tfragmentList.stopClient();\n\t\t}\n\n\t\t// also need to stop the music\n\t\tstopMusic();\n\t}\n\n\t@Override\n\tpublic void onChannelDisconnected()\n\t{\n\t\t// we will try once more\n\t\tif (manager != null && !channelRetried)\n\t\t{\n\t\t\tToast.makeText(this, \"Wi-fi Direct Channel lost. Trying again...\",\n\t\t\t\t\tToast.LENGTH_LONG).show();\n\t\t\tresetDeviceList();\n\n\t\t\tchannelRetried = true;\n\t\t\tmanager.initialize(this, getMainLooper(), this);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tToast.makeText(\n\t\t\t\t\tthis,\n\t\t\t\t\t\"Wi-fi Direct Channel is still lost. Try disabling / re-enabling Wi-fi Direct in the P2P Settings.\",\n\t\t\t\t\tToast.LENGTH_LONG).show();\n\t\t}\n\n\t\t// also need to disconnect the clients\n\t\tClientDeviceListFragment fragmentList = (ClientDeviceListFragment) getFragmentManager()\n\t\t\t\t.findFragmentById(R.id.frag_speakers_devices);\n\n\t\tif (fragmentList != null)\n\t\t{\n\t\t\tfragmentList.stopClient();\n\t\t}\n\t}\n\n\t/**\n\t * @param isWifiP2pEnabled\n\t *            the isWifiP2pEnabled to set\n\t */\n\tpublic void setIsWifiP2pEnabled(boolean isWifiP2pEnabled)\n\t{\n\t\tthis.isWifiP2pEnabled = isWifiP2pEnabled;\n\t}\n\n\t@Override\n\tpublic void playMusic(String url, long startTime, int startPos)\n\t{\n\t\tSpeakerMusicFragment fragMusic = (SpeakerMusicFragment) getFragmentManager()\n\t\t\t\t.findFragmentById(R.id.fragment_speakermusic);\n\n\t\tif (fragMusic != null)\n\t\t{\n\t\t\tfragMusic.playSong(url, startTime, startPos);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void stopMusic()\n\t{\n\t\tSpeakerMusicFragment fragMusic = (SpeakerMusicFragment) getFragmentManager()\n\t\t\t\t.findFragmentById(R.id.fragment_speakermusic);\n\n\t\tif (fragMusic != null)\n\t\t{\n\t\t\tfragMusic.stopMusic();\n\t\t}\n\t}\n\n\t@Override\n\tpublic Timer retrieveTimer()\n\t{\n\t\treturn timer;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2014-02-20T04:08:41Z", "hash_sni": "b7b206d3c28c8792a84ecb5017f4596c52d1a50e", "name_sni": "Core Application/src/com/example/musicsaround/speaker/SpeakerActivity.java", "patch_t": ["+package com.example.musicsaround.speaker;\n+\n+import android.app.Activity;\n+import android.app.ProgressDialog;\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.DialogInterface;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.net.wifi.WifiManager;\n+import android.net.wifi.p2p.WifiP2pConfig;\n+import android.net.wifi.p2p.WifiP2pDevice;\n+import android.net.wifi.p2p.WifiP2pInfo;\n+import android.net.wifi.p2p.WifiP2pManager;\n+import android.net.wifi.p2p.WifiP2pManager.ActionListener;\n+import android.net.wifi.p2p.WifiP2pManager.Channel;\n+import android.net.wifi.p2p.WifiP2pManager.ChannelListener;\n+import android.os.Bundle;\n+import android.os.CountDownTimer;\n+import android.util.Log;\n+import android.view.Menu;\n+import android.view.MenuInflater;\n+import android.view.MenuItem;\n+import android.widget.TextView;\n+import android.widget.Toast;\n+\n+import com.example.musicsaround.R;\n+import com.example.musicsaround.Timer;\n+import com.example.musicsaround.dj.DJActivity;\n+import com.example.musicsaround.speaker.ClientDeviceListFragment.SpeakerFragmentListener;\n+\n+public class SpeakerActivity extends Activity implements ChannelListener,\n+\t\tSpeakerFragmentListener\n+{\n+\tpublic final static int SPEAKER_MODE = 1;\n+\n+\tpublic static final String TAG = \"Speaker Mode Activity\";\n+\tprivate WifiP2pManager manager;\n+\tprivate boolean isWifiP2pEnabled = false;\n+\tprivate boolean channelRetried = false;\n+\tProgressDialog progressDialog = null;\n+\n+\tprivate Timer timer;\n+\tprivate CountDownTimer keepAliveTimer;\n+\t// keep the Wifi alive every 5 seconds\n+\tprivate static final int KEEPALIVE_INTERVAL = 5000;\n+\n+\tprivate final IntentFilter intentFilter = new IntentFilter();\n+\tprivate Channel channel;\n+\tprivate BroadcastReceiver receiver = null;\n+\n+\t@Override\n+\tprotected void onCreate(Bundle savedInstanceState)\n+\t{\n+\t\tsuper.onCreate(savedInstanceState);\n+\t\tsetContentView(R.layout.activity_speaker);\n+\n+\t\t// add necessary intent values to be matched.\n+\t\tintentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);\n+\t\tintentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);\n+\t\tintentFilter\n+\t\t\t\t.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);\n+\t\tintentFilter\n+\t\t\t\t.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);\n+\n+\t\tmanager = (WifiP2pManager) getSystemService(Context.WIFI_P2P_SERVICE);\n+\t\tchannel = manager.initialize(this, getMainLooper(), null);\n+\n+\t\tTextView txt_time = (TextView) this.findViewById(R.id.txt_speaker_time);\n+\n+\t\t// start a timer with 25 ms precision\n+\t\tthis.timer = new Timer(Timer.DEFAULT_TIMER_PRECISION);\n+\t\t// asynchronous call to start a timer\n+\t\tthis.timer.startTimer();\n+\n+\t\tkeepAliveTimer = new CountDownTimer(KEEPALIVE_INTERVAL,\n+\t\t\t\tKEEPALIVE_INTERVAL)\n+\t\t{\n+\n+\t\t\t@Override\n+\t\t\tpublic void onTick(long millisUntilFinished)\n+\t\t\t{\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void onFinish()\n+\t\t\t{\n+\t\t\t\tenableWifi();\n+\t\t\t\tkeepAliveTimer.start();\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\tpublic void enableWifi()\n+\t{\n+\t\tWifiManager wifiManager = (WifiManager) this\n+\t\t\t\t.getSystemService(this.WIFI_SERVICE);\n+\n+\t\twifiManager.setWifiEnabled(true);\n+\t}\n+\n+\t/** register the BroadcastReceiver with the intent values to be matched */\n+\t@Override\n+\tpublic void onResume()\n+\t{\n+\t\tsuper.onResume();\n+\t\treceiver = new ClientWiFiDirectBR(manager, channel, this);\n+\t\tregisterReceiver(receiver, intentFilter);\n+\n+\t\t// ***Start discovering right away!\n+\t\tdiscoverDevices();\n+\t\tkeepAliveTimer.start();\n+\n+\t\tToast.makeText(SpeakerActivity.this, \"Discovery Initiated\",\n+\t\t\t\tToast.LENGTH_SHORT).show();\n+\t}\n+\n+\t/**\n+\t * UI to show the discovery process\n+\t */\n+\tpublic void onInitiateDiscovery()\n+\t{\n+\t\tif (progressDialog != null && progressDialog.isShowing())\n+\t\t{\n+\t\t\tprogressDialog.dismiss();\n+\t\t}\n+\n+\t\tprogressDialog = ProgressDialog.show(this, \"Press back to cancel\",\n+\t\t\t\t\"Finding DJs\", true, true,\n+\t\t\t\tnew DialogInterface.OnCancelListener()\n+\t\t\t\t{\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void onCancel(DialogInterface dialog)\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// stop discovery\n+\t\t\t\t\t\tmanager.stopPeerDiscovery(channel,\n+\t\t\t\t\t\t\t\tnew WifiP2pManager.ActionListener()\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\t\tpublic void onFailure(int reason)\n+\t\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\t// Toast.makeText(DJActivity.this,\n+\t\t\t\t\t\t\t\t\t\t// \"Stopping Discovery Failed : \" +\n+\t\t\t\t\t\t\t\t\t\t// reason,\n+\t\t\t\t\t\t\t\t\t\t// Toast.LENGTH_SHORT).show();\n+\t\t\t\t\t\t\t\t\t\tLog.e(TAG,\n+\t\t\t\t\t\t\t\t\t\t\t\t\"Stopping Discovery Failed. Error Code is: \"\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ reason);\n+\t\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\t\tpublic void onSuccess()\n+\t\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\tLog.d(TAG, \"Discovery stopped.\");\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t}\n+\n+\tpublic void discoverDevices()\n+\t{\n+\t\t// TODO: need a better non-blocking UI to notify users we are\n+\t\t// discovering\n+\t\t// onInitiateDiscovery();\n+\n+\t\t// first turn on the wifi p2p\n+\t\tWifiManager wifiManager = (WifiManager) this\n+\t\t\t\t.getSystemService(this.WIFI_SERVICE);\n+\n+\t\twifiManager.setWifiEnabled(true);\n+\n+\t\tchannelRetried = false;\n+\n+\t\tmanager.discoverPeers(channel, new WifiP2pManager.ActionListener()\n+\t\t{\n+\t\t\t@Override\n+\t\t\tpublic void onSuccess()\n+\t\t\t{\n+\t\t\t\t// Toast.makeText(DJActivity.this,\n+\t\t\t\t// \"Discovery Initiated\",\n+\t\t\t\t// Toast.LENGTH_SHORT).show();\n+\n+\t\t\t\tLog.d(TAG, \"Discovery Initiated.\");\n+\t\t\t}\n+\n+\t\t\t// if we failed, then stop the discovery and start again\n+\t\t\t@Override\n+\t\t\tpublic void onFailure(int reasonCode)\n+\t\t\t{\n+\t\t\t\tLog.e(TAG, \"Discovery Failed. Error Code is: \" + reasonCode);\n+\t\t\t\tmanager.stopPeerDiscovery(channel,\n+\t\t\t\t\t\tnew WifiP2pManager.ActionListener()\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic void onFailure(int reason)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t// Toast.makeText(DJActivity.this,\n+\t\t\t\t\t\t\t\t// \"Stopping Discovery Failed : \" + reason,\n+\t\t\t\t\t\t\t\t// Toast.LENGTH_SHORT).show();\n+\t\t\t\t\t\t\t\tLog.e(TAG,\n+\t\t\t\t\t\t\t\t\t\t\"Stopping Discovery Failed. Error Code is: \"\n+\t\t\t\t\t\t\t\t\t\t\t\t+ reason);\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic void onSuccess()\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tmanager.discoverPeers(channel,\n+\t\t\t\t\t\t\t\t\t\tnew WifiP2pManager.ActionListener()\n+\t\t\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\t\t\t\tpublic void onSuccess()\n+\t\t\t\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\t\t\tToast.makeText(\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tSpeakerActivity.this,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Discoverying DJs\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tToast.LENGTH_SHORT)\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t.show();\n+\n+\t\t\t\t\t\t\t\t\t\t\t\tLog.d(TAG,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Discovery Initiated.\");\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\t\t\t\tpublic void onFailure(int reasonCode)\n+\t\t\t\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\t\t\tLog.e(TAG,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Discovery Failed. Error Code is: \"\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ reasonCode);\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t@Override\n+\tpublic void onPause()\n+\t{\n+\t\tsuper.onPause();\n+\t\tunregisterReceiver(receiver);\n+\t\tkeepAliveTimer.cancel();\n+\t}\n+\n+\t@Override\n+\tpublic void onDestroy()\n+\t{\n+\t\t// also need to disconnect the clients, which is handled by disconnect\n+\t\t// method\n+\t\tdisconnect();\n+\n+\t\tsuper.onDestroy();\n+\t}\n+\n+\t@Override\n+\tpublic boolean onCreateOptionsMenu(Menu menu)\n+\t{\n+\t\tMenuInflater inflater = getMenuInflater();\n+\t\tinflater.inflate(R.menu.wifidirect, menu);\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean onOptionsItemSelected(MenuItem item)\n+\t{\n+\t\tswitch (item.getItemId())\n+\t\t{\n+\t\t\tcase R.id.atn_direct_enable:\n+\t\t\t\tif (manager != null && channel != null)\n+\t\t\t\t{\n+\t\t\t\t\t// Since this is the system wireless settings activity, it's\n+\t\t\t\t\t// not going to send us a result. We will be notified by\n+\t\t\t\t\t// WiFiDeviceBroadcastReceiver instead.\n+\t\t\t\t\tIntent intent = new Intent();\n+\t\t\t\t\t// jump to wi-fi Direct settings\n+\t\t\t\t\tintent.setClassName(\"com.android.settings\",\n+\t\t\t\t\t\t\t\"com.android.settings.Settings$WifiP2pSettingsActivity\");\n+\n+\t\t\t\t\tstartActivity(intent);\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\tLog.e(TAG, \"channel or manager is null\");\n+\t\t\t\t}\n+\t\t\t\treturn true;\n+\n+\t\t\tcase R.id.atn_direct_discover:\n+\t\t\t\tdiscoverDevices();\n+\t\t\t\treturn true;\n+\n+\t\t\tdefault:\n+\t\t\t\treturn super.onOptionsItemSelected(item);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Remove all peers and clear all fields. This is called on\n+\t * BroadcastReceiver receiving a state change event. This is merely an UI\n+\t * update.\n+\t */\n+\tpublic void resetDeviceList()\n+\t{\n+\t\tClientDeviceListFragment fragmentList = (ClientDeviceListFragment) getFragmentManager()\n+\t\t\t\t.findFragmentById(R.id.frag_speakers_devices);\n+\n+\t\tif (fragmentList != null)\n+\t\t{\n+\t\t\tfragmentList.clearPeers();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void showDetails(WifiP2pDevice device)\n+\t{\n+\t\t// TODO: This is for debugging, showing the device details\n+\t\tSpeakerMusicFragment fragMusic = (SpeakerMusicFragment) getFragmentManager()\n+\t\t\t\t.findFragmentById(R.id.fragment_speakermusic);\n+\t}\n+\n+\t@Override\n+\tpublic void showInfo(WifiP2pInfo info)\n+\t{\n+\t\tSpeakerMusicFragment fragMusic = (SpeakerMusicFragment) getFragmentManager()\n+\t\t\t\t.findFragmentById(R.id.fragment_speakermusic);\n+\n+\t\tif (info.isGroupOwner)\n+\t\t{\n+\t\t\t// fragMusic.setDebugText(\"I am the group owner.\");\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t// fragMusic.setDebugText(\"I am not the group owner.\");\n+\t\t}\n+\t}\n+\n+\t/*\n+\t * Cancel an ongoing connection in progress. We won't actually use this\n+\t * method all that much\n+\t * \n+\t * (non-Javadoc)\n+\t * \n+\t * @see\n+\t * com.example.musicsaround.dj.ServerDeviceListFragment.DJFragmentListener\n+\t * #cancelDisconnect()\n+\t */\n+\t@Override\n+\tpublic void cancelDisconnect()\n+\t{\n+\t\t/*\n+\t\t * A cancel abort request by user. Disconnect i.e. removeGroup if\n+\t\t * already connected. Else, request WifiP2pManager to abort the ongoing\n+\t\t * request\n+\t\t */\n+\t\tif (manager != null)\n+\t\t{\n+\t\t\tLog.d(TAG, \"Someone requested a cancel connect!\");\n+\n+\t\t\tfinal ClientDeviceListFragment fragment = (ClientDeviceListFragment) getFragmentManager()\n+\t\t\t\t\t.findFragmentById(R.id.frag_speakers_devices);\n+\n+\t\t\tif (fragment.getDevice() == null\n+\t\t\t\t\t|| fragment.getDevice().status == WifiP2pDevice.CONNECTED)\n+\t\t\t{\n+\t\t\t\t// disconnect();\n+\t\t\t}\n+\t\t\telse if (fragment.getDevice().status == WifiP2pDevice.AVAILABLE\n+\t\t\t\t\t|| fragment.getDevice().status == WifiP2pDevice.INVITED\n+\t\t\t\t\t|| fragment.getDevice().status == WifiP2pDevice.CONNECTED)\n+\t\t\t{\n+\t\t\t\tmanager.cancelConnect(channel, new ActionListener()\n+\t\t\t\t{\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void onSuccess()\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// Toast.makeText(DJActivity.this,\n+\t\t\t\t\t\t// \"Aborting connection\",\n+\t\t\t\t\t\t// Toast.LENGTH_SHORT).show();\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void onFailure(int reasonCode)\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// Toast.makeText(\n+\t\t\t\t\t\t// DJActivity.this,\n+\t\t\t\t\t\t// \"Connect abort request failed. Reason Code: \"\n+\t\t\t\t\t\t// + reasonCode, Toast.LENGTH_SHORT)\n+\t\t\t\t\t\t// .show();\n+\t\t\t\t\t\tLog.e(TAG,\n+\t\t\t\t\t\t\t\t\"Could not abort connection, the reason is: \"\n+\t\t\t\t\t\t\t\t\t\t+ reasonCode);\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/*\n+\t * This is the main method to connect to a device through Wi-Fi Direct!\n+\t * \n+\t * (non-Javadoc)\n+\t * \n+\t * @see com.example.musicsaround.speaker.ClientDeviceListFragment.\n+\t * SpeakerFragmentListener#connect(android.net.wifi.p2p.WifiP2pConfig)\n+\t */\n+\t@Override\n+\tpublic void connect(WifiP2pConfig config)\n+\t{\n+\t\tif (manager == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t// in Speaker mode, we don't want to become the group owner\n+\t\tWifiP2pConfig newConfig = config;\n+\t\tnewConfig.groupOwnerIntent = SPEAKER_MODE;\n+\n+\t\tmanager.connect(channel, newConfig, new ActionListener()\n+\t\t{\n+\t\t\t@Override\n+\t\t\tpublic void onSuccess()\n+\t\t\t{\n+\t\t\t\t// WiFiDirectBroadcastReceiver will notify us. Ignore for now.\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void onFailure(int reason)\n+\t\t\t{\n+\t\t\t\tToast.makeText(SpeakerActivity.this,\n+\t\t\t\t\t\t\"Connection failed. Retrying...\", Toast.LENGTH_SHORT)\n+\t\t\t\t\t\t.show();\n+\t\t\t\tLog.e(TAG,\n+\t\t\t\t\t\t\"Wi-fi Direct connection failed. The error code is: \"\n+\t\t\t\t\t\t\t\t+ reason);\n+\t\t\t}\n+\t\t});\n+\n+\t}\n+\n+\t@Override\n+\tpublic void disconnect()\n+\t{\n+\t\tif (manager == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t// TODO: why do we have to remove the whole group upon disconnect?\n+\t\t// perhaps we only need to do so upon exiting DJ mode\n+\t\tmanager.removeGroup(channel, new ActionListener()\n+\t\t{\n+\t\t\t@Override\n+\t\t\tpublic void onFailure(int reasonCode)\n+\t\t\t{\n+\t\t\t\tLog.e(TAG, \"Disconnect failed. Reason is: \" + reasonCode);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void onSuccess()\n+\t\t\t{\n+\t\t\t\tToast.makeText(SpeakerActivity.this, \"Disconnected.\",\n+\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n+\t\t\t\tLog.d(TAG, \"Disconnected from a device.\");\n+\t\t\t}\n+\t\t});\n+\n+\t\t// also need to disconnect the clients\n+\t\tClientDeviceListFragment fragmentList = (ClientDeviceListFragment) getFragmentManager()\n+\t\t\t\t.findFragmentById(R.id.frag_speakers_devices);\n+\n+\t\tif (fragmentList != null)\n+\t\t{\n+\t\t\tfragmentList.stopClient();\n+\t\t}\n+\n+\t\t// also need to stop the music\n+\t\tstopMusic();\n+\t}\n+\n+\t@Override\n+\tpublic void onChannelDisconnected()\n+\t{\n+\t\t// we will try once more\n+\t\tif (manager != null && !channelRetried)\n+\t\t{\n+\t\t\tToast.makeText(this, \"Wi-fi Direct Channel lost. Trying again...\",\n+\t\t\t\t\tToast.LENGTH_LONG).show();\n+\t\t\tresetDeviceList();\n+\n+\t\t\tchannelRetried = true;\n+\t\t\tmanager.initialize(this, getMainLooper(), this);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tToast.makeText(\n+\t\t\t\t\tthis,\n+\t\t\t\t\t\"Wi-fi Direct Channel is still lost. Try disabling / re-enabling Wi-fi Direct in the P2P Settings.\",\n+\t\t\t\t\tToast.LENGTH_LONG).show();\n+\t\t}\n+\n+\t\t// also need to disconnect the clients\n+\t\tClientDeviceListFragment fragmentList = (ClientDeviceListFragment) getFragmentManager()\n+\t\t\t\t.findFragmentById(R.id.frag_speakers_devices);\n+\n+\t\tif (fragmentList != null)\n+\t\t{\n+\t\t\tfragmentList.stopClient();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * @param isWifiP2pEnabled\n+\t *            the isWifiP2pEnabled to set\n+\t */\n+\tpublic void setIsWifiP2pEnabled(boolean isWifiP2pEnabled)\n+\t{\n+\t\tthis.isWifiP2pEnabled = isWifiP2pEnabled;\n+\t}\n+\n+\t@Override\n+\tpublic void playMusic(String url, long startTime, int startPos)\n+\t{\n+\t\tSpeakerMusicFragment fragMusic = (SpeakerMusicFragment) getFragmentManager()\n+\t\t\t\t.findFragmentById(R.id.fragment_speakermusic);\n+\n+\t\tif (fragMusic != null)\n+\t\t{\n+\t\t\tfragMusic.playSong(url, startTime, startPos);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void stopMusic()\n+\t{\n+\t\tSpeakerMusicFragment fragMusic = (SpeakerMusicFragment) getFragmentManager()\n+\t\t\t\t.findFragmentById(R.id.fragment_speakermusic);\n+\n+\t\tif (fragMusic != null)\n+\t\t{\n+\t\t\tfragMusic.stopMusic();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic Timer retrieveTimer()\n+\t{\n+\t\treturn timer;\n+\t}\n+}"], "score": 1.0, "methods_t": ["ActionListener ClientWiFiDirectBR CountDownTimer DialogInterface.OnCancelListener Intent IntentFilter Timer WifiP2pManager.ActionListener addAction cancel cancelConnect clearPeers connect d disconnect discoverDevices discoverPeers dismiss e enableWifi findFragmentById findViewById getDevice getFragmentManager getItemId getMainLooper getMenuInflater getSystemService inflate initialize isShowing makeText playSong registerReceiver removeGroup resetDeviceList setClassName setContentView setWifiEnabled show start startActivity startTimer stopClient stopMusic stopPeerDiscovery unregisterReceiver"], "_version_": 1526744814408695808, "subject_t": ["- Copy of the Android Wireless Music Surround Sound App"], "comments_t": ["\t\t// add necessary intent values to be matched. \t\t\t\t// WiFiDirectBroadcastReceiver will notify us. Ignore for now. \t\t\t\t// Toast.LENGTH_SHORT).show(); \t\t\t\t\t// WiFiDeviceBroadcastReceiver instead. \t\t\t\t\t\t\t\t// \"Stopping Discovery Failed : \" + reason, \t\t// perhaps we only need to do so upon exiting DJ mode \t\t\t\t\t\t\t\t\t\t// reason, \t\t\t\t\t\t\t\t\t\t// Toast.LENGTH_SHORT).show(); \t\t\t\t\t// Since this is the system wireless settings activity, it's \t\t// TODO: This is for debugging, showing the device details /** \n * register the BroadcastReceiver with the intent values to be matched \n */\n \t\t\t// fragMusic.setDebugText(\"I am not the group owner.\"); /** \n * UI to show the discovery process\n */\n \t\t\t\t\t\t// Toast.makeText(DJActivity.this, \t\t// also need to disconnect the clients, which is handled by disconnect \t\t// discovering \t\t\t\t// disconnect(); \t\t\t\t\t\t// DJActivity.this, \t\t// in Speaker mode, we don't want to become the group owner \t\t\t\t\t// jump to wi-fi Direct settings \t\t// start a timer with 25 ms precision \t\t\t\t\t// not going to send us a result. We will be notified by \t\t\t\t\t\t\t\t// Toast.makeText(DJActivity.this, /*\n* A cancel abort request by user. Disconnect i.e. removeGroup if\n* already connected. Else, request WifiP2pManager to abort the ongoing\n* request\n*/\n \t\t\t\t\t\t\t\t\t\t// \"Stopping Discovery Failed : \" + \t\t\t\t\t\t// Toast.LENGTH_SHORT).show(); \t\t\t\t\t\t// Toast.makeText( \t\t\t\t\t\t// + reasonCode, Toast.LENGTH_SHORT) \t\t// we will try once more /** \n * @param isWifiP2pEnabled the isWifiP2pEnabled to set\n */\n \t\t\t// fragMusic.setDebugText(\"I am the group owner.\"); \t\t\t\t// \"Discovery Initiated\", /** \n * Remove all peers and clear all fields. This is called on BroadcastReceiver receiving a state change event. This is merely an UI update.\n */\n \t\t// asynchronous call to start a timer \t\t// ***Start discovering right away! \t\t// TODO: need a better non-blocking UI to notify users we are \t\t// first turn on the wifi p2p \t\t\t\t// Toast.makeText(DJActivity.this, \t\t\t\t\t\t// \"Connect abort request failed. Reason Code: \" /*\n* This is the main method to connect to a device through Wi-Fi Direct!\n*\n* (non-Javadoc)\n*\n* @see com.example.musicsaround.speaker.ClientDeviceListFragment.\n* SpeakerFragmentListener#connect(android.net.wifi.p2p.WifiP2pConfig)\n*/\n \t\t\t\t\t\t\t\t// Toast.LENGTH_SHORT).show(); \t\t// also need to disconnect the clients \t\t\t\t\t\t\t\t\t\t// Toast.makeText(DJActivity.this, \t\t// also need to stop the music \t\t\t// if we failed, then stop the discovery and start again \t\t// onInitiateDiscovery(); \t\t\t\t\t\t// \"Aborting connection\", \t\t// TODO: why do we have to remove the whole group upon disconnect? \t\t\t\t\t\t// .show(); /*\n* Cancel an ongoing connection in progress. We won't actually use this\n* method all that much\n*\n* (non-Javadoc)\n*\n* @see\n* com.example.musicsaround.dj.ServerDeviceListFragment.DJFragmentListener\n* #cancelDisconnect()\n*/\n \t\t\t\t\t\t// stop discovery \t// keep the Wifi alive every 5 seconds \t\t// method"], "callsites_t": ["android.content.IntentFilter.addAction(java.lang.String) android.content.IntentFilter.addAction(java.lang.String) <unknown>.stopMusic() android.app.Activity.setContentView(<unknown>) android.net.wifi.p2p.WifiP2pManager.cancelConnect(android.net.wifi.p2p.WifiP2pManager.Channel, ) .WifiP2pManager.ActionListener() android.app.Activity.getSystemService(java.lang.String) com.example.musicsaround.speaker.SpeakerActivity.disconnect() android.content.Intent.setClassName(java.lang.String, java.lang.String) .DialogInterface.OnCancelListener() android.widget.Toast.makeText(com.example.musicsaround.speaker.SpeakerActivity, java.lang.String, int) <unknown>.clearPeers() android.app.FragmentManager.findFragmentById(<unknown>) android.app.FragmentManager.findFragmentById(<unknown>) com.example.musicsaround.speaker.SpeakerActivity.discoverDevices() com.example.musicsaround.speaker.SpeakerActivity.resetDeviceList() android.content.ContextWrapper.getMainLooper() android.content.IntentFilter.IntentFilter() android.app.Dialog.isShowing() android.net.wifi.p2p.WifiP2pManager.stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager.Channel, ) com.example.musicsaround.speaker.SpeakerActivity.enableWifi() android.app.Activity.getFragmentManager() .WifiP2pManager.ActionListener() <unknown>.getDevice() android.app.Activity.getSystemService(java.lang.String) android.net.wifi.p2p.WifiP2pManager.removeGroup(android.net.wifi.p2p.WifiP2pManager.Channel, ) android.util.Log.d(java.lang.String, java.lang.String) android.app.FragmentManager.findFragmentById(<unknown>) <unknown>.stopClient() android.view.MenuItem.getItemId() com.example.musicsaround.speaker.SpeakerActivity.stopMusic() <unknown>.ClientWiFiDirectBR(android.net.wifi.p2p.WifiP2pManager, android.net.wifi.p2p.WifiP2pManager.Channel, com.example.musicsaround.speaker.SpeakerActivity) android.net.wifi.p2p.WifiP2pManager.discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel, ) android.util.Log.d(java.lang.String, java.lang.String) android.widget.Toast.show() android.app.FragmentManager.findFragmentById(<unknown>) android.content.Intent.Intent() android.app.Activity.getFragmentManager() <unknown>.playSong(java.lang.String, long, int) android.app.Activity.getFragmentManager() android.content.ContextWrapper.getMainLooper() android.app.Activity.getFragmentManager() android.app.FragmentManager.findFragmentById(<unknown>) java.lang.Object.Timer(<unknown>) android.util.Log.e(java.lang.String, java.lang.String) android.app.Activity.getSystemService(java.lang.String) android.os.CountDownTimer.start() android.util.Log.e(java.lang.String, java.lang.String) android.app.Activity.startActivity(android.content.Intent) .ActionListener() android.util.Log.d(java.lang.String, java.lang.String) .WifiP2pManager.ActionListener() android.widget.Toast.show() android.app.Dialog.dismiss() .WifiP2pManager.ActionListener() android.util.Log.d(java.lang.String, java.lang.String) android.widget.Toast.makeText(com.example.musicsaround.speaker.SpeakerActivity, java.lang.String, int) android.util.Log.e(java.lang.String, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) android.util.Log.e(java.lang.String, java.lang.String) .ActionListener() android.content.ContextWrapper.unregisterReceiver(android.content.BroadcastReceiver) android.util.Log.e(java.lang.String, java.lang.String) android.content.IntentFilter.addAction(java.lang.String) android.view.MenuInflater.inflate(<unknown>, android.view.Menu) android.app.FragmentManager.findFragmentById(<unknown>) android.net.wifi.p2p.WifiP2pManager.connect(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pConfig, ) android.app.Activity.getFragmentManager() android.app.FragmentManager.findFragmentById(<unknown>) android.app.Activity.getFragmentManager() android.app.FragmentManager.findFragmentById(<unknown>) android.net.wifi.p2p.WifiP2pManager.discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel, ) android.app.Activity.getFragmentManager() com.example.musicsaround.speaker.SpeakerActivity.discoverDevices() android.os.CountDownTimer.start() android.content.ContextWrapper.registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter) android.widget.Toast.show() <unknown>.stopClient() android.net.wifi.p2p.WifiP2pManager.initialize(com.example.musicsaround.speaker.SpeakerActivity, android.os.Looper, com.example.musicsaround.speaker.SpeakerActivity) android.app.ProgressDialog.show(com.example.musicsaround.speaker.SpeakerActivity, java.lang.String, java.lang.String, boolean, boolean, ) .CountDownTimer(int, int) .ActionListener() android.widget.Toast.show() android.net.wifi.p2p.WifiP2pManager.stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager.Channel, ) android.content.IntentFilter.addAction(java.lang.String) android.widget.Toast.show() android.widget.Toast.makeText(com.example.musicsaround.speaker.SpeakerActivity, java.lang.String, int) android.util.Log.e(java.lang.String, java.lang.String) android.widget.Toast.makeText(com.example.musicsaround.speaker.SpeakerActivity, java.lang.String, int) android.os.CountDownTimer.cancel() android.util.Log.e(java.lang.String, java.lang.String) android.app.Activity.getFragmentManager() android.app.Activity.findViewById(<unknown>) android.util.Log.e(java.lang.String, java.lang.String) <unknown>.startTimer() android.widget.Toast.makeText(com.example.musicsaround.speaker.SpeakerActivity, java.lang.String, int) android.widget.Toast.show() android.net.wifi.p2p.WifiP2pManager.initialize(com.example.musicsaround.speaker.SpeakerActivity, android.os.Looper, null) android.widget.Toast.makeText(com.example.musicsaround.speaker.SpeakerActivity, java.lang.String, int) android.net.wifi.WifiManager.setWifiEnabled(boolean) android.net.wifi.WifiManager.setWifiEnabled(boolean) android.app.Activity.getMenuInflater()"], "id": "bryan-y88/Musics_Around\u0000b7b206d3c28c8792a84ecb5017f4596c52d1a50e\u0000Core Application/src/com/example/musicsaround/speaker/SpeakerActivity.java", "callsites_cs": "android.content.IntentFilter.addAction(java.lang.String)#android.content.IntentFilter.addAction(java.lang.String)#<unknown>.stopMusic()#android.app.Activity.setContentView(<unknown>)#android.net.wifi.p2p.WifiP2pManager.cancelConnect(android.net.wifi.p2p.WifiP2pManager.Channel, )#.WifiP2pManager.ActionListener()#android.app.Activity.getSystemService(java.lang.String)#com.example.musicsaround.speaker.SpeakerActivity.disconnect()#android.content.Intent.setClassName(java.lang.String, java.lang.String)#.DialogInterface.OnCancelListener()#android.widget.Toast.makeText(com.example.musicsaround.speaker.SpeakerActivity, java.lang.String, int)#<unknown>.clearPeers()#android.app.FragmentManager.findFragmentById(<unknown>)#android.app.FragmentManager.findFragmentById(<unknown>)#com.example.musicsaround.speaker.SpeakerActivity.discoverDevices()#com.example.musicsaround.speaker.SpeakerActivity.resetDeviceList()#android.content.ContextWrapper.getMainLooper()#android.content.IntentFilter.IntentFilter()#android.app.Dialog.isShowing()#android.net.wifi.p2p.WifiP2pManager.stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager.Channel, )#com.example.musicsaround.speaker.SpeakerActivity.enableWifi()#android.app.Activity.getFragmentManager()#.WifiP2pManager.ActionListener()#<unknown>.getDevice()#android.app.Activity.getSystemService(java.lang.String)#android.net.wifi.p2p.WifiP2pManager.removeGroup(android.net.wifi.p2p.WifiP2pManager.Channel, )#android.util.Log.d(java.lang.String, java.lang.String)#android.app.FragmentManager.findFragmentById(<unknown>)#<unknown>.stopClient()#android.view.MenuItem.getItemId()#com.example.musicsaround.speaker.SpeakerActivity.stopMusic()#<unknown>.ClientWiFiDirectBR(android.net.wifi.p2p.WifiP2pManager, android.net.wifi.p2p.WifiP2pManager.Channel, com.example.musicsaround.speaker.SpeakerActivity)#android.net.wifi.p2p.WifiP2pManager.discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel, )#android.util.Log.d(java.lang.String, java.lang.String)#android.widget.Toast.show()#android.app.FragmentManager.findFragmentById(<unknown>)#android.content.Intent.Intent()#android.app.Activity.getFragmentManager()#<unknown>.playSong(java.lang.String, long, int)#android.app.Activity.getFragmentManager()#android.content.ContextWrapper.getMainLooper()#android.app.Activity.getFragmentManager()#android.app.FragmentManager.findFragmentById(<unknown>)#java.lang.Object.Timer(<unknown>)#android.util.Log.e(java.lang.String, java.lang.String)#android.app.Activity.getSystemService(java.lang.String)#android.os.CountDownTimer.start()#android.util.Log.e(java.lang.String, java.lang.String)#android.app.Activity.startActivity(android.content.Intent)#.ActionListener()#android.util.Log.d(java.lang.String, java.lang.String)#.WifiP2pManager.ActionListener()#android.widget.Toast.show()#android.app.Dialog.dismiss()#.WifiP2pManager.ActionListener()#android.util.Log.d(java.lang.String, java.lang.String)#android.widget.Toast.makeText(com.example.musicsaround.speaker.SpeakerActivity, java.lang.String, int)#android.util.Log.e(java.lang.String, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#android.util.Log.e(java.lang.String, java.lang.String)#.ActionListener()#android.content.ContextWrapper.unregisterReceiver(android.content.BroadcastReceiver)#android.util.Log.e(java.lang.String, java.lang.String)#android.content.IntentFilter.addAction(java.lang.String)#android.view.MenuInflater.inflate(<unknown>, android.view.Menu)#android.app.FragmentManager.findFragmentById(<unknown>)#android.net.wifi.p2p.WifiP2pManager.connect(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pConfig, )#android.app.Activity.getFragmentManager()#android.app.FragmentManager.findFragmentById(<unknown>)#android.app.Activity.getFragmentManager()#android.app.FragmentManager.findFragmentById(<unknown>)#android.net.wifi.p2p.WifiP2pManager.discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel, )#android.app.Activity.getFragmentManager()#com.example.musicsaround.speaker.SpeakerActivity.discoverDevices()#android.os.CountDownTimer.start()#android.content.ContextWrapper.registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)#android.widget.Toast.show()#<unknown>.stopClient()#android.net.wifi.p2p.WifiP2pManager.initialize(com.example.musicsaround.speaker.SpeakerActivity, android.os.Looper, com.example.musicsaround.speaker.SpeakerActivity)#android.app.ProgressDialog.show(com.example.musicsaround.speaker.SpeakerActivity, java.lang.String, java.lang.String, boolean, boolean, )#.CountDownTimer(int, int)#.ActionListener()#android.widget.Toast.show()#android.net.wifi.p2p.WifiP2pManager.stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager.Channel, )#android.content.IntentFilter.addAction(java.lang.String)#android.widget.Toast.show()#android.widget.Toast.makeText(com.example.musicsaround.speaker.SpeakerActivity, java.lang.String, int)#android.util.Log.e(java.lang.String, java.lang.String)#android.widget.Toast.makeText(com.example.musicsaround.speaker.SpeakerActivity, java.lang.String, int)#android.os.CountDownTimer.cancel()#android.util.Log.e(java.lang.String, java.lang.String)#android.app.Activity.getFragmentManager()#android.app.Activity.findViewById(<unknown>)#android.util.Log.e(java.lang.String, java.lang.String)#<unknown>.startTimer()#android.widget.Toast.makeText(com.example.musicsaround.speaker.SpeakerActivity, java.lang.String, int)#android.widget.Toast.show()#android.net.wifi.p2p.WifiP2pManager.initialize(com.example.musicsaround.speaker.SpeakerActivity, android.os.Looper, null)#android.widget.Toast.makeText(com.example.musicsaround.speaker.SpeakerActivity, java.lang.String, int)#android.net.wifi.WifiManager.setWifiEnabled(boolean)#android.net.wifi.WifiManager.setWifiEnabled(boolean)#android.app.Activity.getMenuInflater()"}, {"user_sni": "Bryan Yan", "repo_sni": "bryan-y88/Musics_Around", "imports_t": ["android.content.BroadcastReceiver com.example.musicsaround.Timer android.os.CountDownTimer android.net.wifi.p2p.WifiP2pManager.Channel com.example.musicsaround.Utilities com.example.musicsaround.dj.ServerDeviceListFragment.DJFragmentListener com.example.musicsaround.R android.widget.Toast android.net.wifi.p2p.WifiP2pInfo android.content.IntentFilter android.content.Context android.os.Bundle android.content.DialogInterface android.content.Intent android.view.Menu java.io.File android.view.MenuInflater android.net.wifi.p2p.WifiP2pManager android.net.wifi.WifiManager android.app.ProgressDialog android.net.wifi.p2p.WifiP2pDevice android.view.MenuItem android.net.wifi.p2p.WifiP2pManager.ChannelListener android.widget.TextView android.net.Uri android.util.Log android.net.wifi.p2p.WifiP2pConfig android.app.Activity android.net.wifi.p2p.WifiP2pManager.ActionListener"], "email_sni": "bryan.y88@gmail.com", "contents_t": ["package com.example.musicsaround.dj;\n\nimport java.io.File;\n\nimport android.app.Activity;\nimport android.app.ProgressDialog;\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.net.Uri;\nimport android.net.wifi.WifiManager;\nimport android.net.wifi.p2p.WifiP2pConfig;\nimport android.net.wifi.p2p.WifiP2pDevice;\nimport android.net.wifi.p2p.WifiP2pInfo;\nimport android.net.wifi.p2p.WifiP2pManager;\nimport android.net.wifi.p2p.WifiP2pManager.ActionListener;\nimport android.net.wifi.p2p.WifiP2pManager.Channel;\nimport android.net.wifi.p2p.WifiP2pManager.ChannelListener;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.example.musicsaround.R;\nimport com.example.musicsaround.Timer;\nimport com.example.musicsaround.Utilities;\nimport com.example.musicsaround.dj.ServerDeviceListFragment.DJFragmentListener;\n\npublic class DJActivity extends Activity implements ChannelListener,\n\t\tDJFragmentListener\n{\n\tpublic final static int DJ_MODE = 15;\n\n\tpublic static final String TAG = \"DJ Mode Activity\";\n\tprivate WifiP2pManager manager;\n\tprivate boolean channelRetried = false;\n\tprivate boolean isWifiP2pEnabled = false;\n\tprivate BroadcastReceiver receiver = null;\n\tProgressDialog progressDialog = null;\n\n\tprivate Timer timer;\n\n\tprivate CountDownTimer keepAliveTimer;\n\t// Keep the Wifi Alive every 5 seconds\n\tprivate static final int KEEPALIVE_INTERVAL = 5000;\n\n\t// critical component for Wi-fi Direct connectivity\n\tprivate Channel channel;\n\n\tprivate final IntentFilter intentFilter = new IntentFilter();\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState)\n\t{\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_dj);\n\n\t\t// need these intent filters to catch the Wi-fi direct events\n\t\tintentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);\n\t\tintentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);\n\t\tintentFilter\n\t\t\t\t.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);\n\t\tintentFilter\n\t\t\t\t.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);\n\n\t\tmanager = (WifiP2pManager) getSystemService(Context.WIFI_P2P_SERVICE);\n\t\tchannel = manager.initialize(this, getMainLooper(), null);\n\n\t\tTextView txt_time = (TextView) this.findViewById(R.id.txt_dj_time);\n\n\t\t// start a timer with 25 ms precision\n\t\tthis.timer = new Timer(Timer.DEFAULT_TIMER_PRECISION);\n\t\t// asynchronous call to start a timer\n\t\tthis.timer.startTimer();\n\n\t\tkeepAliveTimer = new CountDownTimer(KEEPALIVE_INTERVAL,\n\t\t\t\tKEEPALIVE_INTERVAL)\n\t\t{\n\n\t\t\t@Override\n\t\t\tpublic void onTick(long millisUntilFinished)\n\t\t\t{\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onFinish()\n\t\t\t{\n\t\t\t\tenableWifi();\n\t\t\t\tkeepAliveTimer.start();\n\t\t\t}\n\t\t};\n\t}\n\n\t/** register the BroadcastReceiver with the intent values to be matched */\n\t@Override\n\tpublic void onResume()\n\t{\n\t\tsuper.onResume();\n\t\treceiver = new ServerWiFiDirectBR(manager, channel, this);\n\t\tregisterReceiver(receiver, intentFilter);\n\n\t\t// ***Start discovering right away!\n\t\tdiscoverDevices();\n\t\tkeepAliveTimer.start();\n\t}\n\n\tpublic void enableWifi()\n\t{\n\t\tWifiManager wifiManager = (WifiManager) this\n\t\t\t\t.getSystemService(this.WIFI_SERVICE);\n\n\t\twifiManager.setWifiEnabled(true);\n\t}\n\n\t/**\n\t * UI to show the discovery process\n\t */\n\tpublic void onInitiateDiscovery()\n\t{\n\t\tif (progressDialog != null && progressDialog.isShowing())\n\t\t{\n\t\t\tprogressDialog.dismiss();\n\t\t}\n\n\t\tprogressDialog = ProgressDialog.show(this, \"Press back to cancel\",\n\t\t\t\t\"finding peers\", true, true,\n\t\t\t\tnew DialogInterface.OnCancelListener()\n\t\t\t\t{\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onCancel(DialogInterface dialog)\n\t\t\t\t\t{\n\t\t\t\t\t\t// stop discovery\n\t\t\t\t\t\tmanager.stopPeerDiscovery(channel,\n\t\t\t\t\t\t\t\tnew WifiP2pManager.ActionListener()\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void onFailure(int reason)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// Toast.makeText(DJActivity.this,\n\t\t\t\t\t\t\t\t\t\t// \"Stopping Discovery Failed : \" +\n\t\t\t\t\t\t\t\t\t\t// reason,\n\t\t\t\t\t\t\t\t\t\t// Toast.LENGTH_SHORT).show();\n\t\t\t\t\t\t\t\t\t\tLog.e(TAG,\n\t\t\t\t\t\t\t\t\t\t\t\t\"Stopping Discovery Failed. Error Code is: \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ reason);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void onSuccess()\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tLog.d(TAG, \"Discovery stopped.\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tpublic void discoverDevices()\n\t{\n\t\t// TODO: need a better non-blocking UI to notify users we are\n\t\t// discovering\n\t\t// onInitiateDiscovery();\n\n\t\t// first turn on the wifi p2p\n\t\tenableWifi();\n\n\t\tchannelRetried = false;\n\n\t\tmanager.discoverPeers(channel, new WifiP2pManager.ActionListener()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void onSuccess()\n\t\t\t{\n\t\t\t\t// Toast.makeText(DJActivity.this,\n\t\t\t\t// \"Discovery Initiated\",\n\t\t\t\t// Toast.LENGTH_SHORT).show();\n\n\t\t\t\tLog.d(TAG, \"Discovery Initiated.\");\n\t\t\t}\n\n\t\t\t// if we failed, then stop the discovery and start again\n\t\t\t@Override\n\t\t\tpublic void onFailure(int reasonCode)\n\t\t\t{\n\t\t\t\tLog.e(TAG, \"Discovery Failed. Error Code is: \" + reasonCode);\n\t\t\t\tmanager.stopPeerDiscovery(channel,\n\t\t\t\t\t\tnew WifiP2pManager.ActionListener()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void onFailure(int reason)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Toast.makeText(DJActivity.this,\n\t\t\t\t\t\t\t\t// \"Stopping Discovery Failed : \" + reason,\n\t\t\t\t\t\t\t\t// Toast.LENGTH_SHORT).show();\n\t\t\t\t\t\t\t\tLog.e(TAG,\n\t\t\t\t\t\t\t\t\t\t\"Stopping Discovery Failed. Error Code is: \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ reason);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void onSuccess()\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmanager.discoverPeers(channel,\n\t\t\t\t\t\t\t\t\t\tnew WifiP2pManager.ActionListener()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t\t\tpublic void onSuccess()\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t// Toast.makeText(DJActivity.this,\n\t\t\t\t\t\t\t\t\t\t\t\t// \"Discovery Initiated\",\n\t\t\t\t\t\t\t\t\t\t\t\t// Toast.LENGTH_SHORT)\n\t\t\t\t\t\t\t\t\t\t\t\t// .show();\n\n\t\t\t\t\t\t\t\t\t\t\t\tLog.d(TAG,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Discovery Initiated.\");\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t\t\tpublic void onFailure(int reasonCode)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tLog.e(TAG,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Discovery Failed. Error Code is: \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ reasonCode);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t@Override\n\tpublic void onPause()\n\t{\n\t\tsuper.onPause();\n\t\tunregisterReceiver(receiver);\n\n\t\tkeepAliveTimer.cancel();\n\t}\n\n\t@Override\n\tpublic void onDestroy()\n\t{\n\t\tdisconnect();\n\n\t\tsuper.onDestroy();\n\t}\n\n\t@Override\n\tpublic boolean onCreateOptionsMenu(Menu menu)\n\t{\n\t\tMenuInflater inflater = getMenuInflater();\n\t\tinflater.inflate(R.menu.wifidirect_less, menu);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic boolean onOptionsItemSelected(MenuItem item)\n\t{\n\t\tswitch (item.getItemId())\n\t\t{\n\t\t\tcase R.id.atn_direct_enable:\n\t\t\t\tif (manager != null && channel != null)\n\t\t\t\t{\n\t\t\t\t\t// Since this is the system wireless settings activity, it's\n\t\t\t\t\t// not going to send us a result. We will be notified by\n\t\t\t\t\t// WiFiDeviceBroadcastReceiver instead.\n\t\t\t\t\tIntent intent = new Intent();\n\t\t\t\t\t// jump to wi-fi Direct settings\n\t\t\t\t\tintent.setClassName(\"com.android.settings\",\n\t\t\t\t\t\t\t\"com.android.settings.Settings$WifiP2pSettingsActivity\");\n\n\t\t\t\t\tstartActivity(intent);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tLog.e(TAG, \"channel or manager is null\");\n\t\t\t\t}\n\t\t\t\treturn true;\n\n\t\t\tcase R.id.atn_direct_discover:\n\t\t\t\tdiscoverDevices();\n\t\t\t\treturn true;\n\n\t\t\tdefault:\n\t\t\t\treturn super.onOptionsItemSelected(item);\n\t\t}\n\t}\n\n\t/**\n\t * Remove all peers and clear all fields. This is called on\n\t * BroadcastReceiver receiving a state change event. This is merely an UI\n\t * update.\n\t */\n\tpublic void resetDeviceList()\n\t{\n\t\tServerDeviceListFragment fragmentList = (ServerDeviceListFragment) getFragmentManager()\n\t\t\t\t.findFragmentById(R.id.frag_djs_devices);\n\n\t\tif (fragmentList != null)\n\t\t{\n\t\t\tfragmentList.clearPeers();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onChannelDisconnected()\n\t{\n\t\t// we will try once more\n\t\tif (manager != null && !channelRetried)\n\t\t{\n\t\t\tToast.makeText(this, \"Wi-fi Direct Channel lost. Trying again...\",\n\t\t\t\t\tToast.LENGTH_LONG).show();\n\t\t\tresetDeviceList();\n\n\t\t\tchannelRetried = true;\n\t\t\tmanager.initialize(this, getMainLooper(), this);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tToast.makeText(\n\t\t\t\t\tthis,\n\t\t\t\t\t\"Wi-fi Direct Channel is still lost. Try disabling / re-enabling Wi-fi Direct in the P2P Settings.\",\n\t\t\t\t\tToast.LENGTH_LONG).show();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void showDetails(WifiP2pDevice device)\n\t{\n\t\t// TODO: This is for debugging, showing the device details\n\t\tDJMusicFragment fragMusic = (DJMusicFragment) getFragmentManager()\n\t\t\t\t.findFragmentById(R.id.frag_dj_music);\n\t}\n\n\t@Override\n\tpublic void showInfo(WifiP2pInfo info)\n\t{\n\t\tDJMusicFragment fragMusic = (DJMusicFragment) getFragmentManager()\n\t\t\t\t.findFragmentById(R.id.frag_dj_music);\n\n\t\tif (info.isGroupOwner)\n\t\t{\n\t\t\t// fragMusic.setDebugText(\"I am the group owner.\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// fragMusic.setDebugText(\"I am not the group owner.\");\n\t\t}\n\t}\n\n\t/*\n\t * Cancel an ongoing connection in progress. We won't actually use this\n\t * method all that much\n\t * \n\t * (non-Javadoc)\n\t * \n\t * @see\n\t * com.example.musicsaround.dj.ServerDeviceListFragment.DJFragmentListener\n\t * #cancelDisconnect()\n\t */\n\t@Override\n\tpublic void cancelDisconnect()\n\t{\n\t\t/*\n\t\t * A cancel abort request by user. Disconnect i.e. removeGroup if\n\t\t * already connected. Else, request WifiP2pManager to abort the ongoing\n\t\t * request\n\t\t */\n\t\tif (manager != null)\n\t\t{\n\t\t\tLog.d(TAG, \"Someone requested a cancel connect!\");\n\n\t\t\tfinal ServerDeviceListFragment fragment = (ServerDeviceListFragment) getFragmentManager()\n\t\t\t\t\t.findFragmentById(R.id.frag_djs_devices);\n\n\t\t\tif (fragment.getDevice() == null\n\t\t\t\t\t|| fragment.getDevice().status == WifiP2pDevice.CONNECTED)\n\t\t\t{\n\t\t\t\t// we don't disconnect the whole group... it would be nice just\n\t\t\t\t// to disconnect that one guy\n\t\t\t\t// disconnect();\n\t\t\t}\n\t\t\telse if (fragment.getDevice().status == WifiP2pDevice.AVAILABLE\n\t\t\t\t\t|| fragment.getDevice().status == WifiP2pDevice.INVITED\n\t\t\t\t\t|| fragment.getDevice().status == WifiP2pDevice.CONNECTED)\n\t\t\t{\n\t\t\t\tmanager.cancelConnect(channel, new ActionListener()\n\t\t\t\t{\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onSuccess()\n\t\t\t\t\t{\n\t\t\t\t\t\t// Toast.makeText(DJActivity.this,\n\t\t\t\t\t\t// \"Aborting connection\",\n\t\t\t\t\t\t// Toast.LENGTH_SHORT).show();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onFailure(int reasonCode)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Toast.makeText(\n\t\t\t\t\t\t// DJActivity.this,\n\t\t\t\t\t\t// \"Connect abort request failed. Reason Code: \"\n\t\t\t\t\t\t// + reasonCode, Toast.LENGTH_SHORT)\n\t\t\t\t\t\t// .show();\n\t\t\t\t\t\tLog.e(TAG,\n\t\t\t\t\t\t\t\t\"Could not abort connection, the reason is: \"\n\t\t\t\t\t\t\t\t\t\t+ reasonCode);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t * This is the main method to connect to a device through Wi-Fi Direct!\n\t * \n\t * (non-Javadoc)\n\t * \n\t * @see\n\t * com.example.musicsaround.dj.ServerDeviceListFragment.DJFragmentListener\n\t * #connect(android.net.wifi.p2p.WifiP2pConfig)\n\t */\n\t@Override\n\tpublic void connect(WifiP2pConfig config)\n\t{\n\t\tif (manager == null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t// in DJ mode, we want to become the group owner\n\t\tWifiP2pConfig newConfig = config;\n\t\tnewConfig.groupOwnerIntent = DJ_MODE;\n\n\t\tmanager.connect(channel, newConfig, new ActionListener()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void onSuccess()\n\t\t\t{\n\t\t\t\t// WiFiDirectBroadcastReceiver will notify us. Ignore for now.\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onFailure(int reason)\n\t\t\t{\n\t\t\t\tToast.makeText(DJActivity.this,\n\t\t\t\t\t\t\"Connection failed. Retrying...\", Toast.LENGTH_SHORT)\n\t\t\t\t\t\t.show();\n\t\t\t\tLog.e(TAG,\n\t\t\t\t\t\t\"Wi-fi Direct connection failed. The error code is: \"\n\t\t\t\t\t\t\t\t+ reason);\n\t\t\t}\n\t\t});\n\t}\n\n\t@Override\n\tpublic void disconnect()\n\t{\n\t\tif (manager == null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: why do we have to remove the whole group upon disconnect?\n\t\t// perhaps we only need to do so upon exiting DJ mode\n\t\tmanager.removeGroup(channel, new ActionListener()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void onFailure(int reasonCode)\n\t\t\t{\n\t\t\t\tLog.e(TAG, \"Disconnect failed. Reason is: \" + reasonCode);\n\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onSuccess()\n\t\t\t{\n\t\t\t\tToast.makeText(DJActivity.this, \"Disconnected a device.\",\n\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\t\tLog.d(TAG, \"Disconnected from a device.\");\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @param isWifiP2pEnabled\n\t *            the isWifiP2pEnabled to set\n\t */\n\tpublic void setIsWifiP2pEnabled(boolean isWifiP2pEnabled)\n\t{\n\t\tthis.isWifiP2pEnabled = isWifiP2pEnabled;\n\t}\n\n\tpublic void playRemoteMusic(Uri musicFileURI, long startTime, int startPos)\n\t{\n\t\tServerDeviceListFragment fragmentList = (ServerDeviceListFragment) getFragmentManager()\n\t\t\t\t.findFragmentById(R.id.frag_djs_devices);\n\n\t\t// convert URI to actual file path\n\t\tUri filePathFromActivity = Uri.parse(Utilities.getRealPathFromUri(\n\t\t\t\t(Activity) this, musicFileURI));\n\n\t\tFile audioFile = new File(filePathFromActivity.getPath());\n\n\t\tfragmentList.playMusicOnClients(audioFile, startTime, startPos);\n\t}\n\n\tpublic void playRemoteMusic(String musicFilePath, long startTime,\n\t\t\tint startPos)\n\t{\n\t\tServerDeviceListFragment fragmentList = (ServerDeviceListFragment) getFragmentManager()\n\t\t\t\t.findFragmentById(R.id.frag_djs_devices);\n\n\t\tFile audioFile = new File(musicFilePath);\n\n\t\tfragmentList.playMusicOnClients(audioFile, startTime, startPos);\n\t}\n\n\tpublic void stopRemoteMusic()\n\t{\n\t\tServerDeviceListFragment fragmentList = (ServerDeviceListFragment) getFragmentManager()\n\t\t\t\t.findFragmentById(R.id.frag_djs_devices);\n\t\tfragmentList.stopMusicOnClients();\n\t}\n\n\tpublic Timer getTimer()\n\t{\n\t\treturn timer;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2014-02-20T04:08:41Z", "hash_sni": "b7b206d3c28c8792a84ecb5017f4596c52d1a50e", "name_sni": "Core Application/src/com/example/musicsaround/dj/DJActivity.java", "patch_t": ["+package com.example.musicsaround.dj;\n+\n+import java.io.File;\n+\n+import android.app.Activity;\n+import android.app.ProgressDialog;\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.DialogInterface;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.net.Uri;\n+import android.net.wifi.WifiManager;\n+import android.net.wifi.p2p.WifiP2pConfig;\n+import android.net.wifi.p2p.WifiP2pDevice;\n+import android.net.wifi.p2p.WifiP2pInfo;\n+import android.net.wifi.p2p.WifiP2pManager;\n+import android.net.wifi.p2p.WifiP2pManager.ActionListener;\n+import android.net.wifi.p2p.WifiP2pManager.Channel;\n+import android.net.wifi.p2p.WifiP2pManager.ChannelListener;\n+import android.os.Bundle;\n+import android.os.CountDownTimer;\n+import android.util.Log;\n+import android.view.Menu;\n+import android.view.MenuInflater;\n+import android.view.MenuItem;\n+import android.widget.TextView;\n+import android.widget.Toast;\n+\n+import com.example.musicsaround.R;\n+import com.example.musicsaround.Timer;\n+import com.example.musicsaround.Utilities;\n+import com.example.musicsaround.dj.ServerDeviceListFragment.DJFragmentListener;\n+\n+public class DJActivity extends Activity implements ChannelListener,\n+\t\tDJFragmentListener\n+{\n+\tpublic final static int DJ_MODE = 15;\n+\n+\tpublic static final String TAG = \"DJ Mode Activity\";\n+\tprivate WifiP2pManager manager;\n+\tprivate boolean channelRetried = false;\n+\tprivate boolean isWifiP2pEnabled = false;\n+\tprivate BroadcastReceiver receiver = null;\n+\tProgressDialog progressDialog = null;\n+\n+\tprivate Timer timer;\n+\n+\tprivate CountDownTimer keepAliveTimer;\n+\t// Keep the Wifi Alive every 5 seconds\n+\tprivate static final int KEEPALIVE_INTERVAL = 5000;\n+\n+\t// critical component for Wi-fi Direct connectivity\n+\tprivate Channel channel;\n+\n+\tprivate final IntentFilter intentFilter = new IntentFilter();\n+\n+\t@Override\n+\tprotected void onCreate(Bundle savedInstanceState)\n+\t{\n+\t\tsuper.onCreate(savedInstanceState);\n+\t\tsetContentView(R.layout.activity_dj);\n+\n+\t\t// need these intent filters to catch the Wi-fi direct events\n+\t\tintentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);\n+\t\tintentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);\n+\t\tintentFilter\n+\t\t\t\t.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);\n+\t\tintentFilter\n+\t\t\t\t.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);\n+\n+\t\tmanager = (WifiP2pManager) getSystemService(Context.WIFI_P2P_SERVICE);\n+\t\tchannel = manager.initialize(this, getMainLooper(), null);\n+\n+\t\tTextView txt_time = (TextView) this.findViewById(R.id.txt_dj_time);\n+\n+\t\t// start a timer with 25 ms precision\n+\t\tthis.timer = new Timer(Timer.DEFAULT_TIMER_PRECISION);\n+\t\t// asynchronous call to start a timer\n+\t\tthis.timer.startTimer();\n+\n+\t\tkeepAliveTimer = new CountDownTimer(KEEPALIVE_INTERVAL,\n+\t\t\t\tKEEPALIVE_INTERVAL)\n+\t\t{\n+\n+\t\t\t@Override\n+\t\t\tpublic void onTick(long millisUntilFinished)\n+\t\t\t{\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void onFinish()\n+\t\t\t{\n+\t\t\t\tenableWifi();\n+\t\t\t\tkeepAliveTimer.start();\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\t/** register the BroadcastReceiver with the intent values to be matched */\n+\t@Override\n+\tpublic void onResume()\n+\t{\n+\t\tsuper.onResume();\n+\t\treceiver = new ServerWiFiDirectBR(manager, channel, this);\n+\t\tregisterReceiver(receiver, intentFilter);\n+\n+\t\t// ***Start discovering right away!\n+\t\tdiscoverDevices();\n+\t\tkeepAliveTimer.start();\n+\t}\n+\n+\tpublic void enableWifi()\n+\t{\n+\t\tWifiManager wifiManager = (WifiManager) this\n+\t\t\t\t.getSystemService(this.WIFI_SERVICE);\n+\n+\t\twifiManager.setWifiEnabled(true);\n+\t}\n+\n+\t/**\n+\t * UI to show the discovery process\n+\t */\n+\tpublic void onInitiateDiscovery()\n+\t{\n+\t\tif (progressDialog != null && progressDialog.isShowing())\n+\t\t{\n+\t\t\tprogressDialog.dismiss();\n+\t\t}\n+\n+\t\tprogressDialog = ProgressDialog.show(this, \"Press back to cancel\",\n+\t\t\t\t\"finding peers\", true, true,\n+\t\t\t\tnew DialogInterface.OnCancelListener()\n+\t\t\t\t{\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void onCancel(DialogInterface dialog)\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// stop discovery\n+\t\t\t\t\t\tmanager.stopPeerDiscovery(channel,\n+\t\t\t\t\t\t\t\tnew WifiP2pManager.ActionListener()\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\t\tpublic void onFailure(int reason)\n+\t\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\t// Toast.makeText(DJActivity.this,\n+\t\t\t\t\t\t\t\t\t\t// \"Stopping Discovery Failed : \" +\n+\t\t\t\t\t\t\t\t\t\t// reason,\n+\t\t\t\t\t\t\t\t\t\t// Toast.LENGTH_SHORT).show();\n+\t\t\t\t\t\t\t\t\t\tLog.e(TAG,\n+\t\t\t\t\t\t\t\t\t\t\t\t\"Stopping Discovery Failed. Error Code is: \"\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ reason);\n+\t\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\t\tpublic void onSuccess()\n+\t\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\tLog.d(TAG, \"Discovery stopped.\");\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t}\n+\n+\tpublic void discoverDevices()\n+\t{\n+\t\t// TODO: need a better non-blocking UI to notify users we are\n+\t\t// discovering\n+\t\t// onInitiateDiscovery();\n+\n+\t\t// first turn on the wifi p2p\n+\t\tenableWifi();\n+\n+\t\tchannelRetried = false;\n+\n+\t\tmanager.discoverPeers(channel, new WifiP2pManager.ActionListener()\n+\t\t{\n+\t\t\t@Override\n+\t\t\tpublic void onSuccess()\n+\t\t\t{\n+\t\t\t\t// Toast.makeText(DJActivity.this,\n+\t\t\t\t// \"Discovery Initiated\",\n+\t\t\t\t// Toast.LENGTH_SHORT).show();\n+\n+\t\t\t\tLog.d(TAG, \"Discovery Initiated.\");\n+\t\t\t}\n+\n+\t\t\t// if we failed, then stop the discovery and start again\n+\t\t\t@Override\n+\t\t\tpublic void onFailure(int reasonCode)\n+\t\t\t{\n+\t\t\t\tLog.e(TAG, \"Discovery Failed. Error Code is: \" + reasonCode);\n+\t\t\t\tmanager.stopPeerDiscovery(channel,\n+\t\t\t\t\t\tnew WifiP2pManager.ActionListener()\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic void onFailure(int reason)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t// Toast.makeText(DJActivity.this,\n+\t\t\t\t\t\t\t\t// \"Stopping Discovery Failed : \" + reason,\n+\t\t\t\t\t\t\t\t// Toast.LENGTH_SHORT).show();\n+\t\t\t\t\t\t\t\tLog.e(TAG,\n+\t\t\t\t\t\t\t\t\t\t\"Stopping Discovery Failed. Error Code is: \"\n+\t\t\t\t\t\t\t\t\t\t\t\t+ reason);\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic void onSuccess()\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tmanager.discoverPeers(channel,\n+\t\t\t\t\t\t\t\t\t\tnew WifiP2pManager.ActionListener()\n+\t\t\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\t\t\t\tpublic void onSuccess()\n+\t\t\t\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\t\t\t// Toast.makeText(DJActivity.this,\n+\t\t\t\t\t\t\t\t\t\t\t\t// \"Discovery Initiated\",\n+\t\t\t\t\t\t\t\t\t\t\t\t// Toast.LENGTH_SHORT)\n+\t\t\t\t\t\t\t\t\t\t\t\t// .show();\n+\n+\t\t\t\t\t\t\t\t\t\t\t\tLog.d(TAG,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Discovery Initiated.\");\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\t\t\t\tpublic void onFailure(int reasonCode)\n+\t\t\t\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\t\t\tLog.e(TAG,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Discovery Failed. Error Code is: \"\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ reasonCode);\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t@Override\n+\tpublic void onPause()\n+\t{\n+\t\tsuper.onPause();\n+\t\tunregisterReceiver(receiver);\n+\n+\t\tkeepAliveTimer.cancel();\n+\t}\n+\n+\t@Override\n+\tpublic void onDestroy()\n+\t{\n+\t\tdisconnect();\n+\n+\t\tsuper.onDestroy();\n+\t}\n+\n+\t@Override\n+\tpublic boolean onCreateOptionsMenu(Menu menu)\n+\t{\n+\t\tMenuInflater inflater = getMenuInflater();\n+\t\tinflater.inflate(R.menu.wifidirect_less, menu);\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean onOptionsItemSelected(MenuItem item)\n+\t{\n+\t\tswitch (item.getItemId())\n+\t\t{\n+\t\t\tcase R.id.atn_direct_enable:\n+\t\t\t\tif (manager != null && channel != null)\n+\t\t\t\t{\n+\t\t\t\t\t// Since this is the system wireless settings activity, it's\n+\t\t\t\t\t// not going to send us a result. We will be notified by\n+\t\t\t\t\t// WiFiDeviceBroadcastReceiver instead.\n+\t\t\t\t\tIntent intent = new Intent();\n+\t\t\t\t\t// jump to wi-fi Direct settings\n+\t\t\t\t\tintent.setClassName(\"com.android.settings\",\n+\t\t\t\t\t\t\t\"com.android.settings.Settings$WifiP2pSettingsActivity\");\n+\n+\t\t\t\t\tstartActivity(intent);\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\tLog.e(TAG, \"channel or manager is null\");\n+\t\t\t\t}\n+\t\t\t\treturn true;\n+\n+\t\t\tcase R.id.atn_direct_discover:\n+\t\t\t\tdiscoverDevices();\n+\t\t\t\treturn true;\n+\n+\t\t\tdefault:\n+\t\t\t\treturn super.onOptionsItemSelected(item);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Remove all peers and clear all fields. This is called on\n+\t * BroadcastReceiver receiving a state change event. This is merely an UI\n+\t * update.\n+\t */\n+\tpublic void resetDeviceList()\n+\t{\n+\t\tServerDeviceListFragment fragmentList = (ServerDeviceListFragment) getFragmentManager()\n+\t\t\t\t.findFragmentById(R.id.frag_djs_devices);\n+\n+\t\tif (fragmentList != null)\n+\t\t{\n+\t\t\tfragmentList.clearPeers();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void onChannelDisconnected()\n+\t{\n+\t\t// we will try once more\n+\t\tif (manager != null && !channelRetried)\n+\t\t{\n+\t\t\tToast.makeText(this, \"Wi-fi Direct Channel lost. Trying again...\",\n+\t\t\t\t\tToast.LENGTH_LONG).show();\n+\t\t\tresetDeviceList();\n+\n+\t\t\tchannelRetried = true;\n+\t\t\tmanager.initialize(this, getMainLooper(), this);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tToast.makeText(\n+\t\t\t\t\tthis,\n+\t\t\t\t\t\"Wi-fi Direct Channel is still lost. Try disabling / re-enabling Wi-fi Direct in the P2P Settings.\",\n+\t\t\t\t\tToast.LENGTH_LONG).show();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void showDetails(WifiP2pDevice device)\n+\t{\n+\t\t// TODO: This is for debugging, showing the device details\n+\t\tDJMusicFragment fragMusic = (DJMusicFragment) getFragmentManager()\n+\t\t\t\t.findFragmentById(R.id.frag_dj_music);\n+\t}\n+\n+\t@Override\n+\tpublic void showInfo(WifiP2pInfo info)\n+\t{\n+\t\tDJMusicFragment fragMusic = (DJMusicFragment) getFragmentManager()\n+\t\t\t\t.findFragmentById(R.id.frag_dj_music);\n+\n+\t\tif (info.isGroupOwner)\n+\t\t{\n+\t\t\t// fragMusic.setDebugText(\"I am the group owner.\");\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t// fragMusic.setDebugText(\"I am not the group owner.\");\n+\t\t}\n+\t}\n+\n+\t/*\n+\t * Cancel an ongoing connection in progress. We won't actually use this\n+\t * method all that much\n+\t * \n+\t * (non-Javadoc)\n+\t * \n+\t * @see\n+\t * com.example.musicsaround.dj.ServerDeviceListFragment.DJFragmentListener\n+\t * #cancelDisconnect()\n+\t */\n+\t@Override\n+\tpublic void cancelDisconnect()\n+\t{\n+\t\t/*\n+\t\t * A cancel abort request by user. Disconnect i.e. removeGroup if\n+\t\t * already connected. Else, request WifiP2pManager to abort the ongoing\n+\t\t * request\n+\t\t */\n+\t\tif (manager != null)\n+\t\t{\n+\t\t\tLog.d(TAG, \"Someone requested a cancel connect!\");\n+\n+\t\t\tfinal ServerDeviceListFragment fragment = (ServerDeviceListFragment) getFragmentManager()\n+\t\t\t\t\t.findFragmentById(R.id.frag_djs_devices);\n+\n+\t\t\tif (fragment.getDevice() == null\n+\t\t\t\t\t|| fragment.getDevice().status == WifiP2pDevice.CONNECTED)\n+\t\t\t{\n+\t\t\t\t// we don't disconnect the whole group... it would be nice just\n+\t\t\t\t// to disconnect that one guy\n+\t\t\t\t// disconnect();\n+\t\t\t}\n+\t\t\telse if (fragment.getDevice().status == WifiP2pDevice.AVAILABLE\n+\t\t\t\t\t|| fragment.getDevice().status == WifiP2pDevice.INVITED\n+\t\t\t\t\t|| fragment.getDevice().status == WifiP2pDevice.CONNECTED)\n+\t\t\t{\n+\t\t\t\tmanager.cancelConnect(channel, new ActionListener()\n+\t\t\t\t{\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void onSuccess()\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// Toast.makeText(DJActivity.this,\n+\t\t\t\t\t\t// \"Aborting connection\",\n+\t\t\t\t\t\t// Toast.LENGTH_SHORT).show();\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void onFailure(int reasonCode)\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// Toast.makeText(\n+\t\t\t\t\t\t// DJActivity.this,\n+\t\t\t\t\t\t// \"Connect abort request failed. Reason Code: \"\n+\t\t\t\t\t\t// + reasonCode, Toast.LENGTH_SHORT)\n+\t\t\t\t\t\t// .show();\n+\t\t\t\t\t\tLog.e(TAG,\n+\t\t\t\t\t\t\t\t\"Could not abort connection, the reason is: \"\n+\t\t\t\t\t\t\t\t\t\t+ reasonCode);\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/*\n+\t * This is the main method to connect to a device through Wi-Fi Direct!\n+\t * \n+\t * (non-Javadoc)\n+\t * \n+\t * @see\n+\t * com.example.musicsaround.dj.ServerDeviceListFragment.DJFragmentListener\n+\t * #connect(android.net.wifi.p2p.WifiP2pConfig)\n+\t */\n+\t@Override\n+\tpublic void connect(WifiP2pConfig config)\n+\t{\n+\t\tif (manager == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t// in DJ mode, we want to become the group owner\n+\t\tWifiP2pConfig newConfig = config;\n+\t\tnewConfig.groupOwnerIntent = DJ_MODE;\n+\n+\t\tmanager.connect(channel, newConfig, new ActionListener()\n+\t\t{\n+\t\t\t@Override\n+\t\t\tpublic void onSuccess()\n+\t\t\t{\n+\t\t\t\t// WiFiDirectBroadcastReceiver will notify us. Ignore for now.\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void onFailure(int reason)\n+\t\t\t{\n+\t\t\t\tToast.makeText(DJActivity.this,\n+\t\t\t\t\t\t\"Connection failed. Retrying...\", Toast.LENGTH_SHORT)\n+\t\t\t\t\t\t.show();\n+\t\t\t\tLog.e(TAG,\n+\t\t\t\t\t\t\"Wi-fi Direct connection failed. The error code is: \"\n+\t\t\t\t\t\t\t\t+ reason);\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t@Override\n+\tpublic void disconnect()\n+\t{\n+\t\tif (manager == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t// TODO: why do we have to remove the whole group upon disconnect?\n+\t\t// perhaps we only need to do so upon exiting DJ mode\n+\t\tmanager.removeGroup(channel, new ActionListener()\n+\t\t{\n+\t\t\t@Override\n+\t\t\tpublic void onFailure(int reasonCode)\n+\t\t\t{\n+\t\t\t\tLog.e(TAG, \"Disconnect failed. Reason is: \" + reasonCode);\n+\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void onSuccess()\n+\t\t\t{\n+\t\t\t\tToast.makeText(DJActivity.this, \"Disconnected a device.\",\n+\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n+\t\t\t\tLog.d(TAG, \"Disconnected from a device.\");\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * @param isWifiP2pEnabled\n+\t *            the isWifiP2pEnabled to set\n+\t */\n+\tpublic void setIsWifiP2pEnabled(boolean isWifiP2pEnabled)\n+\t{\n+\t\tthis.isWifiP2pEnabled = isWifiP2pEnabled;\n+\t}\n+\n+\tpublic void playRemoteMusic(Uri musicFileURI, long startTime, int startPos)\n+\t{\n+\t\tServerDeviceListFragment fragmentList = (ServerDeviceListFragment) getFragmentManager()\n+\t\t\t\t.findFragmentById(R.id.frag_djs_devices);\n+\n+\t\t// convert URI to actual file path\n+\t\tUri filePathFromActivity = Uri.parse(Utilities.getRealPathFromUri(\n+\t\t\t\t(Activity) this, musicFileURI));\n+\n+\t\tFile audioFile = new File(filePathFromActivity.getPath());\n+\n+\t\tfragmentList.playMusicOnClients(audioFile, startTime, startPos);\n+\t}\n+\n+\tpublic void playRemoteMusic(String musicFilePath, long startTime,\n+\t\t\tint startPos)\n+\t{\n+\t\tServerDeviceListFragment fragmentList = (ServerDeviceListFragment) getFragmentManager()\n+\t\t\t\t.findFragmentById(R.id.frag_djs_devices);\n+\n+\t\tFile audioFile = new File(musicFilePath);\n+\n+\t\tfragmentList.playMusicOnClients(audioFile, startTime, startPos);\n+\t}\n+\n+\tpublic void stopRemoteMusic()\n+\t{\n+\t\tServerDeviceListFragment fragmentList = (ServerDeviceListFragment) getFragmentManager()\n+\t\t\t\t.findFragmentById(R.id.frag_djs_devices);\n+\t\tfragmentList.stopMusicOnClients();\n+\t}\n+\n+\tpublic Timer getTimer()\n+\t{\n+\t\treturn timer;\n+\t}\n+}"], "score": 1.0, "methods_t": ["ActionListener CountDownTimer DialogInterface.OnCancelListener File Intent IntentFilter ServerWiFiDirectBR Timer WifiP2pManager.ActionListener addAction cancel cancelConnect clearPeers connect d disconnect discoverDevices discoverPeers dismiss e enableWifi findFragmentById findViewById getDevice getFragmentManager getItemId getMainLooper getMenuInflater getPath getRealPathFromUri getSystemService inflate initialize isShowing makeText parse playMusicOnClients registerReceiver removeGroup resetDeviceList setClassName setContentView setWifiEnabled show start startActivity startTimer stopMusicOnClients stopPeerDiscovery unregisterReceiver"], "_version_": 1526744814427570176, "subject_t": ["- Copy of the Android Wireless Music Surround Sound App"], "comments_t": ["\t\t\t\t// WiFiDirectBroadcastReceiver will notify us. Ignore for now. \t\t\t\t// Toast.LENGTH_SHORT).show(); \t\t\t\t\t// WiFiDeviceBroadcastReceiver instead. \t\t\t\t\t\t\t\t// \"Stopping Discovery Failed : \" + reason, \t\t// perhaps we only need to do so upon exiting DJ mode \t\t\t\t\t\t\t\t\t\t// reason, \t\t\t\t\t\t\t\t\t\t// Toast.LENGTH_SHORT).show(); \t\t// need these intent filters to catch the Wi-fi direct events \t\t\t\t\t// Since this is the system wireless settings activity, it's \t\t// in DJ mode, we want to become the group owner \t\t// TODO: This is for debugging, showing the device details \t\t\t\t// to disconnect that one guy /** \n * register the BroadcastReceiver with the intent values to be matched \n */\n \t\t\t// fragMusic.setDebugText(\"I am not the group owner.\"); /** \n * UI to show the discovery process\n */\n \t\t\t\t\t\t// Toast.makeText(DJActivity.this, \t\t// discovering \t\t\t\t// disconnect(); \t\t\t\t\t\t// DJActivity.this, \t\t\t\t\t// jump to wi-fi Direct settings \t\t\t\t\t\t\t\t\t\t\t\t// \"Discovery Initiated\", \t// critical component for Wi-fi Direct connectivity \t\t\t\t\t\t\t\t\t\t\t\t// .show(); \t\t// start a timer with 25 ms precision \t\t\t\t\t// not going to send us a result. We will be notified by \t\t\t\t\t\t\t\t// Toast.makeText(DJActivity.this, /*\n* A cancel abort request by user. Disconnect i.e. removeGroup if\n* already connected. Else, request WifiP2pManager to abort the ongoing\n* request\n*/\n \t\t\t\t\t\t\t\t\t\t// \"Stopping Discovery Failed : \" + \t\t\t\t\t\t// Toast.LENGTH_SHORT).show(); \t\t// we will try once more \t\t\t\t\t\t// Toast.makeText( \t\t\t\t\t\t// + reasonCode, Toast.LENGTH_SHORT) \t\t// convert URI to actual file path /** \n * @param isWifiP2pEnabled the isWifiP2pEnabled to set\n */\n \t\t\t// fragMusic.setDebugText(\"I am the group owner.\"); \t// Keep the Wifi Alive every 5 seconds \t\t\t\t// \"Discovery Initiated\", /** \n * Remove all peers and clear all fields. This is called on BroadcastReceiver receiving a state change event. This is merely an UI update.\n */\n \t\t// asynchronous call to start a timer \t\t// ***Start discovering right away! \t\t\t\t\t\t\t\t\t\t\t\t// Toast.makeText(DJActivity.this, \t\t\t\t// Toast.makeText(DJActivity.this, \t\t// TODO: need a better non-blocking UI to notify users we are \t\t// first turn on the wifi p2p \t\t\t\t\t\t// \"Connect abort request failed. Reason Code: \" \t\t\t\t\t\t\t\t// Toast.LENGTH_SHORT).show(); \t\t\t\t\t\t\t\t\t\t// Toast.makeText(DJActivity.this, \t\t\t// if we failed, then stop the discovery and start again \t\t// onInitiateDiscovery(); /*\n* This is the main method to connect to a device through Wi-Fi Direct!\n*\n* (non-Javadoc)\n*\n* @see\n* com.example.musicsaround.dj.ServerDeviceListFragment.DJFragmentListener\n* #connect(android.net.wifi.p2p.WifiP2pConfig)\n*/\n \t\t\t\t\t\t\t\t\t\t\t\t// Toast.LENGTH_SHORT) \t\t\t\t\t\t// \"Aborting connection\", \t\t// TODO: why do we have to remove the whole group upon disconnect? /*\n* Cancel an ongoing connection in progress. We won't actually use this\n* method all that much\n*\n* (non-Javadoc)\n*\n* @see\n* com.example.musicsaround.dj.ServerDeviceListFragment.DJFragmentListener\n* #cancelDisconnect()\n*/\n \t\t\t\t\t\t// .show(); \t\t\t\t// we don't disconnect the whole group... it would be nice just \t\t\t\t\t\t// stop discovery"], "callsites_t": ["<unknown>.startTimer() android.util.Log.e(java.lang.String, java.lang.String) android.content.Intent.Intent() android.widget.Toast.makeText(com.example.musicsaround.dj.DJActivity, java.lang.String, int) android.app.FragmentManager.findFragmentById(<unknown>) android.content.Intent.setClassName(java.lang.String, java.lang.String) android.app.Activity.getSystemService(java.lang.String) android.widget.Toast.makeText(com.example.musicsaround.dj.DJActivity, java.lang.String, int) android.app.Activity.getFragmentManager() android.content.IntentFilter.addAction(java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) android.app.Activity.setContentView(<unknown>) com.example.musicsaround.dj.DJActivity.discoverDevices() android.view.MenuInflater.inflate(<unknown>, android.view.Menu) android.util.Log.d(java.lang.String, java.lang.String) android.widget.Toast.makeText(com.example.musicsaround.dj.DJActivity, java.lang.String, int) android.app.Activity.getFragmentManager() android.net.wifi.p2p.WifiP2pManager.stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager.Channel, ) android.os.CountDownTimer.start() .CountDownTimer(int, int) android.app.Activity.getFragmentManager() android.content.IntentFilter.addAction(java.lang.String) android.content.ContextWrapper.getMainLooper() android.app.Activity.getSystemService(java.lang.String) android.net.wifi.p2p.WifiP2pManager.removeGroup(android.net.wifi.p2p.WifiP2pManager.Channel, ) android.widget.Toast.show() android.content.ContextWrapper.unregisterReceiver(android.content.BroadcastReceiver) android.view.MenuItem.getItemId() com.example.musicsaround.dj.DJActivity.resetDeviceList() <unknown>.clearPeers() android.app.Dialog.dismiss() android.content.ContextWrapper.registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter) java.io.File.File(java.lang.String) android.net.wifi.p2p.WifiP2pManager.stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager.Channel, ) com.example.musicsaround.dj.DJActivity.enableWifi() android.app.FragmentManager.findFragmentById(<unknown>) com.example.musicsaround.dj.DJActivity.enableWifi() .WifiP2pManager.ActionListener() android.util.Log.d(java.lang.String, java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.getDevice() .ActionListener() android.widget.Toast.makeText(com.example.musicsaround.dj.DJActivity, java.lang.String, int) .DialogInterface.OnCancelListener() .ActionListener() android.app.Activity.findViewById(<unknown>) android.app.Activity.getFragmentManager() <unknown>.stopMusicOnClients() android.net.wifi.p2p.WifiP2pManager.discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel, ) android.content.ContextWrapper.getMainLooper() java.io.File.File(java.lang.String) android.util.Log.e(java.lang.String, java.lang.String) .WifiP2pManager.ActionListener() android.net.Uri.getPath() android.app.Activity.getFragmentManager() android.util.Log.e(java.lang.String, java.lang.String) .WifiP2pManager.ActionListener() java.lang.Object.Timer(<unknown>) android.app.FragmentManager.findFragmentById(<unknown>) android.net.wifi.p2p.WifiP2pManager.discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel, ) android.net.wifi.p2p.WifiP2pManager.connect(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pConfig, ) android.app.ProgressDialog.show(com.example.musicsaround.dj.DJActivity, java.lang.String, java.lang.String, boolean, boolean, ) android.widget.Toast.show() android.content.IntentFilter.IntentFilter() android.os.CountDownTimer.cancel() android.os.CountDownTimer.start() android.app.Activity.getMenuInflater() android.content.IntentFilter.addAction(java.lang.String) android.util.Log.e(java.lang.String, java.lang.String) <unknown>.playMusicOnClients(java.io.File, long, int) com.example.musicsaround.dj.DJActivity.disconnect() android.net.wifi.p2p.WifiP2pManager.cancelConnect(android.net.wifi.p2p.WifiP2pManager.Channel, ) android.content.IntentFilter.addAction(java.lang.String) android.net.wifi.p2p.WifiP2pManager.initialize(com.example.musicsaround.dj.DJActivity, android.os.Looper, com.example.musicsaround.dj.DJActivity) .WifiP2pManager.ActionListener() android.widget.Toast.show() <unknown>.ServerWiFiDirectBR(android.net.wifi.p2p.WifiP2pManager, android.net.wifi.p2p.WifiP2pManager.Channel, com.example.musicsaround.dj.DJActivity) android.app.FragmentManager.findFragmentById(<unknown>) android.app.FragmentManager.findFragmentById(<unknown>) android.util.Log.e(java.lang.String, java.lang.String) .ActionListener() android.util.Log.d(java.lang.String, java.lang.String) android.net.wifi.p2p.WifiP2pManager.initialize(com.example.musicsaround.dj.DJActivity, android.os.Looper, null) android.util.Log.e(java.lang.String, java.lang.String) android.app.Activity.getFragmentManager() android.net.wifi.WifiManager.setWifiEnabled(boolean) android.net.Uri.parse(<unknown>) android.util.Log.e(java.lang.String, java.lang.String) android.widget.Toast.show() android.app.Dialog.isShowing() <unknown>.getRealPathFromUri(android.app.Activity, android.net.Uri) com.example.musicsaround.dj.DJActivity.discoverDevices() android.app.Activity.startActivity(android.content.Intent) android.app.FragmentManager.findFragmentById(<unknown>) android.util.Log.e(java.lang.String, java.lang.String)"], "id": "bryan-y88/Musics_Around\u0000b7b206d3c28c8792a84ecb5017f4596c52d1a50e\u0000Core Application/src/com/example/musicsaround/dj/DJActivity.java", "callsites_cs": "<unknown>.startTimer()#android.util.Log.e(java.lang.String, java.lang.String)#android.content.Intent.Intent()#android.widget.Toast.makeText(com.example.musicsaround.dj.DJActivity, java.lang.String, int)#android.app.FragmentManager.findFragmentById(<unknown>)#android.content.Intent.setClassName(java.lang.String, java.lang.String)#android.app.Activity.getSystemService(java.lang.String)#android.widget.Toast.makeText(com.example.musicsaround.dj.DJActivity, java.lang.String, int)#android.app.Activity.getFragmentManager()#android.content.IntentFilter.addAction(java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#android.app.Activity.setContentView(<unknown>)#com.example.musicsaround.dj.DJActivity.discoverDevices()#android.view.MenuInflater.inflate(<unknown>, android.view.Menu)#android.util.Log.d(java.lang.String, java.lang.String)#android.widget.Toast.makeText(com.example.musicsaround.dj.DJActivity, java.lang.String, int)#android.app.Activity.getFragmentManager()#android.net.wifi.p2p.WifiP2pManager.stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager.Channel, )#android.os.CountDownTimer.start()#.CountDownTimer(int, int)#android.app.Activity.getFragmentManager()#android.content.IntentFilter.addAction(java.lang.String)#android.content.ContextWrapper.getMainLooper()#android.app.Activity.getSystemService(java.lang.String)#android.net.wifi.p2p.WifiP2pManager.removeGroup(android.net.wifi.p2p.WifiP2pManager.Channel, )#android.widget.Toast.show()#android.content.ContextWrapper.unregisterReceiver(android.content.BroadcastReceiver)#android.view.MenuItem.getItemId()#com.example.musicsaround.dj.DJActivity.resetDeviceList()#<unknown>.clearPeers()#android.app.Dialog.dismiss()#android.content.ContextWrapper.registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)#java.io.File.File(java.lang.String)#android.net.wifi.p2p.WifiP2pManager.stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager.Channel, )#com.example.musicsaround.dj.DJActivity.enableWifi()#android.app.FragmentManager.findFragmentById(<unknown>)#com.example.musicsaround.dj.DJActivity.enableWifi()#.WifiP2pManager.ActionListener()#android.util.Log.d(java.lang.String, java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.getDevice()#.ActionListener()#android.widget.Toast.makeText(com.example.musicsaround.dj.DJActivity, java.lang.String, int)#.DialogInterface.OnCancelListener()#.ActionListener()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.getFragmentManager()#<unknown>.stopMusicOnClients()#android.net.wifi.p2p.WifiP2pManager.discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel, )#android.content.ContextWrapper.getMainLooper()#java.io.File.File(java.lang.String)#android.util.Log.e(java.lang.String, java.lang.String)#.WifiP2pManager.ActionListener()#android.net.Uri.getPath()#android.app.Activity.getFragmentManager()#android.util.Log.e(java.lang.String, java.lang.String)#.WifiP2pManager.ActionListener()#java.lang.Object.Timer(<unknown>)#android.app.FragmentManager.findFragmentById(<unknown>)#android.net.wifi.p2p.WifiP2pManager.discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel, )#android.net.wifi.p2p.WifiP2pManager.connect(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pConfig, )#android.app.ProgressDialog.show(com.example.musicsaround.dj.DJActivity, java.lang.String, java.lang.String, boolean, boolean, )#android.widget.Toast.show()#android.content.IntentFilter.IntentFilter()#android.os.CountDownTimer.cancel()#android.os.CountDownTimer.start()#android.app.Activity.getMenuInflater()#android.content.IntentFilter.addAction(java.lang.String)#android.util.Log.e(java.lang.String, java.lang.String)#<unknown>.playMusicOnClients(java.io.File, long, int)#com.example.musicsaround.dj.DJActivity.disconnect()#android.net.wifi.p2p.WifiP2pManager.cancelConnect(android.net.wifi.p2p.WifiP2pManager.Channel, )#android.content.IntentFilter.addAction(java.lang.String)#android.net.wifi.p2p.WifiP2pManager.initialize(com.example.musicsaround.dj.DJActivity, android.os.Looper, com.example.musicsaround.dj.DJActivity)#.WifiP2pManager.ActionListener()#android.widget.Toast.show()#<unknown>.ServerWiFiDirectBR(android.net.wifi.p2p.WifiP2pManager, android.net.wifi.p2p.WifiP2pManager.Channel, com.example.musicsaround.dj.DJActivity)#android.app.FragmentManager.findFragmentById(<unknown>)#android.app.FragmentManager.findFragmentById(<unknown>)#android.util.Log.e(java.lang.String, java.lang.String)#.ActionListener()#android.util.Log.d(java.lang.String, java.lang.String)#android.net.wifi.p2p.WifiP2pManager.initialize(com.example.musicsaround.dj.DJActivity, android.os.Looper, null)#android.util.Log.e(java.lang.String, java.lang.String)#android.app.Activity.getFragmentManager()#android.net.wifi.WifiManager.setWifiEnabled(boolean)#android.net.Uri.parse(<unknown>)#android.util.Log.e(java.lang.String, java.lang.String)#android.widget.Toast.show()#android.app.Dialog.isShowing()#<unknown>.getRealPathFromUri(android.app.Activity, android.net.Uri)#com.example.musicsaround.dj.DJActivity.discoverDevices()#android.app.Activity.startActivity(android.content.Intent)#android.app.FragmentManager.findFragmentById(<unknown>)#android.util.Log.e(java.lang.String, java.lang.String)"}, {"user_sni": "Bryan Yan", "repo_sni": "bryan-y88/Musics_Around", "imports_t": ["android.os.CountDownTimer android.os.Handler java.util.Date android.text.format.DateFormat android.widget.TextView java.text.SimpleDateFormat android.media.MediaPlayer android.util.Log"], "email_sni": "bryan.y88@gmail.com", "contents_t": ["package com.example.musicsaround;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\nimport android.media.MediaPlayer;\nimport android.os.CountDownTimer;\nimport android.os.Handler;\nimport android.text.format.DateFormat;\nimport android.util.Log;\nimport android.widget.TextView;\n\npublic class Timer\n{\n\tprivate long currTime;\n\t// for debugging purposes\n\tTextView mView = null;\n\t// Handler mHandler = null;\n\n\tprivate CountDownTimer timer;\n\tprivate long mPrecision;\n\tprivate long futurePlayTime;\n\tprivate long mPlayPosition;\n\tprivate MediaPlayer mPlayer = null;\n\n\t// use the system time to check how much time has actually elapsed\n\tprivate long mReferenceTime;\n\n\t// minimum timer precision is 10 milliseconds\n\tpublic static final long MIN_TIMER_PRECISION = 10;\n\n\t// default timer precision, units in milliseconds\n\tpublic static final long DEFAULT_TIMER_PRECISION = 25;\n\n\t/**\n\t * Creates a timer that another thread can receive call back messages, and\n\t * it can count the time from any presision larger than 1 milliseconds\n\t * \n\t * @param handler\n\t *            - the handler to to receive call back messages from this timer\n\t * @param timerPrecision\n\t *            - the precision of the timer, units in milliseconds. e.g. if\n\t *            set to 10 milliseconds, then the timer can count time up to 10\n\t *            ms of precision\n\t */\n\tpublic Timer(long timerPrecision)\n\t{\n\t\tmView = null;\n\t\t// mHandler = handler;\n\n\t\t// get the system time by default\n\t\tsetCurrTime(System.currentTimeMillis());\n\t\tmReferenceTime = System.currentTimeMillis();\n\n\t\tif (timerPrecision < MIN_TIMER_PRECISION)\n\t\t{\n\t\t\tmPrecision = MIN_TIMER_PRECISION;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmPrecision = timerPrecision;\n\t\t}\n\t}\n\n\t// debugging constructor\n\tpublic Timer(TextView view, long timerPrecision)\n\t{\n\t\tmView = view;\n\t\t// mHandler = handler;\n\n\t\t// get the system time by default\n\t\tsetCurrTime(System.currentTimeMillis());\n\t\tmReferenceTime = System.currentTimeMillis();\n\n\t\tif (timerPrecision < MIN_TIMER_PRECISION)\n\t\t{\n\t\t\tmPrecision = MIN_TIMER_PRECISION;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmPrecision = timerPrecision;\n\t\t}\n\t}\n\n\tpublic void startTimer()\n\t{\n\t\t// create a timer that will never expire, until we signal it to stop\n\t\ttimer = new CountDownTimer(Long.MAX_VALUE, mPrecision)\n\t\t{\n\n\t\t\t/*\n\t\t\t * Count the timer at the user defined precision interval. This call\n\t\t\t * back method is synchronized so if content of the method takes too\n\t\t\t * long, it will not throw off the timer\n\t\t\t * \n\t\t\t * (non-Javadoc)\n\t\t\t * \n\t\t\t * @see android.os.CountDownTimer#onTick(long)\n\t\t\t */\n\t\t\t@Override\n\t\t\tpublic void onTick(long millisUntilFinished)\n\t\t\t{\n\t\t\t\t// we may not be able to meet the precision time :(\n\t\t\t\t// so check how much time has actually elapsed\n\t\t\t\tsetCurrTime(currTime\n\t\t\t\t\t\t+ (System.currentTimeMillis() - mReferenceTime));\n\n\t\t\t\tmReferenceTime = System.currentTimeMillis();\n\n\t\t\t\tif (mPlayer != null)\n\t\t\t\t{\n\t\t\t\t\tif (futurePlayTime < currTime)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Log.d(\"Music Timer\", \"Future time: \" + futurePlayTime\n\t\t\t\t\t\t// + \", curr time: \" + currTime);\n\t\t\t\t\t\t// NOTE: this media player needs to be able to play the\n\t\t\t\t\t\t// song ASAP! Meaning the music has to be bufferred and\n\t\t\t\t\t\t// ready to go. It also has to be cached, not just\n\t\t\t\t\t\t// MediaPlayer.prepare()\n\t\t\t\t\t\t// NOTE 2: The future play time may have already passed,\n\t\t\t\t\t\t// so we must catch up!\n\t\t\t\t\t\tmPlayer.seekTo((int) (currTime - futurePlayTime + mPlayPosition));\n\t\t\t\t\t\tmPlayer.start();\n\t\t\t\t\t\t// after we play the music, we have nothing to do with\n\t\t\t\t\t\t// the media player, so release its reference\n\t\t\t\t\t\tmPlayer = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if (mView != null)\n\t\t\t\t// {\n\t\t\t\t// Date date = new Date(getCurrTime());\n\t\t\t\t// SimpleDateFormat timeFormat = new SimpleDateFormat(\n\t\t\t\t// \"hh:mm:ss.SSS\");\n\t\t\t\t//\n\t\t\t\t// mView.setText(timeFormat.format(date));\n\t\t\t\t// }\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * We should never reach here... we need the timer to keep track of\n\t\t\t * time till the user calls cancel\n\t\t\t * \n\t\t\t * (non-Javadoc)\n\t\t\t * \n\t\t\t * @see android.os.CountDownTimer#onFinish()\n\t\t\t */\n\t\t\t@Override\n\t\t\tpublic void onFinish()\n\t\t\t{\n\t\t\t\t// we should never reach here...\n\t\t\t\tLog.e(this.getClass().getName(), \"Timer unexpectedly stopped!\");\n\t\t\t}\n\t\t};\n\n\t\tmReferenceTime = System.currentTimeMillis();\n\n\t\ttimer.start();\n\t}\n\n\tpublic void stopTimer()\n\t{\n\t\tif (timer != null)\n\t\t{\n\t\t\ttimer.cancel();\n\t\t}\n\t}\n\n\t// Getters and Setters\n\t// WARNING: outside this class, we are not able to retrieve the current time\n\t// to the precision we want. You will see a delay from the real time by\n\t// almost 1000 ms, so there is no point accessing this for precise time\n\tpublic long getCurrTime()\n\t{\n\t\treturn currTime;\n\t}\n\n\t/**\n\t * Must be synchronized to prevent multiple threads changing the time\n\t * \n\t * @param currTime\n\t *            - update the current time, units in milliseconds\n\t */\n\tpublic synchronized void setCurrTime(long currTime)\n\t{\n\t\tif (currTime < 0)\n\t\t{\n\t\t\tthis.currTime = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.currTime = currTime;\n\t\t}\n\t}\n\n\t/**\n\t * The media player must be in good shape to play music!\n\t * \n\t * @param mp\n\t *            - a media player ready to play music\n\t * @param futureTime\n\t *            - the future time to play music\n\t */\n\tpublic void playFutureMusic(MediaPlayer mp, long futureTime,\n\t\t\tlong playPosition)\n\t{\n\t\t// we assume the media player is in a good state!\n\t\tfuturePlayTime = futureTime;\n\t\tmPlayPosition = playPosition;\n\n\t\t// but don't play the music if we are near the end of the music\n\t\tif (currTime - futureTime < mp.getDuration() - 100)\n\t\t{\n\t\t\tmPlayer = mp;\n\t\t}\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2014-02-20T04:08:41Z", "hash_sni": "b7b206d3c28c8792a84ecb5017f4596c52d1a50e", "name_sni": "Core Application/src/com/example/musicsaround/Timer.java", "patch_t": ["+package com.example.musicsaround;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+import android.media.MediaPlayer;\n+import android.os.CountDownTimer;\n+import android.os.Handler;\n+import android.text.format.DateFormat;\n+import android.util.Log;\n+import android.widget.TextView;\n+\n+public class Timer\n+{\n+\tprivate long currTime;\n+\t// for debugging purposes\n+\tTextView mView = null;\n+\t// Handler mHandler = null;\n+\n+\tprivate CountDownTimer timer;\n+\tprivate long mPrecision;\n+\tprivate long futurePlayTime;\n+\tprivate long mPlayPosition;\n+\tprivate MediaPlayer mPlayer = null;\n+\n+\t// use the system time to check how much time has actually elapsed\n+\tprivate long mReferenceTime;\n+\n+\t// minimum timer precision is 10 milliseconds\n+\tpublic static final long MIN_TIMER_PRECISION = 10;\n+\n+\t// default timer precision, units in milliseconds\n+\tpublic static final long DEFAULT_TIMER_PRECISION = 25;\n+\n+\t/**\n+\t * Creates a timer that another thread can receive call back messages, and\n+\t * it can count the time from any presision larger than 1 milliseconds\n+\t * \n+\t * @param handler\n+\t *            - the handler to to receive call back messages from this timer\n+\t * @param timerPrecision\n+\t *            - the precision of the timer, units in milliseconds. e.g. if\n+\t *            set to 10 milliseconds, then the timer can count time up to 10\n+\t *            ms of precision\n+\t */\n+\tpublic Timer(long timerPrecision)\n+\t{\n+\t\tmView = null;\n+\t\t// mHandler = handler;\n+\n+\t\t// get the system time by default\n+\t\tsetCurrTime(System.currentTimeMillis());\n+\t\tmReferenceTime = System.currentTimeMillis();\n+\n+\t\tif (timerPrecision < MIN_TIMER_PRECISION)\n+\t\t{\n+\t\t\tmPrecision = MIN_TIMER_PRECISION;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tmPrecision = timerPrecision;\n+\t\t}\n+\t}\n+\n+\t// debugging constructor\n+\tpublic Timer(TextView view, long timerPrecision)\n+\t{\n+\t\tmView = view;\n+\t\t// mHandler = handler;\n+\n+\t\t// get the system time by default\n+\t\tsetCurrTime(System.currentTimeMillis());\n+\t\tmReferenceTime = System.currentTimeMillis();\n+\n+\t\tif (timerPrecision < MIN_TIMER_PRECISION)\n+\t\t{\n+\t\t\tmPrecision = MIN_TIMER_PRECISION;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tmPrecision = timerPrecision;\n+\t\t}\n+\t}\n+\n+\tpublic void startTimer()\n+\t{\n+\t\t// create a timer that will never expire, until we signal it to stop\n+\t\ttimer = new CountDownTimer(Long.MAX_VALUE, mPrecision)\n+\t\t{\n+\n+\t\t\t/*\n+\t\t\t * Count the timer at the user defined precision interval. This call\n+\t\t\t * back method is synchronized so if content of the method takes too\n+\t\t\t * long, it will not throw off the timer\n+\t\t\t * \n+\t\t\t * (non-Javadoc)\n+\t\t\t * \n+\t\t\t * @see android.os.CountDownTimer#onTick(long)\n+\t\t\t */\n+\t\t\t@Override\n+\t\t\tpublic void onTick(long millisUntilFinished)\n+\t\t\t{\n+\t\t\t\t// we may not be able to meet the precision time :(\n+\t\t\t\t// so check how much time has actually elapsed\n+\t\t\t\tsetCurrTime(currTime\n+\t\t\t\t\t\t+ (System.currentTimeMillis() - mReferenceTime));\n+\n+\t\t\t\tmReferenceTime = System.currentTimeMillis();\n+\n+\t\t\t\tif (mPlayer != null)\n+\t\t\t\t{\n+\t\t\t\t\tif (futurePlayTime < currTime)\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// Log.d(\"Music Timer\", \"Future time: \" + futurePlayTime\n+\t\t\t\t\t\t// + \", curr time: \" + currTime);\n+\t\t\t\t\t\t// NOTE: this media player needs to be able to play the\n+\t\t\t\t\t\t// song ASAP! Meaning the music has to be bufferred and\n+\t\t\t\t\t\t// ready to go. It also has to be cached, not just\n+\t\t\t\t\t\t// MediaPlayer.prepare()\n+\t\t\t\t\t\t// NOTE 2: The future play time may have already passed,\n+\t\t\t\t\t\t// so we must catch up!\n+\t\t\t\t\t\tmPlayer.seekTo((int) (currTime - futurePlayTime + mPlayPosition));\n+\t\t\t\t\t\tmPlayer.start();\n+\t\t\t\t\t\t// after we play the music, we have nothing to do with\n+\t\t\t\t\t\t// the media player, so release its reference\n+\t\t\t\t\t\tmPlayer = null;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\t// if (mView != null)\n+\t\t\t\t// {\n+\t\t\t\t// Date date = new Date(getCurrTime());\n+\t\t\t\t// SimpleDateFormat timeFormat = new SimpleDateFormat(\n+\t\t\t\t// \"hh:mm:ss.SSS\");\n+\t\t\t\t//\n+\t\t\t\t// mView.setText(timeFormat.format(date));\n+\t\t\t\t// }\n+\t\t\t}\n+\n+\t\t\t/*\n+\t\t\t * We should never reach here... we need the timer to keep track of\n+\t\t\t * time till the user calls cancel\n+\t\t\t * \n+\t\t\t * (non-Javadoc)\n+\t\t\t * \n+\t\t\t * @see android.os.CountDownTimer#onFinish()\n+\t\t\t */\n+\t\t\t@Override\n+\t\t\tpublic void onFinish()\n+\t\t\t{\n+\t\t\t\t// we should never reach here...\n+\t\t\t\tLog.e(this.getClass().getName(), \"Timer unexpectedly stopped!\");\n+\t\t\t}\n+\t\t};\n+\n+\t\tmReferenceTime = System.currentTimeMillis();\n+\n+\t\ttimer.start();\n+\t}\n+\n+\tpublic void stopTimer()\n+\t{\n+\t\tif (timer != null)\n+\t\t{\n+\t\t\ttimer.cancel();\n+\t\t}\n+\t}\n+\n+\t// Getters and Setters\n+\t// WARNING: outside this class, we are not able to retrieve the current time\n+\t// to the precision we want. You will see a delay from the real time by\n+\t// almost 1000 ms, so there is no point accessing this for precise time\n+\tpublic long getCurrTime()\n+\t{\n+\t\treturn currTime;\n+\t}\n+\n+\t/**\n+\t * Must be synchronized to prevent multiple threads changing the time\n+\t * \n+\t * @param currTime\n+\t *            - update the current time, units in milliseconds\n+\t */\n+\tpublic synchronized void setCurrTime(long currTime)\n+\t{\n+\t\tif (currTime < 0)\n+\t\t{\n+\t\t\tthis.currTime = 0;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tthis.currTime = currTime;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * The media player must be in good shape to play music!\n+\t * \n+\t * @param mp\n+\t *            - a media player ready to play music\n+\t * @param futureTime\n+\t *            - the future time to play music\n+\t */\n+\tpublic void playFutureMusic(MediaPlayer mp, long futureTime,\n+\t\t\tlong playPosition)\n+\t{\n+\t\t// we assume the media player is in a good state!\n+\t\tfuturePlayTime = futureTime;\n+\t\tmPlayPosition = playPosition;\n+\n+\t\t// but don't play the music if we are near the end of the music\n+\t\tif (currTime - futureTime < mp.getDuration() - 100)\n+\t\t{\n+\t\t\tmPlayer = mp;\n+\t\t}\n+\t}\n+}"], "score": 1.0, "methods_t": ["CountDownTimer cancel currentTimeMillis e getClass getDuration getName seekTo setCurrTime start"], "_version_": 1526744814448541696, "subject_t": ["- Copy of the Android Wireless Music Surround Sound App"], "comments_t": ["/** \n * Creates a timer that another thread can receive call back messages, and it can count the time from any presision larger than 1 milliseconds\n * @param handler - the handler to to receive call back messages from this timer\n * @param timerPrecision - the precision of the timer, units in milliseconds. e.g. if set to 10 milliseconds, then the timer can count time up to 10 ms of precision\n */\n \t\t\t\t\t\t// song ASAP! Meaning the music has to be bufferred and \t\t\t\t// \t\t\t\t\t\t// NOTE: this media player needs to be able to play the \t// default timer precision, units in milliseconds /*\n* Count the timer at the user defined precision interval. This call\n* back method is synchronized so if content of the method takes too\n* long, it will not throw off the timer\n*\n* (non-Javadoc)\n*\n* @see android.os.CountDownTimer#onTick(long)\n*/\n \t\t\t\t// { \t\t// but don't play the music if we are near the end of the music \t\t\t\t// Date date = new Date(getCurrTime()); /** \n * Must be synchronized to prevent multiple threads changing the time\n * @param currTime - update the current time, units in milliseconds\n */\n \t\t\t\t// } \t\t// get the system time by default \t// WARNING: outside this class, we are not able to retrieve the current time \t\t// we assume the media player is in a good state! \t\t\t\t// we may not be able to meet the precision time :( \t\t\t\t\t\t// the media player, so release its reference \t\t\t\t// SimpleDateFormat timeFormat = new SimpleDateFormat( \t\t\t\t\t\t// so we must catch up! \t\t\t\t\t\t// after we play the music, we have nothing to do with \t// for debugging purposes \t\t\t\t\t\t// MediaPlayer.prepare() \t\t// mHandler = handler; \t\t\t\t// mView.setText(timeFormat.format(date)); \t\t\t\t// if (mView != null) \t// to the precision we want. You will see a delay from the real time by \t// use the system time to check how much time has actually elapsed /*\n* We should never reach here... we need the timer to keep track of\n* time till the user calls cancel\n*\n* (non-Javadoc)\n*\n* @see android.os.CountDownTimer#onFinish()\n*/\n \t\t\t\t// we should never reach here... \t\t// create a timer that will never expire, until we signal it to stop \t// Handler mHandler = null; \t\t\t\t\t\t// Log.d(\"Music Timer\", \"Future time: \" + futurePlayTime \t\t\t\t// \"hh:mm:ss.SSS\"); \t\t\t\t\t\t// ready to go. It also has to be cached, not just \t\t\t\t\t\t// NOTE 2: The future play time may have already passed, \t\t\t\t\t\t// + \", curr time: \" + currTime); \t// Getters and Setters /** \n * The media player must be in good shape to play music!\n * @param mp - a media player ready to play music\n * @param futureTime - the future time to play music\n */\n \t\t\t\t// so check how much time has actually elapsed \t// debugging constructor \t// almost 1000 ms, so there is no point accessing this for precise time \t// minimum timer precision is 10 milliseconds"], "callsites_t": ["android.os.CountDownTimer.cancel() java.lang.Class.getName() android.os.CountDownTimer.start() .CountDownTimer(long, long) android.media.MediaPlayer.seekTo(int) java.lang.System.currentTimeMillis() java.lang.System.currentTimeMillis() com.example.musicsaround.Timer.setCurrTime(long) java.lang.Object.getClass() android.media.MediaPlayer.getDuration() android.media.MediaPlayer.start() com.example.musicsaround.Timer.setCurrTime(long) java.lang.System.currentTimeMillis() android.util.Log.e(java.lang.String, java.lang.String)"], "id": "bryan-y88/Musics_Around\u0000b7b206d3c28c8792a84ecb5017f4596c52d1a50e\u0000Core Application/src/com/example/musicsaround/Timer.java", "callsites_cs": "android.os.CountDownTimer.cancel()#java.lang.Class.getName()#android.os.CountDownTimer.start()#.CountDownTimer(long, long)#android.media.MediaPlayer.seekTo(int)#java.lang.System.currentTimeMillis()#java.lang.System.currentTimeMillis()#com.example.musicsaround.Timer.setCurrTime(long)#java.lang.Object.getClass()#android.media.MediaPlayer.getDuration()#android.media.MediaPlayer.start()#com.example.musicsaround.Timer.setCurrTime(long)#java.lang.System.currentTimeMillis()#android.util.Log.e(java.lang.String, java.lang.String)"}, {"user_sni": "Sven Heiberg", "repo_sni": "vvk-ehk/ivotingverification", "imports_t": ["android.os.CountDownTimer android.app.Notification android.content.Context android.os.AsyncTask android.os.Bundle android.widget.ListView ee.vvk.ivotingverification.util.C android.graphics.drawable.GradientDrawable java.util.concurrent.TimeUnit android.content.Intent android.view.Window ee.vvk.ivotingverification.util.Util android.app.NotificationManager java.util.ArrayList java.util.List ee.vvk.ivotingverification.adapter.CandidatesListAdapter java.security.Security ee.vvk.ivotingverification.util.RegexMatcher android.app.PendingIntent ee.vvk.ivotingverification.dialog.LoadingSpinner android.widget.TextView android.view.View android.util.Log ee.vvk.ivotingverification.util.Crypto android.app.Activity ee.vvk.ivotingverification.model.Vote ee.vvk.ivotingverification.model.Vote.Candidate"], "email_sni": "sven@cyber.ee", "contents_t": ["/**\n * Copyright (C) 2013 Eesti Vabariigi Valimiskomisjon \n * (Estonian National Electoral Committee), www.vvk.ee\n *\n * Written in 2013 by AS Finestmedia, www.finestmedia.ee\n * \n * Vote-verification application for Estonian Internet voting system\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n \npackage ee.vvk.ivotingverification;\n\nimport java.security.Security;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport android.app.Activity;\nimport android.app.Notification;\nimport android.app.NotificationManager;\nimport android.app.PendingIntent;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.graphics.drawable.GradientDrawable;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.Window;\nimport android.widget.ListView;\nimport android.widget.TextView;\nimport ee.vvk.ivotingverification.adapter.CandidatesListAdapter;\nimport ee.vvk.ivotingverification.dialog.LoadingSpinner;\nimport ee.vvk.ivotingverification.model.Vote;\nimport ee.vvk.ivotingverification.model.Vote.Candidate;\nimport ee.vvk.ivotingverification.util.C;\nimport ee.vvk.ivotingverification.util.Crypto;\nimport ee.vvk.ivotingverification.util.RegexMatcher;\nimport ee.vvk.ivotingverification.util.Util;\n\n/**\n * Brute force analysis of the vote.\n * \n * @version 28.05.2013\n */\npublic class BruteForceActivity extends Activity {\n\n\tprivate static final String TAG = BruteForceActivity.class.getSimpleName();\n\n\tprivate String qrCode;\n\tprivate String webResult;\n\tprivate String versionNumber;\n\n\tprivate String publicKey;\n\tprivate ListView list;\n\tprivate Vote vote;\n\tprivate TextView lblChoice;\n\tprivate View lblShadow;\n\tprivate TextView lblCloseTimeout;\n\tprivate View lblcloseTimeoutShadow;\n\tprivate CustomCountDownTimer countDownTimer;\n\tprivate LoadingSpinner mLoadingSpinner;\n\n\t@Override\n\tpublic void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\n\t\tSecurity.removeProvider(ext.org.bouncycastle.jce.provider.BouncyCastleProvider.PROVIDER_NAME);\n\t\tSecurity.addProvider(new ext.org.bouncycastle.jce.provider.BouncyCastleProvider());\n\t\tsetContentView(R.layout.bruteforce_activity);\n\n\t\tcountDownTimer = new CustomCountDownTimer(C.closeTimeout,\n\t\t\t\tC.closeInterval);\n\n\t\tIntent intent = getIntent();\n\t\tqrCode = intent.getStringExtra(Util.QR_CODE);\n\t\twebResult = intent.getStringExtra(Util.WEB_RESULT);\n\t\tversionNumber = intent.getStringExtra(Util.VERSION_NUMBER);\n\n\t\tlist = (ListView) findViewById(R.id.list);\n\n\t\tlblChoice = (TextView) findViewById(R.id.choice_title_label);\n\t\tlblChoice.setText(C.lblChoice);\n\t\tlblChoice.setTypeface(C.typeFace);\n\t\tlblChoice.setTextColor(Util.generateHexColorValue(C.lblForeground));\n\t\tlblChoice.setBackgroundColor(Util\n\t\t\t\t.generateHexColorValue(C.lblBackground));\n\n\t\tlblShadow = (View) findViewById(R.id.choice_title_label_shadow);\n\t\tlblShadow.setBackgroundColor(Util.generateHexColorValue(C.lblShadow));\n\n\t\tlblCloseTimeout = (TextView) findViewById(R.id.close_timeout_label);\n\t\tlblCloseTimeout.setTypeface(C.typeFace);\n\t\tlblCloseTimeout.setText(C.lblCloseTimeout);\n\t\tlblCloseTimeout.setTextColor(Util\n\t\t\t\t.generateHexColorValue(C.lblCloseTimeoutForeground));\n\t\tint colors[] = new int[3];\n\t\tcolors[0] = Util\n\t\t\t\t.generateHexColorValue(C.lblCloseTimeoutBackgroundStart);\n\t\tcolors[1] = Util\n\t\t\t\t.generateHexColorValue(C.lblCloseTimeoutBackgroundCenter);\n\t\tcolors[2] = Util.generateHexColorValue(C.lblCloseTimeoutBackgroundEnd);\n\n\t\tGradientDrawable bgCloseTimeoutShape = new GradientDrawable(\n\t\t\t\tGradientDrawable.Orientation.TOP_BOTTOM, colors);\n\t\tbgCloseTimeoutShape.setCornerRadius(5);\n\t\tlblCloseTimeout.setBackgroundDrawable(bgCloseTimeoutShape);\n\n\t\tlblcloseTimeoutShadow = (View) findViewById(R.id.close_timeout_label_shadow);\n\t\tGradientDrawable bgCloseTimeoutShadowShape = (GradientDrawable) lblcloseTimeoutShadow\n\t\t\t\t.getBackground();\n\t\tbgCloseTimeoutShadowShape.setColor(Util\n\t\t\t\t.generateHexColorValue(C.lblCloseTimeoutShadow));\n\t\tbgCloseTimeoutShadowShape.setCornerRadius(5);\n\n\t\tlblChoice.setVisibility(View.INVISIBLE);\n\t\tlblShadow.setVisibility(View.INVISIBLE);\n\t\tlblCloseTimeout.setVisibility(View.INVISIBLE);\n\t\tlblcloseTimeoutShadow.setVisibility(View.INVISIBLE);\n\n\t\tpublicKey = C.publicKey;\n\t\tdoBruteForce();\n\t}\n\n\tabstract class GetBruteForceTask extends\n\t\t\tAsyncTask<Void, Void, ArrayList<Candidate>> {\n\n\t\t@Override\n\t\tprotected void onPreExecute() {\n\t\t\tmLoadingSpinner = Util.startSpinner(BruteForceActivity.this, false);\n\t\t}\n\n\t\t@Override\n\t\tprotected void onPostExecute(ArrayList<Candidate> candidates) {\n\n\t\t\tif (candidates != null && candidates.size() > 0) {\n\n\t\t\t\tCandidatesListAdapter adapter = new CandidatesListAdapter(\n\t\t\t\t\t\tgetApplicationContext(), candidates, vote);\n\t\t\t\tlist.setAdapter(adapter);\n\n\t\t\t\tUtil.stopSpinner(mLoadingSpinner);\n\t\t\t\tsendNotification(C.notificationTitle, C.notificationMessage);\n\n\t\t\t\tlblChoice.setVisibility(View.VISIBLE);\n\t\t\t\tlblShadow.setVisibility(View.VISIBLE);\n\t\t\t\tlblCloseTimeout.setVisibility(View.VISIBLE);\n\t\t\t\tlblcloseTimeoutShadow.setVisibility(View.VISIBLE);\n\n\t\t\t\tcountDownTimer.start();\n\t\t\t} else {\n\t\t\t\tUtil.startErrorIntent(BruteForceActivity.this,\n\t\t\t\t\t\tC.badVerificationMessage, true);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onDestroy() {\n\t\tsuper.onDestroy();\n\t\t((NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE))\n\t\t\t\t.cancel(1000123);\n\t\tif (countDownTimer != null) {\n\t\t\tcountDownTimer.cancel();\n\t\t}\n\t}\n\n\tprivate void doBruteForce() {\n\t\tnew GetBruteForceTask() {\n\n\t\t\t@Override\n\t\t\tprotected ArrayList<Candidate> doInBackground(Void... arg0) {\n\t\t\t\ttry {\n\t\t\t\t\tif (Util.DEBUGGABLE) {\n\t\t\t\t\t\tLog.d(\"QR_CODE\", qrCode);\n\t\t\t\t\t}\n\n\t\t\t\t\tArrayList<Candidate> candidates = new ArrayList<Vote.Candidate>();\n\n\t\t\t\t\tvote = new Vote();\n\t\t\t\t\tvote.parseHeader(webResult);\n\t\t\t\t\tList<Candidate> cands = vote.parseBody(webResult);\n\t\t\t\t\tString newEnc = \"\";\n\n\t\t\t\t\tif (qrCode.split(\"\\n\").length > 1) {\n\t\t\t\t\t\tfor (int i = 1; i < qrCode.split(\"\\n\").length; i++) {\n\t\t\t\t\t\t\tString hexControlCode = qrCode.split(\"\\n\")[i]\n\t\t\t\t\t\t\t\t\t.split(\"\\t\")[1].split(\"\\n\")[0];\n\t\t\t\t\t\t\tif (!RegexMatcher.IsFortyCharacters(hexControlCode)) {\n\t\t\t\t\t\t\t\tUtil.startErrorIntent(BruteForceActivity.this,\n\t\t\t\t\t\t\t\t\t\tC.badServerResponseMessage, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tString electionId = qrCode.split(\"\\n\")[i]\n\t\t\t\t\t\t\t\t\t.split(\"\\t\")[0];\n\n\t\t\t\t\t\t\tnewEnc = vote.encBallots.get(electionId)\n\t\t\t\t\t\t\t\t\t.replaceAll(\"\\n\", \"\");\n\n\t\t\t\t\t\t\tif (Util.DEBUGGABLE) {\n\t\t\t\t\t\t\t\tLog.d(TAG, electionId);\n\t\t\t\t\t\t\t\tLog.d(TAG, hexControlCode);\n\t\t\t\t\t\t\t\tLog.d(TAG, newEnc);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfor (Candidate c : cands) {\n\n\t\t\t\t\t\t\t\tString decodedVote = versionNumber + \"\\n\"\n\t\t\t\t\t\t\t\t\t\t+ electionId + \"\\n\" + c.number + \"\\n\";\n\n\t\t\t\t\t\t\t\tString bruteenc = new String(\n\t\t\t\t\t\t\t\t\t\tCrypto.encrypt(decodedVote,\n\t\t\t\t\t\t\t\t\t\t\t\thexControlCode, publicKey),\n\t\t\t\t\t\t\t\t\t\tUtil.ENCODING);\n\n\t\t\t\t\t\t\t\tif (newEnc.equals(bruteenc)) {\n\t\t\t\t\t\t\t\t\tcandidates.add(c);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn candidates;\n\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tif (Util.DEBUGGABLE) {\n\t\t\t\t\t\tLog.d(TAG, \"Error: \" + e.getMessage(), e);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}.execute();\n\t}\n\n\tpublic class CustomCountDownTimer extends CountDownTimer {\n\n\t\tpublic CustomCountDownTimer(long startTime, long interval) {\n\t\t\tsuper(startTime, interval);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tIntent intent = new Intent(getApplicationContext(),\n\t\t\t\t\tMainActivity.class);\n\t\t\tintent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\t\t\tintent.putExtra(Util.EXIT, true);\n\t\t\t((NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE))\n\t\t\t\t\t.cancel(1000123);\n\t\t\tstartActivity(intent);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tlblCloseTimeout.setText(C.lblCloseTimeout.replace(\"XX\", String\n\t\t\t\t\t.valueOf(TimeUnit.MILLISECONDS\n\t\t\t\t\t\t\t.toSeconds(millisUntilFinished))));\n\t\t}\n\t}\n\n\tprivate void sendNotification(String notificationTitle,\n\t\t\tString notificationMessage) {\n\t\tNotification notification = new Notification(R.drawable.icon,\n\t\t\t\tC.notificationMessage, System.currentTimeMillis());\n\n\t\tIntent notificationIntent = new Intent(this, BruteForceActivity.class);\n\t\tnotificationIntent.setFlags(Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);\n\n\t\tPendingIntent contentIntent = PendingIntent.getActivity(this, 0,\n\t\t\t\tnotificationIntent, PendingIntent.FLAG_ONE_SHOT);\n\n\t\tnotification.defaults |= Notification.DEFAULT_SOUND;\n\t\tnotification.defaults |= Notification.DEFAULT_VIBRATE;\n\t\tnotification.flags |= Notification.FLAG_AUTO_CANCEL;\n\n\t\tnotification.setLatestEventInfo(BruteForceActivity.this,\n\t\t\t\tnotificationTitle, notificationMessage, contentIntent);\n\n\t\t((NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE))\n\t\t\t\t.notify(1000123, notification);\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2013-09-13T08:00:08Z", "hash_sni": "d2a7be1c29a84d80ee78456f90e228c917eb04fd", "name_sni": "src/ee/vvk/ivotingverification/BruteForceActivity.java", "patch_t": ["+/**\n+ * Copyright (C) 2013 Eesti Vabariigi Valimiskomisjon \n+ * (Estonian National Electoral Committee), www.vvk.ee\n+ *\n+ * Written in 2013 by AS Finestmedia, www.finestmedia.ee\n+ * \n+ * Vote-verification application for Estonian Internet voting system\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ **/\n+ \n+package ee.vvk.ivotingverification;\n+\n+import java.security.Security;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import android.app.Activity;\n+import android.app.Notification;\n+import android.app.NotificationManager;\n+import android.app.PendingIntent;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.graphics.drawable.GradientDrawable;\n+import android.os.AsyncTask;\n+import android.os.Bundle;\n+import android.os.CountDownTimer;\n+import android.util.Log;\n+import android.view.View;\n+import android.view.Window;\n+import android.widget.ListView;\n+import android.widget.TextView;\n+import ee.vvk.ivotingverification.adapter.CandidatesListAdapter;\n+import ee.vvk.ivotingverification.dialog.LoadingSpinner;\n+import ee.vvk.ivotingverification.model.Vote;\n+import ee.vvk.ivotingverification.model.Vote.Candidate;\n+import ee.vvk.ivotingverification.util.C;\n+import ee.vvk.ivotingverification.util.Crypto;\n+import ee.vvk.ivotingverification.util.RegexMatcher;\n+import ee.vvk.ivotingverification.util.Util;\n+\n+/**\n+ * Brute force analysis of the vote.\n+ * \n+ * @version 28.05.2013\n+ */\n+public class BruteForceActivity extends Activity {\n+\n+\tprivate static final String TAG = BruteForceActivity.class.getSimpleName();\n+\n+\tprivate String qrCode;\n+\tprivate String webResult;\n+\tprivate String versionNumber;\n+\n+\tprivate String publicKey;\n+\tprivate ListView list;\n+\tprivate Vote vote;\n+\tprivate TextView lblChoice;\n+\tprivate View lblShadow;\n+\tprivate TextView lblCloseTimeout;\n+\tprivate View lblcloseTimeoutShadow;\n+\tprivate CustomCountDownTimer countDownTimer;\n+\tprivate LoadingSpinner mLoadingSpinner;\n+\n+\t@Override\n+\tpublic void onCreate(Bundle savedInstanceState) {\n+\t\tsuper.onCreate(savedInstanceState);\n+\n+\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n+\n+\t\tSecurity.removeProvider(ext.org.bouncycastle.jce.provider.BouncyCastleProvider.PROVIDER_NAME);\n+\t\tSecurity.addProvider(new ext.org.bouncycastle.jce.provider.BouncyCastleProvider());\n+\t\tsetContentView(R.layout.bruteforce_activity);\n+\n+\t\tcountDownTimer = new CustomCountDownTimer(C.closeTimeout,\n+\t\t\t\tC.closeInterval);\n+\n+\t\tIntent intent = getIntent();\n+\t\tqrCode = intent.getStringExtra(Util.QR_CODE);\n+\t\twebResult = intent.getStringExtra(Util.WEB_RESULT);\n+\t\tversionNumber = intent.getStringExtra(Util.VERSION_NUMBER);\n+\n+\t\tlist = (ListView) findViewById(R.id.list);\n+\n+\t\tlblChoice = (TextView) findViewById(R.id.choice_title_label);\n+\t\tlblChoice.setText(C.lblChoice);\n+\t\tlblChoice.setTypeface(C.typeFace);\n+\t\tlblChoice.setTextColor(Util.generateHexColorValue(C.lblForeground));\n+\t\tlblChoice.setBackgroundColor(Util\n+\t\t\t\t.generateHexColorValue(C.lblBackground));\n+\n+\t\tlblShadow = (View) findViewById(R.id.choice_title_label_shadow);\n+\t\tlblShadow.setBackgroundColor(Util.generateHexColorValue(C.lblShadow));\n+\n+\t\tlblCloseTimeout = (TextView) findViewById(R.id.close_timeout_label);\n+\t\tlblCloseTimeout.setTypeface(C.typeFace);\n+\t\tlblCloseTimeout.setText(C.lblCloseTimeout);\n+\t\tlblCloseTimeout.setTextColor(Util\n+\t\t\t\t.generateHexColorValue(C.lblCloseTimeoutForeground));\n+\t\tint colors[] = new int[3];\n+\t\tcolors[0] = Util\n+\t\t\t\t.generateHexColorValue(C.lblCloseTimeoutBackgroundStart);\n+\t\tcolors[1] = Util\n+\t\t\t\t.generateHexColorValue(C.lblCloseTimeoutBackgroundCenter);\n+\t\tcolors[2] = Util.generateHexColorValue(C.lblCloseTimeoutBackgroundEnd);\n+\n+\t\tGradientDrawable bgCloseTimeoutShape = new GradientDrawable(\n+\t\t\t\tGradientDrawable.Orientation.TOP_BOTTOM, colors);\n+\t\tbgCloseTimeoutShape.setCornerRadius(5);\n+\t\tlblCloseTimeout.setBackgroundDrawable(bgCloseTimeoutShape);\n+\n+\t\tlblcloseTimeoutShadow = (View) findViewById(R.id.close_timeout_label_shadow);\n+\t\tGradientDrawable bgCloseTimeoutShadowShape = (GradientDrawable) lblcloseTimeoutShadow\n+\t\t\t\t.getBackground();\n+\t\tbgCloseTimeoutShadowShape.setColor(Util\n+\t\t\t\t.generateHexColorValue(C.lblCloseTimeoutShadow));\n+\t\tbgCloseTimeoutShadowShape.setCornerRadius(5);\n+\n+\t\tlblChoice.setVisibility(View.INVISIBLE);\n+\t\tlblShadow.setVisibility(View.INVISIBLE);\n+\t\tlblCloseTimeout.setVisibility(View.INVISIBLE);\n+\t\tlblcloseTimeoutShadow.setVisibility(View.INVISIBLE);\n+\n+\t\tpublicKey = C.publicKey;\n+\t\tdoBruteForce();\n+\t}\n+\n+\tabstract class GetBruteForceTask extends\n+\t\t\tAsyncTask<Void, Void, ArrayList<Candidate>> {\n+\n+\t\t@Override\n+\t\tprotected void onPreExecute() {\n+\t\t\tmLoadingSpinner = Util.startSpinner(BruteForceActivity.this, false);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void onPostExecute(ArrayList<Candidate> candidates) {\n+\n+\t\t\tif (candidates != null && candidates.size() > 0) {\n+\n+\t\t\t\tCandidatesListAdapter adapter = new CandidatesListAdapter(\n+\t\t\t\t\t\tgetApplicationContext(), candidates, vote);\n+\t\t\t\tlist.setAdapter(adapter);\n+\n+\t\t\t\tUtil.stopSpinner(mLoadingSpinner);\n+\t\t\t\tsendNotification(C.notificationTitle, C.notificationMessage);\n+\n+\t\t\t\tlblChoice.setVisibility(View.VISIBLE);\n+\t\t\t\tlblShadow.setVisibility(View.VISIBLE);\n+\t\t\t\tlblCloseTimeout.setVisibility(View.VISIBLE);\n+\t\t\t\tlblcloseTimeoutShadow.setVisibility(View.VISIBLE);\n+\n+\t\t\t\tcountDownTimer.start();\n+\t\t\t} else {\n+\t\t\t\tUtil.startErrorIntent(BruteForceActivity.this,\n+\t\t\t\t\t\tC.badVerificationMessage, true);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tprotected void onDestroy() {\n+\t\tsuper.onDestroy();\n+\t\t((NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE))\n+\t\t\t\t.cancel(1000123);\n+\t\tif (countDownTimer != null) {\n+\t\t\tcountDownTimer.cancel();\n+\t\t}\n+\t}\n+\n+\tprivate void doBruteForce() {\n+\t\tnew GetBruteForceTask() {\n+\n+\t\t\t@Override\n+\t\t\tprotected ArrayList<Candidate> doInBackground(Void... arg0) {\n+\t\t\t\ttry {\n+\t\t\t\t\tif (Util.DEBUGGABLE) {\n+\t\t\t\t\t\tLog.d(\"QR_CODE\", qrCode);\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tArrayList<Candidate> candidates = new ArrayList<Vote.Candidate>();\n+\n+\t\t\t\t\tvote = new Vote();\n+\t\t\t\t\tvote.parseHeader(webResult);\n+\t\t\t\t\tList<Candidate> cands = vote.parseBody(webResult);\n+\t\t\t\t\tString newEnc = \"\";\n+\n+\t\t\t\t\tif (qrCode.split(\"\\n\").length > 1) {\n+\t\t\t\t\t\tfor (int i = 1; i < qrCode.split(\"\\n\").length; i++) {\n+\t\t\t\t\t\t\tString hexControlCode = qrCode.split(\"\\n\")[i]\n+\t\t\t\t\t\t\t\t\t.split(\"\\t\")[1].split(\"\\n\")[0];\n+\t\t\t\t\t\t\tif (!RegexMatcher.IsFortyCharacters(hexControlCode)) {\n+\t\t\t\t\t\t\t\tUtil.startErrorIntent(BruteForceActivity.this,\n+\t\t\t\t\t\t\t\t\t\tC.badServerResponseMessage, true);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tString electionId = qrCode.split(\"\\n\")[i]\n+\t\t\t\t\t\t\t\t\t.split(\"\\t\")[0];\n+\n+\t\t\t\t\t\t\tnewEnc = vote.encBallots.get(electionId)\n+\t\t\t\t\t\t\t\t\t.replaceAll(\"\\n\", \"\");\n+\n+\t\t\t\t\t\t\tif (Util.DEBUGGABLE) {\n+\t\t\t\t\t\t\t\tLog.d(TAG, electionId);\n+\t\t\t\t\t\t\t\tLog.d(TAG, hexControlCode);\n+\t\t\t\t\t\t\t\tLog.d(TAG, newEnc);\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\tfor (Candidate c : cands) {\n+\n+\t\t\t\t\t\t\t\tString decodedVote = versionNumber + \"\\n\"\n+\t\t\t\t\t\t\t\t\t\t+ electionId + \"\\n\" + c.number + \"\\n\";\n+\n+\t\t\t\t\t\t\t\tString bruteenc = new String(\n+\t\t\t\t\t\t\t\t\t\tCrypto.encrypt(decodedVote,\n+\t\t\t\t\t\t\t\t\t\t\t\thexControlCode, publicKey),\n+\t\t\t\t\t\t\t\t\t\tUtil.ENCODING);\n+\n+\t\t\t\t\t\t\t\tif (newEnc.equals(bruteenc)) {\n+\t\t\t\t\t\t\t\t\tcandidates.add(c);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\treturn candidates;\n+\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tif (Util.DEBUGGABLE) {\n+\t\t\t\t\t\tLog.d(TAG, \"Error: \" + e.getMessage(), e);\n+\t\t\t\t\t}\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}.execute();\n+\t}\n+\n+\tpublic class CustomCountDownTimer extends CountDownTimer {\n+\n+\t\tpublic CustomCountDownTimer(long startTime, long interval) {\n+\t\t\tsuper(startTime, interval);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void onFinish() {\n+\t\t\tIntent intent = new Intent(getApplicationContext(),\n+\t\t\t\t\tMainActivity.class);\n+\t\t\tintent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n+\t\t\tintent.putExtra(Util.EXIT, true);\n+\t\t\t((NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE))\n+\t\t\t\t\t.cancel(1000123);\n+\t\t\tstartActivity(intent);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void onTick(long millisUntilFinished) {\n+\t\t\tlblCloseTimeout.setText(C.lblCloseTimeout.replace(\"XX\", String\n+\t\t\t\t\t.valueOf(TimeUnit.MILLISECONDS\n+\t\t\t\t\t\t\t.toSeconds(millisUntilFinished))));\n+\t\t}\n+\t}\n+\n+\tprivate void sendNotification(String notificationTitle,\n+\t\t\tString notificationMessage) {\n+\t\tNotification notification = new Notification(R.drawable.icon,\n+\t\t\t\tC.notificationMessage, System.currentTimeMillis());\n+\n+\t\tIntent notificationIntent = new Intent(this, BruteForceActivity.class);\n+\t\tnotificationIntent.setFlags(Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);\n+\n+\t\tPendingIntent contentIntent = PendingIntent.getActivity(this, 0,\n+\t\t\t\tnotificationIntent, PendingIntent.FLAG_ONE_SHOT);\n+\n+\t\tnotification.defaults |= Notification.DEFAULT_SOUND;\n+\t\tnotification.defaults |= Notification.DEFAULT_VIBRATE;\n+\t\tnotification.flags |= Notification.FLAG_AUTO_CANCEL;\n+\n+\t\tnotification.setLatestEventInfo(BruteForceActivity.this,\n+\t\t\t\tnotificationTitle, notificationMessage, contentIntent);\n+\n+\t\t((NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE))\n+\t\t\t\t.notify(1000123, notification);\n+\t}\n+}\n\\ No newline at end of file"], "score": 1.0, "methods_t": ["ArrayList, Vote.Candidate CandidatesListAdapter CustomCountDownTimer GetBruteForceTask GradientDrawable Intent IsFortyCharacters Notification String Vote add addProvider cancel currentTimeMillis d doBruteForce encrypt equals execute ext.org.bouncycastle.jce.provider.BouncyCastleProvider findViewById generateHexColorValue get getActivity getApplicationContext getBackground getIntent getMessage getSimpleName getStringExtra getSystemService notify parseBody parseHeader putExtra removeProvider replace replaceAll requestWindowFeature sendNotification setAdapter setBackgroundColor setBackgroundDrawable setColor setContentView setCornerRadius setFlags setLatestEventInfo setText setTextColor setTypeface setVisibility size split start startActivity startErrorIntent startSpinner stopSpinner toSeconds valueOf"], "_version_": 1526742792874754048, "subject_t": ["Import initial version"], "comments_t": ["/** \n * Brute force analysis of the vote.\n * @version 28.05.2013\n */\n"], "callsites_t": ["android.view.View.setVisibility(int) <unknown>.generateHexColorValue(<unknown>) android.view.View.setBackgroundColor(<unknown>) android.widget.ListView.setAdapter(ee.vvk.ivotingverification.CandidatesListAdapter) <unknown>.startErrorIntent(ee.vvk.ivotingverification.BruteForceActivity, <unknown>, boolean) android.content.Intent.Intent(android.content.Context, java.lang.Class) android.os.AsyncTask<java.lang.Void,java.lang.Void,java.util.ArrayList<ee.vvk.ivotingverification.Candidate>>.execute() java.lang.System.currentTimeMillis() ee.vvk.ivotingverification.BruteForceActivity.sendNotification(<unknown>, <unknown>) android.widget.TextView.setText(<unknown>) java.lang.String.valueOf(long) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.generateHexColorValue(<unknown>) android.view.View.setVisibility(int) android.app.Activity.getSystemService(java.lang.String) <unknown>.generateHexColorValue(<unknown>) <unknown>.Vote() java.util.ArrayList<Vote.Candidate>.ArrayList, Vote.Candidate() android.content.ContextWrapper.getApplicationContext() <unknown>.get(java.lang.String) android.util.Log.d(java.lang.String, java.lang.String, java.lang.Exception) android.widget.TextView.setTypeface(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.parseBody(java.lang.String) <unknown>.add(ee.vvk.ivotingverification.Candidate) android.app.Activity.setContentView(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.Throwable.getMessage() <unknown>.stopSpinner(ee.vvk.ivotingverification.LoadingSpinner) <unknown>.startErrorIntent(ee.vvk.ivotingverification.BruteForceActivity, <unknown>, boolean) java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) android.content.Intent.getStringExtra(<unknown>) java.util.concurrent.TimeUnit.toSeconds(long) android.widget.TextView.setTextColor(<unknown>) java.lang.String.split(java.lang.String) android.widget.TextView.setText(<unknown>) <unknown>.generateHexColorValue(<unknown>) <unknown>.encrypt(java.lang.String, java.lang.String, java.lang.String) android.app.NotificationManager.notify(int, android.app.Notification) android.graphics.drawable.GradientDrawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation, int[]) <unknown>.startSpinner(ee.vvk.ivotingverification.BruteForceActivity, boolean) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.generateHexColorValue(<unknown>) java.lang.String.String(<unknown>, <unknown>) android.app.NotificationManager.cancel(int) android.graphics.drawable.GradientDrawable.setColor(<unknown>) android.app.Activity.findViewById(<unknown>) android.util.Log.d(java.lang.String, java.lang.String) java.lang.String.split(java.lang.String) android.app.Activity.findViewById(<unknown>) .GetBruteForceTask() android.view.View.getBackground() android.view.View.setVisibility(int) java.security.Security.addProvider(ext.org.bouncycastle.jce.provider.BouncyCastleProvider) android.content.ContextWrapper.getApplicationContext() ee.vvk.ivotingverification.BruteForceActivity.CustomCountDownTimer.CustomCountDownTimer(<unknown>, <unknown>) android.app.Notification.Notification(<unknown>, <unknown>, long) java.lang.String.split(java.lang.String) android.app.NotificationManager.cancel(int) android.app.Notification.setLatestEventInfo(ee.vvk.ivotingverification.BruteForceActivity, java.lang.String, java.lang.String, android.app.PendingIntent) android.util.Log.d(java.lang.String, java.lang.String) ee.vvk.ivotingverification.BruteForceActivity.doBruteForce() android.content.Intent.setFlags(int) android.content.Intent.putExtra(<unknown>, boolean) <unknown>.IsFortyCharacters(java.lang.String) <unknown>.generateHexColorValue(<unknown>) <unknown>.generateHexColorValue(<unknown>) android.widget.TextView.setText(<unknown>) <unknown>.generateHexColorValue(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setTypeface(<unknown>) android.content.Intent.Intent(ee.vvk.ivotingverification.BruteForceActivity, java.lang.Class) android.app.Activity.requestWindowFeature(int) java.security.Security.removeProvider(<unknown>) android.view.View.setVisibility(int) android.app.Activity.getSystemService(java.lang.String) android.content.Intent.getStringExtra(<unknown>) android.graphics.drawable.GradientDrawable.setCornerRadius(int) android.os.CountDownTimer.cancel() android.app.Activity.startActivity(android.content.Intent) android.app.PendingIntent.getActivity(ee.vvk.ivotingverification.BruteForceActivity, int, android.content.Intent, int) android.content.Intent.getStringExtra(<unknown>) <unknown>.ext.org.bouncycastle.jce.provider.BouncyCastleProvider() android.graphics.drawable.GradientDrawable.setCornerRadius(int) android.app.Activity.getSystemService(java.lang.String) java.lang.Object.CandidatesListAdapter(android.content.Context, java.util.ArrayList<ee.vvk.ivotingverification.Candidate>, ee.vvk.ivotingverification.Vote) <unknown>.size() android.view.View.setBackgroundDrawable(android.graphics.drawable.GradientDrawable) android.widget.TextView.setTextColor(<unknown>) android.view.View.setBackgroundColor(<unknown>) <unknown>.replace(java.lang.String, java.lang.String) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.content.Intent.setFlags(int) java.lang.Class.getSimpleName() android.os.CountDownTimer.start() android.view.View.setVisibility(int) <unknown>.replaceAll(java.lang.String, java.lang.String) <unknown>.parseHeader(java.lang.String) android.app.Activity.getIntent()"], "id": "vvk-ehk/ivotingverification\u0000d2a7be1c29a84d80ee78456f90e228c917eb04fd\u0000src/ee/vvk/ivotingverification/BruteForceActivity.java", "callsites_cs": "android.view.View.setVisibility(int)#<unknown>.generateHexColorValue(<unknown>)#android.view.View.setBackgroundColor(<unknown>)#android.widget.ListView.setAdapter(ee.vvk.ivotingverification.CandidatesListAdapter)#<unknown>.startErrorIntent(ee.vvk.ivotingverification.BruteForceActivity, <unknown>, boolean)#android.content.Intent.Intent(android.content.Context, java.lang.Class)#android.os.AsyncTask<java.lang.Void,java.lang.Void,java.util.ArrayList<ee.vvk.ivotingverification.Candidate>>.execute()#java.lang.System.currentTimeMillis()#ee.vvk.ivotingverification.BruteForceActivity.sendNotification(<unknown>, <unknown>)#android.widget.TextView.setText(<unknown>)#java.lang.String.valueOf(long)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.generateHexColorValue(<unknown>)#android.view.View.setVisibility(int)#android.app.Activity.getSystemService(java.lang.String)#<unknown>.generateHexColorValue(<unknown>)#<unknown>.Vote()#java.util.ArrayList<Vote.Candidate>.ArrayList, Vote.Candidate()#android.content.ContextWrapper.getApplicationContext()#<unknown>.get(java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String, java.lang.Exception)#android.widget.TextView.setTypeface(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.parseBody(java.lang.String)#<unknown>.add(ee.vvk.ivotingverification.Candidate)#android.app.Activity.setContentView(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.Throwable.getMessage()#<unknown>.stopSpinner(ee.vvk.ivotingverification.LoadingSpinner)#<unknown>.startErrorIntent(ee.vvk.ivotingverification.BruteForceActivity, <unknown>, boolean)#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.content.Intent.getStringExtra(<unknown>)#java.util.concurrent.TimeUnit.toSeconds(long)#android.widget.TextView.setTextColor(<unknown>)#java.lang.String.split(java.lang.String)#android.widget.TextView.setText(<unknown>)#<unknown>.generateHexColorValue(<unknown>)#<unknown>.encrypt(java.lang.String, java.lang.String, java.lang.String)#android.app.NotificationManager.notify(int, android.app.Notification)#android.graphics.drawable.GradientDrawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation, int[])#<unknown>.startSpinner(ee.vvk.ivotingverification.BruteForceActivity, boolean)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.generateHexColorValue(<unknown>)#java.lang.String.String(<unknown>, <unknown>)#android.app.NotificationManager.cancel(int)#android.graphics.drawable.GradientDrawable.setColor(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.util.Log.d(java.lang.String, java.lang.String)#java.lang.String.split(java.lang.String)#android.app.Activity.findViewById(<unknown>)#.GetBruteForceTask()#android.view.View.getBackground()#android.view.View.setVisibility(int)#java.security.Security.addProvider(ext.org.bouncycastle.jce.provider.BouncyCastleProvider)#android.content.ContextWrapper.getApplicationContext()#ee.vvk.ivotingverification.BruteForceActivity.CustomCountDownTimer.CustomCountDownTimer(<unknown>, <unknown>)#android.app.Notification.Notification(<unknown>, <unknown>, long)#java.lang.String.split(java.lang.String)#android.app.NotificationManager.cancel(int)#android.app.Notification.setLatestEventInfo(ee.vvk.ivotingverification.BruteForceActivity, java.lang.String, java.lang.String, android.app.PendingIntent)#android.util.Log.d(java.lang.String, java.lang.String)#ee.vvk.ivotingverification.BruteForceActivity.doBruteForce()#android.content.Intent.setFlags(int)#android.content.Intent.putExtra(<unknown>, boolean)#<unknown>.IsFortyCharacters(java.lang.String)#<unknown>.generateHexColorValue(<unknown>)#<unknown>.generateHexColorValue(<unknown>)#android.widget.TextView.setText(<unknown>)#<unknown>.generateHexColorValue(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setTypeface(<unknown>)#android.content.Intent.Intent(ee.vvk.ivotingverification.BruteForceActivity, java.lang.Class)#android.app.Activity.requestWindowFeature(int)#java.security.Security.removeProvider(<unknown>)#android.view.View.setVisibility(int)#android.app.Activity.getSystemService(java.lang.String)#android.content.Intent.getStringExtra(<unknown>)#android.graphics.drawable.GradientDrawable.setCornerRadius(int)#android.os.CountDownTimer.cancel()#android.app.Activity.startActivity(android.content.Intent)#android.app.PendingIntent.getActivity(ee.vvk.ivotingverification.BruteForceActivity, int, android.content.Intent, int)#android.content.Intent.getStringExtra(<unknown>)#<unknown>.ext.org.bouncycastle.jce.provider.BouncyCastleProvider()#android.graphics.drawable.GradientDrawable.setCornerRadius(int)#android.app.Activity.getSystemService(java.lang.String)#java.lang.Object.CandidatesListAdapter(android.content.Context, java.util.ArrayList<ee.vvk.ivotingverification.Candidate>, ee.vvk.ivotingverification.Vote)#<unknown>.size()#android.view.View.setBackgroundDrawable(android.graphics.drawable.GradientDrawable)#android.widget.TextView.setTextColor(<unknown>)#android.view.View.setBackgroundColor(<unknown>)#<unknown>.replace(java.lang.String, java.lang.String)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.content.Intent.setFlags(int)#java.lang.Class.getSimpleName()#android.os.CountDownTimer.start()#android.view.View.setVisibility(int)#<unknown>.replaceAll(java.lang.String, java.lang.String)#<unknown>.parseHeader(java.lang.String)#android.app.Activity.getIntent()"}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener com.vinsol.expensetracker.utils.DisplayDate android.os.Bundle android.view.WindowManager java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast java.util.Collections com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.util.Log android.app.Activity"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Collections;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.util.Log;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.WindowManager;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayDate;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\")) {\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n\t\t\t\t//TODO \n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ******\n\t\t// ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif(mRecordingHelper != null)\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tprivate void saveEntry() {\n\t\t\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,mDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\t\t ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\t\n\t\t\n\t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t} else {\n\t\t\t\n\t\t\tIntent mIntent = new Intent(this, ShowVoiceActivity.class);\n\t\t\tBundle tempBundle = new Bundle();\n\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\tlistOnResult.add(mEditList.get(0));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_TAG));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_AMOUNT));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n\t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDateDate(_list.get(DatabaseAdapter.KEY_DATE_TIME)));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(3));\n\t\t\t}\t\t\t\t\n\t\t\tlistOnResult.add(mEditList.get(4));\n\t\t\tlistOnResult.add(mEditList.get(5));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n\t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(6));\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(7));\n\t\t\tlistOnResult.add(mEditList.get(8));\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList.addAll(listOnResult);\n\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\tmIntent.putExtra(\"voiceShowBundle\", tempBundle);\n\t\t\tsetResult(Activity.RESULT_OK, mIntent);\n\t\t}\n\t\tfinish();\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-10T12:12:20Z", "hash_sni": "e53c319d86f4121bcb0c1b38d07a9a4739f49a3c", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" import java.io.File;\n import java.util.ArrayList;\n import java.util.Calendar;\n+import java.util.Collections;\n import java.util.HashMap;\n \n import android.app.Activity;\n@@ -10,8 +11,10 @@ import android.content.Intent;\n import android.os.Bundle;\n import android.os.CountDownTimer;\n import android.os.SystemClock;\n+import android.util.Log;\n import android.view.KeyEvent;\n import android.view.View;\n+import android.view.WindowManager;\n import android.view.View.OnClickListener;\n import android.widget.Button;\n import android.widget.Chronometer;\n@@ -24,6 +27,7 @@ import android.widget.Toast;\n import com.vinsol.expensetracker.helpers.LocationHelper;\n import com.vinsol.expensetracker.utils.AudioPlay;\n import com.vinsol.expensetracker.utils.DateHelper;\n+import com.vinsol.expensetracker.utils.DisplayDate;\n import com.vinsol.expensetracker.utils.DisplayTime;\n import com.vinsol.expensetracker.utils.FileDelete;\n import com.vinsol.expensetracker.utils.RecordingHelper;\n@@ -50,14 +54,14 @@ public class Voice extends Activity implements OnClickListener {\n \tprivate boolean setLocation = false; \n \tprivate boolean setUnknown = false;\n \n+\t\n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n \t\tsuper.onCreate(savedInstanceState);\n \n \t\tsetContentView(R.layout.text_voice_camera);\n \n-\t\t// ////// ******** Initializing and assigning memory to UI Items\n-\t\t// ********** /////////\n+\t\t// ////// ******** Initializing and assigning memory to UI Items ********** /////////\n \n \t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n \t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n@@ -87,8 +91,9 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\tString amount = mEditList.get(2);\n \t\t\tString tag = mEditList.get(1);\n \t\t\tif (!(amount.equals(\"\") || amount == null)) {\n-\t\t\t\tif (!amount.contains(\"?\"))\n+\t\t\t\tif (!amount.contains(\"?\")) {\n \t\t\t\t\ttext_voice_camera_amount.setText(amount);\n+\t\t\t\t}\n \t\t\t}\n \t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n \t\t\t\t//TODO \n@@ -98,7 +103,7 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t\ttext_voice_camera_tag.setText(tag);\n \t\t\t}\n \t\t}\n-\n+\t\t\n \t\t// ////// ******** Handle Date Bar ********* ////////\n \t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n \t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n@@ -110,8 +115,7 @@ public class Voice extends Activity implements OnClickListener {\n \n \t\t// ////// ******** Starts Recording each time activity starts ******\n \t\t// ///////\n-\t\tif (android.os.Environment.getExternalStorageState().equals(\n-\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n+\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n \t\t\tsetGraphicsVoice();\n \n \t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n@@ -143,10 +147,9 @@ public class Voice extends Activity implements OnClickListener {\n \t@Override\n \tprotected void onResume() {\n \t\tsuper.onResume();\n-\t\tdateViewString = text_voice_camera_date_bar_dateview.getText()\n-\t\t\t\t.toString();\n+\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n \t}\n-\n+\t\n \t@Override\n \tprotected void onPause() {\n \n@@ -184,20 +187,16 @@ public class Voice extends Activity implements OnClickListener {\n \n \tprivate void controlVoiceChronometer() {\n \t\ttext_voice_camera_time_details_chronometer.start();\n-\t\ttext_voice_camera_time_details_chronometer\n-\t\t\t\t.setOnChronometerTickListener(new OnChronometerTickListener() {\n+\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n \n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n-\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer\n-\t\t\t\t\t\t\t\t.getText().length() > 5) {\n+\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n+\t\t\t\t\t\t\t\n \t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n-\t\t\t\t\t\t\ttext_voice_camera_stop_button\n-\t\t\t\t\t\t\t\t\t.setVisibility(View.GONE);\n-\t\t\t\t\t\t\ttext_voice_camera_play_button\n-\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n-\t\t\t\t\t\t\ttext_voice_camera_rerecord_button\n-\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n+\t\t\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n+\t\t\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n+\t\t\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t});\n@@ -222,7 +221,7 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t\tcountDownTimer.cancel();\n \t\t\t} catch (NullPointerException e) {\n \t\t\t}\n-\t\t\t;\n+\t\t\t\n \n \t\t\t// //// ****** Handles UI items on button click ****** ///////\n \t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n@@ -243,9 +242,8 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t} catch (Exception e) {\n \t\t\t}\n \t\t\ttry {\n-\t\t\t\ttext_voice_camera_time_details_chronometer\n-\t\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n-\t\t\t\t\t\t\t\t.getPlayBackTime()));\n+\t\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n+\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n \t\t\t} catch (NullPointerException e) {\n \n \t\t\t}\n@@ -299,12 +297,12 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n \n \t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n-\t\t\tif (mRecordingHelper.isRecording())\n-\t\t\t\tmRecordingHelper.stopRecording();\n+\t\t\tif(mRecordingHelper != null)\n+\t\t\t\tif (mRecordingHelper.isRecording())\n+\t\t\t\t\tmRecordingHelper.stopRecording();\n \t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n \t\t\tmRecordingHelper.startRecording();\n-\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock\n-\t\t\t\t\t.elapsedRealtime());\n+\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n \t\t\ttext_voice_camera_time_details_chronometer.start();\n \t\t}\n \n@@ -350,34 +348,29 @@ public class Voice extends Activity implements OnClickListener {\n \t\t}\n \t}\n \n+\t@SuppressWarnings(\"unchecked\")\n \tprivate void saveEntry() {\n+\t\t\n \t\t// ///// ******* Creating HashMap to update info ******* ////////\n \t\tHashMap<String, String> _list = new HashMap<String, String>();\n \t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n \n-\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\")\n-\t\t\t\t&& !text_voice_camera_amount.getText().toString().equals(\"\")) {\n-\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount\n-\t\t\t\t\t.getText().toString());\n+\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")) {\n+\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n \t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n \t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n \t\t} else {\n \t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n \t\t}\n \t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n-\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText()\n-\t\t\t\t\t.toString());\n+\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n \t\t}\n \n-\t\tif (!text_voice_camera_date_bar_dateview.getText().toString()\n-\t\t\t\t.equals(dateViewString)) {\n+\t\tif (!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)) {\n \t\t\ttry {\n \t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n-\t\t\t\t\tDateHelper mDateHelper = new DateHelper(\n-\t\t\t\t\t\t\ttext_voice_camera_date_bar_dateview.getText()\n-\t\t\t\t\t\t\t\t\t.toString());\n-\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,\n-\t\t\t\t\t\t\tmDateHelper.getTimeMillis() + \"\");\n+\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n+\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,mDateHelper.getTimeMillis() + \"\");\n \t\t\t\t} else {\n \t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n \t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n@@ -399,15 +392,47 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n \t\t}\n \t\t\n-\t\t// //// ******* Update database if user added additional info *******\n-\t\t// ///////\n+\t\t// //// ******* Update database if user added additional info *******\t\t ///////\n \t\tmDatabaseAdapter.open();\n \t\tmDatabaseAdapter.editDatabase(_list);\n \t\tmDatabaseAdapter.close();\n+\t\t\n+\t\t\n+\t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n+\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n+\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);\n+\t\t\tstartActivity(intentExpenseListing);\n+\t\t} else {\n+\t\t\t\n+\t\t\tIntent mIntent = new Intent(this, ShowVoiceActivity.class);\n+\t\t\tBundle tempBundle = new Bundle();\n+\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n+\t\t\tlistOnResult.add(mEditList.get(0));\n+\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_TAG));\n+\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_AMOUNT));\n+\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n+\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n+\t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){\n+\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDateDate(_list.get(DatabaseAdapter.KEY_DATE_TIME)));\n+\t\t\t} else {\n+\t\t\t\tlistOnResult.add(mEditList.get(3));\n+\t\t\t}\t\t\t\t\n+\t\t\tlistOnResult.add(mEditList.get(4));\n+\t\t\tlistOnResult.add(mEditList.get(5));\n+\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n+\t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));\n+\t\t\t} else {\n+\t\t\t\tlistOnResult.add(mEditList.get(6));\n+\t\t\t}\n+\t\t\tlistOnResult.add(mEditList.get(7));\n+\t\t\tlistOnResult.add(mEditList.get(8));\n+\t\t\tmEditList = new ArrayList<String>();\n+\t\t\tmEditList.addAll(listOnResult);\n+\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n+\t\t\tmIntent.putExtra(\"voiceShowBundle\", tempBundle);\n+\t\t\tsetResult(Activity.RESULT_OK, mIntent);\n+\t\t}\n \t\tfinish();\n-\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n-\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);\n-\t\tstartActivity(intentExpenseListing);\n \t}\n \n \t// /////// ********* CountdownTimer for Chronometer ********* //////////\n@@ -423,16 +448,14 @@ public class Voice extends Activity implements OnClickListener {\n \n \t\t@Override\n \t\tpublic void onFinish() {\n-\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n-\t\t\t\t\t.getDisplayTime(mAudioPlay.getPlayBackTime()));\n+\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n \t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n \t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n \t\t}\n \n \t\t@Override\n \t\tpublic void onTick(long millisUntilFinished) {\n-\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n-\t\t\t\t\t.getDisplayTime(millisUntilFinished));\n+\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n \t\t}\n \t}\n \n@@ -456,4 +479,5 @@ public class Voice extends Activity implements OnClickListener {\n \t\t}\n \t\treturn;\n \t}\n+\t\n }"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay Bundle DatabaseAdapter DateHandler DateHelper DisplayDate DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper add addAll addFlags canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLocationDate getLocationDateDate getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put putExtra putStringArrayList saveEntry setBase setClickListeners setContentView setFirstDayOfWeek setGraphicsVoice setOnChronometerTickListener setOnClickListener setResult setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim"], "_version_": 1526743031065083904, "subject_t": ["Added back press for show activities"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// /////// \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items ********** ///////// \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// //// ****** If audio recording started then stop recording audio \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// //// ******* Update database if user added additional info *******\t\t /////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t\t//TODO  \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// ////// ******** Starts Recording each time activity starts ****** \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// ***** /////// \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["35ad47d99cd5b597d829778d1f2c8ed5abe1fbea"], "id": "vinsol/expense-tracker\u0000e53c319d86f4121bcb0c1b38d07a9a4739f49a3c\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.isRecording()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#<unknown>.getLocationDateDate(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.setContentView(<unknown>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#<unknown>.getLocationDate(<unknown>, java.lang.String)#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.Bundle()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.DisplayDate()#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Intent.addFlags(int)#android.os.SystemClock.elapsedRealtime()#android.widget.TextView.getText()#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.view.KeyEvent.getRepeatCount()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.app.Activity.setResult(int, android.content.Intent)#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#<unknown>.isRecording()#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.isRecording() java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) <unknown>.getLocationDateDate(<unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.setContentView(<unknown>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() <unknown>.getLocationDate(<unknown>, java.lang.String) android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.Bundle() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.DisplayDate() <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Intent.addFlags(int) android.os.SystemClock.elapsedRealtime() android.widget.TextView.getText() <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.add(java.lang.String) android.view.KeyEvent.getRepeatCount() java.util.ArrayList<java.lang.String>.add(<unknown>) android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.app.Activity.setResult(int, android.content.Intent) android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) <unknown>.isRecording() android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.util.Log android.app.Activity java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate static final int EDIT_RESULT = 35;\n\tprivate RelativeLayout dateBarRelativeLayout;\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\t\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\t\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t}\n\t\t\t\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\t\n\t\t\tif(mShowList.get(7) != null)\n\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\n\t\t\tif(mShowList.get(6) != null)\n\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\telse {\n\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tnew FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivityForResult(editIntent, EDIT_RESULT);\n//\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t\t\n\t\tsuper.onActivityResult(requestCode, resultCode, data);\n\t\tif (EDIT_RESULT == requestCode) {\n\t\t\tif(Activity.RESULT_OK == resultCode) {\n\t\t\t\t\n\t\t\t\tintentExtras = data.getBundleExtra(\"voiceShowBundle\");\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tLog.v(\"yo true\", true+\"\");\n\t\t\t\t\tmShowList = new ArrayList<String>();\n\t\t\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t\t\tLog.v(\"mShowListOnResult\", mShowList.toString());\n\t\t\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\t\t\tString amount = mShowList.get(2);\n\t\t\t\t\tString tag = mShowList.get(1);\n\t\t\t\t\t\n\t\t\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(7) != null)\n\t\t\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(6) != null)\n\t\t\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\t\t\telse {\n\t\t\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\t\tupdateUI();\n\t\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnew FavoriteHelper(this, mShowList);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-10T12:12:20Z", "hash_sni": "e53c319d86f4121bcb0c1b38d07a9a4739f49a3c", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" import android.content.Intent;\n import android.os.Bundle;\n import android.os.CountDownTimer;\n+import android.util.Log;\n import android.view.View;\n import android.view.View.OnClickListener;\n import android.widget.Button;\n@@ -22,6 +23,7 @@ import com.vinsol.expensetracker.utils.FileDelete;\n \n public class ShowVoiceActivity extends Activity implements OnClickListener {\n \n+\tprivate static final int EDIT_RESULT = 35;\n \tprivate RelativeLayout dateBarRelativeLayout;\n \tprivate TextView show_text_voice_camera_header_title;\n \tprivate RelativeLayout show_text_voice_camera_voice_details;\n@@ -69,59 +71,57 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t\t_id = Long.parseLong(mShowList.get(0));\n \t\t\tString amount = mShowList.get(2);\n \t\t\tString tag = mShowList.get(1);\n+\t\t\t\n \t\t\tif (!(amount.equals(\"\") || amount == null)) {\n \t\t\t\tif (!amount.contains(\"?\"))\n \t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n \t\t\t}\n+\t\t\t\n \t\t\tif (!(tag.equals(\"\") || tag == null || tag\n \t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n \t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n \t\t\t} else {\n \t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n \t\t\t}\n+\t\t\t\n \t\t\tCalendar mCalendar = Calendar.getInstance();\n \t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n \t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n+\t\t\t\n \t\t\tif(mShowList.get(7) != null)\n \t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n+\t\t\t\n \t\t\tif(mShowList.get(6) != null)\n \t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n \t\t\telse {\n \t\t\t\tnew ShowDateHandler(this,R.string.voice);\n \t\t\t}\n+\t\t\t\n \t\t}\n \t\tshow_text_voice_camera_delete.setOnClickListener(this);\n \t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n \t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n \t\tshow_text_voice_camera_edit.setOnClickListener(this);\n \n-\t\tif (android.os.Environment.getExternalStorageState().equals(\n-\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n+\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n \t\t\tupdateUI();\n \t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n-\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id\n-\t\t\t\t\t\t+ \".amr\");\n+\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n \n \t\t\t\tif (tempFile.canRead()) {\n \t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n \t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n-\t\t\t\t\tshow_text_voice_camera_play_button\n-\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n-\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n-\t\t\t\t\t\t\t.setText(new DisplayTime()\n-\t\t\t\t\t\t\t\t\t.getDisplayTime(mAudioPlay\n-\t\t\t\t\t\t\t\t\t\t\t.getPlayBackTime()));\n+\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n+\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n \t\t\t\t} else {\n-\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n-\t\t\t\t\t\t\t.setText(\"Audio File Missing\");\n+\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n \t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n \t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n \t\t\t\t}\n \t\t\t\tnew FavoriteHelper(this, mShowList);\n \t\t\t}\n \t\t} else {\n-\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG)\n-\t\t\t\t\t.show();\n+\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n \t\t}\n \t\t\n \t}\n@@ -202,21 +202,20 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t\t// ////////\n \t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n \t\t\ttry {\n-\t\t\t\tif (mAudioPlay.isAudioPlaying())\n+\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n \t\t\t\t\tmAudioPlay.stopPlayBack();\n+\t\t\t\t}\n \t\t\t} catch (Exception e) {\n \t\t\t}\n-\t\t\tshow_text_voice_camera_time_details_chronometer\n-\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n-\t\t\t\t\t\t\t.getPlayBackTime()));\n+\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n \t\t}\n \t\t\n \t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n \t\t\tIntent editIntent = new Intent(this, Voice.class);\n \t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n \t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n-\t\t\tstartActivity(editIntent);\n-\t\t\tfinish();\n+\t\t\tstartActivityForResult(editIntent, EDIT_RESULT);\n+//\t\t\tfinish();\n \t\t}\n \t}\n \n@@ -261,4 +260,81 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t}\n \t\tsuper.onPause();\n \t}\n+\n+\t@Override\n+\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n+\t\t\n+\t\tsuper.onActivityResult(requestCode, resultCode, data);\n+\t\tif (EDIT_RESULT == requestCode) {\n+\t\t\tif(Activity.RESULT_OK == resultCode) {\n+\t\t\t\t\n+\t\t\t\tintentExtras = data.getBundleExtra(\"voiceShowBundle\");\n+\t\t\t\t\n+\t\t\t\t\n+\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n+\t\t\t\t\tLog.v(\"yo true\", true+\"\");\n+\t\t\t\t\tmShowList = new ArrayList<String>();\n+\t\t\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n+\t\t\t\t\tLog.v(\"mShowListOnResult\", mShowList.toString());\n+\t\t\t\t\t_id = Long.parseLong(mShowList.get(0));\n+\t\t\t\t\tString amount = mShowList.get(2);\n+\t\t\t\t\tString tag = mShowList.get(1);\n+\t\t\t\t\t\n+\t\t\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n+\t\t\t\t\t\tif (!amount.contains(\"?\"))\n+\t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n+\t\t\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n+\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n+\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n+\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n+\t\t\t\t\t\n+\t\t\t\t\tif(mShowList.get(7) != null)\n+\t\t\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n+\t\t\t\t\t\n+\t\t\t\t\tif(mShowList.get(6) != null)\n+\t\t\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n+\t\t\t\t\telse {\n+\t\t\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n+\t\t\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n+\t\t\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n+\t\t\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n+\n+\t\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n+\t\t\t\t\tupdateUI();\n+\t\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n+\t\t\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n+\n+\t\t\t\t\t\tif (tempFile.canRead()) {\n+\t\t\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n+\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n+\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n+\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n+\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n+\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tnew FavoriteHelper(this, mShowList);\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\t\n+\t}\n+\t\n }"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler ShowLocationHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getDrawable getExternalStorageState getId getInstance getIntent getPlayBackTime getResources getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putBoolean putExtra setBackgroundDrawable setContentView setFirstDayOfWeek setOnClickListener setText setTimeInMillis setVisibility show start startActivityForResult startPlayBack stop stopPlayBack toString updateUI v"], "_version_": 1526743031104929792, "subject_t": ["Added back press for show activities"], "comments_t": ["\t\t// //// ****** If audio recording started then stop recording audio \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t// ***** /////// //\t\t\tfinish(); \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["35ad47d99cd5b597d829778d1f2c8ed5abe1fbea"], "id": "vinsol/expense-tracker\u0000e53c319d86f4121bcb0c1b38d07a9a4739f49a3c\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.startActivityForResult(android.content.Intent, int)#android.util.Log.v(java.lang.String, java.lang.String)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.io.File.canRead()#android.widget.Toast.show()#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getPlayBackTime()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#<unknown>.open()#android.content.Context.getString(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#java.util.AbstractCollection<java.lang.String>.toString()#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.Toast.show()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.view.View.setVisibility(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#java.io.File.File(java.lang.String)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.view.ContextThemeWrapper.getResources()#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.content.Context.getString(<unknown>)#android.util.Log.v(java.lang.String, java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#java.lang.String.contains(java.lang.String)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#java.lang.String.equals(<unknown>)#android.os.Environment.getExternalStorageState()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#java.lang.Long.toString(java.lang.Long)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#<unknown>.getDisplayTime(<unknown>)#android.os.CountDownTimer.cancel()#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setBackgroundDrawable(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.util.ArrayList<java.lang.String>.ArrayList, String()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.Toast.show()#java.util.Calendar.setFirstDayOfWeek(int)#java.util.Calendar.setTimeInMillis(long)#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.res.Resources.getDrawable(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#<unknown>.DisplayTime()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.os.Bundle.putBoolean(java.lang.String, boolean)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.getInstance()#android.view.View.setVisibility(int)", "callsites_t": ["java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.startActivityForResult(android.content.Intent, int) android.util.Log.v(java.lang.String, java.lang.String) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.io.File.canRead() android.widget.Toast.show() java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getPlayBackTime() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) <unknown>.open() android.content.Context.getString(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) java.util.AbstractCollection<java.lang.String>.toString() <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.Toast.show() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.widget.TextView.setText(java.lang.String) android.view.View.setVisibility(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) java.io.File.File(java.lang.String) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.view.ContextThemeWrapper.getResources() android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.content.Context.getString(<unknown>) android.util.Log.v(java.lang.String, java.lang.String) android.widget.TextView.setText(java.lang.String) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) java.lang.String.contains(java.lang.String) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) java.lang.String.equals(<unknown>) android.os.Environment.getExternalStorageState() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() java.io.File.File(java.lang.String) android.widget.Toast.show() java.lang.Long.toString(java.lang.Long) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() <unknown>.getDisplayTime(<unknown>) android.os.CountDownTimer.cancel() java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setBackgroundDrawable(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.util.ArrayList<java.lang.String>.ArrayList, String() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.Toast.show() java.util.Calendar.setFirstDayOfWeek(int) java.util.Calendar.setTimeInMillis(long) java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.content.res.Resources.getDrawable(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) <unknown>.getPlayBackTime() android.app.Activity.finish() <unknown>.DisplayTime() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) android.content.Intent.getBundleExtra(java.lang.String) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.os.Bundle.putBoolean(java.lang.String, boolean) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) java.util.Calendar.getInstance() android.view.View.setVisibility(int)"]}, {"user_sni": "ufo22940268", "repo_sni": "ufo22940268/CountDownProgress", "imports_t": ["android.os.CountDownTimer android.os.Handler android.view.View.OnClickListener android.graphics.Color android.view.MenuItem java.util.Random android.os.Bundle android.widget.Button android.content.Intent android.view.Menu android.view.View android.util.Log com.nineoldandroids.animation.ObjectAnimator com.nineoldandroids.animation.Animator android.app.Activity android.widget.Switch de.passsy.holocircularprogressbar.HoloCircularProgressBar"], "email_sni": "ufo22940268@gmail.com", "contents_t": ["package de.passsy.circularprogressbarsample;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.graphics.Color;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.Handler;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Switch;\n\nimport com.nineoldandroids.animation.Animator;\nimport com.nineoldandroids.animation.ObjectAnimator;\n\nimport java.util.Random;\n\nimport de.passsy.holocircularprogressbar.HoloCircularProgressBar;\n\n/**\n * The Class CircularProgressBarSample.\n *\n * @author Pascal Welsch\n * @since 05.03.2013\n */\npublic class CircularProgressBarSample extends Activity {\n\n    private static final String TAG = CircularProgressBarSample.class.getSimpleName();\n\n    /**\n     * The Switch button.\n     */\n    private Button mColorSwitchButton;\n\n    private HoloCircularProgressBar mHoloCircularProgressBar;\n    private ObjectAnimator mProgressBarAnimator;\n    protected boolean mAnimationHasEnded = false;\n    private Button mZero;\n    private Button mOne;\n    private Switch mAutoAnimateSwitch;\n    private Handler mHandler = new Handler();\n    public static final int TIME_RANGE = 360;\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see android.app.Activity#onCreate(android.os.Bundle)\n     */\n    @Override\n    protected void onCreate(final Bundle savedInstanceState) {\n        if (getIntent() != null) {\n            final Bundle extras = getIntent().getExtras();\n            if (extras != null) {\n                final int theme = extras.getInt(\"theme\");\n                if (theme != 0) {\n                    setTheme(theme);\n                }\n            }\n        }\n\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_home);\n\n        mHoloCircularProgressBar = (HoloCircularProgressBar) findViewById(R.id.holoCircularProgressBar1);\n\n        mHoloCircularProgressBar.setTextSize((float) getResources().getDimensionPixelSize(R.dimen.elapse_time_text_size));\n        mHoloCircularProgressBar.setTimeRange(TIME_RANGE);\n\n        new CountDownTimer(TIME_RANGE * 1000, 1 * 1000) {\n            @Override\n            public void onTick(long millisUntilFinished) {\n                mHoloCircularProgressBar.setLeftTime((int) (millisUntilFinished/1000));\n            }\n\n            @Override\n            public void onFinish() {\n\n            }\n        }.start();\n    }\n\n    /**\n     * generates random colors for the ProgressBar\n     */\n    protected void switchColor() {\n        Random r = new Random();\n        int randomColor = Color.rgb(r.nextInt(256), r.nextInt(256), r.nextInt(256));\n        mHoloCircularProgressBar.setProgressColor(randomColor);\n\n        randomColor = Color.rgb(r.nextInt(256), r.nextInt(256), r.nextInt(256));\n        mHoloCircularProgressBar.setProgressBackgroundColor(randomColor);\n    }\n\n    /**\n     * Animate.\n     *\n     * @param progressBar the progress bar\n     * @param listener    the listener\n     */\n    private void animate(final HoloCircularProgressBar progressBar, final Animator.AnimatorListener listener) {\n        final float progress = (float) (Math.random() * 2);\n        int duration = 3000;\n        progressBar.animate(listener, progress, duration);\n    }\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see android.app.Activity#onCreateOptionsMenu(android.view.Menu)\n     */\n    @Override\n    public boolean onCreateOptionsMenu(final Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.circular_progress_bar_sample, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n            case R.id.menu_switch_theme:\n                switchTheme();\n                break;\n\n            default:\n                Log.w(TAG, \"couldn't map a click action for \" + item);\n                break;\n        }\n\n        return super.onOptionsItemSelected(item);\n    }\n\n    /**\n     * Switch theme.\n     */\n    public void switchTheme() {\n\n        final Intent intent = getIntent();\n        final Bundle extras = getIntent().getExtras();\n        if (extras != null) {\n            final int theme = extras.getInt(\"theme\", -1);\n            if (theme == R.style.AppThemeLight) {\n                getIntent().removeExtra(\"theme\");\n            } else {\n                intent.putExtra(\"theme\", R.style.AppThemeLight);\n            }\n        } else {\n            intent.putExtra(\"theme\", R.style.AppThemeLight);\n        }\n        finish();\n        startActivity(intent);\n    }\n\n}\n"], "body_t": ["<empty>"], "date_tdt": "2014-06-09T03:08:13Z", "hash_sni": "017812014ab7014d90441ea2e88bd1f3b5f05165", "name_sni": "sample/src/de/passsy/circularprogressbarsample/CircularProgressBarSample.java", "patch_t": [" import android.content.Intent;\n import android.graphics.Color;\n import android.os.Bundle;\n+import android.os.CountDownTimer;\n+import android.os.Handler;\n import android.util.Log;\n import android.view.Menu;\n import android.view.MenuItem;\n import android.view.View;\n import android.view.View.OnClickListener;\n import android.widget.Button;\n-import android.widget.CompoundButton;\n-import android.widget.CompoundButton.OnCheckedChangeListener;\n import android.widget.Switch;\n \n import com.nineoldandroids.animation.Animator;\n import com.nineoldandroids.animation.ObjectAnimator;\n-import com.nineoldandroids.animation.ValueAnimator;\n \n import java.util.Random;\n \n@@ -24,207 +23,137 @@ import de.passsy.holocircularprogressbar.HoloCircularProgressBar;\n \n /**\n  * The Class CircularProgressBarSample.\n- * \n+ *\n  * @author Pascal Welsch\n  * @since 05.03.2013\n  */\n public class CircularProgressBarSample extends Activity {\n \n-\tprivate static final String TAG = CircularProgressBarSample.class.getSimpleName();\n-\n-\t/**\n-\t * The Switch button.\n-\t */\n-\tprivate Button mColorSwitchButton;\n-\n-\tprivate HoloCircularProgressBar mHoloCircularProgressBar;\n-\tprivate ObjectAnimator mProgressBarAnimator;\n-\tprotected boolean mAnimationHasEnded = false;\n-\tprivate Button mZero;\n-\tprivate Button mOne;\n-\tprivate Switch mAutoAnimateSwitch;\n-\n-\t/*\n-\t * (non-Javadoc)\n-\t * \n-\t * @see android.app.Activity#onCreate(android.os.Bundle)\n-\t */\n-\t@Override\n-\tprotected void onCreate(final Bundle savedInstanceState) {\n-\t\tif (getIntent() != null) {\n-\t\t\tfinal Bundle extras = getIntent().getExtras();\n-\t\t\tif (extras != null) {\n-\t\t\t\tfinal int theme = extras.getInt(\"theme\");\n-\t\t\t\tif (theme != 0) {\n-\t\t\t\t\tsetTheme(theme);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tsuper.onCreate(savedInstanceState);\n-\t\tsetContentView(R.layout.activity_home);\n-\n-\t\tmHoloCircularProgressBar = (HoloCircularProgressBar) findViewById(R.id.holoCircularProgressBar1);\n-\n-\t\tmColorSwitchButton = (Button) findViewById(R.id.random_color);\n-\t\tmColorSwitchButton.setOnClickListener(new OnClickListener() {\n-\n-\t\t\t@Override\n-\t\t\tpublic void onClick(final View v) {\n-\t\t\t\tswitchColor();\n-\t\t\t}\n-\t\t});\n-\n-        mHoloCircularProgressBar.setProgressColor(Color.RED);\n-        mHoloCircularProgressBar.setTextSize((float)getResources().getDimensionPixelSize(R.dimen.elapse_time_text_size));\n-\t\tmZero = (Button) findViewById(R.id.zero);\n-\t\tmZero.setOnClickListener(new OnClickListener() {\n-\n-\t\t\t@Override\n-\t\t\tpublic void onClick(View v) {\n-\t\t\t\tif (mProgressBarAnimator != null) {\n-\t\t\t\t\tmProgressBarAnimator.cancel();\n-\t\t\t\t}\n-\t\t\t\tmHoloCircularProgressBar.animate(null, 0.1f, 1000);\n-\t\t\t\tmHoloCircularProgressBar.setMarkerProgress(0f);\n-\n-\t\t\t}\n-\t\t});\n-\n-\t\tmOne = (Button) findViewById(R.id.one);\n-\t\tmOne.setOnClickListener(new OnClickListener() {\n-\n-\t\t\t@Override\n-\t\t\tpublic void onClick(View v) {\n-\t\t\t\tif (mProgressBarAnimator != null) {\n-\t\t\t\t\tmProgressBarAnimator.cancel();\n-\t\t\t\t}\n-\t\t\t\tmHoloCircularProgressBar.animate(null, 0.5f, 1000);\n-\t\t\t\tmHoloCircularProgressBar.setMarkerProgress(1f);\n-\n-\t\t\t}\n-\t\t});\n-\n-\t\tmAutoAnimateSwitch = (Switch) findViewById(R.id.auto_animate_switch);\n-\t\tmAutoAnimateSwitch.setOnCheckedChangeListener(new OnCheckedChangeListener() {\n-\n-\t\t\t@Override\n-\t\t\tpublic void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n-\t\t\t\tif (isChecked) {\n-\n-\t\t\t\t\tmOne.setEnabled(false);\n-\t\t\t\t\tmZero.setEnabled(false);\n-\n-\t\t\t\t\tanimate(mHoloCircularProgressBar, new Animator.AnimatorListener() {\n-\n-\t\t\t\t\t\t@Override\n-\t\t\t\t\t\tpublic void onAnimationCancel(final Animator animation) {\n-\t\t\t\t\t\t\tanimation.end();\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t@Override\n-\t\t\t\t\t\tpublic void onAnimationEnd(final Animator animation) {\n-\t\t\t\t\t\t\tif (!mAnimationHasEnded) {\n-\t\t\t\t\t\t\t\tanimate(mHoloCircularProgressBar, this);\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tmAnimationHasEnded = false;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t@Override\n-\t\t\t\t\t\tpublic void onAnimationRepeat(final Animator animation) {\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t@Override\n-\t\t\t\t\t\tpublic void onAnimationStart(final Animator animation) {\n-\t\t\t\t\t\t}\n-\t\t\t\t\t});\n-\t\t\t\t} else {\n-\t\t\t\t\tmAnimationHasEnded = true;\n-\t\t\t\t\tmProgressBarAnimator.cancel();\n-\n-\t\t\t\t\tmOne.setEnabled(true);\n-\t\t\t\t\tmZero.setEnabled(true);\n-\t\t\t\t}\n-\n-\t\t\t}\n-\t\t});\n-\n-\t}\n-\n-\t/**\n-\t * generates random colors for the ProgressBar\n-\t */\n-\tprotected void switchColor() {\n-\t\tRandom r = new Random();\n-\t\tint randomColor = Color.rgb(r.nextInt(256), r.nextInt(256), r.nextInt(256));\n-\t\tmHoloCircularProgressBar.setProgressColor(randomColor);\n-\n-\t\trandomColor = Color.rgb(r.nextInt(256), r.nextInt(256), r.nextInt(256));\n-\t\tmHoloCircularProgressBar.setProgressBackgroundColor(randomColor);\n-\t}\n-\n-\t/**\n-\t * Animate.\n-\t * \n-\t * @param progressBar\n-\t *            the progress bar\n-\t * @param listener\n-\t *            the listener\n-\t */\n-\tprivate void animate(final HoloCircularProgressBar progressBar, final Animator.AnimatorListener listener) {\n-\t\tfinal float progress = (float) (Math.random() * 2);\n-\t\tint duration = 3000;\n-\t\tprogressBar.animate(listener, progress, duration);\n-\t}\n-\n-\t/*\n-\t * (non-Javadoc)\n-\t * \n-\t * @see android.app.Activity#onCreateOptionsMenu(android.view.Menu)\n-\t */\n-\t@Override\n-\tpublic boolean onCreateOptionsMenu(final Menu menu) {\n-\t\t// Inflate the menu; this adds items to the action bar if it is present.\n-\t\tgetMenuInflater().inflate(R.menu.circular_progress_bar_sample, menu);\n-\t\treturn true;\n-\t}\n-\n-\t@Override\n-\tpublic boolean onOptionsItemSelected(MenuItem item) {\n-\n-\t\tswitch (item.getItemId()) {\n-\t\tcase R.id.menu_switch_theme:\n-\t\t\tswitchTheme();\n-\t\t\tbreak;\n-\n-\t\tdefault:\n-\t\t\tLog.w(TAG, \"couldn't map a click action for \" + item);\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn super.onOptionsItemSelected(item);\n-\t}\n-\n-\t/**\n-\t * Switch theme.\n-\t */\n-\tpublic void switchTheme() {\n-\n-\t\tfinal Intent intent = getIntent();\n-\t\tfinal Bundle extras = getIntent().getExtras();\n-\t\tif (extras != null) {\n-\t\t\tfinal int theme = extras.getInt(\"theme\", -1);\n-\t\t\tif (theme == R.style.AppThemeLight) {\n-\t\t\t\tgetIntent().removeExtra(\"theme\");\n-\t\t\t} else {\n-\t\t\t\tintent.putExtra(\"theme\", R.style.AppThemeLight);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tintent.putExtra(\"theme\", R.style.AppThemeLight);\n-\t\t}\n-\t\tfinish();\n-\t\tstartActivity(intent);\n-\t}\n+    private static final String TAG = CircularProgressBarSample.class.getSimpleName();\n+\n+    /**\n+     * The Switch button.\n+     */\n+    private Button mColorSwitchButton;\n+\n+    private HoloCircularProgressBar mHoloCircularProgressBar;\n+    private ObjectAnimator mProgressBarAnimator;\n+    protected boolean mAnimationHasEnded = false;\n+    private Button mZero;\n+    private Button mOne;\n+    private Switch mAutoAnimateSwitch;\n+    private Handler mHandler = new Handler();\n+    public static final int TIME_RANGE = 360;\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n+     * @see android.app.Activity#onCreate(android.os.Bundle)\n+     */\n+    @Override\n+    protected void onCreate(final Bundle savedInstanceState) {\n+        if (getIntent() != null) {\n+            final Bundle extras = getIntent().getExtras();\n+            if (extras != null) {\n+                final int theme = extras.getInt(\"theme\");\n+                if (theme != 0) {\n+                    setTheme(theme);\n+                }\n+            }\n+        }\n+\n+        super.onCreate(savedInstanceState);\n+        setContentView(R.layout.activity_home);\n+\n+        mHoloCircularProgressBar = (HoloCircularProgressBar) findViewById(R.id.holoCircularProgressBar1);\n+\n+        mHoloCircularProgressBar.setTextSize((float) getResources().getDimensionPixelSize(R.dimen.elapse_time_text_size));\n+        mHoloCircularProgressBar.setTimeRange(TIME_RANGE);\n+\n+        new CountDownTimer(TIME_RANGE * 1000, 1 * 1000) {\n+            @Override\n+            public void onTick(long millisUntilFinished) {\n+                mHoloCircularProgressBar.setLeftTime((int) (millisUntilFinished/1000));\n+            }\n+\n+            @Override\n+            public void onFinish() {\n+\n+            }\n+        }.start();\n+    }\n+\n+    /**\n+     * generates random colors for the ProgressBar\n+     */\n+    protected void switchColor() {\n+        Random r = new Random();\n+        int randomColor = Color.rgb(r.nextInt(256), r.nextInt(256), r.nextInt(256));\n+        mHoloCircularProgressBar.setProgressColor(randomColor);\n+\n+        randomColor = Color.rgb(r.nextInt(256), r.nextInt(256), r.nextInt(256));\n+        mHoloCircularProgressBar.setProgressBackgroundColor(randomColor);\n+    }\n+\n+    /**\n+     * Animate.\n+     *\n+     * @param progressBar the progress bar\n+     * @param listener    the listener\n+     */\n+    private void animate(final HoloCircularProgressBar progressBar, final Animator.AnimatorListener listener) {\n+        final float progress = (float) (Math.random() * 2);\n+        int duration = 3000;\n+        progressBar.animate(listener, progress, duration);\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n+     * @see android.app.Activity#onCreateOptionsMenu(android.view.Menu)\n+     */\n+    @Override\n+    public boolean onCreateOptionsMenu(final Menu menu) {\n+        // Inflate the menu; this adds items to the action bar if it is present.\n+        getMenuInflater().inflate(R.menu.circular_progress_bar_sample, menu);\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onOptionsItemSelected(MenuItem item) {\n+\n+        switch (item.getItemId()) {\n+            case R.id.menu_switch_theme:\n+                switchTheme();\n+                break;\n+\n+            default:\n+                Log.w(TAG, \"couldn't map a click action for \" + item);\n+                break;\n+        }\n+\n+        return super.onOptionsItemSelected(item);\n+    }\n+\n+    /**\n+     * Switch theme.\n+     */\n+    public void switchTheme() {\n+\n+        final Intent intent = getIntent();\n+        final Bundle extras = getIntent().getExtras();\n+        if (extras != null) {\n+            final int theme = extras.getInt(\"theme\", -1);\n+            if (theme == R.style.AppThemeLight) {\n+                getIntent().removeExtra(\"theme\");\n+            } else {\n+                intent.putExtra(\"theme\", R.style.AppThemeLight);\n+            }\n+        } else {\n+            intent.putExtra(\"theme\", R.style.AppThemeLight);\n+        }\n+        finish();\n+        startActivity(intent);\n+    }\n \n }"], "score": 1.0, "methods_t": ["CountDownTimer Handler Random animate findViewById finish getDimensionPixelSize getExtras getInt getIntent getItemId getMenuInflater getResources getSimpleName inflate nextInt putExtra random removeExtra rgb setContentView setLeftTime setProgressBackgroundColor setProgressColor setTextSize setTheme setTimeRange start startActivity switchTheme w"], "_version_": 1526744047956262912, "subject_t": ["up"], "comments_t": ["/** \n * generates random colors for the ProgressBar\n */\n /*\n* (non-Javadoc)\n*\n* @see android.app.Activity#onCreateOptionsMenu(android.view.Menu)\n*/\n /*\n* (non-Javadoc)\n*\n* @see android.app.Activity#onCreate(android.os.Bundle)\n*/\n /** \n * Animate.\n * @param progressBar the progress bar\n * @param listener    the listener\n */\n /** \n * The Class CircularProgressBarSample.\n * @author Pascal Welsch\n * @since 05.03.2013\n */\n /** \n * Switch theme.\n */\n /** \n * The Switch button.\n */\n         // Inflate the menu; this adds items to the action bar if it is present."], "parents_ss": ["cc4be9fa5d3cce3478d147ee7cee136f2b1947b0"], "id": "ufo22940268/CountDownProgress\u0000017812014ab7014d90441ea2e88bd1f3b5f05165\u0000sample/src/de/passsy/circularprogressbarsample/CircularProgressBarSample.java", "callsites_cs": "de.passsy.circularprogressbarsample.CircularProgressBarSample.switchTheme()#android.os.Handler.Handler()#android.app.Activity.findViewById(<unknown>)#android.view.MenuInflater.inflate(<unknown>, android.view.Menu)#android.os.Bundle.getInt(java.lang.String)#android.os.CountDownTimer.start()#.CountDownTimer(int, int)#android.app.Activity.getMenuInflater()#android.app.Activity.getIntent()#android.app.Activity.startActivity(android.content.Intent)#<unknown>.setLeftTime(int)#android.content.res.Resources.getDimensionPixelSize(<unknown>)#java.lang.Math.random()#android.view.ContextThemeWrapper.getResources()#android.os.Bundle.getInt(java.lang.String, int)#android.graphics.Color.rgb(int, int, int)#android.app.Activity.finish()#<unknown>.animate(Animator.AnimatorListener, float, int)#java.util.Random.Random()#java.util.Random.nextInt(int)#<unknown>.setTextSize(float)#<unknown>.setTimeRange(int)#<unknown>.setProgressColor(int)#android.content.Intent.getExtras()#android.app.Activity.getIntent()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.view.MenuItem.getItemId()#android.content.Intent.getExtras()#android.util.Log.w(java.lang.String, java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.setProgressBackgroundColor(int)#android.view.ContextThemeWrapper.setTheme(int)#java.lang.Class.getSimpleName()#android.content.Intent.removeExtra(java.lang.String)", "callsites_t": ["de.passsy.circularprogressbarsample.CircularProgressBarSample.switchTheme() android.os.Handler.Handler() android.app.Activity.findViewById(<unknown>) android.view.MenuInflater.inflate(<unknown>, android.view.Menu) android.os.Bundle.getInt(java.lang.String) android.os.CountDownTimer.start() .CountDownTimer(int, int) android.app.Activity.getMenuInflater() android.app.Activity.getIntent() android.app.Activity.startActivity(android.content.Intent) <unknown>.setLeftTime(int) android.content.res.Resources.getDimensionPixelSize(<unknown>) java.lang.Math.random() android.view.ContextThemeWrapper.getResources() android.os.Bundle.getInt(java.lang.String, int) android.graphics.Color.rgb(int, int, int) android.app.Activity.finish() <unknown>.animate(Animator.AnimatorListener, float, int) java.util.Random.Random() java.util.Random.nextInt(int) <unknown>.setTextSize(float) <unknown>.setTimeRange(int) <unknown>.setProgressColor(int) android.content.Intent.getExtras() android.app.Activity.getIntent() android.content.Intent.putExtra(java.lang.String, <unknown>) android.view.MenuItem.getItemId() android.content.Intent.getExtras() android.util.Log.w(java.lang.String, java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.setProgressBackgroundColor(int) android.view.ContextThemeWrapper.setTheme(int) java.lang.Class.getSimpleName() android.content.Intent.removeExtra(java.lang.String)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.util.Log android.app.Activity java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate static final int EDIT_RESULT = 35;\n\tprivate RelativeLayout dateBarRelativeLayout;\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprotected static String favID = null;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\t\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\t\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t}\n\t\t\t\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\n\t\t\tif(mShowList.get(7) != null)\n\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\n\t\t\tif(mShowList.get(6) != null)\n\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\telse {\n\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tnew FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n\n\t\t\tmShowList.set(4, favID);\n\t\t\tintentExtras.remove(\"mDisplayList\");\n\t\t\tintentExtras.putStringArrayList(\"mDisplayList\", mShowList);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivityForResult(editIntent, EDIT_RESULT);\n//\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t\t\n\t\tsuper.onActivityResult(requestCode, resultCode, data);\n\t\tif (EDIT_RESULT == requestCode) {\n\t\t\tif(Activity.RESULT_OK == resultCode) {\n\t\t\t\t\n\t\t\t\tintentExtras = data.getBundleExtra(\"voiceShowBundle\");\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tmShowList = new ArrayList<String>();\n\t\t\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t\t\tLog.v(\"mShowListOnResult\", mShowList.toString());\n\t\t\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\t\t\tString amount = mShowList.get(2);\n\t\t\t\t\tString tag = mShowList.get(1);\n\t\t\t\t\t\n\t\t\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(7) != null)\n\t\t\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(6) != null)\n\t\t\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\t\t\telse {\n\t\t\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\t\tupdateUI();\n\t\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnew FavoriteHelper(this, mShowList);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-12T07:14:02Z", "hash_sni": "791ccb69a3e9d45d7061961ee2309ac98d5a61e8", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" \t\t\t\t\n \t\t\t\t\n \t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n-\t\t\t\t\tLog.v(\"yo true\", true+\"\");\n \t\t\t\t\tmShowList = new ArrayList<String>();\n \t\t\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n \t\t\t\t\tLog.v(\"mShowListOnResult\", mShowList.toString());"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler ShowLocationHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getDrawable getExternalStorageState getId getInstance getIntent getPlayBackTime getResources getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putBoolean putExtra putStringArrayList remove set setBackgroundDrawable setContentView setFirstDayOfWeek setOnClickListener setText setTimeInMillis setVisibility show start startActivityForResult startPlayBack stop stopPlayBack toString updateUI v"], "_version_": 1526745446805929984, "subject_t": ["Graph view Overlap handled"], "comments_t": ["\t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** //\t\t\tfinish(); \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ****** If audio recording started then stop recording audio ***** /////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["29f018f40b1337ce920cf44e40d0160eba160835"], "id": "vinsol/expense-tracker\u0000791ccb69a3e9d45d7061961ee2309ac98d5a61e8\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "android.os.Bundle.remove(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.startActivityForResult(android.content.Intent, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.io.File.canRead()#android.widget.Toast.show()#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getPlayBackTime()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#<unknown>.open()#android.content.Context.getString(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#java.util.AbstractCollection<java.lang.String>.toString()#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.Toast.show()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.view.View.setVisibility(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#java.io.File.File(java.lang.String)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.view.ContextThemeWrapper.getResources()#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.content.Context.getString(<unknown>)#android.util.Log.v(java.lang.String, java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#java.lang.String.contains(java.lang.String)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#java.lang.String.equals(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.os.Environment.getExternalStorageState()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#java.lang.Long.toString(java.lang.Long)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#<unknown>.getDisplayTime(<unknown>)#android.os.CountDownTimer.cancel()#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setBackgroundDrawable(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.util.ArrayList<java.lang.String>.ArrayList, String()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.Toast.show()#java.util.Calendar.setFirstDayOfWeek(int)#java.util.Calendar.setTimeInMillis(long)#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.res.Resources.getDrawable(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#<unknown>.DisplayTime()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.os.Bundle.putBoolean(java.lang.String, boolean)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.getInstance()#android.view.View.setVisibility(int)", "callsites_t": ["android.os.Bundle.remove(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.startActivityForResult(android.content.Intent, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.io.File.canRead() android.widget.Toast.show() java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getPlayBackTime() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) <unknown>.open() android.content.Context.getString(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) java.util.AbstractCollection<java.lang.String>.toString() <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.Toast.show() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.widget.TextView.setText(java.lang.String) android.view.View.setVisibility(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) java.io.File.File(java.lang.String) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.view.ContextThemeWrapper.getResources() android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.content.Context.getString(<unknown>) android.util.Log.v(java.lang.String, java.lang.String) android.widget.TextView.setText(java.lang.String) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) java.lang.String.contains(java.lang.String) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) java.lang.String.equals(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.os.Environment.getExternalStorageState() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() java.io.File.File(java.lang.String) android.widget.Toast.show() java.lang.Long.toString(java.lang.Long) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() <unknown>.getDisplayTime(<unknown>) android.os.CountDownTimer.cancel() java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setBackgroundDrawable(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.util.ArrayList<java.lang.String>.ArrayList, String() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.Toast.show() java.util.Calendar.setFirstDayOfWeek(int) java.util.Calendar.setTimeInMillis(long) java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.content.res.Resources.getDrawable(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) <unknown>.getPlayBackTime() android.app.Activity.finish() <unknown>.DisplayTime() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) android.content.Intent.getBundleExtra(java.lang.String) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.os.Bundle.putBoolean(java.lang.String, boolean) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) java.util.Calendar.getInstance() android.view.View.setVisibility(int)"]}, {"user_sni": "Victor Melnik", "repo_sni": "inetstd/phonegap-android-custom-splashscreen", "imports_t": ["android.app.AlertDialog android.os.CountDownTimer android.webkit.WebViewClient android.content.Intent android.view.View android.util.Log android.widget.ImageView.ScaleType android.graphics.Bitmap android.webkit.WebView com.phonegap.DroidGap android.graphics.Color com.inetstd.android.phonegap.customsplashscreen.test.LandingActivity android.os.Bundle android.widget.ImageView android.view.ViewGroup android.content.DialogInterface"], "email_sni": "victor@inetstd.com", "contents_t": ["package com.inetstd.android.phonegap.customsplashscreen;\n\nimport android.app.AlertDialog;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.graphics.Bitmap;\nimport android.graphics.Color;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\nimport android.widget.ImageView;\nimport android.widget.ImageView.ScaleType;\n\nimport com.inetstd.android.phonegap.customsplashscreen.test.LandingActivity;\nimport com.phonegap.DroidGap;\n\n\n\npublic abstract class DroidGapWithCustomSplashScreen extends DroidGap {\n\n\tpublic static final String C_CUSTOM_SPLASH_SCREEN = \"C_CUSTOM_SPLASH_SCREEN\";\n\tpublic static final String C_ERROR_URL = null;\n\n\tViewGroup pgContainerView = null;\n\tViewGroup webViewContainer = null;\n\tImageView customSpashScreen = null; \n\n\tprotected int hideCustomSplashScreenTimeout = 5000;\n\n\tpublic DroidGapWithCustomSplashScreen() {\n\t\tsuper();\n\t}\n\n\t@Override\n\tpublic void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\t\t\t\t\n\t}\t\n\n\n\t@Override\n\tpublic void init() {\t\t\n\n\t\tsuper.init();\t\t\n\t\t// root is child of FrameLayout. In init method PG puts root to viewstack. Before root.getParent() returns null. \t\t\n\t\tpgContainerView = (ViewGroup) root.getParent();\n\n\t\t// better to use invisible. with View.GONE - WebView has 0,0 size and on show will call window.onresize \t\n\t\tcustomSpashScreen = new ImageView(this);\t\t\n\t\tcustomSpashScreen.setImageResource(super.getIntegerProperty(C_CUSTOM_SPLASH_SCREEN, 0));\n\t\tcustomSpashScreen.setScaleType(ScaleType.CENTER_CROP);\n\t\tpgContainerView.addView(customSpashScreen);\n\n\t\tshowCustomSplashScreen();\t\t\n\t}\n\n\tpublic void showCustomSplashScreen() {\t\t\n\t\tif (customSpashScreen == null) return;\n\t\troot.setVisibility(View.INVISIBLE);\n\t\tappView.setVisibility(View.INVISIBLE);\t\t\n\t\tcustomSpashScreen.setImageResource(super.getIntegerProperty(C_CUSTOM_SPLASH_SCREEN, 0));\n\t\tcustomSpashScreen.setVisibility(View.VISIBLE);\t\t\n\n\t}\n\n\tpublic void hideCustomSplashScreen() {\t\t\n\t\tif (customSpashScreen == null) return;\t\t\n\t\ttry {\t\t\n\t\t\tcustomSpashScreen.setVisibility(View.GONE);\t\t\n\t\t\troot.setVisibility(View.VISIBLE);\n\t\t\tappView.setVisibility(View.VISIBLE);\n\t\t} catch (Exception e) {\n\t\t\tLog.e(\"DroidGapWithCustomSplashScreen\", \"hideCustomSplashScreen - do it in ui thread\");\n\t\t}\n\t}\n\n\tprotected void hideCustomSplashScreen(final int timeout) {\n\t\tif (customSpashScreen == null) return;\n\t\t// emulate callback \n\t\tnew CountDownTimer(timeout, timeout) {\n\t\t\tpublic void onFinish() {\n\t\t\t\thideCustomSplashScreen();\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void onTick(long millisUntilFinished) {}\n\t\t}.start();\t\t\t\n\t}\n\n\tprotected abstract void onTryAgain();\n\n\t@Override\n\tpublic void displayError(final String title, final String message, final String button, final boolean exit) {\n\t\tfinal DroidGap me = this;\n\t\tshowCustomSplashScreen();\t\n\t\tme.runOnUiThread(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tAlertDialog.Builder dlg = new AlertDialog.Builder(me);\n\t\t\t\tdlg.setMessage(\"No Internet connection\");\n\t\t\t\tdlg.setTitle(\"Please, check connection settings\");\n\t\t\t\tdlg.setCancelable(false);\n\t\t\t\tdlg.setPositiveButton(\"Try again\", new AlertDialog.OnClickListener() {\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\t\tonTryAgain();\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tdlg.setNegativeButton(\"Exit\",\n\t\t\t\t\t\tnew AlertDialog.OnClickListener() {\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\t\tme.endActivity();                        \n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tdlg.create();\n\t\t\t\tdlg.show();\n\t\t\t}\n\t\t});\n\t}\n\n\n}\n"], "body_t": ["<empty>"], "date_tdt": "2012-03-12T23:41:20Z", "hash_sni": "262c98513c7a7a5a926cc391442ea20529ffb124", "name_sni": "src/com/inetstd/android/phonegap/customsplashscreen/DroidGapWithCustomSplashScreen.java", "patch_t": ["+package com.inetstd.android.phonegap.customsplashscreen;\n+\n+import android.app.AlertDialog;\n+import android.content.DialogInterface;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.Color;\n+import android.os.Bundle;\n+import android.os.CountDownTimer;\n+import android.util.Log;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.webkit.WebView;\n+import android.webkit.WebViewClient;\n+import android.widget.ImageView;\n+import android.widget.ImageView.ScaleType;\n+\n+import com.inetstd.android.phonegap.customsplashscreen.test.LandingActivity;\n+import com.phonegap.DroidGap;\n+\n+\n+\n+public abstract class DroidGapWithCustomSplashScreen extends DroidGap {\n+\n+\tpublic static final String C_CUSTOM_SPLASH_SCREEN = \"C_CUSTOM_SPLASH_SCREEN\";\n+\tpublic static final String C_ERROR_URL = null;\n+\n+\tViewGroup pgContainerView = null;\n+\tViewGroup webViewContainer = null;\n+\tImageView customSpashScreen = null; \n+\n+\tprotected int hideCustomSplashScreenTimeout = 5000;\n+\n+\tpublic DroidGapWithCustomSplashScreen() {\n+\t\tsuper();\n+\t}\n+\n+\t@Override\n+\tpublic void onCreate(Bundle savedInstanceState) {\n+\t\tsuper.onCreate(savedInstanceState);\t\t\t\t\n+\t}\t\n+\n+\n+\t@Override\n+\tpublic void init() {\t\t\n+\n+\t\tsuper.init();\t\t\n+\t\t// root is child of FrameLayout. In init method PG puts root to viewstack. Before root.getParent() returns null. \t\t\n+\t\tpgContainerView = (ViewGroup) root.getParent();\n+\n+\t\t// better to use invisible. with View.GONE - WebView has 0,0 size and on show will call window.onresize \t\n+\t\tcustomSpashScreen = new ImageView(this);\t\t\n+\t\tcustomSpashScreen.setImageResource(super.getIntegerProperty(C_CUSTOM_SPLASH_SCREEN, 0));\n+\t\tcustomSpashScreen.setScaleType(ScaleType.CENTER_CROP);\n+\t\tpgContainerView.addView(customSpashScreen);\n+\n+\t\tshowCustomSplashScreen();\t\t\n+\t}\n+\n+\tpublic void showCustomSplashScreen() {\t\t\n+\t\tif (customSpashScreen == null) return;\n+\t\troot.setVisibility(View.INVISIBLE);\n+\t\tappView.setVisibility(View.INVISIBLE);\t\t\n+\t\tcustomSpashScreen.setImageResource(super.getIntegerProperty(C_CUSTOM_SPLASH_SCREEN, 0));\n+\t\tcustomSpashScreen.setVisibility(View.VISIBLE);\t\t\n+\n+\t}\n+\n+\tpublic void hideCustomSplashScreen() {\t\t\n+\t\tif (customSpashScreen == null) return;\t\t\n+\t\ttry {\t\t\n+\t\t\tcustomSpashScreen.setVisibility(View.GONE);\t\t\n+\t\t\troot.setVisibility(View.VISIBLE);\n+\t\t\tappView.setVisibility(View.VISIBLE);\n+\t\t} catch (Exception e) {\n+\t\t\tLog.e(\"DroidGapWithCustomSplashScreen\", \"hideCustomSplashScreen - do it in ui thread\");\n+\t\t}\n+\t}\n+\n+\tprotected void hideCustomSplashScreen(final int timeout) {\n+\t\tif (customSpashScreen == null) return;\n+\t\t// emulate callback \n+\t\tnew CountDownTimer(timeout, timeout) {\n+\t\t\tpublic void onFinish() {\n+\t\t\t\thideCustomSplashScreen();\n+\t\t\t}\n+\t\t\t@Override\n+\t\t\tpublic void onTick(long millisUntilFinished) {}\n+\t\t}.start();\t\t\t\n+\t}\n+\n+\tprotected abstract void onTryAgain();\n+\n+\t@Override\n+\tpublic void displayError(final String title, final String message, final String button, final boolean exit) {\n+\t\tfinal DroidGap me = this;\n+\t\tshowCustomSplashScreen();\t\n+\t\tme.runOnUiThread(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\tAlertDialog.Builder dlg = new AlertDialog.Builder(me);\n+\t\t\t\tdlg.setMessage(\"No Internet connection\");\n+\t\t\t\tdlg.setTitle(\"Please, check connection settings\");\n+\t\t\t\tdlg.setCancelable(false);\n+\t\t\t\tdlg.setPositiveButton(\"Try again\", new AlertDialog.OnClickListener() {\n+\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n+\t\t\t\t\t\tdialog.dismiss();\n+\t\t\t\t\t\tonTryAgain();\t\t\t\t\t\t\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t\tdlg.setNegativeButton(\"Exit\",\n+\t\t\t\t\t\tnew AlertDialog.OnClickListener() {\n+\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n+\t\t\t\t\t\tdialog.dismiss();\n+\t\t\t\t\t\tme.endActivity();                        \n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t\tdlg.create();\n+\t\t\t\tdlg.show();\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\n+}"], "score": 1.0, "methods_t": ["AlertDialog.Builder AlertDialog.OnClickListener CountDownTimer ImageView Runnable addView create dismiss e endActivity getParent hideCustomSplashScreen onTryAgain runOnUiThread setCancelable setImageResource setMessage setNegativeButton setPositiveButton setScaleType setTitle setVisibility show showCustomSplashScreen start"], "_version_": 1526745582915289088, "subject_t": ["init"], "comments_t": ["\t\t// better to use invisible. with View.GONE - WebView has 0,0 size and on show will call window.onresize \t \t\t// emulate callback  \t\t// root is child of FrameLayout. In init method PG puts root to viewstack. Before root.getParent() returns null. \t\t"], "callsites_t": ["<unknown>.setVisibility(int) <unknown>.getParent() <unknown>.setVisibility(int) .AlertDialog.OnClickListener() android.util.Log.e(java.lang.String, java.lang.String) android.app.AlertDialog.Builder.show() android.widget.ImageView.setImageResource(<unknown>) android.app.AlertDialog.Builder.create() android.content.DialogInterface.dismiss() com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen.showCustomSplashScreen() <unknown>.runOnUiThread() android.widget.ImageView.setVisibility(int) android.app.AlertDialog.Builder.setPositiveButton(java.lang.String, ) <unknown>.endActivity() android.widget.ImageView.setScaleType(android.widget.ImageView.ScaleType) android.os.CountDownTimer.start() com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen.showCustomSplashScreen() android.app.AlertDialog.Builder.AlertDialog.Builder(com.inetstd.android.phonegap.customsplashscreen.DroidGap) android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, ) com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen.hideCustomSplashScreen() android.widget.ImageView.setImageResource(<unknown>) .CountDownTimer(int, int) android.app.AlertDialog.Builder.setMessage(java.lang.String) <unknown>.setVisibility(int) android.app.AlertDialog.Builder.setCancelable(boolean) android.view.ViewGroup.addView(android.widget.ImageView) android.widget.ImageView.setVisibility(int) android.widget.ImageView.ImageView(com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen) android.app.AlertDialog.Builder.setTitle(java.lang.String) com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen.onTryAgain() <unknown>.setVisibility(int) .Runnable()"], "id": "inetstd/phonegap-android-custom-splashscreen\u0000262c98513c7a7a5a926cc391442ea20529ffb124\u0000src/com/inetstd/android/phonegap/customsplashscreen/DroidGapWithCustomSplashScreen.java", "callsites_cs": "<unknown>.setVisibility(int)#<unknown>.getParent()#<unknown>.setVisibility(int)#.AlertDialog.OnClickListener()#android.util.Log.e(java.lang.String, java.lang.String)#android.app.AlertDialog.Builder.show()#android.widget.ImageView.setImageResource(<unknown>)#android.app.AlertDialog.Builder.create()#android.content.DialogInterface.dismiss()#com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen.showCustomSplashScreen()#<unknown>.runOnUiThread()#android.widget.ImageView.setVisibility(int)#android.app.AlertDialog.Builder.setPositiveButton(java.lang.String, )#<unknown>.endActivity()#android.widget.ImageView.setScaleType(android.widget.ImageView.ScaleType)#android.os.CountDownTimer.start()#com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen.showCustomSplashScreen()#android.app.AlertDialog.Builder.AlertDialog.Builder(com.inetstd.android.phonegap.customsplashscreen.DroidGap)#android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, )#com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen.hideCustomSplashScreen()#android.widget.ImageView.setImageResource(<unknown>)#.CountDownTimer(int, int)#android.app.AlertDialog.Builder.setMessage(java.lang.String)#<unknown>.setVisibility(int)#android.app.AlertDialog.Builder.setCancelable(boolean)#android.view.ViewGroup.addView(android.widget.ImageView)#android.widget.ImageView.setVisibility(int)#android.widget.ImageView.ImageView(com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen)#android.app.AlertDialog.Builder.setTitle(java.lang.String)#com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen.onTryAgain()#<unknown>.setVisibility(int)#.Runnable()"}, {"user_sni": "Alok Vaish", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener android.os.Bundle android.view.Window java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast"], "email_sni": "alok@alok-PC.(none)", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\t// ///// ****** No Title Bar ********* /////////\n\n\t\tthis.requestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items\n\t\t// ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n\t\t\t\t//TODO \n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ******\n\t\t// ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\n\t\t// //////********* Get Last most accurate location info *********\n\t\t// /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText()\n\t\t\t\t.toString();\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t\t.getText().length() > 5) {\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock\n\t\t\t\t\t.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\")\n\t\t\t\t&& !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount\n\t\t\t\t\t.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText()\n\t\t\t\t\t.toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString()\n\t\t\t\t.equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(\n\t\t\t\t\t\t\ttext_voice_camera_date_bar_dateview.getText()\n\t\t\t\t\t\t\t\t\t.toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,\n\t\t\t\t\t\t\tmDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(MainActivity.mCurrentLocation != null  && setLocation == true){\n\t\t\tif (!MainActivity.mCurrentLocation.equals(\"\")) {\n\t\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION,MainActivity.mCurrentLocation);\n\t\t\t}\n\t\t}\n\t\t// //// ******* Update database if user added additional info *******\n\t\t// ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tif (!intentExtras.containsKey(\"timeInMillis\")\n\t\t\t\t&& !intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-02T12:39:52Z", "hash_sni": "ea15921f89646f6257ccd1eda31520d849fd1e60", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" import java.util.Calendar;\n import java.util.HashMap;\n \n-import com.vinsol.expensetracker.location.LocationLast;\n-import com.vinsol.expensetracker.utils.AudioPlay;\n-import com.vinsol.expensetracker.utils.DateHelper;\n-import com.vinsol.expensetracker.utils.DisplayTime;\n-import com.vinsol.expensetracker.utils.FileDelete;\n-import com.vinsol.expensetracker.utils.RecordingHelper;\n-\n import android.app.Activity;\n import android.content.Intent;\n import android.os.Bundle;\n@@ -25,11 +18,17 @@ import android.widget.Button;\n import android.widget.Chronometer;\n import android.widget.Chronometer.OnChronometerTickListener;\n import android.widget.EditText;\n-import android.widget.ImageView;\n import android.widget.RelativeLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n+import com.vinsol.expensetracker.location.LocationLast;\n+import com.vinsol.expensetracker.utils.AudioPlay;\n+import com.vinsol.expensetracker.utils.DateHelper;\n+import com.vinsol.expensetracker.utils.DisplayTime;\n+import com.vinsol.expensetracker.utils.FileDelete;\n+import com.vinsol.expensetracker.utils.RecordingHelper;\n+\n public class Voice extends Activity implements OnClickListener {\n \n \tprivate TextView text_voice_camera_header_title;"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime File FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLastLocation getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put requestWindowFeature saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526745300792770560, "subject_t": ["Voice entry: designs integrated"], "comments_t": ["\t\t// ///// ****** No Title Bar ********* ///////// \t\t// or later, or by the code above on earlier versions of the platform. \t\t// /////// \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// //// ******* Update database if user added additional info ******* \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //////********* Get Last most accurate location info ********* \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// //// ****** If audio recording started then stop recording audio \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t\t//TODO  \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// ////// ******** Starts Recording each time activity starts ****** \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// ***** /////// \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// ********** ///////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["beaf7fe9b520d580ed5fa85e5ff296a3bcceb003"], "id": "vinsol/expense-tracker\u0000ea15921f89646f6257ccd1eda31520d849fd1e60\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.widget.TextView.setText(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.app.Activity.finish()#java.io.File.File(java.lang.String)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#<unknown>.getLastLocation()#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#<unknown>.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#android.widget.TextView.getText()#<unknown>.DisplayTime()#android.view.KeyEvent.getRepeatCount()#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.requestWindowFeature(int)#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#<unknown>.isRecording()#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.widget.TextView.setText(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.lang.Long.toString(long) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.app.Activity.finish() java.io.File.File(java.lang.String) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) <unknown>.getLastLocation() android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) <unknown>.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() android.widget.TextView.getText() <unknown>.DisplayTime() android.view.KeyEvent.getRepeatCount() <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.requestWindowFeature(int) android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) <unknown>.isRecording() android.widget.Chronometer.setBase(long)"]}, {"user_sni": "viniciusmo", "repo_sni": "viniciusmo/android-countdown-joda-time", "imports_t": ["org.joda.time.PeriodType org.joda.time.format.PeriodFormatterBuilder org.joda.time.Period android.app.Activity org.joda.time.format.PeriodFormatter java.util.Timer java.util.TimerTask android.widget.TextView org.joda.time.Seconds"], "email_sni": "vinicus.moises.oliveira@gmail.com", "contents_t": ["package com.viniciusmo.countdown;\n\nimport java.util.Timer;\nimport java.util.TimerTask;\n\nimport org.joda.time.Period;\nimport org.joda.time.PeriodType;\nimport org.joda.time.Seconds;\nimport org.joda.time.format.PeriodFormatter;\nimport org.joda.time.format.PeriodFormatterBuilder;\n\nimport android.app.Activity;\nimport android.widget.TextView;\n\npublic class CountdownTimer {\n\tprivate static final int ONE_SECOND = 1;\n\tprivate static final int FINISH = 0;\n\tprivate static final int ONE_SECOND_IN_MILLISECOND = 1000;\n\tprivate Activity timerActivity;\n\tprivate int seconds;\n\tprivate TextView textView;\n\tprivate Timer timer;\n\tprivate OnCountdownFinish onCountdownFinish;\n\n\tprivate static final PeriodFormatter FORMAT_HOURS_MINUTES_SECONDS = new PeriodFormatterBuilder()\n\t\t\t.printZeroIfSupported().minimumPrintedDigits(2).appendHours()\n\t\t\t.printZeroIfSupported().minimumPrintedDigits(2)\n\t\t\t.appendSeparator(\":\").appendMinutes().printZeroIfSupported()\n\t\t\t.minimumPrintedDigits(2).appendSeparator(\":\").appendSeconds()\n\t\t\t.minimumPrintedDigits(2).toFormatter();\n\n\tpublic CountdownTimer(Activity timerActivity, int seconds, TextView textView) {\n\t\tthis.timerActivity = timerActivity;\n\t\tthis.seconds = seconds;\n\t\tthis.textView = textView;\n\t}\n\n\tpublic void start() {\n\t\tif (timer == null && !isTimeReachedZero()) {\n\t\t\tstartTimerAndScheduleTask();\n\t\t}\n\t}\n\n\tprivate void startTimerAndScheduleTask() {\n\t\ttimer = new Timer();\n\t\tTimerTask task = new TimerTask() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tupdateTextInUiThread();\n\t\t\t}\n\t\t};\n\t\ttimer.schedule(task, 0, ONE_SECOND_IN_MILLISECOND);\n\t}\n\n\tpublic void stop() {\n\t\tif (timer != null) {\n\t\t\ttimer.cancel();\n\t\t\ttimer = null;\n\t\t}\n\t}\n\n\tprivate String getTimeFormatted(int seconds) {\n\t\tSeconds secondsConverted = Seconds.seconds(seconds);\n\t\tPeriod period = new Period(secondsConverted);\n\t\tString result = FORMAT_HOURS_MINUTES_SECONDS.print(period\n\t\t\t\t.normalizedStandard(PeriodType.time()));\n\t\treturn result;\n\t}\n\n\tprivate void updateTextInUiThread() {\n\t\ttimerActivity.runOnUiThread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tupdateText();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void updateText() {\n\t\tseconds -= ONE_SECOND;\n\t\tString result = getTimeFormatted(seconds);\n\t\ttextView.setText(result);\n\t\tif (isTimeReachedZero()) {\n\t\t\tcallBackOnCountdownFinish();\n\t\t\ttimer.cancel();\n\t\t}\n\t}\n\n\tprivate void callBackOnCountdownFinish() {\n\t\tif (onCountdownFinish != null) {\n\t\t\tonCountdownFinish.onCountdownFinish();\n\t\t}\n\t}\n\n\tprivate boolean isTimeReachedZero() {\n\t\treturn seconds == FINISH;\n\t}\n\n\tpublic void setOnCountdownFinish(OnCountdownFinish onCountdownFinish) {\n\t\tthis.onCountdownFinish = onCountdownFinish;\n\t}\n\n}\n"], "body_t": ["<empty>"], "date_tdt": "2013-07-12T01:53:04Z", "hash_sni": "1254b614f2475328eb7a62568032bff244989cf2", "name_sni": "android-countdown/src/com/viniciusmo/countdown/CountdownTimer.java", "patch_t": ["+package com.viniciusmo.countdown;\n+\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import org.joda.time.Period;\n+import org.joda.time.PeriodType;\n+import org.joda.time.Seconds;\n+import org.joda.time.format.PeriodFormatter;\n+import org.joda.time.format.PeriodFormatterBuilder;\n+\n+import android.app.Activity;\n+import android.widget.TextView;\n+\n+public class CountdownTimer {\n+\tprivate static final int ONE_SECOND = 1;\n+\tprivate static final int FINISH = 0;\n+\tprivate static final int ONE_SECOND_IN_MILLISECOND = 1000;\n+\tprivate Activity timerActivity;\n+\tprivate int seconds;\n+\tprivate TextView textView;\n+\tprivate Timer timer;\n+\tprivate OnCountdownFinish onCountdownFinish;\n+\n+\tprivate static final PeriodFormatter FORMAT_HOURS_MINUTES_SECONDS = new PeriodFormatterBuilder()\n+\t\t\t.printZeroIfSupported().minimumPrintedDigits(2).appendHours()\n+\t\t\t.printZeroIfSupported().minimumPrintedDigits(2)\n+\t\t\t.appendSeparator(\":\").appendMinutes().printZeroIfSupported()\n+\t\t\t.minimumPrintedDigits(2).appendSeparator(\":\").appendSeconds()\n+\t\t\t.minimumPrintedDigits(2).toFormatter();\n+\n+\tpublic CountdownTimer(Activity timerActivity, int seconds, TextView textView) {\n+\t\tthis.timerActivity = timerActivity;\n+\t\tthis.seconds = seconds;\n+\t\tthis.textView = textView;\n+\t}\n+\n+\tpublic void start() {\n+\t\tif (timer == null && !isTimeReachedZero()) {\n+\t\t\tstartTimerAndScheduleTask();\n+\t\t}\n+\t}\n+\n+\tprivate void startTimerAndScheduleTask() {\n+\t\ttimer = new Timer();\n+\t\tTimerTask task = new TimerTask() {\n+\t\t\t@Override\n+\t\t\tpublic void run() {\n+\t\t\t\tupdateTextInUiThread();\n+\t\t\t}\n+\t\t};\n+\t\ttimer.schedule(task, 0, ONE_SECOND_IN_MILLISECOND);\n+\t}\n+\n+\tpublic void stop() {\n+\t\tif (timer != null) {\n+\t\t\ttimer.cancel();\n+\t\t\ttimer = null;\n+\t\t}\n+\t}\n+\n+\tprivate String getTimeFormatted(int seconds) {\n+\t\tSeconds secondsConverted = Seconds.seconds(seconds);\n+\t\tPeriod period = new Period(secondsConverted);\n+\t\tString result = FORMAT_HOURS_MINUTES_SECONDS.print(period\n+\t\t\t\t.normalizedStandard(PeriodType.time()));\n+\t\treturn result;\n+\t}\n+\n+\tprivate void updateTextInUiThread() {\n+\t\ttimerActivity.runOnUiThread(new Runnable() {\n+\t\t\t@Override\n+\t\t\tpublic void run() {\n+\t\t\t\tupdateText();\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tprivate void updateText() {\n+\t\tseconds -= ONE_SECOND;\n+\t\tString result = getTimeFormatted(seconds);\n+\t\ttextView.setText(result);\n+\t\tif (isTimeReachedZero()) {\n+\t\t\tcallBackOnCountdownFinish();\n+\t\t\ttimer.cancel();\n+\t\t}\n+\t}\n+\n+\tprivate void callBackOnCountdownFinish() {\n+\t\tif (onCountdownFinish != null) {\n+\t\t\tonCountdownFinish.onCountdownFinish();\n+\t\t}\n+\t}\n+\n+\tprivate boolean isTimeReachedZero() {\n+\t\treturn seconds == FINISH;\n+\t}\n+\n+\tpublic void setOnCountdownFinish(OnCountdownFinish onCountdownFinish) {\n+\t\tthis.onCountdownFinish = onCountdownFinish;\n+\t}\n+\n+}"], "score": 1.0, "methods_t": ["Period PeriodFormatterBuilder Runnable Timer TimerTask appendHours appendMinutes appendSeconds appendSeparator callBackOnCountdownFinish cancel getTimeFormatted isTimeReachedZero minimumPrintedDigits normalizedStandard onCountdownFinish print printZeroIfSupported runOnUiThread schedule seconds setText startTimerAndScheduleTask time toFormatter updateText updateTextInUiThread"], "_version_": 1526744180279214080, "subject_t": ["Example countdown android"], "comments_t": ["<empty>"], "callsites_t": ["org.joda.time.format.PeriodFormatterBuilder.appendSeconds() com.viniciusmo.countdown.CountdownTimer.startTimerAndScheduleTask() org.joda.time.format.PeriodFormatter.print(org.joda.time.Period) org.joda.time.format.PeriodFormatterBuilder.minimumPrintedDigits(int) android.app.Activity.runOnUiThread() org.joda.time.format.PeriodFormatterBuilder.minimumPrintedDigits(int) <unknown>.onCountdownFinish() .TimerTask() org.joda.time.format.PeriodFormatterBuilder.minimumPrintedDigits(int) java.util.Timer.Timer() com.viniciusmo.countdown.CountdownTimer.isTimeReachedZero() org.joda.time.Period.Period(org.joda.time.Seconds) java.util.Timer.cancel() java.util.Timer.schedule(java.util.TimerTask, int, int) org.joda.time.format.PeriodFormatterBuilder.appendMinutes() org.joda.time.Seconds.seconds(int) org.joda.time.format.PeriodFormatterBuilder.printZeroIfSupported() org.joda.time.format.PeriodFormatterBuilder.toFormatter() org.joda.time.format.PeriodFormatterBuilder.appendSeparator(java.lang.String) org.joda.time.format.PeriodFormatterBuilder.appendSeparator(java.lang.String) org.joda.time.format.PeriodFormatterBuilder.appendHours() org.joda.time.format.PeriodFormatterBuilder.printZeroIfSupported() java.util.Timer.cancel() com.viniciusmo.countdown.CountdownTimer.callBackOnCountdownFinish() com.viniciusmo.countdown.CountdownTimer.isTimeReachedZero() org.joda.time.format.PeriodFormatterBuilder.printZeroIfSupported() org.joda.time.format.PeriodFormatterBuilder.PeriodFormatterBuilder() org.joda.time.Period.normalizedStandard(org.joda.time.PeriodType) org.joda.time.format.PeriodFormatterBuilder.minimumPrintedDigits(int) .Runnable() com.viniciusmo.countdown.CountdownTimer.updateTextInUiThread() org.joda.time.PeriodType.time() android.widget.TextView.setText(java.lang.String) com.viniciusmo.countdown.CountdownTimer.updateText() com.viniciusmo.countdown.CountdownTimer.getTimeFormatted(int)"], "id": "viniciusmo/android-countdown-joda-time\u00001254b614f2475328eb7a62568032bff244989cf2\u0000android-countdown/src/com/viniciusmo/countdown/CountdownTimer.java", "callsites_cs": "org.joda.time.format.PeriodFormatterBuilder.appendSeconds()#com.viniciusmo.countdown.CountdownTimer.startTimerAndScheduleTask()#org.joda.time.format.PeriodFormatter.print(org.joda.time.Period)#org.joda.time.format.PeriodFormatterBuilder.minimumPrintedDigits(int)#android.app.Activity.runOnUiThread()#org.joda.time.format.PeriodFormatterBuilder.minimumPrintedDigits(int)#<unknown>.onCountdownFinish()#.TimerTask()#org.joda.time.format.PeriodFormatterBuilder.minimumPrintedDigits(int)#java.util.Timer.Timer()#com.viniciusmo.countdown.CountdownTimer.isTimeReachedZero()#org.joda.time.Period.Period(org.joda.time.Seconds)#java.util.Timer.cancel()#java.util.Timer.schedule(java.util.TimerTask, int, int)#org.joda.time.format.PeriodFormatterBuilder.appendMinutes()#org.joda.time.Seconds.seconds(int)#org.joda.time.format.PeriodFormatterBuilder.printZeroIfSupported()#org.joda.time.format.PeriodFormatterBuilder.toFormatter()#org.joda.time.format.PeriodFormatterBuilder.appendSeparator(java.lang.String)#org.joda.time.format.PeriodFormatterBuilder.appendSeparator(java.lang.String)#org.joda.time.format.PeriodFormatterBuilder.appendHours()#org.joda.time.format.PeriodFormatterBuilder.printZeroIfSupported()#java.util.Timer.cancel()#com.viniciusmo.countdown.CountdownTimer.callBackOnCountdownFinish()#com.viniciusmo.countdown.CountdownTimer.isTimeReachedZero()#org.joda.time.format.PeriodFormatterBuilder.printZeroIfSupported()#org.joda.time.format.PeriodFormatterBuilder.PeriodFormatterBuilder()#org.joda.time.Period.normalizedStandard(org.joda.time.PeriodType)#org.joda.time.format.PeriodFormatterBuilder.minimumPrintedDigits(int)#.Runnable()#com.viniciusmo.countdown.CountdownTimer.updateTextInUiThread()#org.joda.time.PeriodType.time()#android.widget.TextView.setText(java.lang.String)#com.viniciusmo.countdown.CountdownTimer.updateText()#com.viniciusmo.countdown.CountdownTimer.getTimeFormatted(int)"}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener android.os.Bundle android.view.Window java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class Voice extends Activity implements OnClickListener{\n\t\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\t\n\t\t///////   ****** No Title Bar   ********* /////////\n        \n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        setContentView(R.layout.text_voice_camera);\n        \n        \n        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n        \n        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n    \ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n    \ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n    \ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n    \tmDatabaseAdapter = new DatabaseAdapter(this);\n    \t\n    \t////////*********     Get id from intent extras     ********   ////////////\n        intentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n        _id = intentExtras.getLong(\"_id\");\n    \t\n        if(intentExtras.containsKey(\"mDisplayList\")){\n        \tmEditList = new ArrayList<String>();\n        \tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n        \t_id = Long.parseLong(mEditList.get(0));\n        \tString amount = mEditList.get(2);\n        \tString tag = mEditList.get(1);\n        \tif(!(amount.equals(\"\") || amount == null)){\n        \t\tif(!amount.contains(\"?\"))\n        \t\t\ttext_voice_camera_amount.setText(amount);\n        \t}\n        \tif(!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))){\n        \t\ttext_voice_camera_tag.setText(tag);\n        \t}\n        }\n        \n        \n        ////////   ********  Handle Date Bar   *********   ////////\n        if(intentExtras.containsKey(\"mDisplayList\")){\n        \tnew DateHandler(this , Long.parseLong(mEditList.get(6)));\n        } else if(intentExtras.containsKey(\"timeInMillis\")) {\n        \tnew DateHandler(this ,intentExtras.getLong(\"timeInMillis\"));\n        } else {\n        \tnew DateHandler(this);\n        }\n        \n        \n        ////////   ********   Starts Recording each time activity starts   ******   ///////\n        if(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n        \tsetGraphicsVoice();\n        \t\n        \tif(intentExtras.containsKey(\"mDisplayList\")){\n        \t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\"+_id+\".amr\");\n        \t\t\n        \t\tif(tempFile.canRead()){\n        \t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n        \t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n        \t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n        \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n        \t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n        \t\t} else {\n        \t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n        \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n        \t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n        \t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n        \t\t}\n        \t} else {\n        \t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n        \t\tmRecordingHelper.startRecording();\n        \t\tcontrolVoiceChronometer();\n        \t}\n        } \n        else {\n        \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n        }\n        setClickListeners();\n\t\t\n\t\t////////*********     Get Last most accurate location info   *********   /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\t\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\n\t\n\t@Override\n\tprotected void onPause() {\n\t\t\n\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\ttry{\n\t\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n\t\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch(Exception e){\n\t\t\t\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n\t\t\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n\t\t\n\t\t\n\t\t////  ***** if stop button pressed ****** //////\n\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n\t\t\ttry{\n\t\t\t\tif(mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e){}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch(Exception e){}\n\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t}\n\t\t\n\t\t\n\t\t////  ***** if play button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n\t\t\tmAudioPlay = new AudioPlay(_id+\"\",this);\n\t\t\t\n\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n\t\t\tif(!mAudioPlay.isAudioPlaying()){\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\t\t\n\t\t////  ***** if rerecord button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){}\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\t\t\t\n\t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n\t\t\tif(mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\t\t\n\t\t////////********  Adding Action to save entry     *********    ///////////\n\t\t\n\t\tif(v.getId() == R.id.text_voice_camera_save_entry){\n\t\t\tsaveEntry();\n\t\t}\n\t\n\t\n\t\t/////////     *********   Adding action if delete button **********  /////////\n\t\n\t\tif(v.getId() == R.id.text_voice_camera_delete){\n\t\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\t\ttry{\n\t\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\n\t\t\tnew FileDelete(_id);\n\t\t\n\t\t\t//////   *******   Delete entry from database ********   /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n\t\n\tprivate void saveEntry() {\n\t\t///////    *******  Creating HashMap to update info   *******  ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\t\t\n\t\tif(!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")){\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double)((int)((mAmount+0.005)*100.0)/100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\t\n\t\tif(text_voice_camera_tag.getText().toString() != \"\"){\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\t\t\n\t\tif(!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)){\n\t\t\ttry{\n\t\t\t\tif(!intentExtras.containsKey(\"mDisplayList\")){\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t} else {\n\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mEditList.get(6)));\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t}\n\t\t\t} catch (Exception e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t//////    *******   Update database if user added additional info   *******  ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tif(!intentExtras.containsKey(\"timeInMillis\")  && !intentExtras.containsKey(\"mDisplayList\")){\n\t\t\t Intent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\t startActivity(intentExpenseListing);\n\t\t}\n\t}\n\n\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\t\n\t\n\t///// ******************  Handling back press of key   ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n\t     if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t    \t onBackPressed();\n\t      }\n\t    return super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t    // This will be called either automatically for you on 2.0    \n\t    // or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry{\n\t\t\tif(mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t}catch(Exception e){}\n\t    return;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-27T20:33:55Z", "hash_sni": "3136b8e48e3561c8e2073ded73bc26a3b96533ad", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \t\t\t\t\tmRecordingHelper.stopRecording();\n \t\t\t\t}\n \t\t\t}\n+\t\t\tif(mAudioPlay.isAudioPlaying())\n+\t\t\t\tmAudioPlay.stopPlayBack();\n \t\t} catch(Exception e){\n \t\t\t\n \t\t}\n@@ -222,8 +224,16 @@ public class Voice extends Activity implements OnClickListener{\n \t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n \t\t\t\n \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n-\t\t\tmRecordingHelper.stopRecording();\n+\t\t\ttry{\n+\t\t\t\tif(mRecordingHelper.isRecording())\n+\t\t\t\t\tmRecordingHelper.stopRecording();\n+\t\t\t} catch (Exception e){}\n \t\t\ttext_voice_camera_time_details_chronometer.stop();\n+\t\t\ttry{\n+\t\t\t\tif(mAudioPlay.isAudioPlaying())\n+\t\t\t\t\tmAudioPlay.stopPlayBack();\n+\t\t\t} catch(Exception e){}\n+\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n \t\t}\n \t\t\n \t\t\n@@ -390,7 +400,6 @@ public class Voice extends Activity implements OnClickListener{\n \tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n \t     if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n \t    \t onBackPressed();\n-\t         return true;\n \t      }\n \t    return super.onKeyDown(keyCode, event);\n \t}\n@@ -399,6 +408,10 @@ public class Voice extends Activity implements OnClickListener{\n \t    // This will be called either automatically for you on 2.0    \n \t    // or later, or by the code above on earlier versions of the platform.\n \t\tsaveEntry();\n+\t\ttry{\n+\t\t\tif(mAudioPlay.isAudioPlaying())\n+\t\t\t\tmAudioPlay.stopPlayBack();\n+\t\t}catch(Exception e){}\n \t    return;\n \t}\n }"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime File FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLastLocation getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put requestWindowFeature saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526753011033964544, "subject_t": ["Added feature of show item using list"], "comments_t": ["\t\t////////********  Adding Action to save entry     *********    /////////// \t//countdowntimer is an abstract class, so extend it and fill in methods \t\t///////   ****** No Title Bar   ********* /////////         ////////   ********    Initializing and assigning memory to UI Items **********    /////////     \t////////*********     Get id from intent extras     ********   //////////// \t\t\t///////   *******   Chronometer Starts Countdown   ******  /////// \t\t\t//////  ******  Restarts chronometer and recording   *******  //////// \t///// ******************  Handling back press of key   ********** /////////// \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   //////// \t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******////// \t\t////  ***** if stop button pressed ****** ////// \t\t///////   ***** Sets Title Voice Entry *********/////// \t\t\t//////   ******   Handles UI items on button click  ******  ///////         ////////   ********  Handle Date Bar   *********   ////////         ///////   ***** Sets Title Voice Entry *********/////// \t    // This will be called either automatically for you on 2.0     \t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** /////// \t\t////////    *******    Adding Click Listeners to UI Items ******** ////////// \t\t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t////////*********     Get Last most accurate location info   *********   ///////// \t\t////  ***** if play button pressed ****** //////\t\t \t\t\t//////   *******   Delete entry from database ********   ///////// \t\t////  ***** if rerecord button pressed ****** //////\t\t \t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t//////    *******   Update database if user added additional info   *******  /////// \t\t///////   ********     Adding On Click Actions to click listeners *********    ////////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////               ////////   ********   Starts Recording each time activity starts   ******   /////// \t    // or later, or by the code above on earlier versions of the platform.         //////   ******  Shows Voice Details ********//////// \t\t\t//////\t     ********   to handle playback of recorded file   *********   //////// \t\t///////    *******  Creating HashMap to update info   *******  //////// \t\t/////////     *********   Adding action if delete button **********  /////////"], "parents_ss": ["6b33d4eeee1e80f84005d84f9eb07f7f301a7736"], "id": "vinsol/expense-tracker\u00003136b8e48e3561c8e2073ded73bc26a3b96533ad\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.widget.TextView.setText(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#<unknown>.deleteDatabaseEntryID(java.lang.String)#java.util.Calendar.setTimeInMillis(long)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.app.Activity.finish()#java.io.File.File(java.lang.String)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#<unknown>.getLastLocation()#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#android.widget.TextView.getText()#<unknown>.DisplayTime()#android.view.KeyEvent.getRepeatCount()#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.requestWindowFeature(int)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#<unknown>.isRecording()#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() java.lang.Long.parseLong(java.lang.String) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.widget.TextView.setText(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.lang.Long.toString(long) <unknown>.deleteDatabaseEntryID(java.lang.String) java.util.Calendar.setTimeInMillis(long) <unknown>.getTimeMillis() android.app.Activity.getIntent() android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.app.Activity.finish() java.io.File.File(java.lang.String) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) <unknown>.getLastLocation() android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() android.widget.TextView.getText() <unknown>.DisplayTime() android.view.KeyEvent.getRepeatCount() <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.requestWindowFeature(int) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) <unknown>.isRecording() android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button java.io.File android.view.Window com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity android.widget.ImageView java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener{\n\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate ImageView show_text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate EditText show_text_voice_camera_tag;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate View show_text_voice_camera_divider_amount_desc;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_update_entry;\n\t\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.show_text_voice_camera_voice_details_separator);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag = (EditText) findViewById(R.id.show_text_voice_camera_tag);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_divider_amount_desc = findViewById(R.id.show_text_voice_camera_divider_amount_desc);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_update_entry = (Button) findViewById(R.id.show_text_voice_camera_update_entry);\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\t\t\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\t\t\n\t\tif(intentExtras.containsKey(\"mDisplayList\")){\n        \tmShowList = new ArrayList<String>();\n        \tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n        \t_id = Long.parseLong(mShowList.get(0));\n        \tString amount = mShowList.get(2);\n        \tString tag = mShowList.get(1);\n        \tif(!(amount.equals(\"\") || amount == null)){\n        \t\tif(!amount.contains(\"?\"))\n        \t\t\tshow_text_voice_camera_amount.setText(amount);\n        \t}\n        \tif(!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))){\n        \t\tshow_text_voice_camera_tag_textview.setText(tag);\n        \t} else {\n        \t\tshow_text_voice_camera_tag_textview.setVisibility(View.GONE);\n        \t\tshow_text_voice_camera_tag.setVisibility(View.VISIBLE);\n        \t\tshow_text_voice_camera_divider_amount_desc.setVisibility(View.GONE);\n        \t\tshow_text_voice_camera_update_entry.setVisibility(View.VISIBLE);\n        \t}\n        \tCalendar mCalendar = Calendar.getInstance();\n        \tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n        \tnew ShowDateHandler(this, mCalendar);\n        }\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_update_entry.setOnClickListener(this);\n\t\t\n\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n\t\t\tupdateUI();\n        \tif(intentExtras.containsKey(\"mDisplayList\")){\n        \t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\"+_id+\".amr\");\n        \t\t\n        \t\tif(tempFile.canRead()){\n        \t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n        \t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n        \t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n        \t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n        \t\t} else {\n        \t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n        \t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n        \t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n        \t\t}\n        \t}\n        } \n        else {\n        \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n        }\n\t\t\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t///////   ***** Sets Title Voice Entry *********///////\n        show_text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        show_text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        show_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_delete){\n\t\t\t\n\t\t\tif(_id != null){\n\t\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\t\ttry{\n\t\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t}catch(NullPointerException e){\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\n\t\t\t\tnew FileDelete(_id);\n\t\t\t\t\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_play_button){\n\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n\t\t\tmAudioPlay = new AudioPlay(_id+\"\",this);\n\t\t\t\n\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n\t\t\tif(!mAudioPlay.isAudioPlaying()){\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch(Exception e){}\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t}\t\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_update_entry){\n\t\t\tif(show_text_voice_camera_tag.isShown()){\n\t\t\t\tif(show_text_voice_camera_tag.getText().toString() != \"\")\n\t\t\t\t\tsaveEntry();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\t\n\t///// ******************  Handling back press of key   ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n\t     if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t    \t onBackPressed();\n\t    \t return super.onKeyDown(keyCode, event);\n\t      }\n\t    return super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t    // This will be called either automatically for you on 2.0    \n\t    // or later, or by the code above on earlier versions of the platform.\n\t\tif(show_text_voice_camera_tag.isShown()){\n\t\t\tif(show_text_voice_camera_tag.getText().toString() != \"\")\n\t\t\t\tsaveEntry();\n\t\t}\n\t\t\n\t\ttry{\n\t\t\tif(mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t}catch(Exception e){}\n\t    finish();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\t\t\n\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\ttry{\n\t\t\tif(mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch(Exception e){\n\t\t\t\n\t\t}\n\t\tsuper.onPause();\n\t}\n\t\n\tprivate void saveEntry() {\n\t\t///////    *******  Creating HashMap to update info   *******  ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\t\t\n\t\tif(show_text_voice_camera_tag.getText().toString() != \"\"){\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, show_text_voice_camera_tag.getText().toString());\n\t\t}\n\t\t\n\t\t//////    *******   Update database if user added additional info   *******  ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-27T20:33:55Z", "hash_sni": "3136b8e48e3561c8e2073ded73bc26a3b96533ad", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": ["+package com.vinsol.expensetracker;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+\n+import com.vinsol.expensetracker.utils.AudioPlay;\n+import com.vinsol.expensetracker.utils.DisplayTime;\n+import com.vinsol.expensetracker.utils.FileDelete;\n+\n+import android.app.Activity;\n+import android.os.Bundle;\n+import android.os.CountDownTimer;\n+import android.view.KeyEvent;\n+import android.view.View;\n+import android.view.View.OnClickListener;\n+import android.view.Window;\n+import android.widget.Button;\n+import android.widget.Chronometer;\n+import android.widget.EditText;\n+import android.widget.ImageView;\n+import android.widget.RelativeLayout;\n+import android.widget.TextView;\n+import android.widget.Toast;\n+\n+public class ShowVoiceActivity extends Activity implements OnClickListener{\n+\n+\tprivate TextView show_text_voice_camera_header_title;\n+\tprivate ImageView show_text_voice_camera_voice_details_separator;\n+\tprivate RelativeLayout show_text_voice_camera_voice_details;\n+\tprivate TextView show_text_voice_camera_amount;\n+\tprivate TextView show_text_voice_camera_tag_textview;\n+\tprivate EditText show_text_voice_camera_tag;\n+\tprivate Button show_text_voice_camera_delete;\n+\tprivate View show_text_voice_camera_divider_amount_desc;\n+\tprivate Button show_text_voice_camera_play_button;\n+\tprivate Button show_text_voice_camera_stop_button;\n+\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n+\tprivate MyCount countDownTimer;\n+\tprivate Button show_text_voice_camera_update_entry;\n+\t\n+\tprivate AudioPlay mAudioPlay;\n+\tprivate Long _id = null;\n+\tprivate Bundle intentExtras;\n+\tprivate ArrayList<String> mShowList;\n+\tprivate DatabaseAdapter mDatabaseAdapter;\n+\t\n+\t@Override\n+\tprotected void onCreate(Bundle savedInstanceState) {\n+\t\tsuper.onCreate(savedInstanceState);\n+\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n+\t\tsetContentView(R.layout.show_text_voice_camera);\n+\t\t\n+\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n+\t\tshow_text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.show_text_voice_camera_voice_details_separator);\n+\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n+\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n+\t\tshow_text_voice_camera_tag = (EditText) findViewById(R.id.show_text_voice_camera_tag);\n+\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n+\t\tshow_text_voice_camera_divider_amount_desc = findViewById(R.id.show_text_voice_camera_divider_amount_desc);\n+\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n+\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n+\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n+\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n+\t\tshow_text_voice_camera_update_entry = (Button) findViewById(R.id.show_text_voice_camera_update_entry);\n+\t\t\n+\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n+\t\t\n+\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n+\t\t\n+\t\tif(intentExtras.containsKey(\"mDisplayList\")){\n+        \tmShowList = new ArrayList<String>();\n+        \tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n+        \t_id = Long.parseLong(mShowList.get(0));\n+        \tString amount = mShowList.get(2);\n+        \tString tag = mShowList.get(1);\n+        \tif(!(amount.equals(\"\") || amount == null)){\n+        \t\tif(!amount.contains(\"?\"))\n+        \t\t\tshow_text_voice_camera_amount.setText(amount);\n+        \t}\n+        \tif(!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))){\n+        \t\tshow_text_voice_camera_tag_textview.setText(tag);\n+        \t} else {\n+        \t\tshow_text_voice_camera_tag_textview.setVisibility(View.GONE);\n+        \t\tshow_text_voice_camera_tag.setVisibility(View.VISIBLE);\n+        \t\tshow_text_voice_camera_divider_amount_desc.setVisibility(View.GONE);\n+        \t\tshow_text_voice_camera_update_entry.setVisibility(View.VISIBLE);\n+        \t}\n+        \tCalendar mCalendar = Calendar.getInstance();\n+        \tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n+        \tnew ShowDateHandler(this, mCalendar);\n+        }\n+\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n+\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n+\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n+\t\tshow_text_voice_camera_update_entry.setOnClickListener(this);\n+\t\t\n+\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n+\t\t\tupdateUI();\n+        \tif(intentExtras.containsKey(\"mDisplayList\")){\n+        \t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\"+_id+\".amr\");\n+        \t\t\n+        \t\tif(tempFile.canRead()){\n+        \t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n+        \t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n+        \t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n+        \t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n+        \t\t} else {\n+        \t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n+        \t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n+        \t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n+        \t\t}\n+        \t}\n+        } \n+        else {\n+        \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n+        }\n+\t\t\n+\t\t\n+\t}\n+\n+\tprivate void updateUI() {\n+\t///////   ***** Sets Title Voice Entry *********///////\n+        show_text_voice_camera_header_title.setText(\"Voice Entry\");\n+        \n+        ///////   ***** Sets Title Voice Entry *********///////\n+        show_text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n+        \n+        //////   ******  Shows Voice Details ********////////\n+        show_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n+\t}\n+\n+\t@Override\n+\tpublic void onClick(View v) {\n+\t\t\n+\t\tif(v.getId() == R.id.show_text_voice_camera_delete){\n+\t\t\t\n+\t\t\tif(_id != null){\n+\t\t\t\t\n+\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n+\t\t\t\ttry{\n+\t\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n+\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n+\t\t\t\t\t}\n+\t\t\t\t}catch(NullPointerException e){\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n+\t\t\t\t\n+\t\t\t\tnew FileDelete(_id);\n+\t\t\t\t\n+\t\t\t\tmDatabaseAdapter.open();\n+\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n+\t\t\t\tmDatabaseAdapter.close();\n+\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n+\t\t\t\tfinish();\n+\t\t\t} else {\n+\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tif(v.getId() == R.id.show_text_voice_camera_play_button){\n+\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n+\t\t\tmAudioPlay = new AudioPlay(_id+\"\",this);\n+\t\t\t\n+\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n+\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n+\t\t\t\n+\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n+\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n+\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n+\t\t\t\n+\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n+\t\t\tif(!mAudioPlay.isAudioPlaying()){\n+\t\t\t\tmAudioPlay.startPlayBack();\n+\t\t\t} else {\n+\t\t\t\tmAudioPlay.stopPlayBack();\n+\t\t\t\tmAudioPlay.startPlayBack();\n+\t\t\t}\n+\t\t\tcountDownTimer.start();\n+\t\t}\n+\t\t\n+\t\tif(v.getId() == R.id.show_text_voice_camera_stop_button){\n+\t\t\ttry{\n+\t\t\t\tcountDownTimer.cancel();\n+\t\t\t}catch(NullPointerException e){};\n+\t\t\t\n+\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n+\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n+\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n+\t\t\t\n+\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n+\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n+\t\t\ttry{\n+\t\t\t\tif(mAudioPlay.isAudioPlaying())\n+\t\t\t\t\tmAudioPlay.stopPlayBack();\n+\t\t\t} catch(Exception e){}\n+\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n+\t\t}\t\n+\t\t\n+\t\tif(v.getId() == R.id.show_text_voice_camera_update_entry){\n+\t\t\tif(show_text_voice_camera_tag.isShown()){\n+\t\t\t\tif(show_text_voice_camera_tag.getText().toString() != \"\")\n+\t\t\t\t\tsaveEntry();\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n+\t//countdowntimer is an abstract class, so extend it and fill in methods\n+\tprivate class MyCount extends CountDownTimer{\n+\n+\t\tDisplayTime mDisplayTime;\n+\t\t\n+\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n+\t\t\tsuper(millisInFuture, countDownInterval);\n+\t\t\tmDisplayTime = new DisplayTime();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void onFinish() {\n+\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n+\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n+\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void onTick(long millisUntilFinished) {\n+\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n+\t\t}\n+\t}\n+\t\n+\t///// ******************  Handling back press of key   ********** ///////////\n+\tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n+\t     if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n+\t    \t onBackPressed();\n+\t    \t return super.onKeyDown(keyCode, event);\n+\t      }\n+\t    return super.onKeyDown(keyCode, event);\n+\t}\n+\n+\tpublic void onBackPressed() {\n+\t    // This will be called either automatically for you on 2.0    \n+\t    // or later, or by the code above on earlier versions of the platform.\n+\t\tif(show_text_voice_camera_tag.isShown()){\n+\t\t\tif(show_text_voice_camera_tag.getText().toString() != \"\")\n+\t\t\t\tsaveEntry();\n+\t\t}\n+\t\t\n+\t\ttry{\n+\t\t\tif(mAudioPlay.isAudioPlaying())\n+\t\t\t\tmAudioPlay.stopPlayBack();\n+\t\t}catch(Exception e){}\n+\t    finish();\n+\t}\n+\t\n+\t@Override\n+\tprotected void onPause() {\n+\t\t\n+\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n+\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n+\t\ttry{\n+\t\t\tif(mAudioPlay.isAudioPlaying())\n+\t\t\t\tmAudioPlay.stopPlayBack();\n+\t\t} catch(Exception e){\n+\t\t\t\n+\t\t}\n+\t\tsuper.onPause();\n+\t}\n+\t\n+\tprivate void saveEntry() {\n+\t\t///////    *******  Creating HashMap to update info   *******  ////////\n+\t\tHashMap<String, String> _list = new HashMap<String, String>();\n+\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n+\t\t\n+\t\tif(show_text_voice_camera_tag.getText().toString() != \"\"){\n+\t\t\t_list.put(DatabaseAdapter.KEY_TAG, show_text_voice_camera_tag.getText().toString());\n+\t\t}\n+\t\t\n+\t\t//////    *******   Update database if user added additional info   *******  ///////\n+\t\tmDatabaseAdapter.open();\n+\t\tmDatabaseAdapter.editDatabase(_list);\n+\t\tmDatabaseAdapter.close();\n+\t\tfinish();\n+\t}\n+}"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime File FileDelete HashMap, StringString MyCount ShowDateHandler canRead cancel close contains containsKey deleteDatabaseEntryID editDatabase equals findViewById finish get getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getPlayBackTime getRepeatCount getString getStringArrayList getText isAudioPlaying isShown makeText onBackPressed open parseLong printStackTrace put requestWindowFeature saveEntry setContentView setOnClickListener setText setTimeInMillis setVisibility show start startPlayBack stop stopPlayBack toString updateUI"], "_version_": 1526753011041304576, "subject_t": ["Added feature of show item using list"], "comments_t": ["\t//countdowntimer is an abstract class, so extend it and fill in methods         ///////   ***** Sets Title Voice Entry *********/////// \t    // This will be called either automatically for you on 2.0     \t\t\t///////   *******   Chronometer Starts Countdown   ******  /////// \t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** /////// \t///// ******************  Handling back press of key   ********** /////////// \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   //////// \t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t//////    *******   Update database if user added additional info   *******  /////// \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////       \t    // or later, or by the code above on earlier versions of the platform. \t\t\t//////   ******   Handles UI items on button click  ******  ///////         //////   ******  Shows Voice Details ********//////// \t\t\t//////\t     ********   to handle playback of recorded file   *********   //////// \t///////   ***** Sets Title Voice Entry *********/////// \t\t///////    *******  Creating HashMap to update info   *******  ////////"], "parents_ss": ["bbc9105f50f395b3c534b895dcb4c75346818f20"], "id": "vinsol/expense-tracker\u00003136b8e48e3561c8e2073ded73bc26a3b96533ad\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#com.vinsol.expensetracker.ShowVoiceActivity.saveEntry()#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.widget.Toast.show()#android.view.KeyEvent.getRepeatCount()#<unknown>.isAudioPlaying()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.open()#android.content.Context.getString(<unknown>)#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.lang.String.contains(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#android.app.Activity.finish()#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.view.View.setVisibility(int)#<unknown>.isAudioPlaying()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.lang.Throwable.printStackTrace()#android.app.Activity.findViewById(<unknown>)#java.io.File.File(java.lang.String)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.widget.Toast.show()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.app.Activity.requestWindowFeature(int)#android.os.CountDownTimer.cancel()#java.lang.CharSequence.toString()#java.lang.CharSequence.toString()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.EditText.getText()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#<unknown>.stopPlayBack()#java.util.Calendar.getInstance()#android.view.View.setVisibility(int)#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.ShowVoiceActivity.onBackPressed()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#android.view.View.setVisibility(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.show()#java.lang.Long.parseLong(java.lang.String)#android.widget.EditText.getText()#<unknown>.getDisplayTime(<unknown>)#android.widget.EditText.getText()#java.lang.String.equals(java.lang.String)#<unknown>.open()#android.view.View.setVisibility(int)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#com.vinsol.expensetracker.ShowVoiceActivity.saveEntry()#android.app.Activity.finish()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.view.View.isShown()#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#<unknown>.close()#android.widget.ImageView.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.view.View.isShown()#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.lang.Long.toString(java.lang.Long)#java.lang.CharSequence.toString()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)", "callsites_t": ["java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) com.vinsol.expensetracker.ShowVoiceActivity.saveEntry() android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) android.widget.Toast.show() android.view.KeyEvent.getRepeatCount() <unknown>.isAudioPlaying() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.open() android.content.Context.getString(<unknown>) <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.lang.String.contains(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) android.app.Activity.finish() <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.view.View.setVisibility(int) <unknown>.isAudioPlaying() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.lang.Throwable.printStackTrace() android.app.Activity.findViewById(<unknown>) java.io.File.File(java.lang.String) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.widget.Toast.show() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.app.Activity.requestWindowFeature(int) android.os.CountDownTimer.cancel() java.lang.CharSequence.toString() java.lang.CharSequence.toString() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.EditText.getText() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) <unknown>.stopPlayBack() java.util.Calendar.getInstance() android.view.View.setVisibility(int) java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.ShowVoiceActivity.onBackPressed() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() android.view.View.setVisibility(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.show() java.lang.Long.parseLong(java.lang.String) android.widget.EditText.getText() <unknown>.getDisplayTime(<unknown>) android.widget.EditText.getText() java.lang.String.equals(java.lang.String) <unknown>.open() android.view.View.setVisibility(int) <unknown>.getPlayBackTime() android.app.Activity.finish() com.vinsol.expensetracker.ShowVoiceActivity.saveEntry() android.app.Activity.finish() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.view.View.isShown() java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) <unknown>.close() android.widget.ImageView.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.view.View.isShown() android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.lang.Long.toString(java.lang.Long) java.lang.CharSequence.toString() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button java.io.File android.view.Window com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity android.widget.ImageView java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate ImageView show_text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate EditText show_text_voice_camera_tag;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate View show_text_voice_camera_divider_amount_desc;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_update_entry;\n\tprivate TextView show_text_voice_camera_description_show;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.show_text_voice_camera_voice_details_separator);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag = (EditText) findViewById(R.id.show_text_voice_camera_tag);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_divider_amount_desc = findViewById(R.id.show_text_voice_camera_divider_amount_desc);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_update_entry = (Button) findViewById(R.id.show_text_voice_camera_update_entry);\n\t\tshow_text_voice_camera_description_show = (TextView) findViewById(R.id.show_text_voice_camera_description_show);\n\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_description_show\n\t\t\t\t\t\t.setVisibility(View.GONE);\n\t\t\t\tshow_text_voice_camera_tag_textview.setVisibility(View.GONE);\n\t\t\t\tshow_text_voice_camera_tag.setVisibility(View.VISIBLE);\n\t\t\t\tshow_text_voice_camera_divider_amount_desc\n\t\t\t\t\t\t.setVisibility(View.GONE);\n\t\t\t\tshow_text_voice_camera_update_entry.setVisibility(View.VISIBLE);\n\t\t\t}\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tnew ShowDateHandler(this, mCalendar);\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_update_entry.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id\n\t\t\t\t\t\t+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button\n\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(new DisplayTime()\n\t\t\t\t\t\t\t\t\t.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tnew FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG)\n\t\t\t\t\t.show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_voice_details_separator\n\t\t\t\t.setVisibility(View.VISIBLE);\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_update_entry) {\n\t\t\tif (show_text_voice_camera_tag.isShown()) {\n\t\t\t\tif (show_text_voice_camera_tag.getText().toString() != \"\")\n\t\t\t\t\tsaveEntry();\n\t\t\t}\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn super.onKeyDown(keyCode, event);\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tif (show_text_voice_camera_tag.isShown()) {\n\t\t\tif (show_text_voice_camera_tag.getText().toString() != \"\")\n\t\t\t\tsaveEntry();\n\t\t}\n\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\tfinish();\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void saveEntry() {\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (show_text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, show_text_voice_camera_tag\n\t\t\t\t\t.getText().toString());\n\t\t}\n\n\t\t// //// ******* Update database if user added additional info *******\n\t\t// ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-29T12:27:49Z", "hash_sni": "ac9c648d3d9826af8f962a863375fce41c86c424", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" \t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n \t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n \t\t\t\t}\n+\t\t\t\tnew FavoriteHelper(this, mShowList);\n \t\t\t}\n \t\t} else {\n \t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG)\n \t\t\t\t\t.show();\n \t\t}\n-\n+\t\t\n \t}\n \n \tprivate void updateUI() {"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete HashMap, StringString MyCount ShowDateHandler canRead cancel close contains containsKey deleteDatabaseEntryID editDatabase equals findViewById finish get getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getPlayBackTime getRepeatCount getString getStringArrayList getText isAudioPlaying isShown makeText onBackPressed open parseLong printStackTrace put requestWindowFeature saveEntry setContentView setOnClickListener setText setTimeInMillis setVisibility show start startPlayBack stop stopPlayBack toString updateUI"], "_version_": 1526752957757915136, "subject_t": ["Favorite addition and deletion complete still listing of fav left"], "comments_t": ["\t\t// //// ****** If audio recording started then stop recording audio \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// or later, or by the code above on earlier versions of the platform. \t\t\t\t// *******////// \t\t// /////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// //// ******* Update database if user added additional info ******* \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t// ***** /////// \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file ********* \t// /// ****************** Handling back press of key ********** ///////////"], "parents_ss": ["30407e4f50f30f445adc6a44d63392b91a6865f5"], "id": "vinsol/expense-tracker\u0000ac9c648d3d9826af8f962a863375fce41c86c424\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#com.vinsol.expensetracker.ShowVoiceActivity.saveEntry()#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.widget.Toast.show()#android.view.KeyEvent.getRepeatCount()#<unknown>.isAudioPlaying()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.open()#android.content.Context.getString(<unknown>)#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.lang.String.contains(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#android.app.Activity.finish()#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.view.View.setVisibility(int)#<unknown>.isAudioPlaying()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.lang.Throwable.printStackTrace()#android.app.Activity.findViewById(<unknown>)#java.io.File.File(java.lang.String)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.widget.Toast.show()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.app.Activity.requestWindowFeature(int)#android.os.CountDownTimer.cancel()#java.lang.CharSequence.toString()#java.lang.CharSequence.toString()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.EditText.getText()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#<unknown>.stopPlayBack()#java.util.Calendar.getInstance()#android.view.View.setVisibility(int)#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.ShowVoiceActivity.onBackPressed()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#android.view.View.setVisibility(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.show()#java.lang.Long.parseLong(java.lang.String)#android.widget.EditText.getText()#<unknown>.getDisplayTime(<unknown>)#android.widget.EditText.getText()#java.lang.String.equals(java.lang.String)#<unknown>.open()#android.view.View.setVisibility(int)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#android.app.Activity.findViewById(<unknown>)#com.vinsol.expensetracker.ShowVoiceActivity.saveEntry()#android.app.Activity.finish()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.view.View.isShown()#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#<unknown>.close()#android.widget.ImageView.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.view.View.isShown()#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.lang.Long.toString(java.lang.Long)#java.lang.CharSequence.toString()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)", "callsites_t": ["java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) com.vinsol.expensetracker.ShowVoiceActivity.saveEntry() android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) android.widget.Toast.show() android.view.KeyEvent.getRepeatCount() <unknown>.isAudioPlaying() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.open() android.content.Context.getString(<unknown>) <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.lang.String.contains(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) android.app.Activity.finish() <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.view.View.setVisibility(int) <unknown>.isAudioPlaying() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.lang.Throwable.printStackTrace() android.app.Activity.findViewById(<unknown>) java.io.File.File(java.lang.String) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.widget.Toast.show() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.app.Activity.requestWindowFeature(int) android.os.CountDownTimer.cancel() java.lang.CharSequence.toString() java.lang.CharSequence.toString() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.EditText.getText() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) <unknown>.stopPlayBack() java.util.Calendar.getInstance() android.view.View.setVisibility(int) java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.ShowVoiceActivity.onBackPressed() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() android.view.View.setVisibility(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.show() java.lang.Long.parseLong(java.lang.String) android.widget.EditText.getText() <unknown>.getDisplayTime(<unknown>) android.widget.EditText.getText() java.lang.String.equals(java.lang.String) <unknown>.open() android.view.View.setVisibility(int) <unknown>.getPlayBackTime() android.app.Activity.finish() android.app.Activity.findViewById(<unknown>) com.vinsol.expensetracker.ShowVoiceActivity.saveEntry() android.app.Activity.finish() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.view.View.isShown() java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) <unknown>.close() android.widget.ImageView.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.view.View.isShown() android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.lang.Long.toString(java.lang.Long) java.lang.CharSequence.toString() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.view.View.OnClickListener android.os.Bundle android.widget.Button android.view.Window com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.util.Log android.app.Activity com.vinsol.expensetracker.location.LocationLast android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\n\npublic class Voice extends Activity implements OnClickListener{\n\t\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\t\n\t\t///////   ****** No Title Bar   ********* /////////\n        \n        \n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        \n        setContentView(R.layout.text_voice_camera);\n        \n        \n        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n        \n        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n    \ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n    \ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n    \tmDatabaseAdapter = new DatabaseAdapter(this);\n    \t\n    \t////////*********     Get id from intent extras     ********   ////////////\n        intentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n        _id = intentExtras.getLong(\"_id\");\n    \t\n        setGraphicsVoice();\n        controlVoiceChronometer();\n        setClickListeners();\n        \n        ////////   ********  Handle Date Bar   *********   ////////\n        new DateHandler(this);\n        \n        \n        ////////   ********   Starts Recording each time activity starts   ******   ///////\n        mRecordingHelper = new RecordingHelper(_id+\"\");\n\t\tmRecordingHelper.startRecording();\n\t\t\n\t\t\n\t\t////////*********     Get Last most accurate location info   *********   /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t\t\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\t\t\n\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\tif(mRecordingHelper.isRecording()){\n\t\t\tmRecordingHelper.stopRecording();\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n\t\t\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n\t\t\n\t\t\n\t\t////  ***** if stop button pressed ****** //////\n\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n\t\t\tmRecordingHelper.stopRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t}\n\t\t\n\t\t\n\t\t////  ***** if play button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n\t\t\tmAudioPlay = new AudioPlay(_id+\"\");\n\t\t\tLog.v(\"hello\", text_voice_camera_time_details_chronometer.getText()+\"\");\n\t\t\t\n\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n\t\t\tif(!mAudioPlay.isAudioPlaying()){\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\t\t\n\t\t////  ***** if rerecord button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){}\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\t\t\t\n\t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n\t\t\tif(mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id+\"\");\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\t\t\n\t\t////////********  Adding Action to save entry     *********    ///////////\n\t\t\n\t\tif(v.getId() == R.id.text_voice_camera_save_entry){\n\t\t\t///////    *******  Creating HashMap to update info   *******  ////////\n\t\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, text_voice_camera_amount.getText().toString());\n\t\t\t\n\t\t\tif(text_voice_camera_tag.getText().toString() != \"\"){\n\t\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t\t}\n\t\t\n\t\t\t//////    *******   Update database if user added additional info   *******  ///////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.editDatabase(_list);\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t\n\t\n\t\t/////////     *********   Adding action if delete button **********  /////////\n\t\n\t\tif(v.getId() == R.id.text_voice_camera_delete){\n\t\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t}\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\n\t\t\tnew FileDelete(_id);\n\t\t\n\t\t\t//////   *******   Delete entry from database ********   /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n\t\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-19T12:43:29Z", "hash_sni": "ff3a41da6f5b250410f1614421d4b1daf42f9ad4", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" package com.vinsol.expensetracker;\n \n+import java.util.HashMap;\n+\n import com.vinsol.expensetracker.location.LocationLast;\n import com.vinsol.expensetracker.utils.AudioPlay;\n import com.vinsol.expensetracker.utils.DisplayTime;\n+import com.vinsol.expensetracker.utils.FileDelete;\n import com.vinsol.expensetracker.utils.RecordingHelper;\n \n import android.app.Activity;\n@@ -16,6 +19,7 @@ import android.view.Window;\n import android.widget.Button;\n import android.widget.Chronometer;\n import android.widget.Chronometer.OnChronometerTickListener;\n+import android.widget.EditText;\n import android.widget.ImageView;\n import android.widget.RelativeLayout;\n import android.widget.TextView;\n@@ -29,10 +33,14 @@ public class Voice extends Activity implements OnClickListener{\n \tprivate Button text_voice_camera_stop_button;\n \tprivate Button text_voice_camera_play_button;\n \tprivate Button text_voice_camera_rerecord_button;\n+\tprivate EditText text_voice_camera_amount;\n+\tprivate EditText text_voice_camera_tag;\n \tprivate MyCount countDownTimer;\n \tprivate RecordingHelper mRecordingHelper;\n-\tprivate String mFileName = \"test1\";\n \tprivate AudioPlay mAudioPlay;\n+\tprivate long _id;\n+\tprivate Bundle intentExtras;\n+\tprivate DatabaseAdapter mDatabaseAdapter;\n \t\n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n@@ -55,7 +63,14 @@ public class Voice extends Activity implements OnClickListener{\n         text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n         text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n         text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n-        \n+    \ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n+    \ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n+    \tmDatabaseAdapter = new DatabaseAdapter(this);\n+    \t\n+    \t////////*********     Get id from intent extras     ********   ////////////\n+        intentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n+        _id = intentExtras.getLong(\"_id\");\n+    \t\n         setGraphicsVoice();\n         controlVoiceChronometer();\n         setClickListeners();\n@@ -65,13 +80,14 @@ public class Voice extends Activity implements OnClickListener{\n         \n         \n         ////////   ********   Starts Recording each time activity starts   ******   ///////\n-        mRecordingHelper = new RecordingHelper(mFileName);\n+        mRecordingHelper = new RecordingHelper(_id+\"\");\n \t\tmRecordingHelper.startRecording();\n \t\t\n \t\t\n \t\t////////*********     Get Last most accurate location info   *********   /////////\n \t\tLocationLast mLocationLast = new LocationLast(this);\n \t\tmLocationLast.getLastLocation();\n+\t\t\n \t}\n \t\n \t@Override\n@@ -92,6 +108,11 @@ public class Voice extends Activity implements OnClickListener{\n \t\ttext_voice_camera_play_button.setOnClickListener(this);\n \t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n \t\t\n+\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n+\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n+\t\t\n+\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n+\t\ttext_voice_camera_delete.setOnClickListener(this);\n \t}\n \n \tprivate void controlVoiceChronometer() {\n@@ -146,7 +167,7 @@ public class Voice extends Activity implements OnClickListener{\n \t\t////  ***** if play button pressed ****** //////\t\t\n \t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n \t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n-\t\t\tmAudioPlay = new AudioPlay(mFileName);\n+\t\t\tmAudioPlay = new AudioPlay(_id+\"\");\n \t\t\tLog.v(\"hello\", text_voice_camera_time_details_chronometer.getText()+\"\");\n \t\t\t\n \t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n@@ -188,11 +209,59 @@ public class Voice extends Activity implements OnClickListener{\n \t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n \t\t\tif(mRecordingHelper.isRecording())\n \t\t\t\tmRecordingHelper.stopRecording();\n-\t\t\tmRecordingHelper = new RecordingHelper(mFileName);\n+\t\t\tmRecordingHelper = new RecordingHelper(_id+\"\");\n \t\t\tmRecordingHelper.startRecording();\n \t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n \t\t\ttext_voice_camera_time_details_chronometer.start();\n \t\t}\n+\t\t\n+\t\t////////********  Adding Action to save entry     *********    ///////////\n+\t\t\n+\t\tif(v.getId() == R.id.text_voice_camera_save_entry){\n+\t\t\t///////    *******  Creating HashMap to update info   *******  ////////\n+\t\t\tHashMap<String, String> _list = new HashMap<String, String>();\n+\t\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n+\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, text_voice_camera_amount.getText().toString());\n+\t\t\t\n+\t\t\tif(text_voice_camera_tag.getText().toString() != \"\"){\n+\t\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n+\t\t\t}\n+\t\t\n+\t\t\t//////    *******   Update database if user added additional info   *******  ///////\n+\t\t\tmDatabaseAdapter.open();\n+\t\t\tmDatabaseAdapter.editDatabase(_list);\n+\t\t\tmDatabaseAdapter.close();\n+\t\t\tfinish();\n+\t\t}\n+\t\n+\t\n+\t\t/////////     *********   Adding action if delete button **********  /////////\n+\t\n+\t\tif(v.getId() == R.id.text_voice_camera_delete){\n+\t\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n+\t\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n+\t\t\tif(mRecordingHelper.isRecording()){\n+\t\t\t\tmRecordingHelper.stopRecording();\n+\t\t\t}\n+\t\t\t\n+\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n+\t\t\ttry{\n+\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n+\t\t\t\t\tmAudioPlay.stopPlayBack();\n+\t\t\t\t}\n+\t\t\t}catch(NullPointerException e){\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t\ttext_voice_camera_time_details_chronometer.stop();\n+\t\t\t\n+\t\t\tnew FileDelete(_id);\n+\t\t\n+\t\t\t//////   *******   Delete entry from database ********   /////////\n+\t\t\tmDatabaseAdapter.open();\n+\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n+\t\t\tmDatabaseAdapter.close();\n+\t\t\tfinish();\n+\t\t}\n \t}\n \t\n \t"], "score": 1.0, "methods_t": ["AudioPlay DatabaseAdapter DateHandler DisplayTime FileDelete HashMap, StringString LocationLast MyCount OnChronometerTickListener RecordingHelper cancel close controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime findViewById finish getBundleExtra getDisplayTime getId getIntent getLastLocation getLong getPlayBackTime getText isAudioPlaying isRecording length open printStackTrace put requestWindowFeature setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setVisibility start startPlayBack startRecording stop stopPlayBack stopRecording toString v"], "_version_": 1526752541022355456, "subject_t": ["Completed Working on voice camera and text activity favorite and list still left"], "comments_t": ["\t\t////////********  Adding Action to save entry     *********    /////////// \t//countdowntimer is an abstract class, so extend it and fill in methods         ///////   ***** Sets Title Voice Entry *********/////// \t\t///////   ****** No Title Bar   ********* /////////         ////////   ********    Initializing and assigning memory to UI Items **********    /////////     \t////////*********     Get id from intent extras     ********   //////////// \t\t\t///////    *******  Creating HashMap to update info   *******  //////// \t\t\t///////   *******   Chronometer Starts Countdown   ******  /////// \t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** /////// \t\t\t//////  ******  Restarts chronometer and recording   *******  //////// \t\t////////    *******    Adding Click Listeners to UI Items ******** ////////// \t\t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t////////*********     Get Last most accurate location info   *********   ///////// \t\t////  ***** if play button pressed ****** //////\t\t \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   //////// \t\t\t//////   *******   Delete entry from database ********   ///////// \t\t////  ***** if rerecord button pressed ****** //////\t\t \t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t///////   ********     Adding On Click Actions to click listeners *********    ////////// \t\t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******////// \t\t\t//////    *******   Update database if user added additional info   *******  /////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////       \t\t////  ***** if stop button pressed ****** //////         ////////   ********   Starts Recording each time activity starts   ******   /////// \t\t///////   ***** Sets Title Voice Entry *********/////// \t\t\t//////   ******   Handles UI items on button click  ******  ///////         //////   ******  Shows Voice Details ********//////// \t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////         ////////   ********  Handle Date Bar   *********   //////// \t\t/////////     *********   Adding action if delete button **********  /////////"], "parents_ss": ["d41434269840382b8a0510d233389250fe554534"], "id": "vinsol/expense-tracker\u0000ff3a41da6f5b250410f1614421d4b1daf42f9ad4\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.isRecording()#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#<unknown>.RecordingHelper(java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.startRecording()#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.deleteDatabaseEntryID(java.lang.String)#android.app.Activity.getIntent()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.getLastLocation()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#<unknown>.RecordingHelper(java.lang.String)#android.widget.EditText.getText()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.app.Activity.finish()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.widget.TextView.getText()#java.lang.Long.toString(long)#com.vinsol.expensetracker.Voice.setGraphicsVoice()#android.app.Activity.findViewById(<unknown>)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#java.lang.CharSequence.toString()#java.lang.CharSequence.toString()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.CountDownTimer.start()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#<unknown>.stopPlayBack()#android.view.View.setVisibility(int)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.DisplayTime()#android.os.SystemClock.elapsedRealtime()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#android.widget.Chronometer.setOnChronometerTickListener()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#<unknown>.getPlayBackTime()#.OnChronometerTickListener()#android.app.Activity.requestWindowFeature(int)#<unknown>.open()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#<unknown>.getDisplayTime(<unknown>)#<unknown>.AudioPlay(java.lang.String)#<unknown>.getDisplayTime(long)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.startPlayBack()#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#<unknown>.isRecording()#android.util.Log.v(java.lang.String, java.lang.String)#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.isRecording() <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) <unknown>.RecordingHelper(java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.view.View.setVisibility(int) android.widget.Chronometer.start() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.startRecording() java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.deleteDatabaseEntryID(java.lang.String) android.app.Activity.getIntent() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.getLastLocation() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) <unknown>.RecordingHelper(java.lang.String) android.widget.EditText.getText() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.app.Activity.finish() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.widget.TextView.getText() java.lang.Long.toString(long) com.vinsol.expensetracker.Voice.setGraphicsVoice() android.app.Activity.findViewById(<unknown>) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() java.lang.CharSequence.toString() java.lang.CharSequence.toString() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.CountDownTimer.start() com.vinsol.expensetracker.Voice.controlVoiceChronometer() <unknown>.stopPlayBack() android.view.View.setVisibility(int) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.DisplayTime() android.os.SystemClock.elapsedRealtime() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) android.widget.Chronometer.setOnChronometerTickListener() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() <unknown>.getPlayBackTime() .OnChronometerTickListener() android.app.Activity.requestWindowFeature(int) <unknown>.open() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) <unknown>.getDisplayTime(<unknown>) <unknown>.AudioPlay(java.lang.String) <unknown>.getDisplayTime(long) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.startPlayBack() java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) android.view.View.getId() <unknown>.isRecording() android.util.Log.v(java.lang.String, java.lang.String) android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "campbelg", "repo_sni": "OCLC-Developer-Network/oclc-auth-android-example", "imports_t": ["android.os.CountDownTimer android.content.Context android.widget.LinearLayout android.os.Bundle android.view.Menu android.webkit.WebView android.app.ProgressDialog java.util.HashMap android.widget.TextView android.view.View android.webkit.CookieManager android.app.Activity"], "email_sni": "campbelg@oclc.org", "contents_t": ["package org.oclc.mobile.authentication.android;\n\n/*******************************************************************************\n * Copyright (c) 2013 OCLC Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by\n * applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS\n * OF ANY KIND, either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n *\n ******************************************************************************/\n\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.app.ProgressDialog;\nimport android.content.Context;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.Menu;\nimport android.view.View;\nimport android.webkit.CookieManager;\nimport android.webkit.WebView;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\n\n/**\n * Displays the view for the application and handles UI interaction. The\n * following resources are loaded into this Activity:\n * <ul>\n * <li>res/layout/activity_main.xml - the view objects and their layout</li>\n * <li>/res/values/strings.xml - any strings that are displayed</li>\n * <li>/res/values/authentication.xml - list of strings containing\n * authentication parameters</li>\n * </ul>\n * <p>\n * This class calls an instance of AuthenticatingWebView to handle the actual\n * sign in process with the OCLC Authentication servers. Call back methods are\n * defined by interfaces in AuthenticatingWebViewCallbackMethods, so that the\n * AuthenticatingWebView can turn an activity indicator on and off, and return\n * the authentication results for display.\n * <p>\n * The request and result parameters are as follows:\n * <p>\n * Request Parameters - stored in prop. file res/values/authentication.xml:\n * <ul>\n * <li>authenticatingServerBaseUrl</li>\n * <li>client_id</li>\n * <li>authenticatingInstitutionId</li>\n * <li>contextInstitutionId</li>\n * <li>redirect_uri</li>\n * <li>response_type</li>\n * <li>scope</li>\n * </ul>\n * Returned Parameters - stored in HashMap authorizationReturnParameters:\n * <ul>\n * <li>accessToken</li>\n * <li>principalID</li>\n * <li>principalIDNS</li>\n * <li>context_institution_id</li>\n * <li>token_type</li>\n * <li>expires_in</li>\n * <li>expires_at</li>\n * </ul>\n * <p>\n * The Cookie Manager, myCookieManager, gives access to this app's cookies so\n * that we can clear them when restarting the sign-in activity from scratch.\n *\n * @see android.app.Activity\n */\npublic class MainActivity extends Activity implements\nAuthenticatingWebViewCallbackMethods {\n\n    /**\n     * Multiplier to convert seconds to milliseconds\n     */\n    private static final int SECONDS_TO_MILLISECONDS = 1000;\n\n    /**\n     * An extension that is passed a webview and uses it to handle\n     * authentication\n     */\n    private AuthenticatingWebView authenticatingWebView;\n\n    /**\n     * Holds the context of MainActivity so it can be passed to the WebView. The\n     * WebView uses that context to call back to the MainActivity to\n     * <ul>\n     * <li>Start the activity spinner.</li>\n     * <li>Stop the activity spinner.</li>\n     * <li>Display the authentication results.</li>\n     * </ul>\n     */\n    private Context myContext;\n\n    /**\n     * Handle for managing this application's cookies\n     */\n    private CookieManager myCookieManager;\n\n    /**\n     * Timer activated when authentication token is received to decrement the\n     * seconds remaining until the authentication token expires.\n     */\n    private CountDownTimer tokenCountDownTimer;\n\n    /**\n     * A progress dialog to indicate to the user that the app is waiting for an\n     * http response\n     */\n    private ProgressDialog myProgressDialog;\n\n    /**\n     * The webview used for authentication\n     */\n    private WebView webView;\n\n    /**\n     * The full URL of the Access Token request\n     */\n    private String requestUrl;\n\n    /**\n     * This method initializes the class and only fires once - when the app\n     * loads into memory. Once an app is initialized, it stays in the run state\n     * until the client runs out of memory or shuts off, which could be for\n     * days. This method does not fire when the app returns from the background\n     * to the foreground.\n     * <p>\n     * The method loads the layout from the xml file, instantiates an instance\n     * of the webview. A WebView is an embedded Chrome browser with no user\n     * controls, which we will use to handle OAuth2 authentication. Initially\n     * the webView is invisible. It is made visible to facilitate sign in, and\n     * hidden after a token is received so that the token can be displayed.\n     *\n     * @param savedInstanceState state information for the app\n     * @see android.app.Activity#onCreate(android.os.Bundle)\n     */\n    @Override\n    protected final void onCreate(final Bundle savedInstanceState) {\n\n        /**\n         * Set the context required for the progress dialog\n         */\n        myContext = this;\n\n        /**\n         * Required for all Android apps to pass the savedInstanceState to the\n         * parent\n         */\n        super.onCreate(savedInstanceState);\n\n        /**\n         * Loads the view elements from the xml file. R.layout.activity_main\n         * refers to res/layout/activity_main.xml\n         */\n        setContentView(R.layout.activity_main);\n\n        /**\n         * Get a handle to the webView whose position and size is defined in\n         * activity_main.xml\n         */\n        webView = (WebView) findViewById(R.id.webView);\n\n        /**\n         * Get a handle to the CookieManager, which is global for this app, and\n         * use it to enable cookies.\n         */\n        myCookieManager = CookieManager.getInstance();\n        myCookieManager.setAcceptCookie(true);\n\n        /**\n         * Build the request url by getting the request parameters from\n         * res/values/authentication.xml.\n         */\n        requestUrl = new StringBuffer()\n        .append(getString(R.string.authenticatingServerBaseUrl))\n        .append(\"/authorizeCode?client_id=\")\n        .append(getString(R.string.wskey))\n        .append(\"&authenticatingInstitutionId=\")\n        .append(getString(R.string.authenticatingInstitutionId))\n        .append(\"&contextInstitutionId=\")\n        .append(getString(R.string.contextInstitutionId))\n        .append(\"&redirect_uri=\")\n        .append(getString(R.string.redirectUrl))\n        .append(\"&response_type=\")\n        .append(getString(R.string.responseType)).append(\"&scope=\")\n        .append(getString(R.string.scopes)).toString();\n\n        if (getString(R.string.wskey).equals(\"\")) {\n            // If the wskey is blank, then the user probably forgot to set the\n            // parameters in authentication.xml\n            LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n            resultLayout.setVisibility(View.VISIBLE);\n\n            ((TextView) findViewById(R.id.access_token))\n            .setText(\"You must set the authentication parameters in the authentication.xml properties file.\");\n        } else {\n            /**\n             * Create the AuthenticatingWebView, a custom WebView, to make the url\n             * request. We also pass this class's context so that the\n             * AuthenticatingWebView can execute callbacks.\n             */\n            authenticatingWebView = new AuthenticatingWebView(webView, this);\n            authenticatingWebView.makeRequest(requestUrl);\n        }\n    }\n\n    /**\n     * Boilerplate code required by Android to display any menu xml that may\n     * exist in res/menu.\n     *\n     * @param menu the menu associated with this activity\n     * @return returns true to create the menu\n     */\n    @Override\n    public final boolean onCreateOptionsMenu(final Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.main, menu);\n        return true;\n    }\n\n    /**\n     * Standard form callback for the [Clear Cookies] button, whose properties\n     * are described in res/layout/activity_main.xml.\n     *\n     * @param view [Clear Cookies] button's view\n     */\n    public final void clearCookies(final View view) {\n\n        /**\n         * Removes the cookies associated with this app only - browser cookies\n         * and other app's cookies are not affected.\n         */\n        myCookieManager.removeAllCookie();\n    }\n\n    /**\n     * Standard form callback for the [Sign In Again] button, whose properties\n     * are described in res/layout/activity_main.xml.\n     *\n     * @param view [Sign In Again] button's view\n     */\n    public final void signInAgain(final View view) {\n\n        /**\n         * Clear the token count down timer if it is running and set the timer\n         * text to expired.\n         */\n        if (tokenCountDownTimer != null) {\n            tokenCountDownTimer.cancel();\n            tokenCountDownTimer = null;\n            ((TextView) findViewById(R.id.timeRemainingTextView))\n            .setText(getString(R.string.time_remaining_expired));\n        }\n\n        /**\n         *  Hide the text result views.\n         */\n        LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n        resultLayout.setVisibility(View.INVISIBLE);\n\n        /**\n         * Make another request.\n         */\n        authenticatingWebView.makeRequest(requestUrl);\n    }\n\n    /**\n     * Display a progress indicator while authenticating. Implements a callback\n     * function called by AuthenticatingWebViewCallbackMethods\n     */\n    @Override\n    public final void startProgressDialog() {\n\n        /**\n         *  Create a progressDialog if it does not exist.\n         */\n        if (myProgressDialog == null) {\n            myProgressDialog = new ProgressDialog(myContext);\n            myProgressDialog.setTitle(getString(R.string.authenticating));\n            myProgressDialog.setMessage(getString(R.string.please_wait));\n            myProgressDialog.setCancelable(false);\n            myProgressDialog.setIndeterminate(true);\n        }\n\n        /**\n         *  Show the progress dialog.\n         */\n        myProgressDialog.show();\n    }\n\n    /**\n     * Stop and destroy a progress indicator (if it exists). Implements a\n     * callback function called by AuthenticatingWebViewCallbackMethods.\n     */\n    @Override\n    public final void stopProgressDialog() {\n        myProgressDialog.hide();\n    }\n\n    /**\n     * Display the results by extracting the values from the Hash Map and\n     * inserting them into the TextViews which are defined in\n     * res/layout/activity_main.xml. Implements a callback function called by\n     * AuthenticatingWebViewCallbackMethods.\n     *\n     * @param authorizationReturnParameters A list of return params and values\n     */\n    @Override\n    public final void displayResults(\n            final HashMap<String, String> authorizationReturnParameters) {\n\n        /**\n         * Make the text result views visible. Each result parameter's textview\n         * is grouped into a LinearLayout.\n         */\n        LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n        resultLayout.setVisibility(View.VISIBLE);\n\n        ((TextView) findViewById(R.id.access_token))\n        .setText(authorizationReturnParameters.get(\"access_token\"));\n        ((TextView) findViewById(R.id.principalID))\n        .setText(authorizationReturnParameters.get(\"principalID\"));\n        ((TextView) findViewById(R.id.principalIDNS))\n        .setText(authorizationReturnParameters.get(\"principalIDNS\"));\n        ((TextView) findViewById(R.id.context_institution_id))\n        .setText(authorizationReturnParameters\n                .get(\"context_institution_id\"));\n        ((TextView) findViewById(R.id.token_type))\n        .setText(authorizationReturnParameters.get(\"token_type\"));\n        ((TextView) findViewById(R.id.expires_in))\n        .setText(authorizationReturnParameters.get(\"expires_in\"));\n        ((TextView) findViewById(R.id.expires_at))\n        .setText(authorizationReturnParameters.get(\"expires_at\"));\n\n        /**\n         *  Check if the token CountDownTimer, and cancel it if it does.\n         */\n        if (tokenCountDownTimer != null) {\n            tokenCountDownTimer.cancel();\n        }\n\n        /**\n         * Start a new token count down timer based on the time remaining\n         * returned with the token (time remaining is in seconds).\n         */\n        if (authorizationReturnParameters.get(\"expires_in\") != null) {\n            tokenCountDownTimer = new CountDownTimer(\n                    Integer.parseInt(authorizationReturnParameters\n                            .get(\"expires_in\")) * SECONDS_TO_MILLISECONDS,\n                            SECONDS_TO_MILLISECONDS) {\n\n                /* Callback fires every 1000 ms. */\n                @Override\n                public void onTick(final long millisUntilFinished) {\n                    ((TextView) findViewById(R.id.timeRemainingTextView))\n                    .setText(getString(R.string.time_remaining)\n                            + millisUntilFinished\n                            / SECONDS_TO_MILLISECONDS);\n                }\n\n                /**\n                 *  Callback fires when timer counts down to zero.\n                 */\n                @Override\n                public void onFinish() {\n                    ((TextView) findViewById(R.id.timeRemainingTextView))\n                    .setText(getString(R.string.time_remaining_expired));\n                }\n            }.start();\n        } else {\n            /**\n             * If the \"expires_in\" parameter is null, then something has gone\n             * wrong during authentication.\n             */\n            ((TextView) findViewById(R.id.timeRemainingTextView))\n            .setText(getString(R.string.invalid_authentication_request));\n        }\n    }\n}\n"], "body_t": ["<empty>"], "date_tdt": "2014-01-05T15:08:47Z", "hash_sni": "e25ac98d2bc459b6ce6efaec24aeadef337c0fa5", "name_sni": "src/org/oclc/mobile/authentication/android/MainActivity.java", "patch_t": ["+package org.oclc.mobile.authentication.android;\n+\n+/*******************************************************************************\n+ * Copyright (c) 2013 OCLC Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by\n+ * applicable law or agreed to in writing, software distributed under the\n+ * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS\n+ * OF ANY KIND, either express or implied. See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ ******************************************************************************/\n+\n+import java.util.HashMap;\n+\n+import android.app.Activity;\n+import android.app.ProgressDialog;\n+import android.content.Context;\n+import android.os.Bundle;\n+import android.os.CountDownTimer;\n+import android.view.Menu;\n+import android.view.View;\n+import android.webkit.CookieManager;\n+import android.webkit.WebView;\n+import android.widget.LinearLayout;\n+import android.widget.TextView;\n+\n+/**\n+ * Displays the view for the application and handles UI interaction. The\n+ * following resources are loaded into this Activity:\n+ * <ul>\n+ * <li>res/layout/activity_main.xml - the view objects and their layout</li>\n+ * <li>/res/values/strings.xml - any strings that are displayed</li>\n+ * <li>/res/values/authentication.xml - list of strings containing\n+ * authentication parameters</li>\n+ * </ul>\n+ * <p>\n+ * This class calls an instance of AuthenticatingWebView to handle the actual\n+ * sign in process with the OCLC Authentication servers. Call back methods are\n+ * defined by interfaces in AuthenticatingWebViewCallbackMethods, so that the\n+ * AuthenticatingWebView can turn an activity indicator on and off, and return\n+ * the authentication results for display.\n+ * <p>\n+ * The request and result parameters are as follows:\n+ * <p>\n+ * Request Parameters - stored in prop. file res/values/authentication.xml:\n+ * <ul>\n+ * <li>authenticatingServerBaseUrl</li>\n+ * <li>client_id</li>\n+ * <li>authenticatingInstitutionId</li>\n+ * <li>contextInstitutionId</li>\n+ * <li>redirect_uri</li>\n+ * <li>response_type</li>\n+ * <li>scope</li>\n+ * </ul>\n+ * Returned Parameters - stored in HashMap authorizationReturnParameters:\n+ * <ul>\n+ * <li>accessToken</li>\n+ * <li>principalID</li>\n+ * <li>principalIDNS</li>\n+ * <li>context_institution_id</li>\n+ * <li>token_type</li>\n+ * <li>expires_in</li>\n+ * <li>expires_at</li>\n+ * </ul>\n+ * <p>\n+ * The Cookie Manager, myCookieManager, gives access to this app's cookies so\n+ * that we can clear them when restarting the sign-in activity from scratch.\n+ *\n+ * @see android.app.Activity\n+ */\n+public class MainActivity extends Activity implements\n+AuthenticatingWebViewCallbackMethods {\n+\n+    /**\n+     * Multiplier to convert seconds to milliseconds\n+     */\n+    private static final int SECONDS_TO_MILLISECONDS = 1000;\n+\n+    /**\n+     * An extension that is passed a webview and uses it to handle\n+     * authentication\n+     */\n+    private AuthenticatingWebView authenticatingWebView;\n+\n+    /**\n+     * Holds the context of MainActivity so it can be passed to the WebView. The\n+     * WebView uses that context to call back to the MainActivity to\n+     * <ul>\n+     * <li>Start the activity spinner.</li>\n+     * <li>Stop the activity spinner.</li>\n+     * <li>Display the authentication results.</li>\n+     * </ul>\n+     */\n+    private Context myContext;\n+\n+    /**\n+     * Handle for managing this application's cookies\n+     */\n+    private CookieManager myCookieManager;\n+\n+    /**\n+     * Timer activated when authentication token is received to decrement the\n+     * seconds remaining until the authentication token expires.\n+     */\n+    private CountDownTimer tokenCountDownTimer;\n+\n+    /**\n+     * A progress dialog to indicate to the user that the app is waiting for an\n+     * http response\n+     */\n+    private ProgressDialog myProgressDialog;\n+\n+    /**\n+     * The webview used for authentication\n+     */\n+    private WebView webView;\n+\n+    /**\n+     * The full URL of the Access Token request\n+     */\n+    private String requestUrl;\n+\n+    /**\n+     * This method initializes the class and only fires once - when the app\n+     * loads into memory. Once an app is initialized, it stays in the run state\n+     * until the client runs out of memory or shuts off, which could be for\n+     * days. This method does not fire when the app returns from the background\n+     * to the foreground.\n+     * <p>\n+     * The method loads the layout from the xml file, instantiates an instance\n+     * of the webview. A WebView is an embedded Chrome browser with no user\n+     * controls, which we will use to handle OAuth2 authentication. Initially\n+     * the webView is invisible. It is made visible to facilitate sign in, and\n+     * hidden after a token is received so that the token can be displayed.\n+     *\n+     * @param savedInstanceState state information for the app\n+     * @see android.app.Activity#onCreate(android.os.Bundle)\n+     */\n+    @Override\n+    protected final void onCreate(final Bundle savedInstanceState) {\n+\n+        /**\n+         * Set the context required for the progress dialog\n+         */\n+        myContext = this;\n+\n+        /**\n+         * Required for all Android apps to pass the savedInstanceState to the\n+         * parent\n+         */\n+        super.onCreate(savedInstanceState);\n+\n+        /**\n+         * Loads the view elements from the xml file. R.layout.activity_main\n+         * refers to res/layout/activity_main.xml\n+         */\n+        setContentView(R.layout.activity_main);\n+\n+        /**\n+         * Get a handle to the webView whose position and size is defined in\n+         * activity_main.xml\n+         */\n+        webView = (WebView) findViewById(R.id.webView);\n+\n+        /**\n+         * Get a handle to the CookieManager, which is global for this app, and\n+         * use it to enable cookies.\n+         */\n+        myCookieManager = CookieManager.getInstance();\n+        myCookieManager.setAcceptCookie(true);\n+\n+        /**\n+         * Build the request url by getting the request parameters from\n+         * res/values/authentication.xml.\n+         */\n+        requestUrl = new StringBuffer()\n+        .append(getString(R.string.authenticatingServerBaseUrl))\n+        .append(\"/authorizeCode?client_id=\")\n+        .append(getString(R.string.wskey))\n+        .append(\"&authenticatingInstitutionId=\")\n+        .append(getString(R.string.authenticatingInstitutionId))\n+        .append(\"&contextInstitutionId=\")\n+        .append(getString(R.string.contextInstitutionId))\n+        .append(\"&redirect_uri=\")\n+        .append(getString(R.string.redirectUrl))\n+        .append(\"&response_type=\")\n+        .append(getString(R.string.responseType)).append(\"&scope=\")\n+        .append(getString(R.string.scopes)).toString();\n+\n+        if (getString(R.string.wskey).equals(\"\")) {\n+            // If the wskey is blank, then the user probably forgot to set the\n+            // parameters in authentication.xml\n+            LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n+            resultLayout.setVisibility(View.VISIBLE);\n+\n+            ((TextView) findViewById(R.id.access_token))\n+            .setText(\"You must set the authentication parameters in the authentication.xml properties file.\");\n+        } else {\n+            /**\n+             * Create the AuthenticatingWebView, a custom WebView, to make the url\n+             * request. We also pass this class's context so that the\n+             * AuthenticatingWebView can execute callbacks.\n+             */\n+            authenticatingWebView = new AuthenticatingWebView(webView, this);\n+            authenticatingWebView.makeRequest(requestUrl);\n+        }\n+    }\n+\n+    /**\n+     * Boilerplate code required by Android to display any menu xml that may\n+     * exist in res/menu.\n+     *\n+     * @param menu the menu associated with this activity\n+     * @return returns true to create the menu\n+     */\n+    @Override\n+    public final boolean onCreateOptionsMenu(final Menu menu) {\n+        // Inflate the menu; this adds items to the action bar if it is present.\n+        getMenuInflater().inflate(R.menu.main, menu);\n+        return true;\n+    }\n+\n+    /**\n+     * Standard form callback for the [Clear Cookies] button, whose properties\n+     * are described in res/layout/activity_main.xml.\n+     *\n+     * @param view [Clear Cookies] button's view\n+     */\n+    public final void clearCookies(final View view) {\n+\n+        /**\n+         * Removes the cookies associated with this app only - browser cookies\n+         * and other app's cookies are not affected.\n+         */\n+        myCookieManager.removeAllCookie();\n+    }\n+\n+    /**\n+     * Standard form callback for the [Sign In Again] button, whose properties\n+     * are described in res/layout/activity_main.xml.\n+     *\n+     * @param view [Sign In Again] button's view\n+     */\n+    public final void signInAgain(final View view) {\n+\n+        /**\n+         * Clear the token count down timer if it is running and set the timer\n+         * text to expired.\n+         */\n+        if (tokenCountDownTimer != null) {\n+            tokenCountDownTimer.cancel();\n+            tokenCountDownTimer = null;\n+            ((TextView) findViewById(R.id.timeRemainingTextView))\n+            .setText(getString(R.string.time_remaining_expired));\n+        }\n+\n+        /**\n+         *  Hide the text result views.\n+         */\n+        LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n+        resultLayout.setVisibility(View.INVISIBLE);\n+\n+        /**\n+         * Make another request.\n+         */\n+        authenticatingWebView.makeRequest(requestUrl);\n+    }\n+\n+    /**\n+     * Display a progress indicator while authenticating. Implements a callback\n+     * function called by AuthenticatingWebViewCallbackMethods\n+     */\n+    @Override\n+    public final void startProgressDialog() {\n+\n+        /**\n+         *  Create a progressDialog if it does not exist.\n+         */\n+        if (myProgressDialog == null) {\n+            myProgressDialog = new ProgressDialog(myContext);\n+            myProgressDialog.setTitle(getString(R.string.authenticating));\n+            myProgressDialog.setMessage(getString(R.string.please_wait));\n+            myProgressDialog.setCancelable(false);\n+            myProgressDialog.setIndeterminate(true);\n+        }\n+\n+        /**\n+         *  Show the progress dialog.\n+         */\n+        myProgressDialog.show();\n+    }\n+\n+    /**\n+     * Stop and destroy a progress indicator (if it exists). Implements a\n+     * callback function called by AuthenticatingWebViewCallbackMethods.\n+     */\n+    @Override\n+    public final void stopProgressDialog() {\n+        myProgressDialog.hide();\n+    }\n+\n+    /**\n+     * Display the results by extracting the values from the Hash Map and\n+     * inserting them into the TextViews which are defined in\n+     * res/layout/activity_main.xml. Implements a callback function called by\n+     * AuthenticatingWebViewCallbackMethods.\n+     *\n+     * @param authorizationReturnParameters A list of return params and values\n+     */\n+    @Override\n+    public final void displayResults(\n+            final HashMap<String, String> authorizationReturnParameters) {\n+\n+        /**\n+         * Make the text result views visible. Each result parameter's textview\n+         * is grouped into a LinearLayout.\n+         */\n+        LinearLayout resultLayout = (LinearLayout) findViewById(R.id.resultLayout);\n+        resultLayout.setVisibility(View.VISIBLE);\n+\n+        ((TextView) findViewById(R.id.access_token))\n+        .setText(authorizationReturnParameters.get(\"access_token\"));\n+        ((TextView) findViewById(R.id.principalID))\n+        .setText(authorizationReturnParameters.get(\"principalID\"));\n+        ((TextView) findViewById(R.id.principalIDNS))\n+        .setText(authorizationReturnParameters.get(\"principalIDNS\"));\n+        ((TextView) findViewById(R.id.context_institution_id))\n+        .setText(authorizationReturnParameters\n+                .get(\"context_institution_id\"));\n+        ((TextView) findViewById(R.id.token_type))\n+        .setText(authorizationReturnParameters.get(\"token_type\"));\n+        ((TextView) findViewById(R.id.expires_in))\n+        .setText(authorizationReturnParameters.get(\"expires_in\"));\n+        ((TextView) findViewById(R.id.expires_at))\n+        .setText(authorizationReturnParameters.get(\"expires_at\"));\n+\n+        /**\n+         *  Check if the token CountDownTimer, and cancel it if it does.\n+         */\n+        if (tokenCountDownTimer != null) {\n+            tokenCountDownTimer.cancel();\n+        }\n+\n+        /**\n+         * Start a new token count down timer based on the time remaining\n+         * returned with the token (time remaining is in seconds).\n+         */\n+        if (authorizationReturnParameters.get(\"expires_in\") != null) {\n+            tokenCountDownTimer = new CountDownTimer(\n+                    Integer.parseInt(authorizationReturnParameters\n+                            .get(\"expires_in\")) * SECONDS_TO_MILLISECONDS,\n+                            SECONDS_TO_MILLISECONDS) {\n+\n+                /* Callback fires every 1000 ms. */\n+                @Override\n+                public void onTick(final long millisUntilFinished) {\n+                    ((TextView) findViewById(R.id.timeRemainingTextView))\n+                    .setText(getString(R.string.time_remaining)\n+                            + millisUntilFinished\n+                            / SECONDS_TO_MILLISECONDS);\n+                }\n+\n+                /**\n+                 *  Callback fires when timer counts down to zero.\n+                 */\n+                @Override\n+                public void onFinish() {\n+                    ((TextView) findViewById(R.id.timeRemainingTextView))\n+                    .setText(getString(R.string.time_remaining_expired));\n+                }\n+            }.start();\n+        } else {\n+            /**\n+             * If the \"expires_in\" parameter is null, then something has gone\n+             * wrong during authentication.\n+             */\n+            ((TextView) findViewById(R.id.timeRemainingTextView))\n+            .setText(getString(R.string.invalid_authentication_request));\n+        }\n+    }\n+}"], "score": 1.0, "methods_t": ["AuthenticatingWebView CountDownTimer ProgressDialog StringBuffer append cancel equals findViewById get getInstance getMenuInflater getString hide inflate makeRequest parseInt removeAllCookie setAcceptCookie setCancelable setContentView setIndeterminate setMessage setText setTitle setVisibility show start toString"], "_version_": 1526753831061291008, "subject_t": ["Added project files."], "comments_t": ["/** \n * Holds the context of MainActivity so it can be passed to the WebView. The WebView uses that context to call back to the MainActivity to <ul> <li>Start the activity spinner.</li> <li>Stop the activity spinner.</li> <li>Display the authentication results.</li> </ul>\n */\n /** \n * The webview used for authentication\n */\n /** \n * A progress dialog to indicate to the user that the app is waiting for an http response\n */\n /** \n * Display a progress indicator while authenticating. Implements a callback function called by AuthenticatingWebViewCallbackMethods\n */\n /* Callback fires every 1000 ms. */\n /** \n * Standard form callback for the [Sign In Again] button, whose properties are described in res/layout/activity_main.xml.\n * @param view [Sign In Again] button's view\n */\n /** \n * Standard form callback for the [Clear Cookies] button, whose properties are described in res/layout/activity_main.xml.\n * @param view [Clear Cookies] button's view\n */\n /** \n * Displays the view for the application and handles UI interaction. The following resources are loaded into this Activity: <ul> <li>res/layout/activity_main.xml - the view objects and their layout</li> <li>/res/values/strings.xml - any strings that are displayed</li> <li>/res/values/authentication.xml - list of strings containing authentication parameters</li> </ul> <p> This class calls an instance of AuthenticatingWebView to handle the actual sign in process with the OCLC Authentication servers. Call back methods are defined by interfaces in AuthenticatingWebViewCallbackMethods, so that the AuthenticatingWebView can turn an activity indicator on and off, and return the authentication results for display. <p> The request and result parameters are as follows: <p> Request Parameters - stored in prop. file res/values/authentication.xml: <ul> <li>authenticatingServerBaseUrl</li> <li>client_id</li> <li>authenticatingInstitutionId</li> <li>contextInstitutionId</li> <li>redirect_uri</li> <li>response_type</li> <li>scope</li> </ul> Returned Parameters - stored in HashMap authorizationReturnParameters: <ul> <li>accessToken</li> <li>principalID</li> <li>principalIDNS</li> <li>context_institution_id</li> <li>token_type</li> <li>expires_in</li> <li>expires_at</li> </ul> <p> The Cookie Manager, myCookieManager, gives access to this app's cookies so that we can clear them when restarting the sign-in activity from scratch.\n * @see android.app.Activity\n */\n /** \n * Callback fires when timer counts down to zero.\n */\n /** \n * An extension that is passed a webview and uses it to handle authentication\n */\n /** \n * Timer activated when authentication token is received to decrement the seconds remaining until the authentication token expires.\n */\n /** \n * Boilerplate code required by Android to display any menu xml that may exist in res/menu.\n * @param menu the menu associated with this activity\n * @return returns true to create the menu\n */\n /** \n * Stop and destroy a progress indicator (if it exists). Implements a callback function called by AuthenticatingWebViewCallbackMethods.\n */\n /** \n * Multiplier to convert seconds to milliseconds\n */\n /** \n * Display the results by extracting the values from the Hash Map and inserting them into the TextViews which are defined in res/layout/activity_main.xml. Implements a callback function called by AuthenticatingWebViewCallbackMethods.\n * @param authorizationReturnParameters A list of return params and values\n */\n             // parameters in authentication.xml /** \n * The full URL of the Access Token request\n */\n /** \n * Handle for managing this application's cookies\n */\n             // If the wskey is blank, then the user probably forgot to set the         // Inflate the menu; this adds items to the action bar if it is present. /** \n * This method initializes the class and only fires once - when the app loads into memory. Once an app is initialized, it stays in the run state until the client runs out of memory or shuts off, which could be for days. This method does not fire when the app returns from the background to the foreground. <p> The method loads the layout from the xml file, instantiates an instance of the webview. A WebView is an embedded Chrome browser with no user controls, which we will use to handle OAuth2 authentication. Initially the webView is invisible. It is made visible to facilitate sign in, and hidden after a token is received so that the token can be displayed.\n * @param savedInstanceState state information for the app\n * @see android.app.Activity#onCreate(android.os.Bundle)\n */\n"], "callsites_t": ["java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) android.app.ProgressDialog.setIndeterminate(boolean) java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) <unknown>.makeRequest(java.lang.String) <unknown>.append(<unknown>) <unknown>.equals(java.lang.String) android.os.CountDownTimer.cancel() android.app.Activity.setContentView(<unknown>) android.content.Context.getString(<unknown>) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(<unknown>) android.view.MenuInflater.inflate(<unknown>, android.view.Menu) android.content.Context.getString(<unknown>) <unknown>.append(java.lang.String) android.app.Activity.findViewById(<unknown>) android.app.ProgressDialog.setMessage(<unknown>) android.app.Dialog.setCancelable(boolean) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.append(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.append(<unknown>) <unknown>.append(java.lang.String) <unknown>.append(java.lang.String) android.content.Context.getString(<unknown>) android.content.Context.getString(<unknown>) android.content.Context.getString(<unknown>) android.widget.TextView.setText(<unknown>) <unknown>.append(<unknown>) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) android.webkit.CookieManager.setAcceptCookie(boolean) <unknown>.makeRequest(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) java.lang.StringBuffer.append(<unknown>) android.widget.TextView.setText(java.lang.String) android.os.CountDownTimer.cancel() java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) <unknown>.toString() android.view.View.setVisibility(int) <unknown>.append(<unknown>) android.view.View.setVisibility(int) android.app.Dialog.hide() android.app.Activity.findViewById(<unknown>) android.app.ProgressDialog.ProgressDialog(android.content.Context) android.content.Context.getString(<unknown>) android.app.Activity.findViewById(<unknown>) .CountDownTimer(int, int) java.lang.StringBuffer.StringBuffer() android.content.Context.getString(<unknown>) android.app.AlertDialog.setTitle(<unknown>) android.widget.TextView.setText(<unknown>) android.content.Context.getString(<unknown>) <unknown>.AuthenticatingWebView(android.webkit.WebView, org.oclc.mobile.authentication.android.MainActivity) android.webkit.CookieManager.getInstance() android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.content.Context.getString(<unknown>) android.content.Context.getString(<unknown>) android.app.Activity.findViewById(<unknown>) android.webkit.CookieManager.removeAllCookie() <unknown>.append(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) <unknown>.append(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.CountDownTimer.start() <unknown>.append(java.lang.String) java.lang.Integer.parseInt(java.lang.String) android.content.Context.getString(<unknown>) <unknown>.append(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.app.Activity.getMenuInflater() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.app.Dialog.show()"], "id": "OCLC-Developer-Network/oclc-auth-android-example\u0000e25ac98d2bc459b6ce6efaec24aeadef337c0fa5\u0000src/org/oclc/mobile/authentication/android/MainActivity.java", "callsites_cs": "java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#android.app.ProgressDialog.setIndeterminate(boolean)#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#<unknown>.makeRequest(java.lang.String)#<unknown>.append(<unknown>)#<unknown>.equals(java.lang.String)#android.os.CountDownTimer.cancel()#android.app.Activity.setContentView(<unknown>)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(<unknown>)#android.view.MenuInflater.inflate(<unknown>, android.view.Menu)#android.content.Context.getString(<unknown>)#<unknown>.append(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.app.ProgressDialog.setMessage(<unknown>)#android.app.Dialog.setCancelable(boolean)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.append(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.append(<unknown>)#<unknown>.append(java.lang.String)#<unknown>.append(java.lang.String)#android.content.Context.getString(<unknown>)#android.content.Context.getString(<unknown>)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(<unknown>)#<unknown>.append(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#android.webkit.CookieManager.setAcceptCookie(boolean)#<unknown>.makeRequest(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#java.lang.StringBuffer.append(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.os.CountDownTimer.cancel()#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#<unknown>.toString()#android.view.View.setVisibility(int)#<unknown>.append(<unknown>)#android.view.View.setVisibility(int)#android.app.Dialog.hide()#android.app.Activity.findViewById(<unknown>)#android.app.ProgressDialog.ProgressDialog(android.content.Context)#android.content.Context.getString(<unknown>)#android.app.Activity.findViewById(<unknown>)#.CountDownTimer(int, int)#java.lang.StringBuffer.StringBuffer()#android.content.Context.getString(<unknown>)#android.app.AlertDialog.setTitle(<unknown>)#android.widget.TextView.setText(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.AuthenticatingWebView(android.webkit.WebView, org.oclc.mobile.authentication.android.MainActivity)#android.webkit.CookieManager.getInstance()#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.content.Context.getString(<unknown>)#android.content.Context.getString(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.webkit.CookieManager.removeAllCookie()#<unknown>.append(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#<unknown>.append(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.CountDownTimer.start()#<unknown>.append(java.lang.String)#java.lang.Integer.parseInt(java.lang.String)#android.content.Context.getString(<unknown>)#<unknown>.append(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.getMenuInflater()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.app.Dialog.show()"}, {"user_sni": "King, Shane", "repo_sni": "CardinalNow/Android-CountdownTimer", "imports_t": ["android.view.animation.RotateAnimation android.os.CountDownTimer android.text.format.Time android.view.animation.Animation com.todddavies.components.progressbar.ProgressWheel android.app.Activity android.os.Bundle android.widget.TextView"], "email_sni": "sking@cardinalsolutions.com", "contents_t": ["package com.cardinalsolutions.countdowntimer;\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.text.format.Time;\nimport android.view.animation.Animation;\nimport android.view.animation.RotateAnimation;\nimport android.widget.TextView;\nimport com.todddavies.components.progressbar.ProgressWheel;\n\n/**\n * Countdown Timer\n *\n * CountdownTimerActivity is the main activity of this application.  To configure  is a utility class that allows the developer to turn off logging by setting the LOGGING\n * flag to false prior to generating an APK.\n *\n * @author Shane King\n *         28 Aug 2014\n *         10:00\n */\npublic class CountdownTimerActivity extends Activity {\n\n\tprivate static final String TAG = \"CountdownTimer\";\n\n\tprivate TextView mCountdownNote;\n\tprivate ProgressWheel mDaysWheel;\n\tprivate TextView mDaysLabel;\n\tprivate ProgressWheel mHoursWheel;\n\tprivate TextView mHoursLabel;\n\tprivate ProgressWheel mMinutesWheel;\n\tprivate TextView mMinutesLabel;\n\tprivate ProgressWheel mSecondsWheel;\n\tprivate TextView mSecondsLabel;\n\n\t// Timer setup\n\tTime conferenceTime = new Time(Time.getCurrentTimezone());\n\tint hour = 22;\n\tint minute = 33;\n\tint second = 0;\n\tint monthDay = 28;\n\t// month is zero based...7 == August\n\tint month = 7;\n\tint year = conferenceTime.year;\n\n\t// Values displayed by the timer\n\tprivate int mDisplayDays;\n\tprivate int mDisplayHours;\n\tprivate int mDisplayMinutes;\n\tprivate int mDisplaySeconds;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_countdown_timer);\n\n\t\tconfigureViews();\n\t\tconfigureConferenceDate();\n\n\t}\n\n\tprivate void configureViews() {\n\n\t\tthis.mCountdownNote = (TextView) findViewById(R.id.activity_countdown_timer_note);\n\t\tthis.mDaysWheel = (ProgressWheel) findViewById(R.id.activity_countdown_timer_days);\n\t\tthis.mHoursWheel = (ProgressWheel) findViewById(R.id.activity_countdown_timer_hours);\n\t\tthis.mMinutesWheel = (ProgressWheel) findViewById(R.id.activity_countdown_timer_minutes);\n\t\tthis.mSecondsWheel = (ProgressWheel) findViewById(R.id.activity_countdown_timer_seconds);\n\t\tthis.mDaysLabel = (TextView) findViewById(R.id.activity_countdown_timer_days_text);\n\t\tthis.mHoursLabel = (TextView) findViewById(R.id.activity_countdown_timer_hours_text);\n\t\tthis.mMinutesLabel = (TextView) findViewById(R.id.activity_countdown_timer_minutes_text);\n\t\tthis.mSecondsLabel = (TextView) findViewById(R.id.activity_countdown_timer_seconds_text);\n\n\t}\n\n\tprivate void closeActivity() {\n\t\t// Start your subsequent activity here.  Increasing year so timer will never go away for\n\t\t// demo purposes only.  Remove next 2 lines of code in your app!!\n\t\tyear = year + 1;\n\t\tconfigureConferenceDate();\n\n\t}\n\n\tprivate void configureConferenceDate() {\n\t\tconferenceTime.set(second, minute, hour, monthDay, month, year);\n\t\tconferenceTime.normalize(true);\n\t\tlong confMillis = conferenceTime.toMillis(true);\n\n\t\tTime nowTime = new Time(Time.getCurrentTimezone());\n\t\tnowTime.setToNow();\n\t\tnowTime.normalize(true);\n\t\tlong nowMillis = nowTime.toMillis(true);\n\n\t\tlong milliDiff = confMillis - nowMillis;\n\n\t\tnew CountDownTimer(milliDiff, 1000) {\n\n\t\t\t@Override\n\t\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\t\t// decompose difference into days, hours, minutes and seconds\n\t\t\t\tCountdownTimerActivity.this.mDisplayDays = (int) ((millisUntilFinished / 1000) / 86400);\n\t\t\t\tCountdownTimerActivity.this.mDisplayHours = (int) (((millisUntilFinished / 1000) - (CountdownTimerActivity.this.mDisplayDays * 86400)) / 3600);\n\t\t\t\tCountdownTimerActivity.this.mDisplayMinutes = (int) (((millisUntilFinished / 1000) - ((CountdownTimerActivity.this.mDisplayDays * 86400) + (CountdownTimerActivity.this.mDisplayHours * 3600))) / 60);\n\t\t\t\tCountdownTimerActivity.this.mDisplaySeconds = (int) ((millisUntilFinished / 1000) % 60);\n\n\t\t\t\tCountdownTimerActivity.this.mDaysWheel.setText(String.valueOf(CountdownTimerActivity.this.mDisplayDays));\n\t\t\t\tCountdownTimerActivity.this.mDaysWheel.setProgress(CountdownTimerActivity.this.mDisplayDays);\n\n\t\t\t\tCountdownTimerActivity.this.mHoursWheel.setText(String.valueOf(CountdownTimerActivity.this.mDisplayHours));\n\t\t\t\tCountdownTimerActivity.this.mHoursWheel.setProgress(CountdownTimerActivity.this.mDisplayHours * 15);\n\n\t\t\t\tCountdownTimerActivity.this.mMinutesWheel.setText(String.valueOf(CountdownTimerActivity.this.mDisplayMinutes));\n\t\t\t\tCountdownTimerActivity.this.mMinutesWheel.setProgress(CountdownTimerActivity.this.mDisplayMinutes * 6);\n\n\t\t\t\tAnimation an = new RotateAnimation(0.0f, 90.0f, 250f, 273f);\n\t\t\t\tan.setFillAfter(true);\n\n\t\t\t\tCountdownTimerActivity.this.mSecondsWheel.setText(String.valueOf(CountdownTimerActivity.this.mDisplaySeconds));\n\t\t\t\tCountdownTimerActivity.this.mSecondsWheel.setProgress(CountdownTimerActivity.this.mDisplaySeconds * 6);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onFinish() {\n\t\t\t\tLogger.d(TAG, \"Timer Finished...\");\n\t\t\t\tcloseActivity();\n\t\t\t}\n\t\t}.start();\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2014-09-04T16:56:50Z", "hash_sni": "9023554fc9a4f9929273975f90b38a7a0baeed03", "name_sni": "app/src/main/java/com/cardinalsolutions/countdowntimer/CountdownTimerActivity.java", "patch_t": ["+package com.cardinalsolutions.countdowntimer;\n+import android.app.Activity;\n+import android.os.Bundle;\n+import android.os.CountDownTimer;\n+import android.text.format.Time;\n+import android.view.animation.Animation;\n+import android.view.animation.RotateAnimation;\n+import android.widget.TextView;\n+import com.todddavies.components.progressbar.ProgressWheel;\n+\n+/**\n+ * Countdown Timer\n+ *\n+ * CountdownTimerActivity is the main activity of this application.  To configure  is a utility class that allows the developer to turn off logging by setting the LOGGING\n+ * flag to false prior to generating an APK.\n+ *\n+ * @author Shane King\n+ *         28 Aug 2014\n+ *         10:00\n+ */\n+public class CountdownTimerActivity extends Activity {\n+\n+\tprivate static final String TAG = \"CountdownTimer\";\n+\n+\tprivate TextView mCountdownNote;\n+\tprivate ProgressWheel mDaysWheel;\n+\tprivate TextView mDaysLabel;\n+\tprivate ProgressWheel mHoursWheel;\n+\tprivate TextView mHoursLabel;\n+\tprivate ProgressWheel mMinutesWheel;\n+\tprivate TextView mMinutesLabel;\n+\tprivate ProgressWheel mSecondsWheel;\n+\tprivate TextView mSecondsLabel;\n+\n+\t// Timer setup\n+\tTime conferenceTime = new Time(Time.getCurrentTimezone());\n+\tint hour = 22;\n+\tint minute = 33;\n+\tint second = 0;\n+\tint monthDay = 28;\n+\t// month is zero based...7 == August\n+\tint month = 7;\n+\tint year = conferenceTime.year;\n+\n+\t// Values displayed by the timer\n+\tprivate int mDisplayDays;\n+\tprivate int mDisplayHours;\n+\tprivate int mDisplayMinutes;\n+\tprivate int mDisplaySeconds;\n+\n+\t@Override\n+\tprotected void onCreate(Bundle savedInstanceState) {\n+\t\tsuper.onCreate(savedInstanceState);\n+\t\tsetContentView(R.layout.activity_countdown_timer);\n+\n+\t\tconfigureViews();\n+\t\tconfigureConferenceDate();\n+\n+\t}\n+\n+\tprivate void configureViews() {\n+\n+\t\tthis.mCountdownNote = (TextView) findViewById(R.id.activity_countdown_timer_note);\n+\t\tthis.mDaysWheel = (ProgressWheel) findViewById(R.id.activity_countdown_timer_days);\n+\t\tthis.mHoursWheel = (ProgressWheel) findViewById(R.id.activity_countdown_timer_hours);\n+\t\tthis.mMinutesWheel = (ProgressWheel) findViewById(R.id.activity_countdown_timer_minutes);\n+\t\tthis.mSecondsWheel = (ProgressWheel) findViewById(R.id.activity_countdown_timer_seconds);\n+\t\tthis.mDaysLabel = (TextView) findViewById(R.id.activity_countdown_timer_days_text);\n+\t\tthis.mHoursLabel = (TextView) findViewById(R.id.activity_countdown_timer_hours_text);\n+\t\tthis.mMinutesLabel = (TextView) findViewById(R.id.activity_countdown_timer_minutes_text);\n+\t\tthis.mSecondsLabel = (TextView) findViewById(R.id.activity_countdown_timer_seconds_text);\n+\n+\t}\n+\n+\tprivate void closeActivity() {\n+\t\t// Start your subsequent activity here.  Increasing year so timer will never go away for\n+\t\t// demo purposes only.  Remove next 2 lines of code in your app!!\n+\t\tyear = year + 1;\n+\t\tconfigureConferenceDate();\n+\n+\t}\n+\n+\tprivate void configureConferenceDate() {\n+\t\tconferenceTime.set(second, minute, hour, monthDay, month, year);\n+\t\tconferenceTime.normalize(true);\n+\t\tlong confMillis = conferenceTime.toMillis(true);\n+\n+\t\tTime nowTime = new Time(Time.getCurrentTimezone());\n+\t\tnowTime.setToNow();\n+\t\tnowTime.normalize(true);\n+\t\tlong nowMillis = nowTime.toMillis(true);\n+\n+\t\tlong milliDiff = confMillis - nowMillis;\n+\n+\t\tnew CountDownTimer(milliDiff, 1000) {\n+\n+\t\t\t@Override\n+\t\t\tpublic void onTick(long millisUntilFinished) {\n+\t\t\t\t// decompose difference into days, hours, minutes and seconds\n+\t\t\t\tCountdownTimerActivity.this.mDisplayDays = (int) ((millisUntilFinished / 1000) / 86400);\n+\t\t\t\tCountdownTimerActivity.this.mDisplayHours = (int) (((millisUntilFinished / 1000) - (CountdownTimerActivity.this.mDisplayDays * 86400)) / 3600);\n+\t\t\t\tCountdownTimerActivity.this.mDisplayMinutes = (int) (((millisUntilFinished / 1000) - ((CountdownTimerActivity.this.mDisplayDays * 86400) + (CountdownTimerActivity.this.mDisplayHours * 3600))) / 60);\n+\t\t\t\tCountdownTimerActivity.this.mDisplaySeconds = (int) ((millisUntilFinished / 1000) % 60);\n+\n+\t\t\t\tCountdownTimerActivity.this.mDaysWheel.setText(String.valueOf(CountdownTimerActivity.this.mDisplayDays));\n+\t\t\t\tCountdownTimerActivity.this.mDaysWheel.setProgress(CountdownTimerActivity.this.mDisplayDays);\n+\n+\t\t\t\tCountdownTimerActivity.this.mHoursWheel.setText(String.valueOf(CountdownTimerActivity.this.mDisplayHours));\n+\t\t\t\tCountdownTimerActivity.this.mHoursWheel.setProgress(CountdownTimerActivity.this.mDisplayHours * 15);\n+\n+\t\t\t\tCountdownTimerActivity.this.mMinutesWheel.setText(String.valueOf(CountdownTimerActivity.this.mDisplayMinutes));\n+\t\t\t\tCountdownTimerActivity.this.mMinutesWheel.setProgress(CountdownTimerActivity.this.mDisplayMinutes * 6);\n+\n+\t\t\t\tAnimation an = new RotateAnimation(0.0f, 90.0f, 250f, 273f);\n+\t\t\t\tan.setFillAfter(true);\n+\n+\t\t\t\tCountdownTimerActivity.this.mSecondsWheel.setText(String.valueOf(CountdownTimerActivity.this.mDisplaySeconds));\n+\t\t\t\tCountdownTimerActivity.this.mSecondsWheel.setProgress(CountdownTimerActivity.this.mDisplaySeconds * 6);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void onFinish() {\n+\t\t\t\tLogger.d(TAG, \"Timer Finished...\");\n+\t\t\t\tcloseActivity();\n+\t\t\t}\n+\t\t}.start();\n+\t}\n+}"], "score": 1.0, "methods_t": ["CountDownTimer RotateAnimation Time closeActivity configureConferenceDate configureViews d findViewById getCurrentTimezone normalize set setContentView setFillAfter setProgress setText setToNow start toMillis valueOf"], "_version_": 1526754588808445952, "subject_t": ["First commit"], "comments_t": ["\t\t\t\t// decompose difference into days, hours, minutes and seconds /** \n * Countdown Timer CountdownTimerActivity is the main activity of this application.  To configure  is a utility class that allows the developer to turn off logging by setting the LOGGING flag to false prior to generating an APK.\n * @author Shane King28 Aug 2014 10:00\n */\n \t// month is zero based...7 == August \t// Values displayed by the timer \t\t// Start your subsequent activity here.  Increasing year so timer will never go away for \t// Timer setup \t\t// demo purposes only.  Remove next 2 lines of code in your app!!"], "callsites_t": ["android.text.format.Time.Time(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.setText(java.lang.String) <unknown>.setText(java.lang.String) android.text.format.Time.toMillis(boolean) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) .CountDownTimer(long, int) <unknown>.setProgress(int) android.view.animation.Animation.setFillAfter(boolean) android.text.format.Time.normalize(boolean) java.lang.String.valueOf(int) android.text.format.Time.set(int, int, int, int, int, int) java.lang.String.valueOf(int) android.text.format.Time.normalize(boolean) <unknown>.setText(java.lang.String) <unknown>.setProgress(int) android.os.CountDownTimer.start() java.lang.String.valueOf(int) <unknown>.d(java.lang.String, java.lang.String) com.cardinalsolutions.countdowntimer.CountdownTimerActivity.configureConferenceDate() android.text.format.Time.getCurrentTimezone() com.cardinalsolutions.countdowntimer.CountdownTimerActivity.configureViews() com.cardinalsolutions.countdowntimer.CountdownTimerActivity.configureConferenceDate() android.text.format.Time.toMillis(boolean) java.lang.String.valueOf(int) <unknown>.setText(java.lang.String) android.view.animation.RotateAnimation.RotateAnimation(float, float, float, float) <unknown>.setProgress(int) android.app.Activity.setContentView(<unknown>) android.app.Activity.findViewById(<unknown>) android.text.format.Time.setToNow() com.cardinalsolutions.countdowntimer.CountdownTimerActivity.closeActivity() android.app.Activity.findViewById(<unknown>) <unknown>.setProgress(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.text.format.Time.Time(java.lang.String) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.text.format.Time.getCurrentTimezone()"], "id": "CardinalNow/Android-CountdownTimer\u00009023554fc9a4f9929273975f90b38a7a0baeed03\u0000app/src/main/java/com/cardinalsolutions/countdowntimer/CountdownTimerActivity.java", "callsites_cs": "android.text.format.Time.Time(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.setText(java.lang.String)#<unknown>.setText(java.lang.String)#android.text.format.Time.toMillis(boolean)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#.CountDownTimer(long, int)#<unknown>.setProgress(int)#android.view.animation.Animation.setFillAfter(boolean)#android.text.format.Time.normalize(boolean)#java.lang.String.valueOf(int)#android.text.format.Time.set(int, int, int, int, int, int)#java.lang.String.valueOf(int)#android.text.format.Time.normalize(boolean)#<unknown>.setText(java.lang.String)#<unknown>.setProgress(int)#android.os.CountDownTimer.start()#java.lang.String.valueOf(int)#<unknown>.d(java.lang.String, java.lang.String)#com.cardinalsolutions.countdowntimer.CountdownTimerActivity.configureConferenceDate()#android.text.format.Time.getCurrentTimezone()#com.cardinalsolutions.countdowntimer.CountdownTimerActivity.configureViews()#com.cardinalsolutions.countdowntimer.CountdownTimerActivity.configureConferenceDate()#android.text.format.Time.toMillis(boolean)#java.lang.String.valueOf(int)#<unknown>.setText(java.lang.String)#android.view.animation.RotateAnimation.RotateAnimation(float, float, float, float)#<unknown>.setProgress(int)#android.app.Activity.setContentView(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.text.format.Time.setToNow()#com.cardinalsolutions.countdowntimer.CountdownTimerActivity.closeActivity()#android.app.Activity.findViewById(<unknown>)#<unknown>.setProgress(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.text.format.Time.Time(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.text.format.Time.getCurrentTimezone()"}, {"user_sni": "Ashwini Kumar Singh Chandel", "repo_sni": "ash242186/VideoStreaming", "imports_t": ["android.os.CountDownTimer android.view.View.OnClickListener android.os.Bundle android.widget.Button android.widget.CompoundButton android.media.MediaPlayer android.media.MediaPlayer.OnSeekCompleteListener android.media.MediaPlayer.OnPreparedListener android.content.pm.ActivityInfo android.widget.ToggleButton android.widget.ProgressBar android.widget.CompoundButton.OnCheckedChangeListener android.media.MediaPlayer.OnVideoSizeChangedListener android.media.MediaPlayer.OnBufferingUpdateListener android.widget.TextView android.media.MediaPlayer.OnErrorListener android.net.Uri android.view.View android.util.Log android.app.Activity"], "email_sni": "chandelashwini@gmail.com", "contents_t": ["package com.example.steaming;\n\n\nimport android.app.Activity;\nimport android.content.pm.ActivityInfo;\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnBufferingUpdateListener;\nimport android.media.MediaPlayer.OnErrorListener;\nimport android.media.MediaPlayer.OnPreparedListener;\nimport android.media.MediaPlayer.OnSeekCompleteListener;\nimport android.media.MediaPlayer.OnVideoSizeChangedListener;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.CompoundButton;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport android.widget.ToggleButton;\nimport android.widget.CompoundButton.OnCheckedChangeListener;\n\npublic class MainActivity extends Activity implements OnPreparedListener, OnErrorListener{\n\n\tprivate String TAG = getClass().getSimpleName();\n\tprivate Button stop;\n\tprivate ToggleButton playtogglebutton;\n\tprivate TextView timeEnd, timeElapsed;\n\tprivate ProgressBar progressBar;\n\tprivate MyVideoView videoviewer;\n\tprivate CountDownTimer timer;\n\t//private ProgressDialog loading;\n\tprivate int mVideoWidth, mVideoHeight;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n\t\tsetContentView(R.layout.activity_main);\n\t\t\n\t\t/*loading = new ProgressDialog(this);\n\t      loading.setMessage(\"Loading...\");*/\n\t     \n\t\tstop = (Button) findViewById(R.id.stop);\n\t\tplaytogglebutton = (ToggleButton) findViewById(R.id.playtogglebutton);\n\t\ttimeElapsed = (TextView) findViewById(R.id.timeElapsed);\n\t\ttimeEnd = (TextView) findViewById(R.id.timeEnd);\n\t\tprogressBar = (ProgressBar) findViewById(R.id.progressBar);\n\t    \n\t\tplaytogglebutton.setOnCheckedChangeListener(checkedchangelistener);\n\t\t\n\t\t\n\t\t\n\t\tvideoviewer = (MyVideoView) findViewById(R.id.videoviewer);\n\t\tvideoviewer.setVideoURI(Uri.parse(\"rtsp://v4.cache1.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYESARFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v5.cache5.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYDSANFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.youtube.com/v/OwMCw2VG04I\")); //not working\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://daily3gp.com/vids/747.3gp\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://commonsware.com/misc/test2.3gp\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.ooklnet.com/files/381/381489/video.mp4\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://184.72.239.149/vod/mp4:BigBuckBunny_115k.mov\"));\n\t\t//videoviewer.setVideoURI(Uri.parse(\"http://dl.dropbox.com/u/80419/santa.mp4\"));\n\t\tvideoviewer.requestFocus();\n\t\tvideoviewer.requestFocus();\n\t\tvideoviewer.setKeepScreenOn(true);\n\t\tvideoviewer.setOnErrorListener(this);\n\t\tvideoviewer.setOnPreparedListener(this);\n\t\t//loading.show();\n\t\t\n\t\tstop.setOnClickListener(new OnClickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onClick(View arg0) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\tstopMedia();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate OnCheckedChangeListener checkedchangelistener =  new OnCheckedChangeListener(){\n\n\t\t@Override\n\t\tpublic void onCheckedChanged(CompoundButton arg0, boolean isChecked) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\t/*pause player*/\n\t\t\tif(isChecked){\n\t\t\t\tSystem.out.println(\"player pause\");\n\t\t\t\tplayMedia(false);\n\t\t\t}\n\t\t\t/*play player*/\n\t\t\telse{\n\t\t\t\tSystem.out.println(\"player play\");\n\t\t\t\tplayMedia(true);\n\t\t\t}\n\t\t}};\n\t\t\n\t\t@Override\n\t\tpublic boolean onError(MediaPlayer mp, int what, int extra) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\t//loading.hide();\n\t\t\treturn false;\n\t\t}\n\t\t\n\t@Override\n\tpublic void onPrepared(MediaPlayer mp) {\n\t\t// TODO Auto-generated method stub\n\t\tLog.d(TAG, \"media player preparing.......\");\n\t\tmp.setLooping(true);\n\t\t//loading.hide();\n\n\t\tmVideoWidth = mp.getVideoWidth();\n        mVideoHeight = mp.getVideoHeight();\n\t\t//onVideoSizeChangedListener declaration\n\t\tmp.setOnVideoSizeChangedListener(new OnVideoSizeChangedListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onVideoSizeChanged(MediaPlayer mp, int width, int height) {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\tLog.d(TAG, \"onVideoSizeChanged called \" + width + \":\" + height);\n\t\t\t\tif (width == 0 || height == 0) {\n\t\t            Log.e(TAG, \"invalid video width(\" + width + \") or height(\" + height + \")\");\n\t\t            return;\n\t\t        }\n\t\t        mVideoWidth = width;\n\t\t        mVideoHeight = height;\n\t\t        playMedia(true);\n\t\t\t}\n\t\t});\n\t\t// onSeekCompletionListener declaration\n\t\tmp.setOnSeekCompleteListener(new OnSeekCompleteListener() {\n\t\t\t// show current frame after changing the playback position\n\t\t\t@Override\n\t\t\tpublic void onSeekComplete(MediaPlayer mp) {\n\t\t\t\tif (!mp.isPlaying()) {\n\t\t\t\t\t//playMedia(true);\n\t\t\t\t\tSystem.out.println(\"inside the setOnSeekCompleteListener\");\n\t\t\t\t\tplayMedia(false);\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"inside------ the setOnSeekCompleteListener\");\n\t\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n\t\t\t}\n\t\t});\n\n\t\tmp.setOnCompletionListener(null);\n\t\t// onBufferingUpdateListener declaration\n\t\tmp.setOnBufferingUpdateListener(new OnBufferingUpdateListener() {\n\t\t\t// show updated information about the buffering progress\n\t\t\t@Override\n\t\t\tpublic void onBufferingUpdate(MediaPlayer mp, int percent) {\n\t\t\t\tLog.d(this.getClass().getName(), \"percent: \" + percent);\n\t\t\t\tprogressBar.setSecondaryProgress(percent);\n\t\t\t}\n\t\t});\n\t\t\n\n\t\tint time = videoviewer.getDuration();\n\t\tint time_elapsed = videoviewer.getCurrentPosition();\n\t\tprogressBar.setProgress(time_elapsed);\n\n\t\t// update current playback time every 500ms until stop\n\t\ttimer = new CountDownTimer(time, 500) {\n\n\t\t\t@Override\n\t\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n\t\t\t\tfloat a = videoviewer.getCurrentPosition();\n\t\t\t\tfloat b = videoviewer.getDuration();\n\t\t\t\tprogressBar.setProgress((int) (a / b * 100));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onFinish() {\n\t\t\t\tstopMedia();\n\t\t\t}\n\t\t};\n\n\t\t\n\t\t\n\t\ttimeEnd.setText(countTime(time));\n\t\ttimeElapsed.setText(countTime(time_elapsed));\n\t\tplayMedia(true);\n\t}\n\n\t/**\n     * Convert time from milliseconds into minutes and seconds, proper to media player\n     * \n     * @param miliseconds\tmedia content time in milliseconds\n     * @return\ttime in format minutes:seconds\n     */\n    public String countTime(int miliseconds) {\n    \tString timeInMinutes = new String();\n    \tint minutes = miliseconds / 60000;\n    \tint seconds = (miliseconds % 60000)/1000;\n    \ttimeInMinutes = minutes + \":\" + (seconds<10?\"0\" + seconds:seconds);\n\t\treturn timeInMinutes;\n    }\n    \n    /**\n     * Start or Pause playback of media content\n     * \n     * @param v\tView the touch event has been dispatched to\n     */\n\tpublic void playMedia(boolean isplay) {\n\t\tSystem.err.println(\"height:- \"+mVideoHeight);\n\t\tSystem.err.println(\"width:- \"+mVideoWidth);\n\t\t\tif (isplay) {\n\t\t\t\tvideoviewer.changeVideoSize(mVideoWidth, mVideoHeight);\n\t\t\t\tvideoviewer.start();\n\t\t\t\ttimer.start();\n\t\t\t} else {\n\t\t\t\tvideoviewer.pause();\n\t\t\t\ttimer.cancel();\n\t\t\t}\n\t\t\n    }\n    \n    /**\n     * Pause and rewind to beginning of the media content\n     * \n     * @param v\tView the touch event has been dispatched to\n     */\n\tpublic void stopMedia() {\n\t\tif (videoviewer.getCurrentPosition() != 0) {\n\t\t\t\n\t\t\tplaytogglebutton.setChecked(true);\n\t\t\t\n\t\t\tvideoviewer.pause();\n\t\t\tvideoviewer.seekTo(0);\n\t\t\ttimer.cancel();\n\n\t\t\ttimeElapsed.setText(countTime(videoviewer.getCurrentPosition()));\n\t\t\tprogressBar.setProgress(0);\n\t\t}\n\t}\n\n\n\t@Override\n\tprotected void onStop() {\n\t\t// TODO Auto-generated method stub\n\t\tif(videoviewer != null)\n\t\t\tvideoviewer.stopPlayback();\n\t\tif (timer != null) {\n\t\t\ttimer.cancel();\n\t\t}\n\t\tsuper.onStop();\n\t}\n\n\t\n\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2013-01-10T08:31:04Z", "hash_sni": "a703781d38b213b0a2311a16c4f31f78e501a3be", "name_sni": "src/com/example/steaming/MainActivity.java", "patch_t": [" \t\t\n \t\t\n \t\tvideoviewer = (MyVideoView) findViewById(R.id.videoviewer);\n-\t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v4.cache1.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYESARFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n+\t\tvideoviewer.setVideoURI(Uri.parse(\"rtsp://v4.cache1.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYESARFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n \t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v5.cache5.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYDSANFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\"));\n \t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.youtube.com/v/OwMCw2VG04I\")); //not working\n-\t\tvideoviewer.setVideoURI(Uri.parse(\"http://aamc.kleward.com/TMS/TMS/Files/UnderstandingCorporateStructuresandTrust.mp4\"));\n \t\t//videoviewer.setVideoURI(Uri.parse(\"http://daily3gp.com/vids/747.3gp\"));\n \t\t//videoviewer.setVideoURI(Uri.parse(\"http://commonsware.com/misc/test2.3gp\"));\n \t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.ooklnet.com/files/381/381489/video.mp4\"));"], "score": 1.0, "methods_t": ["CountDownTimer OnBufferingUpdateListener OnCheckedChangeListener OnClickListener OnSeekCompleteListener OnVideoSizeChangedListener String cancel changeVideoSize countTime d e findViewById getClass getCurrentPosition getDuration getName getSimpleName getVideoHeight getVideoWidth isPlaying parse pause playMedia println requestFocus seekTo setChecked setContentView setKeepScreenOn setLooping setOnBufferingUpdateListener setOnCheckedChangeListener setOnClickListener setOnCompletionListener setOnErrorListener setOnPreparedListener setOnSeekCompleteListener setOnVideoSizeChangedListener setProgress setRequestedOrientation setSecondaryProgress setText setVideoURI start stopMedia stopPlayback"], "_version_": 1526751255845666816, "subject_t": ["changes"], "comments_t": ["\t//private ProgressDialog loading; \t\t\t//loading.hide(); \t\t//onVideoSizeChangedListener declaration \t\t// onBufferingUpdateListener declaration /*loading = new ProgressDialog(this);\nloading.setMessage(\"Loading...\");*/\n \t\t//loading.show(); /** \n * Convert time from milliseconds into minutes and seconds, proper to media player\n * @param miliseconds\tmedia content time in milliseconds\n * @return\ttime in format minutes:seconds\n */\n \t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.youtube.com/v/OwMCw2VG04I\")); //not working \t\t\t\t// TODO Auto-generated method stub \t\t\t// show updated information about the buffering progress \t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://184.72.239.149/vod/mp4:BigBuckBunny_115k.mov\")); \t\t// TODO Auto-generated method stub \t\t//videoviewer.setVideoURI(Uri.parse(\"http://www.ooklnet.com/files/381/381489/video.mp4\")); /** \n * Pause and rewind to beginning of the media content\n * @param v\tView the touch event has been dispatched to\n */\n \t\t//loading.hide(); \t\t//videoviewer.setVideoURI(Uri.parse(\"http://daily3gp.com/vids/747.3gp\")); \t\t//videoviewer.setVideoURI(Uri.parse(\"http://commonsware.com/misc/test2.3gp\")); /** \n * Start or Pause playback of media content\n * @param v\tView the touch event has been dispatched to\n */\n /*play player*/\n /*pause player*/\n \t\t//videoviewer.setVideoURI(Uri.parse(\"rtsp://v5.cache5.c.youtube.com/CiILENy73wIaGQmC00ZlwwIDOxMYDSANFEgGUgZ2aWRlb3MM/0/0/0/video.3gp\")); \t\t// update current playback time every 500ms until stop \t\t// onSeekCompletionListener declaration \t\t//videoviewer.setVideoURI(Uri.parse(\"http://dl.dropbox.com/u/80419/santa.mp4\")); \t\t\t// TODO Auto-generated method stub \t\t\t// show current frame after changing the playback position \t\t\t\t\t//playMedia(true);"], "parents_ss": ["f19f7097ed28aa50857f3968b0ead75d462e411f"], "id": "ash242186/VideoStreaming\u0000a703781d38b213b0a2311a16c4f31f78e501a3be\u0000src/com/example/steaming/MainActivity.java", "callsites_cs": "java.lang.Class.getSimpleName()#com.example.steaming.MainActivity.countTime(<unknown>)#com.example.steaming.MainActivity.playMedia(boolean)#java.lang.String.String()#<unknown>.getDuration()#com.example.steaming.MainActivity.countTime(<unknown>)#<unknown>.pause()#android.media.MediaPlayer.setLooping(boolean)#java.io.PrintStream.println(java.lang.String)#com.example.steaming.MainActivity.playMedia(boolean)#<unknown>.getCurrentPosition()#android.media.MediaPlayer.setOnSeekCompleteListener()#android.app.Activity.setRequestedOrientation(int)#android.media.MediaPlayer.setOnVideoSizeChangedListener()#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#android.widget.CompoundButton.setOnCheckedChangeListener(android.widget.CompoundButton.OnCheckedChangeListener)#com.example.steaming.MainActivity.countTime(int)#android.widget.TextView.setText(java.lang.String)#android.view.View.setOnClickListener()#<unknown>.start()#android.net.Uri.parse(java.lang.String)#java.lang.Object.getClass()#android.util.Log.d(java.lang.String, java.lang.String)#android.os.CountDownTimer.cancel()#.OnBufferingUpdateListener()#<unknown>.getCurrentPosition()#com.example.steaming.MainActivity.stopMedia()#android.app.Activity.findViewById(<unknown>)#<unknown>.getDuration()#com.example.steaming.MainActivity.playMedia(boolean)#android.widget.ProgressBar.setProgress(int)#com.example.steaming.MainActivity.playMedia(boolean)#android.widget.ToggleButton.setChecked(boolean)#android.util.Log.d(java.lang.String, java.lang.String)#java.io.PrintStream.println(java.lang.String)#java.lang.Class.getName()#<unknown>.pause()#.CountDownTimer(int, int)#android.app.Activity.findViewById(<unknown>)#android.widget.ProgressBar.setSecondaryProgress(int)#android.media.MediaPlayer.getVideoHeight()#android.util.Log.e(java.lang.String, java.lang.String)#android.app.Activity.findViewById(<unknown>)#com.example.steaming.MainActivity.stopMedia()#android.os.CountDownTimer.cancel()#<unknown>.setOnErrorListener(com.example.steaming.MainActivity)#android.widget.TextView.setText(java.lang.String)#<unknown>.requestFocus()#com.example.steaming.MainActivity.countTime(<unknown>)#.OnCheckedChangeListener()#android.widget.TextView.setText(<unknown>)#java.io.PrintStream.println(java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.stopPlayback()#<unknown>.changeVideoSize(int, int)#.OnClickListener()#android.media.MediaPlayer.isPlaying()#android.app.Activity.findViewById(<unknown>)#android.os.CountDownTimer.start()#android.media.MediaPlayer.setOnCompletionListener(null)#android.widget.TextView.setText(<unknown>)#android.os.CountDownTimer.cancel()#com.example.steaming.MainActivity.countTime(int)#java.io.PrintStream.println(java.lang.String)#.OnSeekCompleteListener()#android.app.Activity.setContentView(<unknown>)#java.lang.Object.getClass()#.OnVideoSizeChangedListener()#<unknown>.getCurrentPosition()#android.app.Activity.findViewById(<unknown>)#<unknown>.seekTo(int)#<unknown>.setVideoURI(android.net.Uri)#<unknown>.getCurrentPosition()#java.io.PrintStream.println(java.lang.String)#com.example.steaming.MainActivity.playMedia(boolean)#android.widget.ProgressBar.setProgress(int)#<unknown>.setKeepScreenOn(boolean)#android.widget.ProgressBar.setProgress(int)#java.io.PrintStream.println(java.lang.String)#<unknown>.setOnPreparedListener(com.example.steaming.MainActivity)#android.media.MediaPlayer.getVideoWidth()#android.media.MediaPlayer.setOnBufferingUpdateListener()", "callsites_t": ["java.lang.Class.getSimpleName() com.example.steaming.MainActivity.countTime(<unknown>) com.example.steaming.MainActivity.playMedia(boolean) java.lang.String.String() <unknown>.getDuration() com.example.steaming.MainActivity.countTime(<unknown>) <unknown>.pause() android.media.MediaPlayer.setLooping(boolean) java.io.PrintStream.println(java.lang.String) com.example.steaming.MainActivity.playMedia(boolean) <unknown>.getCurrentPosition() android.media.MediaPlayer.setOnSeekCompleteListener() android.app.Activity.setRequestedOrientation(int) android.media.MediaPlayer.setOnVideoSizeChangedListener() android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) android.widget.CompoundButton.setOnCheckedChangeListener(android.widget.CompoundButton.OnCheckedChangeListener) com.example.steaming.MainActivity.countTime(int) android.widget.TextView.setText(java.lang.String) android.view.View.setOnClickListener() <unknown>.start() android.net.Uri.parse(java.lang.String) java.lang.Object.getClass() android.util.Log.d(java.lang.String, java.lang.String) android.os.CountDownTimer.cancel() .OnBufferingUpdateListener() <unknown>.getCurrentPosition() com.example.steaming.MainActivity.stopMedia() android.app.Activity.findViewById(<unknown>) <unknown>.getDuration() com.example.steaming.MainActivity.playMedia(boolean) android.widget.ProgressBar.setProgress(int) com.example.steaming.MainActivity.playMedia(boolean) android.widget.ToggleButton.setChecked(boolean) android.util.Log.d(java.lang.String, java.lang.String) java.io.PrintStream.println(java.lang.String) java.lang.Class.getName() <unknown>.pause() .CountDownTimer(int, int) android.app.Activity.findViewById(<unknown>) android.widget.ProgressBar.setSecondaryProgress(int) android.media.MediaPlayer.getVideoHeight() android.util.Log.e(java.lang.String, java.lang.String) android.app.Activity.findViewById(<unknown>) com.example.steaming.MainActivity.stopMedia() android.os.CountDownTimer.cancel() <unknown>.setOnErrorListener(com.example.steaming.MainActivity) android.widget.TextView.setText(java.lang.String) <unknown>.requestFocus() com.example.steaming.MainActivity.countTime(<unknown>) .OnCheckedChangeListener() android.widget.TextView.setText(<unknown>) java.io.PrintStream.println(java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.stopPlayback() <unknown>.changeVideoSize(int, int) .OnClickListener() android.media.MediaPlayer.isPlaying() android.app.Activity.findViewById(<unknown>) android.os.CountDownTimer.start() android.media.MediaPlayer.setOnCompletionListener(null) android.widget.TextView.setText(<unknown>) android.os.CountDownTimer.cancel() com.example.steaming.MainActivity.countTime(int) java.io.PrintStream.println(java.lang.String) .OnSeekCompleteListener() android.app.Activity.setContentView(<unknown>) java.lang.Object.getClass() .OnVideoSizeChangedListener() <unknown>.getCurrentPosition() android.app.Activity.findViewById(<unknown>) <unknown>.seekTo(int) <unknown>.setVideoURI(android.net.Uri) <unknown>.getCurrentPosition() java.io.PrintStream.println(java.lang.String) com.example.steaming.MainActivity.playMedia(boolean) android.widget.ProgressBar.setProgress(int) <unknown>.setKeepScreenOn(boolean) android.widget.ProgressBar.setProgress(int) java.io.PrintStream.println(java.lang.String) <unknown>.setOnPreparedListener(com.example.steaming.MainActivity) android.media.MediaPlayer.getVideoWidth() android.media.MediaPlayer.setOnBufferingUpdateListener()"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener com.vinsol.expensetracker.utils.DisplayDate android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.StringProcessing com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayDate;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\nimport com.vinsol.expensetracker.utils.StringProcessing;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\tprivate Boolean isChanged = false;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\")) {\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry)) || mEditList.get(5).equals(getString(R.string.unknown))){\n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ****** ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio  ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\tisChanged = true;\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif(mRecordingHelper != null)\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\t\n\t\t\tif(intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\t\tIntent mIntent = new Intent(this, ShowTextActivity.class);\n\t\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t\tBundle tempBundle = new Bundle();\n\t\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\t\tmEditList = new ArrayList<String>();\n\t\t\t\tmEditList.addAll(listOnResult);\n\t\t\t\tmIntent.putExtra(\"textShowBundle\", tempBundle);\n\t\t\t\tsetResult(Activity.RESULT_CANCELED, mIntent);\n\t\t\t}\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, \"\");\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\n\t\t\n\t\t\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,mDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\t\t ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\t\n\t\t\n\t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tBundle mToHighLight = new Bundle();\n\t\t\tmToHighLight.putString(\"toHighLight\", _list.get(DatabaseAdapter.KEY_ID));\n\t\t\tintentExpenseListing.putExtras(mToHighLight);\n\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t} else {\n\t\t\t\n\t\t\tIntent mIntent = new Intent(this, ShowVoiceActivity.class);\n\t\t\tBundle tempBundle = new Bundle();\n\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\tlistOnResult.add(mEditList.get(0));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_TAG));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_AMOUNT));\n\t\t\tif(listOnResult.get(2) == null || listOnResult.get(2) == \"\"){\n\t\t\t\tlistOnResult.set(2, \"?\");\n\t\t\t}\n\t\t\t\n\t\t\tif (listOnResult.get(1) == null || listOnResult.get(1).equals(\"\") || listOnResult.get(1).equals(getString(R.string.unfinished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.finished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.unknown_entry))) {\n\t\t\t\tlistOnResult.set(1, mEditList.get(1));\n\t\t\t}\n\t\t\t\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n\t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDateDate(_list.get(DatabaseAdapter.KEY_DATE_TIME)));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(3));\n\t\t\t}\t\t\t\t\n\t\t\tif((!mEditList.get(1).equals(listOnResult.get(1))) || (!mEditList.get(2).equals(new StringProcessing().getStringDoubleDecimal(listOnResult.get(2)))) || isChanged ) {\n\t\t\t\tShowTextActivity.favID = null;\n\t\t\t\tHashMap<String, String> listForFav = new HashMap<String, String>();\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_FAVORITE, \"\");\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_ID, mEditList.get(0));\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.editDatabase(listForFav);\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t} else if(ShowVoiceActivity.favID == null) {\n\t\t\t\t\tlistOnResult.add(mEditList.get(4));\n\t\t\t\t}\n\t\t\t\telse { \n\t\t\t\t\tlistOnResult.add(ShowVoiceActivity.favID);\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(5));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n\t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(6));\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(7));\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList.addAll(listOnResult);\n\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\tmIntent.putExtra(\"voiceShowBundle\", tempBundle);\n\t\t\tsetResult(Activity.RESULT_OK, mIntent);\n\t\t}\n\t\tfinish();\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-13T11:33:09Z", "hash_sni": "7e2db56d342e2343722915119ebdd1fde2da2f33", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \tprivate void controlVoiceChronometer() {\n \t\ttext_voice_camera_time_details_chronometer.start();\n \t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n-\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n-\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n-\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n-\t\t\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n-\t\t\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n-\t\t\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t});\n+\t\t\t@Override\n+\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n+\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n+\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n+\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n+\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n+\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n \t}\n \n \tprivate void setGraphicsVoice() {\n@@ -371,6 +369,8 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n \t\t}\n \n+\t\t\n+\t\t\n \t\tif (!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)) {\n \t\t\ttry {\n \t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n@@ -421,6 +421,11 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\tif(listOnResult.get(2) == null || listOnResult.get(2) == \"\"){\n \t\t\t\tlistOnResult.set(2, \"?\");\n \t\t\t}\n+\t\t\t\n+\t\t\tif (listOnResult.get(1) == null || listOnResult.get(1).equals(\"\") || listOnResult.get(1).equals(getString(R.string.unfinished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.finished_voiceentry)) || listOnResult.get(1).equals(getString(R.string.unknown_entry))) {\n+\t\t\t\tlistOnResult.set(1, mEditList.get(1));\n+\t\t\t}\n+\t\t\t\n \t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n \t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n \t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay Bundle DatabaseAdapter DateHandler DateHelper DisplayDate DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper StringProcessing add addAll addFlags canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLocationDate getLocationDateDate getLong getPlayBackTime getRepeatCount getString getStringArrayList getStringDoubleDecimal getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put putExtra putExtras putString putStringArrayList saveEntry set setBase setClickListeners setContentView setFirstDayOfWeek setGraphicsVoice setOnChronometerTickListener setOnClickListener setResult setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim"], "_version_": 1526751476596080640, "subject_t": ["Removed todo bugs testing"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// ////// ******** Starts Recording each time activity starts ****** /////// \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items ********** ///////// \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// //// ******* Update database if user added additional info *******\t\t /////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t// //// ****** If audio recording started then stop recording audio  ***** /////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["4c263c85c19e7c3d163954d848a24b65df77ec02"], "id": "vinsol/expense-tracker\u00007e2db56d342e2343722915119ebdd1fde2da2f33\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#java.lang.String.equals(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.lang.String.equals(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#<unknown>.getLocationDateDate(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.content.Context.getString(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.os.Bundle.putString(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#<unknown>.getLocationDate(<unknown>, java.lang.String)#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.content.Context.getString(<unknown>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.Bundle()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#java.lang.String.equals(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setResult(int, android.content.Intent)#android.widget.TextView.getText()#android.content.Intent.putExtras(android.os.Bundle)#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.StringProcessing()#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#java.lang.String.equals(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.DisplayDate()#<unknown>.isAudioPlaying()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.widget.TextView.getText()#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.view.KeyEvent.getRepeatCount()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.content.Intent.addFlags(int)#android.os.Bundle.Bundle()#android.app.Activity.setResult(int, android.content.Intent)#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#<unknown>.isRecording()#java.lang.String.equals(<unknown>)#<unknown>.getStringDoubleDecimal(java.lang.String)#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) java.lang.String.equals(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.add(<unknown>) java.lang.String.equals(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) <unknown>.getLocationDateDate(<unknown>) android.app.Activity.findViewById(<unknown>) android.content.Context.getString(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.os.Bundle.putString(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.util.ArrayList<java.lang.String>.get(int) java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() <unknown>.getLocationDate(<unknown>, java.lang.String) android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) java.lang.String.equals(<unknown>) android.widget.TextView.setText(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.content.Context.getString(<unknown>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.Bundle() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) java.lang.String.equals(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setResult(int, android.content.Intent) android.widget.TextView.getText() android.content.Intent.putExtras(android.os.Bundle) <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.StringProcessing() android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.util.ArrayList<java.lang.String>.get(int) java.lang.String.equals(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.DisplayDate() <unknown>.isAudioPlaying() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() java.util.ArrayList<java.lang.String>.add(<unknown>) android.widget.TextView.getText() <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.add(java.lang.String) android.view.KeyEvent.getRepeatCount() java.util.ArrayList<java.lang.String>.add(<unknown>) android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.ArrayList<java.lang.String>.ArrayList, String() android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.content.Intent.addFlags(int) android.os.Bundle.Bundle() android.app.Activity.setResult(int, android.content.Intent) android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) <unknown>.isRecording() java.lang.String.equals(<unknown>) <unknown>.getStringDoubleDecimal(java.lang.String) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.util.Log android.app.Activity java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate static final int EDIT_RESULT = 35;\n\tprivate RelativeLayout dateBarRelativeLayout;\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprotected static String favID = null;\n\tprivate FavoriteHelper mFavoriteHelper;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\t\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\t\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t}\n\t\t\t\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\n\t\t\tif(mShowList.get(7) != null)\n\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\n\t\t\tif(mShowList.get(6) != null)\n\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\telse {\n\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tmFavoriteHelper = new FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n\n\t\t\tmShowList.set(4, favID);\n\t\t\tintentExtras.remove(\"mDisplayList\");\n\t\t\tintentExtras.putStringArrayList(\"mDisplayList\", mShowList);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivityForResult(editIntent, EDIT_RESULT);\n//\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t\t\n\t\tsuper.onActivityResult(requestCode, resultCode, data);\n\t\tif (EDIT_RESULT == requestCode) {\n\t\t\tif(Activity.RESULT_OK == resultCode) {\n\t\t\t\t\n\t\t\t\tintentExtras = data.getBundleExtra(\"voiceShowBundle\");\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tmShowList = new ArrayList<String>();\n\t\t\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t\t\tLog.v(\"mShowListOnResult\", mShowList.toString());\n\t\t\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\t\t\tString amount = mShowList.get(2);\n\t\t\t\t\tString tag = mShowList.get(1);\n\t\t\t\t\t\n\t\t\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(7) != null)\n\t\t\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(6) != null)\n\t\t\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\t\t\telse {\n\t\t\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\t\tupdateUI();\n\t\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmFavoriteHelper.setShowList(mShowList);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-12T08:14:59Z", "hash_sni": "3bb5b9d334500d8212f323af62222bef65b54189", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" \tprivate ArrayList<String> mShowList;\n \tprivate DatabaseAdapter mDatabaseAdapter;\n \tprotected static String favID = null;\n+\tprivate FavoriteHelper mFavoriteHelper;\n \n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n@@ -119,7 +120,7 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n \t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n \t\t\t\t}\n-\t\t\t\tnew FavoriteHelper(this, mShowList);\n+\t\t\t\tmFavoriteHelper = new FavoriteHelper(this, mShowList);\n \t\t\t}\n \t\t} else {\n \t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n@@ -324,7 +325,7 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n \t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tnew FavoriteHelper(this, mShowList);\n+\t\t\t\t\t\tmFavoriteHelper.setShowList(mShowList);\n \t\t\t\t\t}\n \t\t\t\t} else {\n \t\t\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler ShowLocationHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getDrawable getExternalStorageState getId getInstance getIntent getPlayBackTime getResources getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putBoolean putExtra putStringArrayList remove set setBackgroundDrawable setContentView setFirstDayOfWeek setOnClickListener setShowList setText setTimeInMillis setVisibility show start startActivityForResult startPlayBack stop stopPlayBack toString updateUI v"], "_version_": 1526755458002452480, "subject_t": ["Handled Favorite Properly"], "comments_t": ["\t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** //\t\t\tfinish(); \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ****** If audio recording started then stop recording audio ***** /////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["720a2b6ead57465809cccb4fc33aecafdb132892"], "id": "vinsol/expense-tracker\u00003bb5b9d334500d8212f323af62222bef65b54189\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "android.os.Bundle.remove(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.startActivityForResult(android.content.Intent, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.io.File.canRead()#android.widget.Toast.show()#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getPlayBackTime()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#<unknown>.open()#android.content.Context.getString(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#java.util.AbstractCollection<java.lang.String>.toString()#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.Toast.show()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.view.View.setVisibility(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#java.io.File.File(java.lang.String)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.view.ContextThemeWrapper.getResources()#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.content.Context.getString(<unknown>)#android.util.Log.v(java.lang.String, java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.setShowList(java.util.ArrayList<java.lang.String>)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#java.lang.String.contains(java.lang.String)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#java.lang.String.equals(<unknown>)#android.os.Environment.getExternalStorageState()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#java.lang.Long.toString(java.lang.Long)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#<unknown>.getDisplayTime(<unknown>)#android.os.CountDownTimer.cancel()#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setBackgroundDrawable(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.util.ArrayList<java.lang.String>.ArrayList, String()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.Toast.show()#java.util.Calendar.setFirstDayOfWeek(int)#java.util.Calendar.setTimeInMillis(long)#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.res.Resources.getDrawable(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#<unknown>.DisplayTime()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.os.Bundle.putBoolean(java.lang.String, boolean)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.getInstance()#android.view.View.setVisibility(int)", "callsites_t": ["android.os.Bundle.remove(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.startActivityForResult(android.content.Intent, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.io.File.canRead() android.widget.Toast.show() java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getPlayBackTime() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) <unknown>.open() android.content.Context.getString(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) java.util.AbstractCollection<java.lang.String>.toString() <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.Toast.show() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.widget.TextView.setText(java.lang.String) android.view.View.setVisibility(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) java.io.File.File(java.lang.String) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.view.ContextThemeWrapper.getResources() android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.content.Context.getString(<unknown>) android.util.Log.v(java.lang.String, java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.setShowList(java.util.ArrayList<java.lang.String>) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) java.lang.String.contains(java.lang.String) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) java.lang.String.equals(<unknown>) android.os.Environment.getExternalStorageState() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() java.io.File.File(java.lang.String) android.widget.Toast.show() java.lang.Long.toString(java.lang.Long) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() <unknown>.getDisplayTime(<unknown>) android.os.CountDownTimer.cancel() java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setBackgroundDrawable(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.util.ArrayList<java.lang.String>.ArrayList, String() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.Toast.show() java.util.Calendar.setFirstDayOfWeek(int) java.util.Calendar.setTimeInMillis(long) java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.content.res.Resources.getDrawable(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) <unknown>.getPlayBackTime() android.app.Activity.finish() <unknown>.DisplayTime() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) android.content.Intent.getBundleExtra(java.lang.String) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.os.Bundle.putBoolean(java.lang.String, boolean) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) java.util.Calendar.getInstance() android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener com.vinsol.expensetracker.utils.DisplayDate android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayDate;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\tprivate Boolean isChanged = false;\n\t\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\")) {\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ****** ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio  ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\tisChanged = true;\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif(mRecordingHelper != null)\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,mDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\t\t ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\t\n\t\t\n\t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t} else {\n\t\t\t\n\t\t\tIntent mIntent = new Intent(this, ShowVoiceActivity.class);\n\t\t\tBundle tempBundle = new Bundle();\n\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\tlistOnResult.add(mEditList.get(0));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_TAG));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_AMOUNT));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n\t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDateDate(_list.get(DatabaseAdapter.KEY_DATE_TIME)));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(3));\n\t\t\t}\t\t\t\t\n\t\t\tif((mEditList.get(1) != listOnResult.get(1)) || (mEditList.get(2) != listOnResult.get(2)) || isChanged ) {\n\t\t\t\tShowTextActivity.favID = null;\n\t\t\t\tHashMap<String, String> listForFav = new HashMap<String, String>();\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_FAVORITE, \"\");\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_ID, mEditList.get(0));\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.editDatabase(listForFav);\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t} else if(ShowVoiceActivity.favID == null) {\n\t\t\t\t\tlistOnResult.add(mEditList.get(4));\n\t\t\t\t}\n\t\t\t\telse { \n\t\t\t\t\tlistOnResult.add(ShowVoiceActivity.favID);\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(5));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n\t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(6));\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(7));\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList.addAll(listOnResult);\n\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\tmIntent.putExtra(\"voiceShowBundle\", tempBundle);\n\t\t\tsetResult(Activity.RESULT_OK, mIntent);\n\t\t}\n\t\tfinish();\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-12T08:14:59Z", "hash_sni": "3bb5b9d334500d8212f323af62222bef65b54189", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \tprivate ArrayList<String> mEditList;\n \tprivate boolean setLocation = false; \n \tprivate boolean setUnknown = false;\n-\n+\tprivate Boolean isChanged = false;\n+\t\n \t\n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n@@ -93,7 +94,6 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t\t}\n \t\t\t}\n \t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n-\t\t\t\t//TODO \n \t\t\t\tsetUnknown = true;\n \t\t\t}\n \t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n@@ -110,8 +110,7 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\tnew DateHandler(this);\n \t\t}\n \n-\t\t// ////// ******** Starts Recording each time activity starts ******\n-\t\t// ///////\n+\t\t// ////// ******** Starts Recording each time activity starts ****** ///////\n \t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n \t\t\tsetGraphicsVoice();\n \n@@ -151,11 +150,9 @@ public class Voice extends Activity implements OnClickListener {\n \tprotected void onPause() {\n \n \t\t// //// ***** Check whether audio is recording or not ******* ///////\n-\t\t// //// ****** If audio recording started then stop recording audio\n-\t\t// ***** ///////\n+\t\t// //// ****** If audio recording started then stop recording audio  ***** ///////\n \t\ttry {\n-\t\t\tif (android.os.Environment.getExternalStorageState().equals(\n-\t\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n+\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n \t\t\t\tif (mRecordingHelper.isRecording()) {\n \t\t\t\t\tmRecordingHelper.stopRecording();\n \t\t\t\t}\n@@ -273,11 +270,11 @@ public class Voice extends Activity implements OnClickListener {\n \n \t\t// // ***** if rerecord button pressed ****** //////\n \t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n+\t\t\tisChanged = true;\n \t\t\ttry {\n \t\t\t\tcountDownTimer.cancel();\n \t\t\t} catch (NullPointerException e) {\n \t\t\t}\n-\t\t\t;\n \n \t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n \t\t\t// *******//////\n@@ -413,7 +410,21 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t} else {\n \t\t\t\tlistOnResult.add(mEditList.get(3));\n \t\t\t}\t\t\t\t\n-\t\t\tlistOnResult.add(mEditList.get(4));\n+\t\t\tif((mEditList.get(1) != listOnResult.get(1)) || (mEditList.get(2) != listOnResult.get(2)) || isChanged ) {\n+\t\t\t\tShowTextActivity.favID = null;\n+\t\t\t\tHashMap<String, String> listForFav = new HashMap<String, String>();\n+\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_FAVORITE, \"\");\n+\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_ID, mEditList.get(0));\n+\t\t\t\tmDatabaseAdapter.open();\n+\t\t\t\tmDatabaseAdapter.editDatabase(listForFav);\n+\t\t\t\tmDatabaseAdapter.close();\n+\t\t\t\tlistOnResult.add(\"\");\n+\t\t\t} else if(ShowVoiceActivity.favID == null) {\n+\t\t\t\t\tlistOnResult.add(mEditList.get(4));\n+\t\t\t\t}\n+\t\t\t\telse { \n+\t\t\t\t\tlistOnResult.add(ShowVoiceActivity.favID);\n+\t\t\t}\n \t\t\tlistOnResult.add(mEditList.get(5));\n \t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n \t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));\n@@ -421,7 +432,6 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t\tlistOnResult.add(mEditList.get(6));\n \t\t\t}\n \t\t\tlistOnResult.add(mEditList.get(7));\n-\t\t\tlistOnResult.add(mEditList.get(8));\n \t\t\tmEditList = new ArrayList<String>();\n \t\t\tmEditList.addAll(listOnResult);\n \t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay Bundle DatabaseAdapter DateHandler DateHelper DisplayDate DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper add addAll addFlags canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLocationDate getLocationDateDate getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put putExtra putStringArrayList saveEntry setBase setClickListeners setContentView setFirstDayOfWeek setGraphicsVoice setOnChronometerTickListener setOnClickListener setResult setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim"], "_version_": 1526755458021326848, "subject_t": ["Handled Favorite Properly"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// ////// ******** Starts Recording each time activity starts ****** /////// \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items ********** ///////// \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// //// ******* Update database if user added additional info *******\t\t /////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t// //// ****** If audio recording started then stop recording audio  ***** /////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["720a2b6ead57465809cccb4fc33aecafdb132892"], "id": "vinsol/expense-tracker\u00003bb5b9d334500d8212f323af62222bef65b54189\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#<unknown>.getLocationDateDate(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#<unknown>.getLocationDate(<unknown>, java.lang.String)#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.Bundle()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.DisplayDate()#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Intent.addFlags(int)#android.os.SystemClock.elapsedRealtime()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.widget.TextView.getText()#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.view.KeyEvent.getRepeatCount()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.app.Activity.setResult(int, android.content.Intent)#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#<unknown>.isRecording()#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) <unknown>.getLocationDateDate(<unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.util.ArrayList<java.lang.String>.get(int) java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() <unknown>.getLocationDate(<unknown>, java.lang.String) android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.Bundle() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.DisplayDate() <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Intent.addFlags(int) android.os.SystemClock.elapsedRealtime() java.util.ArrayList<java.lang.String>.add(<unknown>) android.widget.TextView.getText() <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.add(java.lang.String) android.view.KeyEvent.getRepeatCount() java.util.ArrayList<java.lang.String>.add(<unknown>) android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) java.util.ArrayList<java.lang.String>.get(int) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.app.Activity.setResult(int, android.content.Intent) android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) <unknown>.isRecording() android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Daniel Passos", "repo_sni": "aerogear/aerogear-android-cookbook", "imports_t": ["android.os.CountDownTimer android.widget.ProgressBar android.net.Uri org.jboss.aerogear.security.otp.Totp android.app.Activity android.os.Bundle android.widget.TextView"], "email_sni": "daniel@passos.me", "contents_t": ["/**\n * JBoss, Home of Professional Open Source\n * Copyright Red Hat, Inc., and individual contributors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jboss.aerogear.android.cookbook.twofactor;\n\nimport android.app.Activity;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport org.jboss.aerogear.security.otp.Totp;\n\npublic class OTPDisplay extends Activity {\n\n    private static final int COUNTDOWN_DURATION = 30000;\n    private static final int COUNTDOWN_STEP = 100; // only 100 ms for smoother action\n\n    private TextView totpDisplay;\n    private TextView nameDisplay;\n    private ProgressBar progressBar;\n\n    private String name = \"\";\n    private String secret;\n\n    private Totp totp;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.display);\n\n        parseOtpPath();\n\n        findComponents();\n\n        updateOTP();\n\n        progressBar.setMax(COUNTDOWN_DURATION / COUNTDOWN_STEP);\n\n        new CountDownTimer(COUNTDOWN_DURATION, COUNTDOWN_STEP) {\n            @Override\n            public void onTick(long millisUntilFinished) {\n                progressBar.setProgress((int) (millisUntilFinished / COUNTDOWN_STEP));\n            }\n\n            @Override\n            public void onFinish() {\n                updateOTP();\n                this.start();\n            }\n        }.start();\n\n    }\n\n    private void parseOtpPath() {\n        String otpauth = getIntent().getStringExtra(\"otpauth\");\n        Uri otpUri = Uri.parse(otpauth);\n\n        name = otpUri.getQueryParameter(\"\");\n        secret = otpUri.getQueryParameter(\"secret\");\n\n        totp = new Totp(secret);\n    }\n\n    private void findComponents() {\n        totpDisplay = (TextView) findViewById(R.id.totp);\n        nameDisplay = (TextView) findViewById(R.id.name);\n        progressBar = (ProgressBar) findViewById(R.id.progress);\n    }\n\n    private void updateOTP() {\n        nameDisplay.setText(name);\n        totpDisplay.setText(totp.now());\n    }\n\n}\n"], "body_t": ["<empty>"], "date_tdt": "2015-03-13T14:48:47Z", "hash_sni": "c1961458857a04d20d0ea938f8992a88e4d76ad9", "name_sni": "Two-Factor/app/src/main/java/org/jboss/aerogear/android/cookbook/twofactor/OTPDisplay.java", "patch_t": ["+/**\n+ * JBoss, Home of Professional Open Source\n+ * Copyright Red Hat, Inc., and individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * \thttp://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.aerogear.android.cookbook.twofactor;\n+\n+import android.app.Activity;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.os.CountDownTimer;\n+import android.widget.ProgressBar;\n+import android.widget.TextView;\n+import org.jboss.aerogear.security.otp.Totp;\n+\n+public class OTPDisplay extends Activity {\n+\n+    private static final int COUNTDOWN_DURATION = 30000;\n+    private static final int COUNTDOWN_STEP = 100; // only 100 ms for smoother action\n+\n+    private TextView totpDisplay;\n+    private TextView nameDisplay;\n+    private ProgressBar progressBar;\n+\n+    private String name = \"\";\n+    private String secret;\n+\n+    private Totp totp;\n+\n+    @Override\n+    protected void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setContentView(R.layout.display);\n+\n+        parseOtpPath();\n+\n+        findComponents();\n+\n+        updateOTP();\n+\n+        progressBar.setMax(COUNTDOWN_DURATION / COUNTDOWN_STEP);\n+\n+        new CountDownTimer(COUNTDOWN_DURATION, COUNTDOWN_STEP) {\n+            @Override\n+            public void onTick(long millisUntilFinished) {\n+                progressBar.setProgress((int) (millisUntilFinished / COUNTDOWN_STEP));\n+            }\n+\n+            @Override\n+            public void onFinish() {\n+                updateOTP();\n+                this.start();\n+            }\n+        }.start();\n+\n+    }\n+\n+    private void parseOtpPath() {\n+        String otpauth = getIntent().getStringExtra(\"otpauth\");\n+        Uri otpUri = Uri.parse(otpauth);\n+\n+        name = otpUri.getQueryParameter(\"\");\n+        secret = otpUri.getQueryParameter(\"secret\");\n+\n+        totp = new Totp(secret);\n+    }\n+\n+    private void findComponents() {\n+        totpDisplay = (TextView) findViewById(R.id.totp);\n+        nameDisplay = (TextView) findViewById(R.id.name);\n+        progressBar = (ProgressBar) findViewById(R.id.progress);\n+    }\n+\n+    private void updateOTP() {\n+        nameDisplay.setText(name);\n+        totpDisplay.setText(totp.now());\n+    }\n+\n+}"], "score": 1.0, "methods_t": ["CountDownTimer Totp findComponents findViewById getIntent getQueryParameter getStringExtra now parse parseOtpPath setContentView setMax setProgress setText start updateOTP"], "_version_": 1526755783172161536, "subject_t": ["Move otp-demo from aerogear-otp-android-demo"], "comments_t": ["    private static final int COUNTDOWN_STEP = 100; // only 100 ms for smoother action"], "parents_ss": ["6a591f5ea1cbc81ff53b438af2eaae9c210ed17d"], "id": "aerogear/aerogear-android-cookbook\u0000c1961458857a04d20d0ea938f8992a88e4d76ad9\u0000Two-Factor/app/src/main/java/org/jboss/aerogear/android/cookbook/twofactor/OTPDisplay.java", "callsites_cs": "android.app.Activity.findViewById(<unknown>)#org.jboss.aerogear.android.cookbook.twofactor.OTPDisplay.parseOtpPath()#org.jboss.aerogear.android.cookbook.twofactor.OTPDisplay.updateOTP()#android.content.Intent.getStringExtra(java.lang.String)#org.jboss.aerogear.android.cookbook.twofactor.OTPDisplay.findComponents()#android.widget.ProgressBar.setProgress(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.getIntent()#android.net.Uri.getQueryParameter(java.lang.String)#android.os.CountDownTimer.start()#.CountDownTimer(int, int)#<unknown>.now()#android.widget.TextView.setText(<unknown>)#android.os.CountDownTimer.start()#android.app.Activity.setContentView(<unknown>)#android.net.Uri.getQueryParameter(java.lang.String)#org.jboss.aerogear.android.cookbook.twofactor.OTPDisplay.updateOTP()#android.app.Activity.findViewById(<unknown>)#android.widget.ProgressBar.setMax(int)#android.net.Uri.parse(java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.Totp(java.lang.String)", "callsites_t": ["android.app.Activity.findViewById(<unknown>) org.jboss.aerogear.android.cookbook.twofactor.OTPDisplay.parseOtpPath() org.jboss.aerogear.android.cookbook.twofactor.OTPDisplay.updateOTP() android.content.Intent.getStringExtra(java.lang.String) org.jboss.aerogear.android.cookbook.twofactor.OTPDisplay.findComponents() android.widget.ProgressBar.setProgress(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.getIntent() android.net.Uri.getQueryParameter(java.lang.String) android.os.CountDownTimer.start() .CountDownTimer(int, int) <unknown>.now() android.widget.TextView.setText(<unknown>) android.os.CountDownTimer.start() android.app.Activity.setContentView(<unknown>) android.net.Uri.getQueryParameter(java.lang.String) org.jboss.aerogear.android.cookbook.twofactor.OTPDisplay.updateOTP() android.app.Activity.findViewById(<unknown>) android.widget.ProgressBar.setMax(int) android.net.Uri.parse(java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.Totp(java.lang.String)"]}, {"user_sni": "pedant", "repo_sni": "pedant/sweet-alert-dialog", "imports_t": ["android.os.CountDownTimer cn.pedant.SweetAlert.SweetAlertDialog android.os.Bundle android.view.View android.app.Activity"], "email_sni": "yanyuetian@gmail.com", "contents_t": ["package cn.pedant.SweetAlert.sample;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.View;\n\nimport cn.pedant.SweetAlert.SweetAlertDialog;\n\npublic class SampleActivity extends Activity implements View.OnClickListener {\n\n    private int i = -1;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.sample_activity);\n        findViewById(R.id.basic_test).setOnClickListener(this);\n        findViewById(R.id.under_text_test).setOnClickListener(this);\n        findViewById(R.id.error_text_test).setOnClickListener(this);\n        findViewById(R.id.success_text_test).setOnClickListener(this);\n        findViewById(R.id.warning_confirm_test).setOnClickListener(this);\n        findViewById(R.id.warning_cancel_test).setOnClickListener(this);\n        findViewById(R.id.custom_img_test).setOnClickListener(this);\n        findViewById(R.id.progress_dialog).setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.basic_test:\n                // default title \"Here's a message!\"\n                SweetAlertDialog sd = new SweetAlertDialog(this);\n                sd.setCancelable(true);\n                sd.setCanceledOnTouchOutside(true);\n                sd.show();\n                break;\n            case R.id.under_text_test:\n                new SweetAlertDialog(this)\n                        .setContentText(\"It's pretty, isn't it?\")\n                        .show();\n                break;\n            case R.id.error_text_test:\n                new SweetAlertDialog(this, SweetAlertDialog.ERROR_TYPE)\n                        .setTitleText(\"Oops...\")\n                        .setContentText(\"Something went wrong!\")\n                        .show();\n                break;\n            case R.id.success_text_test:\n                new SweetAlertDialog(this, SweetAlertDialog.SUCCESS_TYPE)\n                        .setTitleText(\"Good job!\")\n                        .setContentText(\"You clicked the button!\")\n                        .show();\n                break;\n            case R.id.warning_confirm_test:\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\n                        .setTitleText(\"Are you sure?\")\n                        .setContentText(\"Won't be able to recover this file!\")\n                        .setConfirmText(\"Yes,delete it!\")\n                        .setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {\n                        @Override\n                        public void onClick(SweetAlertDialog sDialog) {\n                            // reuse previous dialog instance\n                            sDialog.setTitleText(\"Deleted!\")\n                                    .setContentText(\"Your imaginary file has been deleted!\")\n                                    .setConfirmText(\"OK\")\n                                    .setConfirmClickListener(null)\n                                    .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);\n                        }\n                        })\n                        .show();\n                break;\n            case R.id.warning_cancel_test:\n                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)\n                        .setTitleText(\"Are you sure?\")\n                        .setContentText(\"Won't be able to recover this file!\")\n                        .setCancelText(\"No,cancel plx!\")\n                        .setConfirmText(\"Yes,delete it!\")\n                        .showCancelButton(true)\n                        .setCancelClickListener(new SweetAlertDialog.OnSweetClickListener() {\n                            @Override\n                            public void onClick(SweetAlertDialog sDialog) {\n                                // reuse previous dialog instance, keep widget user state, reset them if you need\n                                sDialog.setTitleText(\"Cancelled!\")\n                                        .setContentText(\"Your imaginary file is safe :)\")\n                                        .setConfirmText(\"OK\")\n                                        .showCancelButton(false)\n                                        .setCancelClickListener(null)\n                                        .setConfirmClickListener(null)\n                                        .changeAlertType(SweetAlertDialog.ERROR_TYPE);\n\n                                // or you can new a SweetAlertDialog to show\n                               /* sDialog.dismiss();\n                                new SweetAlertDialog(SampleActivity.this, SweetAlertDialog.ERROR_TYPE)\n                                        .setTitleText(\"Cancelled!\")\n                                        .setContentText(\"Your imaginary file is safe :)\")\n                                        .setConfirmText(\"OK\")\n                                        .show();*/\n                            }\n                        })\n                        .setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {\n                            @Override\n                            public void onClick(SweetAlertDialog sDialog) {\n                                sDialog.setTitleText(\"Deleted!\")\n                                        .setContentText(\"Your imaginary file has been deleted!\")\n                                        .setConfirmText(\"OK\")\n                                        .showCancelButton(false)\n                                        .setCancelClickListener(null)\n                                        .setConfirmClickListener(null)\n                                        .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);\n                            }\n                        })\n                        .show();\n                break;\n            case R.id.custom_img_test:\n                new SweetAlertDialog(this, SweetAlertDialog.CUSTOM_IMAGE_TYPE)\n                        .setTitleText(\"Sweet!\")\n                        .setContentText(\"Here's a custom image.\")\n                        .setCustomImage(R.drawable.custom_img)\n                        .show();\n                break;\n            case R.id.progress_dialog:\n                final SweetAlertDialog pDialog = new SweetAlertDialog(this, SweetAlertDialog.PROGRESS_TYPE)\n                        .setTitleText(\"Loading\");\n                pDialog.show();\n                pDialog.setCancelable(false);\n                new CountDownTimer(800 * 7, 800) {\n                    public void onTick(long millisUntilFinished) {\n                        // you can change the progress bar color by ProgressHelper every 800 millis\n                        i++;\n                        switch (i){\n                            case 0:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.blue_btn_bg_color));\n                                break;\n                            case 1:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_deep_teal_50));\n                                break;\n                            case 2:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.success_stroke_color));\n                                break;\n                            case 3:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_deep_teal_20));\n                                break;\n                            case 4:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.material_blue_grey_80));\n                                break;\n                            case 5:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.warning_stroke_color));\n                                break;\n                            case 6:\n                                pDialog.getProgressHelper().setBarColor(getResources().getColor(R.color.success_stroke_color));\n                                break;\n                        }\n                    }\n\n                    public void onFinish() {\n                        i = -1;\n                        pDialog.setTitleText(\"Success!\")\n                                .setConfirmText(\"OK\")\n                                .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);\n                    }\n                }.start();\n                break;\n        }\n    }\n}\n"], "body_t": ["<empty>"], "date_tdt": "2014-12-08T06:21:27Z", "hash_sni": "3eb5d609c2366d4c0fb0695a65eea2bf56492a40", "name_sni": "sample/src/main/java/cn/pedant/SweetAlert/sample/SampleActivity.java", "patch_t": ["                 break;\n             case R.id.progress_dialog:\n                 final SweetAlertDialog pDialog = new SweetAlertDialog(this, SweetAlertDialog.PROGRESS_TYPE)\n-                        .setTitleText(\"loading...\");\n+                        .setTitleText(\"Loading\");\n                 pDialog.show();\n                 pDialog.setCancelable(false);\n                 new CountDownTimer(800 * 7, 800) {"], "score": 1.0, "methods_t": ["CountDownTimer SweetAlertDialog SweetAlertDialog.OnSweetClickListener changeAlertType findViewById getColor getId getProgressHelper getResources setBarColor setCancelClickListener setCancelText setCancelable setCanceledOnTouchOutside setConfirmClickListener setConfirmText setContentText setContentView setCustomImage setOnClickListener setTitleText show showCancelButton start"], "_version_": 1526755724330270720, "subject_t": ["adjust the default value of progress circle radius. update progress shot"], "comments_t": ["                                // reuse previous dialog instance, keep widget user state, reset them if you need /* sDialog.dismiss();\nnew SweetAlertDialog(SampleActivity.this, SweetAlertDialog.ERROR_TYPE)\n.setTitleText(\"Cancelled!\")\n.setContentText(\"Your imaginary file is safe :)\")\n.setConfirmText(\"OK\")\n.show();*/\n                         // you can change the progress bar color by ProgressHelper every 800 millis                                 // or you can new a SweetAlertDialog to show                 // default title \"Here's a message!\"                             // reuse previous dialog instance"], "parents_ss": ["b82153382557920efd1a0df73860f2474598b43a"], "id": "pedant/sweet-alert-dialog\u00003eb5d609c2366d4c0fb0695a65eea2bf56492a40\u0000sample/src/main/java/cn/pedant/SweetAlert/sample/SampleActivity.java", "callsites_cs": "<unknown>.setConfirmClickListener(null)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#<unknown>.setTitleText(java.lang.String)#<unknown>.setBarColor(<unknown>)#<unknown>.show()#<unknown>.show()#<unknown>.setConfirmClickListener()#<unknown>.setTitleText(java.lang.String)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setBarColor(<unknown>)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setTitleText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.setTitleText(java.lang.String)#android.content.res.Resources.getColor(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.setConfirmText(java.lang.String)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#android.content.res.Resources.getColor(<unknown>)#<unknown>.setBarColor(<unknown>)#<unknown>.setConfirmText(java.lang.String)#<unknown>.setConfirmText(java.lang.String)#<unknown>.show()#<unknown>.SweetAlertDialog.OnSweetClickListener()#<unknown>.showCancelButton(boolean)#<unknown>.setTitleText(java.lang.String)#<unknown>.setBarColor(<unknown>)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#android.app.Activity.findViewById(<unknown>)#<unknown>.showCancelButton(boolean)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#.CountDownTimer(int, int)#android.view.ContextThemeWrapper.getResources()#android.content.res.Resources.getColor(<unknown>)#<unknown>.showCancelButton(boolean)#android.content.res.Resources.getColor(<unknown>)#<unknown>.setConfirmClickListener(null)#<unknown>.setContentText(java.lang.String)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.changeAlertType(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.show()#<unknown>.setConfirmText(java.lang.String)#<unknown>.setCancelClickListener(null)#<unknown>.setConfirmText(java.lang.String)#<unknown>.setContentText(java.lang.String)#<unknown>.show()#<unknown>.setCustomImage(<unknown>)#android.content.res.Resources.getColor(<unknown>)#<unknown>.setContentText(java.lang.String)#<unknown>.setContentText(java.lang.String)#<unknown>.changeAlertType(<unknown>)#<unknown>.setConfirmClickListener()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.setCanceledOnTouchOutside(boolean)#<unknown>.setBarColor(<unknown>)#<unknown>.setTitleText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#<unknown>.setBarColor(<unknown>)#<unknown>.show()#android.app.Activity.findViewById(<unknown>)#<unknown>.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setCancelable(boolean)#<unknown>.show()#<unknown>.setCancelClickListener(null)#android.app.Activity.findViewById(<unknown>)#java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>)#<unknown>.show()#<unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity)#<unknown>.setTitleText(java.lang.String)#<unknown>.setCancelable(boolean)#<unknown>.setTitleText(java.lang.String)#<unknown>.changeAlertType(<unknown>)#<unknown>.setCancelClickListener()#<unknown>.setContentText(java.lang.String)#<unknown>.setCancelText(java.lang.String)#<unknown>.changeAlertType(<unknown>)#android.content.res.Resources.getColor(<unknown>)#<unknown>.getProgressHelper()#android.app.Activity.setContentView(<unknown>)#<unknown>.setConfirmClickListener(null)#android.os.CountDownTimer.start()", "callsites_t": ["<unknown>.setConfirmClickListener(null) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) <unknown>.setTitleText(java.lang.String) <unknown>.setBarColor(<unknown>) <unknown>.show() <unknown>.show() <unknown>.setConfirmClickListener() <unknown>.setTitleText(java.lang.String) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setBarColor(<unknown>) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setTitleText(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.setTitleText(java.lang.String) android.content.res.Resources.getColor(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.setConfirmText(java.lang.String) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) android.content.res.Resources.getColor(<unknown>) <unknown>.setBarColor(<unknown>) <unknown>.setConfirmText(java.lang.String) <unknown>.setConfirmText(java.lang.String) <unknown>.show() <unknown>.SweetAlertDialog.OnSweetClickListener() <unknown>.showCancelButton(boolean) <unknown>.setTitleText(java.lang.String) <unknown>.setBarColor(<unknown>) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) android.app.Activity.findViewById(<unknown>) <unknown>.showCancelButton(boolean) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) .CountDownTimer(int, int) android.view.ContextThemeWrapper.getResources() android.content.res.Resources.getColor(<unknown>) <unknown>.showCancelButton(boolean) android.content.res.Resources.getColor(<unknown>) <unknown>.setConfirmClickListener(null) <unknown>.setContentText(java.lang.String) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.changeAlertType(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.show() <unknown>.setConfirmText(java.lang.String) <unknown>.setCancelClickListener(null) <unknown>.setConfirmText(java.lang.String) <unknown>.setContentText(java.lang.String) <unknown>.show() <unknown>.setCustomImage(<unknown>) android.content.res.Resources.getColor(<unknown>) <unknown>.setContentText(java.lang.String) <unknown>.setContentText(java.lang.String) <unknown>.changeAlertType(<unknown>) <unknown>.setConfirmClickListener() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.setCanceledOnTouchOutside(boolean) <unknown>.setBarColor(<unknown>) <unknown>.setTitleText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.view.View.getId() java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) <unknown>.setBarColor(<unknown>) <unknown>.show() android.app.Activity.findViewById(<unknown>) <unknown>.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setCancelable(boolean) <unknown>.show() <unknown>.setCancelClickListener(null) android.app.Activity.findViewById(<unknown>) java.lang.Object.SweetAlertDialog(cn.pedant.SweetAlert.sample.SampleActivity, <unknown>) <unknown>.show() <unknown>.setOnClickListener(cn.pedant.SweetAlert.sample.SampleActivity) <unknown>.setTitleText(java.lang.String) <unknown>.setCancelable(boolean) <unknown>.setTitleText(java.lang.String) <unknown>.changeAlertType(<unknown>) <unknown>.setCancelClickListener() <unknown>.setContentText(java.lang.String) <unknown>.setCancelText(java.lang.String) <unknown>.changeAlertType(<unknown>) android.content.res.Resources.getColor(<unknown>) <unknown>.getProgressHelper() android.app.Activity.setContentView(<unknown>) <unknown>.setConfirmClickListener(null) android.os.CountDownTimer.start()"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.view.Window com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class Voice extends Activity implements OnClickListener{\n\t\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\t\n\t\t///////   ****** No Title Bar   ********* /////////\n        \n        \n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        \n        setContentView(R.layout.text_voice_camera);\n        \n        \n        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n        \n        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n    \ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n    \ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n    \tmDatabaseAdapter = new DatabaseAdapter(this);\n    \t\n    \t////////*********     Get id from intent extras     ********   ////////////\n        intentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n        _id = intentExtras.getLong(\"_id\");\n    \t\n        \n        \n        \n        ////////   ********  Handle Date Bar   *********   ////////\n        new DateHandler(this);\n        \n        \n        ////////   ********   Starts Recording each time activity starts   ******   ///////\n        if(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n        \tsetGraphicsVoice();\n        \tcontrolVoiceChronometer();\n        \tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n        \tmRecordingHelper.startRecording();\n        } \n        else {\n        \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n        }\n        setClickListeners();\n\t\t\n\t\t////////*********     Get Last most accurate location info   *********   /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t\t\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\t\t\n\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t}\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n\t\t\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n\t\t\n\t\t\n\t\t////  ***** if stop button pressed ****** //////\n\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n\t\t\tmRecordingHelper.stopRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t}\n\t\t\n\t\t\n\t\t////  ***** if play button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n\t\t\tmAudioPlay = new AudioPlay(_id+\"\",this);\n\t\t\t\n\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n\t\t\tif(!mAudioPlay.isAudioPlaying()){\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\t\t\n\t\t////  ***** if rerecord button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){}\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\t\t\t\n\t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n\t\t\tif(mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\t\t\n\t\t////////********  Adding Action to save entry     *********    ///////////\n\t\t\n\t\tif(v.getId() == R.id.text_voice_camera_save_entry){\n\t\t\t///////    *******  Creating HashMap to update info   *******  ////////\n\t\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, text_voice_camera_amount.getText().toString());\n\t\t\t\n\t\t\tif(text_voice_camera_tag.getText().toString() != \"\"){\n\t\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t\t}\n\t\t\n\t\t\t//////    *******   Update database if user added additional info   *******  ///////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.editDatabase(_list);\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t\n\t\n\t\t/////////     *********   Adding action if delete button **********  /////////\n\t\n\t\tif(v.getId() == R.id.text_voice_camera_delete){\n\t\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t}\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\n\t\t\tnew FileDelete(_id);\n\t\t\n\t\t\t//////   *******   Delete entry from database ********   /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n\t\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-23T09:56:39Z", "hash_sni": "dccaf53589664a199bf52233870ad72f687e19ec", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" import android.os.Bundle;\n import android.os.CountDownTimer;\n import android.os.SystemClock;\n-import android.util.Log;\n import android.view.View;\n import android.view.View.OnClickListener;\n import android.view.Window;\n@@ -23,6 +22,7 @@ import android.widget.EditText;\n import android.widget.ImageView;\n import android.widget.RelativeLayout;\n import android.widget.TextView;\n+import android.widget.Toast;\n \n public class Voice extends Activity implements OnClickListener{\n \t\n@@ -71,18 +71,24 @@ public class Voice extends Activity implements OnClickListener{\n         intentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n         _id = intentExtras.getLong(\"_id\");\n     \t\n-        setGraphicsVoice();\n-        controlVoiceChronometer();\n-        setClickListeners();\n+        \n+        \n         \n         ////////   ********  Handle Date Bar   *********   ////////\n         new DateHandler(this);\n         \n         \n         ////////   ********   Starts Recording each time activity starts   ******   ///////\n-        mRecordingHelper = new RecordingHelper(_id+\"\");\n-\t\tmRecordingHelper.startRecording();\n-\t\t\n+        if(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n+        \tsetGraphicsVoice();\n+        \tcontrolVoiceChronometer();\n+        \tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n+        \tmRecordingHelper.startRecording();\n+        } \n+        else {\n+        \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n+        }\n+        setClickListeners();\n \t\t\n \t\t////////*********     Get Last most accurate location info   *********   /////////\n \t\tLocationLast mLocationLast = new LocationLast(this);\n@@ -95,8 +101,10 @@ public class Voice extends Activity implements OnClickListener{\n \t\t\n \t\t//////   *****  Check whether audio is recording or not   *******   ///////\n \t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n-\t\tif(mRecordingHelper.isRecording()){\n-\t\t\tmRecordingHelper.stopRecording();\n+\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n+\t\t\tif(mRecordingHelper.isRecording()){\n+\t\t\t\tmRecordingHelper.stopRecording();\n+\t\t\t}\n \t\t}\n \t\tsuper.onPause();\n \t}\n@@ -167,8 +175,7 @@ public class Voice extends Activity implements OnClickListener{\n \t\t////  ***** if play button pressed ****** //////\t\t\n \t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n \t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n-\t\t\tmAudioPlay = new AudioPlay(_id+\"\");\n-\t\t\tLog.v(\"hello\", text_voice_camera_time_details_chronometer.getText()+\"\");\n+\t\t\tmAudioPlay = new AudioPlay(_id+\"\",this);\n \t\t\t\n \t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n \t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n@@ -209,7 +216,7 @@ public class Voice extends Activity implements OnClickListener{\n \t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n \t\t\tif(mRecordingHelper.isRecording())\n \t\t\t\tmRecordingHelper.stopRecording();\n-\t\t\tmRecordingHelper = new RecordingHelper(_id+\"\");\n+\t\t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n \t\t\tmRecordingHelper.startRecording();\n \t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n \t\t\ttext_voice_camera_time_details_chronometer.start();"], "score": 1.0, "methods_t": ["AudioPlay DatabaseAdapter DateHandler DisplayTime FileDelete HashMap, StringString LocationLast MyCount OnChronometerTickListener RecordingHelper cancel close controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish getBundleExtra getDisplayTime getExternalStorageState getId getIntent getLastLocation getLong getPlayBackTime getText isAudioPlaying isRecording length makeText open printStackTrace put requestWindowFeature setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setVisibility show start startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526755824092839936, "subject_t": ["most of the bugs removed"], "comments_t": ["\t\t////////********  Adding Action to save entry     *********    /////////// \t//countdowntimer is an abstract class, so extend it and fill in methods         ///////   ***** Sets Title Voice Entry *********/////// \t\t///////   ****** No Title Bar   ********* /////////         ////////   ********    Initializing and assigning memory to UI Items **********    /////////     \t////////*********     Get id from intent extras     ********   //////////// \t\t\t///////    *******  Creating HashMap to update info   *******  //////// \t\t\t///////   *******   Chronometer Starts Countdown   ******  /////// \t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** /////// \t\t\t//////  ******  Restarts chronometer and recording   *******  //////// \t\t////////    *******    Adding Click Listeners to UI Items ******** ////////// \t\t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t////////*********     Get Last most accurate location info   *********   ///////// \t\t////  ***** if play button pressed ****** //////\t\t \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   //////// \t\t\t//////   *******   Delete entry from database ********   ///////// \t\t////  ***** if rerecord button pressed ****** //////\t\t \t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t///////   ********     Adding On Click Actions to click listeners *********    ////////// \t\t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******////// \t\t\t//////    *******   Update database if user added additional info   *******  /////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////       \t\t////  ***** if stop button pressed ****** //////         ////////   ********   Starts Recording each time activity starts   ******   /////// \t\t///////   ***** Sets Title Voice Entry *********/////// \t\t\t//////   ******   Handles UI items on button click  ******  ///////         //////   ******  Shows Voice Details ********//////// \t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////         ////////   ********  Handle Date Bar   *********   //////// \t\t/////////     *********   Adding action if delete button **********  /////////"], "parents_ss": ["bbc9105f50f395b3c534b895dcb4c75346818f20"], "id": "vinsol/expense-tracker\u0000dccaf53589664a199bf52233870ad72f687e19ec\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.isRecording()#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#<unknown>.deleteDatabaseEntryID(java.lang.String)#android.app.Activity.getIntent()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.getLastLocation()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.view.View.setVisibility(int)#android.widget.EditText.getText()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.app.Activity.finish()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#com.vinsol.expensetracker.Voice.setGraphicsVoice()#android.app.Activity.findViewById(<unknown>)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#java.lang.CharSequence.toString()#java.lang.CharSequence.toString()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#<unknown>.stopPlayBack()#android.view.View.setVisibility(int)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#<unknown>.DisplayTime()#android.os.SystemClock.elapsedRealtime()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#android.os.Environment.getExternalStorageState()#android.widget.Chronometer.setOnChronometerTickListener()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#<unknown>.getPlayBackTime()#.OnChronometerTickListener()#android.app.Activity.requestWindowFeature(int)#<unknown>.open()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#android.view.View.setVisibility(int)#android.widget.Toast.show()#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.startPlayBack()#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#<unknown>.isRecording()#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.isRecording() <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() <unknown>.getPlayBackTime() <unknown>.stopRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.view.View.setVisibility(int) android.widget.Chronometer.start() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) <unknown>.deleteDatabaseEntryID(java.lang.String) android.app.Activity.getIntent() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.getLastLocation() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.view.View.setVisibility(int) android.widget.EditText.getText() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.app.Activity.finish() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) com.vinsol.expensetracker.Voice.setGraphicsVoice() android.app.Activity.findViewById(<unknown>) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() java.lang.CharSequence.toString() java.lang.CharSequence.toString() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) com.vinsol.expensetracker.Voice.controlVoiceChronometer() <unknown>.stopPlayBack() android.view.View.setVisibility(int) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) <unknown>.DisplayTime() android.os.SystemClock.elapsedRealtime() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) android.os.Environment.getExternalStorageState() android.widget.Chronometer.setOnChronometerTickListener() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() <unknown>.getPlayBackTime() .OnChronometerTickListener() android.app.Activity.requestWindowFeature(int) <unknown>.open() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) android.view.View.setVisibility(int) android.widget.Toast.show() android.view.View.setVisibility(int) android.widget.Chronometer.start() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.startPlayBack() java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) android.view.View.getId() <unknown>.isRecording() android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate RelativeLayout dateBarRelativeLayout;\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t}\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tif(mShowList.get(7) != null)\n\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\tif(mShowList.get(6) != null)\n\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\telse {\n\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t}\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id\n\t\t\t\t\t\t+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button\n\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(new DisplayTime()\n\t\t\t\t\t\t\t\t\t.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tnew FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG)\n\t\t\t\t\t.show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivity(editIntent);\n\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-08T08:09:32Z", "hash_sni": "c69e5515e248645142dd3f797f3664934cebb393", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" \t\t\tif(mShowList.get(6) != null)\n \t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n \t\t\telse {\n-\t\t\t\tnew ShowDateHandler(this);\n+\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n \t\t\t}\n \t\t}\n \t\tshow_text_voice_camera_delete.setOnClickListener(this);\n@@ -212,6 +212,7 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t\n \t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n \t\t\tIntent editIntent = new Intent(this, Voice.class);\n+\t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n \t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n \t\t\tstartActivity(editIntent);\n \t\t\tfinish();"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler ShowLocationHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getDrawable getExternalStorageState getId getInstance getIntent getPlayBackTime getResources getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putBoolean putExtra setBackgroundDrawable setContentView setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack stop stopPlayBack toString updateUI"], "_version_": 1526755825450745856, "subject_t": ["Finished EditPage Location, Now Working on graph"], "comments_t": ["\t\t// //// ****** If audio recording started then stop recording audio \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t// ***** /////// \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["2058d5ef1b368874bedb0513dfd82447f57c7295"], "id": "vinsol/expense-tracker\u0000c69e5515e248645142dd3f797f3664934cebb393\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.widget.Toast.show()#<unknown>.isAudioPlaying()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.open()#android.content.Context.getString(<unknown>)#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.view.ContextThemeWrapper.getResources()#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#android.os.CountDownTimer.cancel()#android.app.Activity.findViewById(<unknown>)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setBackgroundDrawable(<unknown>)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.Toast.show()#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.res.Resources.getDrawable(<unknown>)#android.view.View.setVisibility(int)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.app.Activity.startActivity(android.content.Intent)#android.os.Bundle.putBoolean(java.lang.String, boolean)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#android.view.View.setVisibility(int)", "callsites_t": ["java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) android.widget.Toast.show() <unknown>.isAudioPlaying() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.open() android.content.Context.getString(<unknown>) <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.view.ContextThemeWrapper.getResources() android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() java.io.File.File(java.lang.String) android.widget.Toast.show() android.os.CountDownTimer.cancel() android.app.Activity.findViewById(<unknown>) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setBackgroundDrawable(<unknown>) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.app.Activity.findViewById(<unknown>) java.io.File.canRead() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.Toast.show() java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.content.res.Resources.getDrawable(<unknown>) android.view.View.setVisibility(int) <unknown>.getPlayBackTime() android.app.Activity.finish() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.app.Activity.startActivity(android.content.Intent) android.os.Bundle.putBoolean(java.lang.String, boolean) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener android.os.Bundle android.view.Window java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\t// ///// ****** No Title Bar ********* /////////\n\n\t\tthis.requestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items\n\t\t// ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ******\n\t\t// ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id\n\t\t\t\t\t\t+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button\n\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(new DisplayTime()\n\t\t\t\t\t\t\t\t\t.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button\n\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG)\n\t\t\t\t\t.show();\n\t\t}\n\t\tsetClickListeners();\n\n\t\t// //////********* Get Last most accurate location info *********\n\t\t// /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText()\n\t\t\t\t.toString();\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t\t.getText().length() > 5) {\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock\n\t\t\t\t\t.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\")\n\t\t\t\t&& !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount\n\t\t\t\t\t.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText()\n\t\t\t\t\t.toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString()\n\t\t\t\t.equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(\n\t\t\t\t\t\t\ttext_voice_camera_date_bar_dateview.getText()\n\t\t\t\t\t\t\t\t\t.toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,\n\t\t\t\t\t\t\tmDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(MainActivity.mCurrentLocation != null  && setLocation == true){\n\t\t\tif (!MainActivity.mCurrentLocation.equals(\"\")) {\n\t\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION,MainActivity.mCurrentLocation);\n\t\t\t}\n\t\t}\n\t\t// //// ******* Update database if user added additional info *******\n\t\t// ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tif (!intentExtras.containsKey(\"timeInMillis\")\n\t\t\t\t&& !intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-30T11:58:15Z", "hash_sni": "b7635040f8b5d83d94f35f2ee7eb3ee9e85eef31", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \tprivate TextView text_voice_camera_date_bar_dateview;\n \tprivate String dateViewString;\n \tprivate ArrayList<String> mEditList;\n+\tprivate boolean setLocation;\n \n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n@@ -77,8 +78,14 @@ public class Voice extends Activity implements OnClickListener {\n \n \t\t// //////********* Get id from intent extras ******** ////////////\n \t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n-\t\t_id = intentExtras.getLong(\"_id\");\n+\t\tif(intentExtras.containsKey(\"_id\")){\n+\t\t\t_id = intentExtras.getLong(\"_id\");\n+\t\t}\n \n+\t\tif(intentExtras.containsKey(\"setLocation\")){\n+\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n+\t\t}\n+\t\t\n \t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n \t\t\tmEditList = new ArrayList<String>();\n \t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n@@ -391,18 +398,26 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,\n \t\t\t\t\t\t\tmDateHelper.getTimeMillis() + \"\");\n \t\t\t\t} else {\n-\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n-\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mEditList.get(6)));\n-\t\t\t\t\tDateHelper mDateHelper = new DateHelper(\n-\t\t\t\t\t\t\ttext_voice_camera_date_bar_dateview.getText()\n-\t\t\t\t\t\t\t\t\t.toString(), mCalendar);\n-\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,\n-\t\t\t\t\t\t\tmDateHelper.getTimeMillis() + \"\");\n+\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n+\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n+\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n+\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n+\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n+\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} catch (Exception e) {\n \t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t}\n+\t\t\n+\t\tif(MainActivity.mCurrentLocation != null  && setLocation == true){\n+\t\t\tif (!MainActivity.mCurrentLocation.equals(\"\")) {\n+\t\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION,MainActivity.mCurrentLocation);\n+\t\t\t}\n+\t\t}\n \t\t// //// ******* Update database if user added additional info *******\n \t\t// ///////\n \t\tmDatabaseAdapter.open();"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime File FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLastLocation getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put requestWindowFeature saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526752071117701120, "subject_t": ["Added functionality of favorites clears #5"], "comments_t": ["\t\t// ///// ****** No Title Bar ********* ///////// \t\t// or later, or by the code above on earlier versions of the platform. \t\t// /////// \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// //// ******* Update database if user added additional info ******* \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //////********* Get Last most accurate location info ********* \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// //// ****** If audio recording started then stop recording audio \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// ////// ******** Starts Recording each time activity starts ****** \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// ***** /////// \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// ********** ///////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["1110dcc1957566af4bb4d4b1033c35e3447b7b2b"], "id": "vinsol/expense-tracker\u0000b7635040f8b5d83d94f35f2ee7eb3ee9e85eef31\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.widget.TextView.setText(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.app.Activity.finish()#java.io.File.File(java.lang.String)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#<unknown>.getLastLocation()#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#<unknown>.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#android.widget.TextView.getText()#<unknown>.DisplayTime()#android.view.KeyEvent.getRepeatCount()#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.requestWindowFeature(int)#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#<unknown>.isRecording()#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.widget.TextView.setText(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.lang.Long.toString(long) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.app.Activity.finish() java.io.File.File(java.lang.String) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) <unknown>.getLastLocation() android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) <unknown>.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() android.widget.TextView.getText() <unknown>.DisplayTime() android.view.KeyEvent.getRepeatCount() <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.requestWindowFeature(int) android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) <unknown>.isRecording() android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.content.Context android.content.DialogInterface android.widget.Button android.view.View android.util.Log android.app.Dialog android.view.Window com.vinsol.expensetracker.utils.AudioPlay"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\n\nimport android.app.Dialog;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\n\npublic class AudioPlayDialog extends Dialog implements\n\t\tandroid.view.View.OnClickListener,\n\t\tandroid.content.DialogInterface.OnDismissListener,\n\t\tandroid.content.DialogInterface.OnCancelListener {\n\n\tprivate Button audio_play_dialog_stop_button;\n\tprivate Button audio_play_dialog_play_button;\n\tprivate Button audio_play_dialog_cancel_button;\n\tprivate Chronometer audio_play_dialog_time_details_chronometer;\n\tprivate AudioPlay mAudioPlay;\n\tprivate MyCount countDownTimer;\n\tprivate String mFile;\n\tprivate Context mContext;\n\n\tpublic AudioPlayDialog(Context context, String id) {\n\t\tsuper(context);\n\t\tmContext = context;\n\t\tmFile = id;\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.audio_play_dialog);\n\t\tmAudioPlay = new AudioPlay(id, context);\n\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\taudio_play_dialog_stop_button = (Button) findViewById(R.id.audio_play_dialog_stop_button);\n\t\taudio_play_dialog_play_button = (Button) findViewById(R.id.audio_play_dialog_play_button);\n\t\taudio_play_dialog_cancel_button = (Button) findViewById(R.id.audio_play_dialog_cancel_button);\n\t\taudio_play_dialog_time_details_chronometer = (Chronometer) findViewById(R.id.audio_play_dialog_time_details_chronometer);\n\t\taudio_play_dialog_cancel_button.setOnClickListener(this);\n\t\taudio_play_dialog_play_button.setOnClickListener(this);\n\t\taudio_play_dialog_stop_button.setOnClickListener(this);\n\t\tsetOnDismissListener(this);\n\t\tsetOnCancelListener(this);\n\t\tmAudioPlay.startPlayBack();\n\t\tcountDownTimer.start();\n\t\tshow();\n\t}\n\n\tpublic AudioPlayDialog(Context context, String id,String fav) {\n\t\tsuper(context);\n\t\tmContext = context;\n\t\tmFile = id;\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.audio_play_dialog);\n\t\tmAudioPlay = new AudioPlay(id, context,fav);\n\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\taudio_play_dialog_stop_button = (Button) findViewById(R.id.audio_play_dialog_stop_button);\n\t\taudio_play_dialog_play_button = (Button) findViewById(R.id.audio_play_dialog_play_button);\n\t\taudio_play_dialog_cancel_button = (Button) findViewById(R.id.audio_play_dialog_cancel_button);\n\t\taudio_play_dialog_time_details_chronometer = (Chronometer) findViewById(R.id.audio_play_dialog_time_details_chronometer);\n\t\taudio_play_dialog_cancel_button.setOnClickListener(this);\n\t\taudio_play_dialog_play_button.setOnClickListener(this);\n\t\taudio_play_dialog_stop_button.setOnClickListener(this);\n\t\tsetOnDismissListener(this);\n\t\tsetOnCancelListener(this);\n\t\tmAudioPlay.startPlayBack();\n\t\tcountDownTimer.start();\n\t\tshow();\n\t}\n\t\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.audio_play_dialog_cancel_button) {\n\t\t\tcountDownTimer.cancel();\n\t\t\tmAudioPlay.stopPlayBack();\n\t\t\tdismiss();\n\t\t}\n\n\t\tif (v.getId() == R.id.audio_play_dialog_play_button) {\n\t\t\taudio_play_dialog_play_button.setVisibility(View.GONE);\n\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t}\n\t\t\tmAudioPlay = new AudioPlay(mFile, mContext);\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\tcountDownTimer.start();\n\t\t\tmAudioPlay.startPlayBack();\n\t\t\taudio_play_dialog_stop_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\tif (v.getId() == R.id.audio_play_dialog_stop_button) {\n\n\t\t\taudio_play_dialog_stop_button.setVisibility(View.GONE);\n\t\t\tmAudioPlay.stopPlayBack();\n\t\t\tcountDownTimer.cancel();\n\t\t\taudio_play_dialog_time_details_chronometer\n\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\taudio_play_dialog_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\taudio_play_dialog_stop_button.setVisibility(View.GONE);\n\t\t\taudio_play_dialog_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onDismiss(DialogInterface dialog) {\n\t\tLog.v(\"mAudioPlay.isAudioPlaying() dismiss\",\n\t\t\t\tmAudioPlay.isAudioPlaying() + \"\");\n\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\tmAudioPlay.stopPlayBack();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onCancel(DialogInterface dialog) {\n\t\tLog.v(\"mAudioPlay.isAudioPlaying() cancel\", mAudioPlay.isAudioPlaying()\n\t\t\t\t+ \"\");\n\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\tmAudioPlay.stopPlayBack();\n\t\t}\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-30T11:58:15Z", "hash_sni": "b7635040f8b5d83d94f35f2ee7eb3ee9e85eef31", "name_sni": "src/com/vinsol/expensetracker/AudioPlayDialog.java", "patch_t": [" \t\tshow();\n \t}\n \n+\tpublic AudioPlayDialog(Context context, String id,String fav) {\n+\t\tsuper(context);\n+\t\tmContext = context;\n+\t\tmFile = id;\n+\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n+\t\tsetContentView(R.layout.audio_play_dialog);\n+\t\tmAudioPlay = new AudioPlay(id, context,fav);\n+\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n+\t\taudio_play_dialog_stop_button = (Button) findViewById(R.id.audio_play_dialog_stop_button);\n+\t\taudio_play_dialog_play_button = (Button) findViewById(R.id.audio_play_dialog_play_button);\n+\t\taudio_play_dialog_cancel_button = (Button) findViewById(R.id.audio_play_dialog_cancel_button);\n+\t\taudio_play_dialog_time_details_chronometer = (Chronometer) findViewById(R.id.audio_play_dialog_time_details_chronometer);\n+\t\taudio_play_dialog_cancel_button.setOnClickListener(this);\n+\t\taudio_play_dialog_play_button.setOnClickListener(this);\n+\t\taudio_play_dialog_stop_button.setOnClickListener(this);\n+\t\tsetOnDismissListener(this);\n+\t\tsetOnCancelListener(this);\n+\t\tmAudioPlay.startPlayBack();\n+\t\tcountDownTimer.start();\n+\t\tshow();\n+\t}\n+\t\n \t@Override\n \tpublic void onClick(View v) {\n "], "score": 1.0, "methods_t": ["AudioPlay DisplayTime MyCount cancel dismiss findViewById getDisplayTime getId getPlayBackTime isAudioPlaying requestWindowFeature setContentView setOnCancelListener setOnClickListener setOnDismissListener setText setVisibility show start startPlayBack stopPlayBack v"], "_version_": 1526752071146012672, "subject_t": ["Added functionality of favorites clears #5"], "comments_t": ["\t// countdowntimer is an abstract class, so extend it and fill in methods \t// /////// ********* CountdownTimer for Chronometer ********* //////////"], "parents_ss": ["1110dcc1957566af4bb4d4b1033c35e3447b7b2b"], "id": "vinsol/expense-tracker\u0000b7635040f8b5d83d94f35f2ee7eb3ee9e85eef31\u0000src/com/vinsol/expensetracker/AudioPlayDialog.java", "callsites_cs": "<unknown>.startPlayBack()#<unknown>.isAudioPlaying()#com.vinsol.expensetracker.AudioPlayDialog.MyCount.MyCount(<unknown>, int)#android.app.Dialog.findViewById(<unknown>)#android.app.Dialog.setContentView(<unknown>)#android.os.CountDownTimer.start()#<unknown>.getDisplayTime(<unknown>)#android.util.Log.v(java.lang.String, <unknown>)#<unknown>.DisplayTime()#<unknown>.AudioPlay(java.lang.String, android.content.Context)#<unknown>.stopPlayBack()#android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog)#android.view.View.setVisibility(int)#<unknown>.getPlayBackTime()#<unknown>.getPlayBackTime()#android.view.View.getId()#android.view.View.setVisibility(int)#android.app.Dialog.setOnCancelListener(com.vinsol.expensetracker.AudioPlayDialog)#<unknown>.getDisplayTime(long)#android.app.Dialog.dismiss()#android.util.Log.v(java.lang.String, <unknown>)#android.os.CountDownTimer.start()#android.app.Dialog.findViewById(<unknown>)#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog)#<unknown>.startPlayBack()#android.view.View.setVisibility(int)#com.vinsol.expensetracker.AudioPlayDialog.MyCount.MyCount(<unknown>, int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog)#<unknown>.getPlayBackTime()#<unknown>.stopPlayBack()#android.os.CountDownTimer.cancel()#android.widget.TextView.setText(<unknown>)#<unknown>.stopPlayBack()#android.app.Dialog.show()#<unknown>.isAudioPlaying()#<unknown>.AudioPlay(java.lang.String, android.content.Context, java.lang.String)#android.view.View.setVisibility(int)#android.app.Dialog.findViewById(<unknown>)#android.app.Dialog.setOnDismissListener(com.vinsol.expensetracker.AudioPlayDialog)#android.view.View.setVisibility(int)#android.app.Dialog.findViewById(<unknown>)#android.app.Dialog.requestWindowFeature(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.AudioPlay(java.lang.String, android.content.Context)", "callsites_t": ["<unknown>.startPlayBack() <unknown>.isAudioPlaying() com.vinsol.expensetracker.AudioPlayDialog.MyCount.MyCount(<unknown>, int) android.app.Dialog.findViewById(<unknown>) android.app.Dialog.setContentView(<unknown>) android.os.CountDownTimer.start() <unknown>.getDisplayTime(<unknown>) android.util.Log.v(java.lang.String, <unknown>) <unknown>.DisplayTime() <unknown>.AudioPlay(java.lang.String, android.content.Context) <unknown>.stopPlayBack() android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog) android.view.View.setVisibility(int) <unknown>.getPlayBackTime() <unknown>.getPlayBackTime() android.view.View.getId() android.view.View.setVisibility(int) android.app.Dialog.setOnCancelListener(com.vinsol.expensetracker.AudioPlayDialog) <unknown>.getDisplayTime(long) android.app.Dialog.dismiss() android.util.Log.v(java.lang.String, <unknown>) android.os.CountDownTimer.start() android.app.Dialog.findViewById(<unknown>) <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog) <unknown>.startPlayBack() android.view.View.setVisibility(int) com.vinsol.expensetracker.AudioPlayDialog.MyCount.MyCount(<unknown>, int) android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog) <unknown>.getPlayBackTime() <unknown>.stopPlayBack() android.os.CountDownTimer.cancel() android.widget.TextView.setText(<unknown>) <unknown>.stopPlayBack() android.app.Dialog.show() <unknown>.isAudioPlaying() <unknown>.AudioPlay(java.lang.String, android.content.Context, java.lang.String) android.view.View.setVisibility(int) android.app.Dialog.findViewById(<unknown>) android.app.Dialog.setOnDismissListener(com.vinsol.expensetracker.AudioPlayDialog) android.view.View.setVisibility(int) android.app.Dialog.findViewById(<unknown>) android.app.Dialog.requestWindowFeature(int) <unknown>.getDisplayTime(<unknown>) <unknown>.AudioPlay(java.lang.String, android.content.Context)"]}, {"user_sni": "StanLivitski", "repo_sni": "StanLivitski/n-puzzle", "imports_t": ["android.widget.TableLayout android.view.View.OnClickListener name.livitski.games.puzzle.android.model.Game android.os.Bundle android.view.Menu android.app.Dialog android.view.MenuInflater android.util.DisplayMetrics name.livitski.games.puzzle.android.model.Board android.content.SharedPreferences android.content.SharedPreferences.Editor java.io.Serializable android.widget.TextView name.livitski.games.puzzle.android.model.Tile name.livitski.games.puzzle.android.model.MoveListener android.util.TypedValue android.os.CountDownTimer android.view.Gravity name.livitski.games.puzzle.android.model.Game.Level android.view.ViewGroup android.content.Intent java.util.Map android.view.MenuItem android.widget.TableRow name.livitski.games.puzzle.android.model.ImageProcessingException android.view.View.OnLongClickListener name.livitski.games.puzzle.android.model.Move android.widget.RelativeLayout android.view.View android.util.Log android.widget.ImageView"], "email_sni": "ved.github@livitski.com", "contents_t": ["/**\n * Copyright \u00a9 2011,2013 Konstantin Livitski\n * \n * This file is part of n-Puzzle application. n-Puzzle application is free\n * software; you can redistribute it and/or modify it under the terms of the GNU\n * General Public License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n * \n * n-Puzzle application contains adaptations of artwork covered by the Creative\n * Commons Attribution-ShareAlike 3.0 Unported license. Please refer to the\n * NOTICE.md file at the root of this distribution or repository for licensing\n * terms that apply to that artwork.\n * \n * n-Puzzle application is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n * details.\n * \n * You should have received a copy of the GNU General Public License along with\n * n-Puzzle application; if not, see the LICENSE/gpl.txt file of this distribution\n * or visit <http://www.gnu.org/licenses>.\n */\npackage name.livitski.games.puzzle.android;\n\nimport java.io.Serializable;\nimport java.util.Map;\n\nimport name.livitski.games.puzzle.android.model.Board;\nimport name.livitski.games.puzzle.android.model.Game;\nimport name.livitski.games.puzzle.android.model.Game.Level;\nimport name.livitski.games.puzzle.android.model.ImageProcessingException;\nimport name.livitski.games.puzzle.android.model.Move;\nimport name.livitski.games.puzzle.android.model.MoveListener;\nimport name.livitski.games.puzzle.android.model.Tile;\nimport android.app.Dialog;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.content.SharedPreferences.Editor;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.DisplayMetrics;\nimport android.util.Log;\nimport android.util.TypedValue;\nimport android.view.Gravity;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.View.OnLongClickListener;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TableLayout;\nimport android.widget.TableRow;\nimport android.widget.TextView;\n\n/**\n * User's interface to the puzzle.\n */\npublic class GamePlay extends Activity implements OnClickListener, OnLongClickListener, MoveListener\n{\n @Override\n public void onCreate(Bundle savedInstanceState)\n {\n  super.onCreate(savedInstanceState);\n  initLayout();\n  initGame();\n  initBoard();\n }\n\n /**\n  * Handles user's clicks and taps on the board.\n  */\n public void onClick(View v)\n {\n  final Object tag = v.getTag();\n  if (null == previewTimer && tag instanceof Tile)\n  {\n   final Board board = getBoardModel();\n   final Move move = board.permittedMoveFor((Tile) tag);\n   if (null != move)\n   {\n    board.move(move);\n    if (game.isSolved())\n     congratulate();\n   }\n   else\n   {\n    wrongClick();\n   }\n  }\n }\n\n @Override\n public boolean onCreateOptionsMenu(Menu menu)\n {\n  MenuInflater inflater = getMenuInflater();\n  inflater.inflate(R.menu.game_menu, menu);\n  return true;\n }\n\n @Override\n public boolean onOptionsItemSelected(MenuItem item)\n {\n  switch (item.getItemId())\n  {\n  case R.id.item_reshuffle:\n   restart(false);\n   break;\n  case R.id.item_change_picture:\n   restart(true);\n   break;\n  case R.id.item_difficulty_hard:\n   if (game.getDifficulty() != Game.Level.HARD)\n    restart(Game.Level.HARD);\n   break;\n  case R.id.item_difficulty_medium:\n   if (game.getDifficulty() != Game.Level.MEDIUM)\n    restart(Game.Level.MEDIUM);\n   break;\n  case R.id.item_difficulty_easy:\n   if (game.getDifficulty() != Game.Level.EASY)\n    restart(Game.Level.EASY);\n   break;\n  default:\n   return super.onOptionsItemSelected(item);\n  }\n  resumeImpl();\n  return true;\n }\n\n /**\n  * Handles a long click on the blank tile.\n  */\n public boolean onLongClick(View v)\n {\n  final Object tag = v.getTag();\n  if (null == previewTimer && tag instanceof Tile && 0 == ((Tile)tag).getNumber()) \n  {\n   toggleBoardType();\n   return true;\n  }\n  else\n   return false;\n }\n\n /**\n  * Updates the view when the model posts a tile move notification.\n  */\n public void tileMoved(final Tile from, final Tile to)\n {\n  // repeat for both tiles\n  for (Tile tile : new Tile[] { from, to })\n  {\n   TextView numericCell = numericCells[tile.getRow()][tile.getColumn()];\n   assignTile(numericCell, tile);\n   ImageView imageCell = imageCells[tile.getRow()][tile.getColumn()];\n   assignTile(imageCell, tile);\n  }\n }\n\n @Override\n protected void onResume()\n {\n  super.onResume();\n  resumeImpl();\n }\n\n @Override\n protected void onActivityResult(int requestCode, int resultCode, Intent data)\n {\n  switch (requestCode)\n  {\n  case IMAGE_SELECTION_REQUEST_CODE:\n   if (RESULT_CANCELED == resultCode)\n    finish();\n   else\n   {\n    Serializable id = data.getSerializableExtra(ImageSelection.EXTRA_SELECTED_IMAGE_ID_KEY);\n    if (null == id)\n     throw new IllegalStateException(\n       \"Image selection page did not return an image\");\n    Level requestedLevel =\n      (Level)data.getSerializableExtra(ImageSelection.EXTRA_SELECTED_IMAGE_INITIAL_LEVEL);\n    if (null != requestedLevel && requestedLevel != game.getDifficulty())\n     restart(requestedLevel);\n    changeBoardImage(id);\n   }\n   break;\n  case CONGRATULATIONS_REQUEST_CODE:\n   if (RESULT_OK != resultCode)\n    finish();\n   break;\n  default:\n   throw new IllegalStateException(\n     \"Received a result from unknown activity, code = \" + requestCode);\n  }\n }\n\n @Override\n protected void onPause()\n {\n  super.onPause();\n  saveSettings();\n }\n\n /** Returns the current board size. */\n public int getBoardSize()\n {\n  return getBoardModel().getSize();\n }\n\n /**\n  * Discards the current board state and starts a new game.\n  * Unless you are switching activities, you have to follow up\n  * this method with a call to {@link #resumeImpl()} to show\n  * the new board.\n  * @param selectNewImage tells the puzzle whether the user\n  * would like to select a new image\n  */\n protected void restart(boolean selectNewImage)\n {\n  cancelPreviewTimer();\n  hideBoard();\n  if (selectNewImage)\n   newGame(null);\n  else\n   game.start();\n  initBoard();\n }\n\n /**\n  * Starts a new game with a specific difficulty level. If there\n  * is an image selected for the current game, uses the same\n  * image for the new game. \n  * Unless you are switching activities, you have to follow up\n  * this method with a call to {@link #resumeImpl()} to show\n  * the new board.\n  * @param difficulty difficulty level for the new game\n  */\n protected void restart(Game.Level difficulty)\n {\n  cancelPreviewTimer();\n  hideBoard();\n  Serializable imageId = null;\n  if (null != game && game.isImageSelected())\n   imageId = game.getSelectedImageId();\n  newGame(difficulty);\n  if (null != imageId)\n   changeBoardImage(imageId);\n  initBoard();\n }\n\n protected void cancelPreviewTimer()\n {\n  if (null != previewTimer)\n  {\n   previewTimer.cancel();\n   previewTimer = null;\n  }\n }\n\n protected void hideBoard()\n {\n  windowLayout.removeAllViews();\n  windowLayout.invalidate();\n }\n\n protected void showNumericBoard()\n {\n  // force resizeContent() if the board was hidden since onMeasure() events might have been missed\n  if (0 == windowLayout.getChildCount())\n   lastWidth = lastHeight = -1;\n  windowLayout.removeAllViews();\n  windowLayout.addView(numericBoardView);\n  windowLayout.invalidate();\n }\n\n protected void showImageBoard()\n {\n  // force resizeContent() if the board was hidden since onMeasure() events might have been missed\n  if (0 == windowLayout.getChildCount())\n   lastWidth = lastHeight = -1;\n  windowLayout.removeAllViews();\n  windowLayout.addView(imageBoardView);\n  windowLayout.invalidate();\n }\n\n /**\n  * Toggles the \"cheat mode\" that shows the tiles' numbers.\n  */\n protected void toggleBoardType()\n {\n  if (0 == windowLayout.getChildCount())\n   return;\n  else if (windowLayout.getChildAt(0) == numericBoardView)\n   showImageBoard();\n  else\n   showNumericBoard();\n }\n \n protected Board getBoardModel()\n {\n  return game.getBoard();\n }\n\n protected void initLayout()\n {\n  windowLayout = new RelativeLayout(this) {\n   @Override\n   protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)\n   {\n    int width = MeasureSpec.getSize(widthMeasureSpec);\n    int height = MeasureSpec.getSize(heightMeasureSpec);\n    if (width != lastWidth || height != lastHeight)\n    {\n//     Log.d(\n//       getClass().getName(),\n//       \"resizing to width = \" + Integer.toHexString(widthMeasureSpec) + \" (\"\n// \t+ width + \") \" + \", height = \"\n// \t+ Integer.toHexString(heightMeasureSpec) + \" (\"\n// \t+ height + \")\");\n     if (0 < getChildCount())\n      resizeContent(width, height);\n     lastWidth = width;\n     lastHeight = height;\n    }\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n   }\n  };\n  windowLayout.setBackgroundColor(getResources().getColor(R.color.background));\n  setContentView(windowLayout, new ViewGroup.LayoutParams(\n    ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));\n }\n\n protected void initGame()\n {\n  SharedPreferences preferences = getPreferences(MODE_PRIVATE);\n  Map<String, ?> settings = preferences.getAll();\n  try\n  {\n   if (settings.containsKey(Game.DIFFICULTY_SETTING))\n    newGame(Game.Level.valueOf((String)settings.get(Game.DIFFICULTY_SETTING)));\n   else\n    newGame(null);\n   if (settings.containsKey(Game.IMAGE_ID_SETTING))\n    changeBoardImage((Serializable)settings.get(Game.IMAGE_ID_SETTING));\n  }\n  catch (RuntimeException invalid)\n  {\n   Log.w(getClass().getName(), \"Error loading settings\", invalid);\n   newGame(null);\n  }\n  game.load(preferences);\n }\n\n protected void newGame(Level difficulty)\n {\n  if (null != difficulty)\n   game = new Game(difficulty);\n  else if (null == game)\n   game = new Game();\n  else\n   game = new Game(game.getDifficulty());\n }\n\n protected void initBoard()\n {\n  numericBoardView = new TableLayout(this);\n  imageBoardView = new TableLayout(this);\n  final Board board = getBoardModel();\n  board.addMoveListener(this);\n  final int boardSize = getBoardSize();\n  numericCells = new TextView[boardSize][boardSize];\n  imageCells = new ImageView[boardSize][boardSize];\n  for (int i = 0; i < boardSize; i++)\n  {\n   TableRow numericRow = new TableRow(this);\n   TableRow imageRow = new TableRow(this);\n   for (int j = 0; j < boardSize; j++)\n   {\n    TextView numericCell = new TextView(this);\n    ImageView imageCell = new ImageView(this);\n    numericCells[i][j] = numericCell;\n    imageCells[i][j] = imageCell;\n    initNumericCell(numericCell);\n    initImageCell(imageCell);\n    numericRow.addView(numericCell);\n    imageRow.addView(imageCell);\n   }\n   numericBoardView.addView(numericRow);\n   imageBoardView.addView(imageRow);\n  }\n  countDownCell = new TextView(this);\n  initNumericCell(countDownCell);\n }\n\n protected void initImage()\n {\n  if (!game.isImageSelected())\n  {\n   Intent imageRequest = new Intent(this, ImageSelection.class);\n   startActivityForResult(imageRequest, IMAGE_SELECTION_REQUEST_CODE);\n  }\n }\n\n protected void resumeImpl()\n {\n  if (dialogActive)\n   hideBoard();\n  else\n  {\n   initImage();\n   if (game.isImageSelected())\n   {\n    showImageBoard();\n    if (!game.isStarted())\n     showPreview();\n   }\n  }\n }\n\n protected void saveSettings()\n {\n  Editor settings = getPreferences(MODE_PRIVATE).edit();\n  game.save(settings);\n  settings.commit();\n }\n\n protected void congratulate()\n {\n  Intent intent = new Intent(this, YouWin.class);\n  intent.putExtra(YouWin.EXTRA_MOVE_COUNT, game.getMoveCount());\n  if (game.isImageSelected())\n   intent.putExtra(ImageSelection.EXTRA_SELECTED_IMAGE_ID_KEY, game.getSelectedImageId());\n  startActivityForResult(intent, CONGRATULATIONS_REQUEST_CODE);\n  restart(true);\n }\n\n protected void showPreview()\n {\n  if (null != previewTimer)\n   return;\n  game.preview();\n  int lastIndex = getBoardSize() - 1;\n  final View blankTileCell = imageCells[lastIndex][lastIndex];\n  final ViewGroup parent = (ViewGroup)blankTileCell.getParent();\n  parent.removeView(blankTileCell);\n  countDownCell.setTextColor(getResources().getColor(R.color.countdown_tile_text));\n  parent.addView(countDownCell);\n  previewTimer = new CountDownTimer(3000, 500) {\n   @Override\n   public void onTick(long millisUntilFinished)\n   {\n    int secondsRemaining = Math.round((float)millisUntilFinished / 1000);\n    countDownCell.setText(Integer.toString(secondsRemaining));\n   }\n   \n   @Override\n   public void onFinish()\n   {\n    hideBoard();\n    parent.removeView(countDownCell);\n    parent.addView(blankTileCell);\n    game.start();\n    showImageBoard();\n    previewTimer = null;\n   }\n  };\n  \n  previewTimer.start();\n }\n\n protected void wrongClick()\n {\n  if (null != dimTimer)\n   return;\n  dimTimer = new CountDownTimer(500L, 500L)\n  {\n   @Override\n   public void onTick(long millisUntilFinished) {}\n   \n   @Override\n   public void onFinish()\n   {\n    dimImmovableTiles(false);\n    dimTimer = null;\n   }\n  };\n  dimImmovableTiles(true);\n  dimTimer.start();\n }\n\n protected void dimImmovableTiles(boolean on)\n {\n  final Board board = getBoardModel();\n  final int boardSize = board.getSize();\n  final int color = getResources().getColor(R.color.tile_dimmer);\n  for (int r = 0; r < boardSize; r++)\n   for (int c = 0; c < boardSize; c++)\n   {\n    final ImageView cell = imageCells[r][c];\n    final Object tag = cell.getTag();\n    if (tag instanceof Tile\n      && null == board.permittedMoveFor((Tile)tag)\n      && 0 != ((Tile)tag).getNumber())\n    {\n     if (on)\n      cell.setColorFilter(color);\n     else\n      cell.clearColorFilter();\n    }\n   }\n }\n\n protected void resizeContent(final int screenWidth, final int screenHeight)\n {\n  if (null == game)\n   throw new IllegalStateException(this + \" must be initialized with onCreate()\");\n  final float imageRatio = game.isImageSelected() ? game.getImageAspectRatio() : 1f;\n  final int boardSize = getBoardSize();\n  final DisplayMetrics metrics = getResources().getDisplayMetrics();\n  // border width 1 dp rounded up to nearest whole pixels\n  final int borderWidth = (int) Math.ceil(metrics.density);\n  // calculate spacing allotment\n  final int spacing = borderWidth * 2 * boardSize;\n  if (screenWidth < spacing + boardSize || screenHeight < spacing + boardSize)\n   throw new UnsupportedOperationException(\"Screen size (\" + screenWidth\n     + \" x \" + screenHeight + \") too small for a board of \" + boardSize\n     + \" rows\");\n  final float adjustedScreenRatio = (float) (screenWidth - spacing)\n    / (screenHeight - spacing);\n\n  int width, height;\n  if (adjustedScreenRatio > imageRatio)\n  {\n   // scale to screen height\n   height = screenHeight;\n   // fix width = imageRatio * height\n   width = (int) (imageRatio * height);\n   if (width < spacing + boardSize)\n    throw new UnsupportedOperationException(\n      \"Need a wider image to make a board: scaled to \" + width\n\t+ \" pixels, need \" + (spacing + boardSize));\n  }\n  else\n  {\n   // scale to screen width\n   width = screenWidth;\n   // fix height = width / imageRatio\n   height = (int) (width / imageRatio);\n   if (height < spacing + boardSize)\n    throw new UnsupportedOperationException(\n      \"Need a taller image to make a board: scaled to \" + height\n\t+ \" pixels, need \" + (spacing + boardSize));\n  }\n\n  // make the dimensions divisible by row/column count\n  height -= height % boardSize;\n  width -= width % boardSize;\n  RelativeLayout.LayoutParams boardLayoutParams = new RelativeLayout.LayoutParams(\n    width, height);\n  boardLayoutParams.addRule(RelativeLayout.CENTER_IN_PARENT);\n  numericBoardView.setLayoutParams(boardLayoutParams);\n  imageBoardView.setLayoutParams(boardLayoutParams);\n\n  // load and resize the image\n  width = width / boardSize - 2 * borderWidth;\n  height = height / boardSize - 2 * borderWidth;\n  game.setTileSize(width, height);\n  if (game.isImageSelected())\n   try\n   {\n    game.loadImage(this);\n   }\n   catch (ImageProcessingException failure)\n   {\n    game.resetSelectedImage();\n    Log.e(getClass().getName(), failure.getMessage(), failure);\n    hideBoard();\n    alert(R.string.image_load_error);\n    return;\n   }\n\n  // size and fill cell views\n  TableRow.LayoutParams cellParams = new TableRow.LayoutParams(width, height);\n  cellParams.setMargins(borderWidth, borderWidth, borderWidth, borderWidth);\n  float fontSize = width * 4f / 3;\n  if (fontSize > height)\n   fontSize = height;\n  fontSize *= .5f;\n  final Board board = getBoardModel();\n  for (int i = 0; i < boardSize; i++)\n  {\n   for (int j = 0; j < boardSize; j++)\n   {\n    TextView numericCell = numericCells[i][j];\n    numericCell.setLayoutParams(cellParams);\n    numericCell.setTextSize(TypedValue.COMPLEX_UNIT_PX, fontSize);\n    ImageView imageCell = imageCells[i][j];\n    imageCell.setLayoutParams(cellParams);\n    Tile tile = board.getTileAt(i, j);\n    assignTile(numericCell, tile);\n    assignTile(imageCell, tile);\n   }\n  }\n  countDownCell.setLayoutParams(cellParams);\n  countDownCell.setTextSize(TypedValue.COMPLEX_UNIT_PX, fontSize);\n }\n\n @Override\n protected void onPrepareDialog(int id, Dialog dialog)\n {\n  super.onPrepareDialog(id, dialog);\n  dialogActive = true;\n }\n\n @Override\n protected void onDialogResponse(int dialogId, int response)\n {\n  dialogActive = false;\n  resumeImpl();\n }\n\n @Override\n protected void onDialogCancel(int dialogId)\n {\n  if (dialogActive)\n  {\n   dialogActive = false;\n   resumeImpl();\n  }\n }\n\n protected void alert(int messageId)\n {\n  String msg = getResources().getString(messageId);\n  alert(msg);\n }\n\n private void assignTile(final TextView cell, final Tile tile)\n {\n  final int number = tile.getNumber();\n  cell.setText(0 == number ? \" \" : Integer.toString(number));\n  cell.setTag(tile);\n  cell.setBackgroundColor(getResources().getColor(\n    0 == number ? R.color.blank_tile : R.color.numeric_tile_background));\n }\n\n private void assignTile(final ImageView cell, final Tile tile)\n {\n  cell.setImageDrawable(tile.getDrawable());\n  cell.setTag(tile);\n }\n\n private void initImageCell(ImageView imageCell)\n {\n  imageCell.setOnClickListener(this);\n  imageCell.setOnLongClickListener(this);\n }\n\n private void initNumericCell(TextView numericCell)\n {\n  numericCell.setGravity(Gravity.CENTER);\n  numericCell.setTextColor(getResources().getColor(R.color.numeric_tile_text));\n  numericCell.setOnClickListener(this);\n  numericCell.setOnLongClickListener(this);\n }\n\n private void changeBoardImage(Serializable id)\n {\n  game.setSelectedImage(id);\n  try\n  {\n   game.updateImageSize(this);\n  }\n  catch (ImageProcessingException failure)\n  {\n   game.resetSelectedImage();\n   Log.e(getClass().getName(), failure.getMessage(), failure);\n   alert(R.string.image_load_error);\n  }\n }\n\n private Game game;\n private RelativeLayout windowLayout;\n private TableLayout numericBoardView, imageBoardView;\n private TextView[][] numericCells;\n private ImageView[][] imageCells;\n private boolean dialogActive;\n private int lastWidth = -1, lastHeight = -1;\n private CountDownTimer previewTimer, dimTimer;\n private TextView countDownCell;\n\n private static final int IMAGE_SELECTION_REQUEST_CODE = 1;\n private static final int CONGRATULATIONS_REQUEST_CODE = 2;\n}\n"], "body_t": ["<empty>"], "date_tdt": "2013-06-29T03:04:59Z", "hash_sni": "51310f3f319ee7f2f096ce471fa68e5ea0a7d047", "name_sni": "src/name/livitski/games/puzzle/android/GamePlay.java", "patch_t": ["+/**\n+ * Copyright \u00a9 2011,2013 Konstantin Livitski\n+ * \n+ * This file is part of n-Puzzle application. n-Puzzle application is free\n+ * software; you can redistribute it and/or modify it under the terms of the GNU\n+ * General Public License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ * \n+ * n-Puzzle application contains adaptations of artwork covered by the Creative\n+ * Commons Attribution-ShareAlike 3.0 Unported license. Please refer to the\n+ * NOTICE.md file at the root of this distribution or repository for licensing\n+ * terms that apply to that artwork.\n+ * \n+ * n-Puzzle application is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n+ * details.\n+ * \n+ * You should have received a copy of the GNU General Public License along with\n+ * n-Puzzle application; if not, see the LICENSE/gpl.txt file of this distribution\n+ * or visit <http://www.gnu.org/licenses>.\n+ */\n+package name.livitski.games.puzzle.android;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import name.livitski.games.puzzle.android.model.Board;\n+import name.livitski.games.puzzle.android.model.Game;\n+import name.livitski.games.puzzle.android.model.Game.Level;\n+import name.livitski.games.puzzle.android.model.ImageProcessingException;\n+import name.livitski.games.puzzle.android.model.Move;\n+import name.livitski.games.puzzle.android.model.MoveListener;\n+import name.livitski.games.puzzle.android.model.Tile;\n+import android.app.Dialog;\n+import android.content.Intent;\n+import android.content.SharedPreferences;\n+import android.content.SharedPreferences.Editor;\n+import android.os.Bundle;\n+import android.os.CountDownTimer;\n+import android.util.DisplayMetrics;\n+import android.util.Log;\n+import android.util.TypedValue;\n+import android.view.Gravity;\n+import android.view.Menu;\n+import android.view.MenuInflater;\n+import android.view.MenuItem;\n+import android.view.View;\n+import android.view.View.OnClickListener;\n+import android.view.View.OnLongClickListener;\n+import android.view.ViewGroup;\n+import android.widget.ImageView;\n+import android.widget.RelativeLayout;\n+import android.widget.TableLayout;\n+import android.widget.TableRow;\n+import android.widget.TextView;\n+\n+/**\n+ * User's interface to the puzzle.\n+ */\n+public class GamePlay extends Activity implements OnClickListener, OnLongClickListener, MoveListener\n+{\n+ @Override\n+ public void onCreate(Bundle savedInstanceState)\n+ {\n+  super.onCreate(savedInstanceState);\n+  initLayout();\n+  initGame();\n+  initBoard();\n+ }\n+\n+ /**\n+  * Handles user's clicks and taps on the board.\n+  */\n+ public void onClick(View v)\n+ {\n+  final Object tag = v.getTag();\n+  if (null == previewTimer && tag instanceof Tile)\n+  {\n+   final Board board = getBoardModel();\n+   final Move move = board.permittedMoveFor((Tile) tag);\n+   if (null != move)\n+   {\n+    board.move(move);\n+    if (game.isSolved())\n+     congratulate();\n+   }\n+   else\n+   {\n+    wrongClick();\n+   }\n+  }\n+ }\n+\n+ @Override\n+ public boolean onCreateOptionsMenu(Menu menu)\n+ {\n+  MenuInflater inflater = getMenuInflater();\n+  inflater.inflate(R.menu.game_menu, menu);\n+  return true;\n+ }\n+\n+ @Override\n+ public boolean onOptionsItemSelected(MenuItem item)\n+ {\n+  switch (item.getItemId())\n+  {\n+  case R.id.item_reshuffle:\n+   restart(false);\n+   break;\n+  case R.id.item_change_picture:\n+   restart(true);\n+   break;\n+  case R.id.item_difficulty_hard:\n+   if (game.getDifficulty() != Game.Level.HARD)\n+    restart(Game.Level.HARD);\n+   break;\n+  case R.id.item_difficulty_medium:\n+   if (game.getDifficulty() != Game.Level.MEDIUM)\n+    restart(Game.Level.MEDIUM);\n+   break;\n+  case R.id.item_difficulty_easy:\n+   if (game.getDifficulty() != Game.Level.EASY)\n+    restart(Game.Level.EASY);\n+   break;\n+  default:\n+   return super.onOptionsItemSelected(item);\n+  }\n+  resumeImpl();\n+  return true;\n+ }\n+\n+ /**\n+  * Handles a long click on the blank tile.\n+  */\n+ public boolean onLongClick(View v)\n+ {\n+  final Object tag = v.getTag();\n+  if (null == previewTimer && tag instanceof Tile && 0 == ((Tile)tag).getNumber()) \n+  {\n+   toggleBoardType();\n+   return true;\n+  }\n+  else\n+   return false;\n+ }\n+\n+ /**\n+  * Updates the view when the model posts a tile move notification.\n+  */\n+ public void tileMoved(final Tile from, final Tile to)\n+ {\n+  // repeat for both tiles\n+  for (Tile tile : new Tile[] { from, to })\n+  {\n+   TextView numericCell = numericCells[tile.getRow()][tile.getColumn()];\n+   assignTile(numericCell, tile);\n+   ImageView imageCell = imageCells[tile.getRow()][tile.getColumn()];\n+   assignTile(imageCell, tile);\n+  }\n+ }\n+\n+ @Override\n+ protected void onResume()\n+ {\n+  super.onResume();\n+  resumeImpl();\n+ }\n+\n+ @Override\n+ protected void onActivityResult(int requestCode, int resultCode, Intent data)\n+ {\n+  switch (requestCode)\n+  {\n+  case IMAGE_SELECTION_REQUEST_CODE:\n+   if (RESULT_CANCELED == resultCode)\n+    finish();\n+   else\n+   {\n+    Serializable id = data.getSerializableExtra(ImageSelection.EXTRA_SELECTED_IMAGE_ID_KEY);\n+    if (null == id)\n+     throw new IllegalStateException(\n+       \"Image selection page did not return an image\");\n+    Level requestedLevel =\n+      (Level)data.getSerializableExtra(ImageSelection.EXTRA_SELECTED_IMAGE_INITIAL_LEVEL);\n+    if (null != requestedLevel && requestedLevel != game.getDifficulty())\n+     restart(requestedLevel);\n+    changeBoardImage(id);\n+   }\n+   break;\n+  case CONGRATULATIONS_REQUEST_CODE:\n+   if (RESULT_OK != resultCode)\n+    finish();\n+   break;\n+  default:\n+   throw new IllegalStateException(\n+     \"Received a result from unknown activity, code = \" + requestCode);\n+  }\n+ }\n+\n+ @Override\n+ protected void onPause()\n+ {\n+  super.onPause();\n+  saveSettings();\n+ }\n+\n+ /** Returns the current board size. */\n+ public int getBoardSize()\n+ {\n+  return getBoardModel().getSize();\n+ }\n+\n+ /**\n+  * Discards the current board state and starts a new game.\n+  * Unless you are switching activities, you have to follow up\n+  * this method with a call to {@link #resumeImpl()} to show\n+  * the new board.\n+  * @param selectNewImage tells the puzzle whether the user\n+  * would like to select a new image\n+  */\n+ protected void restart(boolean selectNewImage)\n+ {\n+  cancelPreviewTimer();\n+  hideBoard();\n+  if (selectNewImage)\n+   newGame(null);\n+  else\n+   game.start();\n+  initBoard();\n+ }\n+\n+ /**\n+  * Starts a new game with a specific difficulty level. If there\n+  * is an image selected for the current game, uses the same\n+  * image for the new game. \n+  * Unless you are switching activities, you have to follow up\n+  * this method with a call to {@link #resumeImpl()} to show\n+  * the new board.\n+  * @param difficulty difficulty level for the new game\n+  */\n+ protected void restart(Game.Level difficulty)\n+ {\n+  cancelPreviewTimer();\n+  hideBoard();\n+  Serializable imageId = null;\n+  if (null != game && game.isImageSelected())\n+   imageId = game.getSelectedImageId();\n+  newGame(difficulty);\n+  if (null != imageId)\n+   changeBoardImage(imageId);\n+  initBoard();\n+ }\n+\n+ protected void cancelPreviewTimer()\n+ {\n+  if (null != previewTimer)\n+  {\n+   previewTimer.cancel();\n+   previewTimer = null;\n+  }\n+ }\n+\n+ protected void hideBoard()\n+ {\n+  windowLayout.removeAllViews();\n+  windowLayout.invalidate();\n+ }\n+\n+ protected void showNumericBoard()\n+ {\n+  // force resizeContent() if the board was hidden since onMeasure() events might have been missed\n+  if (0 == windowLayout.getChildCount())\n+   lastWidth = lastHeight = -1;\n+  windowLayout.removeAllViews();\n+  windowLayout.addView(numericBoardView);\n+  windowLayout.invalidate();\n+ }\n+\n+ protected void showImageBoard()\n+ {\n+  // force resizeContent() if the board was hidden since onMeasure() events might have been missed\n+  if (0 == windowLayout.getChildCount())\n+   lastWidth = lastHeight = -1;\n+  windowLayout.removeAllViews();\n+  windowLayout.addView(imageBoardView);\n+  windowLayout.invalidate();\n+ }\n+\n+ /**\n+  * Toggles the \"cheat mode\" that shows the tiles' numbers.\n+  */\n+ protected void toggleBoardType()\n+ {\n+  if (0 == windowLayout.getChildCount())\n+   return;\n+  else if (windowLayout.getChildAt(0) == numericBoardView)\n+   showImageBoard();\n+  else\n+   showNumericBoard();\n+ }\n+ \n+ protected Board getBoardModel()\n+ {\n+  return game.getBoard();\n+ }\n+\n+ protected void initLayout()\n+ {\n+  windowLayout = new RelativeLayout(this) {\n+   @Override\n+   protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)\n+   {\n+    int width = MeasureSpec.getSize(widthMeasureSpec);\n+    int height = MeasureSpec.getSize(heightMeasureSpec);\n+    if (width != lastWidth || height != lastHeight)\n+    {\n+//     Log.d(\n+//       getClass().getName(),\n+//       \"resizing to width = \" + Integer.toHexString(widthMeasureSpec) + \" (\"\n+// \t+ width + \") \" + \", height = \"\n+// \t+ Integer.toHexString(heightMeasureSpec) + \" (\"\n+// \t+ height + \")\");\n+     if (0 < getChildCount())\n+      resizeContent(width, height);\n+     lastWidth = width;\n+     lastHeight = height;\n+    }\n+    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n+   }\n+  };\n+  windowLayout.setBackgroundColor(getResources().getColor(R.color.background));\n+  setContentView(windowLayout, new ViewGroup.LayoutParams(\n+    ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));\n+ }\n+\n+ protected void initGame()\n+ {\n+  SharedPreferences preferences = getPreferences(MODE_PRIVATE);\n+  Map<String, ?> settings = preferences.getAll();\n+  try\n+  {\n+   if (settings.containsKey(Game.DIFFICULTY_SETTING))\n+    newGame(Game.Level.valueOf((String)settings.get(Game.DIFFICULTY_SETTING)));\n+   else\n+    newGame(null);\n+   if (settings.containsKey(Game.IMAGE_ID_SETTING))\n+    changeBoardImage((Serializable)settings.get(Game.IMAGE_ID_SETTING));\n+  }\n+  catch (RuntimeException invalid)\n+  {\n+   Log.w(getClass().getName(), \"Error loading settings\", invalid);\n+   newGame(null);\n+  }\n+  game.load(preferences);\n+ }\n+\n+ protected void newGame(Level difficulty)\n+ {\n+  if (null != difficulty)\n+   game = new Game(difficulty);\n+  else if (null == game)\n+   game = new Game();\n+  else\n+   game = new Game(game.getDifficulty());\n+ }\n+\n+ protected void initBoard()\n+ {\n+  numericBoardView = new TableLayout(this);\n+  imageBoardView = new TableLayout(this);\n+  final Board board = getBoardModel();\n+  board.addMoveListener(this);\n+  final int boardSize = getBoardSize();\n+  numericCells = new TextView[boardSize][boardSize];\n+  imageCells = new ImageView[boardSize][boardSize];\n+  for (int i = 0; i < boardSize; i++)\n+  {\n+   TableRow numericRow = new TableRow(this);\n+   TableRow imageRow = new TableRow(this);\n+   for (int j = 0; j < boardSize; j++)\n+   {\n+    TextView numericCell = new TextView(this);\n+    ImageView imageCell = new ImageView(this);\n+    numericCells[i][j] = numericCell;\n+    imageCells[i][j] = imageCell;\n+    initNumericCell(numericCell);\n+    initImageCell(imageCell);\n+    numericRow.addView(numericCell);\n+    imageRow.addView(imageCell);\n+   }\n+   numericBoardView.addView(numericRow);\n+   imageBoardView.addView(imageRow);\n+  }\n+  countDownCell = new TextView(this);\n+  initNumericCell(countDownCell);\n+ }\n+\n+ protected void initImage()\n+ {\n+  if (!game.isImageSelected())\n+  {\n+   Intent imageRequest = new Intent(this, ImageSelection.class);\n+   startActivityForResult(imageRequest, IMAGE_SELECTION_REQUEST_CODE);\n+  }\n+ }\n+\n+ protected void resumeImpl()\n+ {\n+  if (dialogActive)\n+   hideBoard();\n+  else\n+  {\n+   initImage();\n+   if (game.isImageSelected())\n+   {\n+    showImageBoard();\n+    if (!game.isStarted())\n+     showPreview();\n+   }\n+  }\n+ }\n+\n+ protected void saveSettings()\n+ {\n+  Editor settings = getPreferences(MODE_PRIVATE).edit();\n+  game.save(settings);\n+  settings.commit();\n+ }\n+\n+ protected void congratulate()\n+ {\n+  Intent intent = new Intent(this, YouWin.class);\n+  intent.putExtra(YouWin.EXTRA_MOVE_COUNT, game.getMoveCount());\n+  if (game.isImageSelected())\n+   intent.putExtra(ImageSelection.EXTRA_SELECTED_IMAGE_ID_KEY, game.getSelectedImageId());\n+  startActivityForResult(intent, CONGRATULATIONS_REQUEST_CODE);\n+  restart(true);\n+ }\n+\n+ protected void showPreview()\n+ {\n+  if (null != previewTimer)\n+   return;\n+  game.preview();\n+  int lastIndex = getBoardSize() - 1;\n+  final View blankTileCell = imageCells[lastIndex][lastIndex];\n+  final ViewGroup parent = (ViewGroup)blankTileCell.getParent();\n+  parent.removeView(blankTileCell);\n+  countDownCell.setTextColor(getResources().getColor(R.color.countdown_tile_text));\n+  parent.addView(countDownCell);\n+  previewTimer = new CountDownTimer(3000, 500) {\n+   @Override\n+   public void onTick(long millisUntilFinished)\n+   {\n+    int secondsRemaining = Math.round((float)millisUntilFinished / 1000);\n+    countDownCell.setText(Integer.toString(secondsRemaining));\n+   }\n+   \n+   @Override\n+   public void onFinish()\n+   {\n+    hideBoard();\n+    parent.removeView(countDownCell);\n+    parent.addView(blankTileCell);\n+    game.start();\n+    showImageBoard();\n+    previewTimer = null;\n+   }\n+  };\n+  \n+  previewTimer.start();\n+ }\n+\n+ protected void wrongClick()\n+ {\n+  if (null != dimTimer)\n+   return;\n+  dimTimer = new CountDownTimer(500L, 500L)\n+  {\n+   @Override\n+   public void onTick(long millisUntilFinished) {}\n+   \n+   @Override\n+   public void onFinish()\n+   {\n+    dimImmovableTiles(false);\n+    dimTimer = null;\n+   }\n+  };\n+  dimImmovableTiles(true);\n+  dimTimer.start();\n+ }\n+\n+ protected void dimImmovableTiles(boolean on)\n+ {\n+  final Board board = getBoardModel();\n+  final int boardSize = board.getSize();\n+  final int color = getResources().getColor(R.color.tile_dimmer);\n+  for (int r = 0; r < boardSize; r++)\n+   for (int c = 0; c < boardSize; c++)\n+   {\n+    final ImageView cell = imageCells[r][c];\n+    final Object tag = cell.getTag();\n+    if (tag instanceof Tile\n+      && null == board.permittedMoveFor((Tile)tag)\n+      && 0 != ((Tile)tag).getNumber())\n+    {\n+     if (on)\n+      cell.setColorFilter(color);\n+     else\n+      cell.clearColorFilter();\n+    }\n+   }\n+ }\n+\n+ protected void resizeContent(final int screenWidth, final int screenHeight)\n+ {\n+  if (null == game)\n+   throw new IllegalStateException(this + \" must be initialized with onCreate()\");\n+  final float imageRatio = game.isImageSelected() ? game.getImageAspectRatio() : 1f;\n+  final int boardSize = getBoardSize();\n+  final DisplayMetrics metrics = getResources().getDisplayMetrics();\n+  // border width 1 dp rounded up to nearest whole pixels\n+  final int borderWidth = (int) Math.ceil(metrics.density);\n+  // calculate spacing allotment\n+  final int spacing = borderWidth * 2 * boardSize;\n+  if (screenWidth < spacing + boardSize || screenHeight < spacing + boardSize)\n+   throw new UnsupportedOperationException(\"Screen size (\" + screenWidth\n+     + \" x \" + screenHeight + \") too small for a board of \" + boardSize\n+     + \" rows\");\n+  final float adjustedScreenRatio = (float) (screenWidth - spacing)\n+    / (screenHeight - spacing);\n+\n+  int width, height;\n+  if (adjustedScreenRatio > imageRatio)\n+  {\n+   // scale to screen height\n+   height = screenHeight;\n+   // fix width = imageRatio * height\n+   width = (int) (imageRatio * height);\n+   if (width < spacing + boardSize)\n+    throw new UnsupportedOperationException(\n+      \"Need a wider image to make a board: scaled to \" + width\n+\t+ \" pixels, need \" + (spacing + boardSize));\n+  }\n+  else\n+  {\n+   // scale to screen width\n+   width = screenWidth;\n+   // fix height = width / imageRatio\n+   height = (int) (width / imageRatio);\n+   if (height < spacing + boardSize)\n+    throw new UnsupportedOperationException(\n+      \"Need a taller image to make a board: scaled to \" + height\n+\t+ \" pixels, need \" + (spacing + boardSize));\n+  }\n+\n+  // make the dimensions divisible by row/column count\n+  height -= height % boardSize;\n+  width -= width % boardSize;\n+  RelativeLayout.LayoutParams boardLayoutParams = new RelativeLayout.LayoutParams(\n+    width, height);\n+  boardLayoutParams.addRule(RelativeLayout.CENTER_IN_PARENT);\n+  numericBoardView.setLayoutParams(boardLayoutParams);\n+  imageBoardView.setLayoutParams(boardLayoutParams);\n+\n+  // load and resize the image\n+  width = width / boardSize - 2 * borderWidth;\n+  height = height / boardSize - 2 * borderWidth;\n+  game.setTileSize(width, height);\n+  if (game.isImageSelected())\n+   try\n+   {\n+    game.loadImage(this);\n+   }\n+   catch (ImageProcessingException failure)\n+   {\n+    game.resetSelectedImage();\n+    Log.e(getClass().getName(), failure.getMessage(), failure);\n+    hideBoard();\n+    alert(R.string.image_load_error);\n+    return;\n+   }\n+\n+  // size and fill cell views\n+  TableRow.LayoutParams cellParams = new TableRow.LayoutParams(width, height);\n+  cellParams.setMargins(borderWidth, borderWidth, borderWidth, borderWidth);\n+  float fontSize = width * 4f / 3;\n+  if (fontSize > height)\n+   fontSize = height;\n+  fontSize *= .5f;\n+  final Board board = getBoardModel();\n+  for (int i = 0; i < boardSize; i++)\n+  {\n+   for (int j = 0; j < boardSize; j++)\n+   {\n+    TextView numericCell = numericCells[i][j];\n+    numericCell.setLayoutParams(cellParams);\n+    numericCell.setTextSize(TypedValue.COMPLEX_UNIT_PX, fontSize);\n+    ImageView imageCell = imageCells[i][j];\n+    imageCell.setLayoutParams(cellParams);\n+    Tile tile = board.getTileAt(i, j);\n+    assignTile(numericCell, tile);\n+    assignTile(imageCell, tile);\n+   }\n+  }\n+  countDownCell.setLayoutParams(cellParams);\n+  countDownCell.setTextSize(TypedValue.COMPLEX_UNIT_PX, fontSize);\n+ }\n+\n+ @Override\n+ protected void onPrepareDialog(int id, Dialog dialog)\n+ {\n+  super.onPrepareDialog(id, dialog);\n+  dialogActive = true;\n+ }\n+\n+ @Override\n+ protected void onDialogResponse(int dialogId, int response)\n+ {\n+  dialogActive = false;\n+  resumeImpl();\n+ }\n+\n+ @Override\n+ protected void onDialogCancel(int dialogId)\n+ {\n+  if (dialogActive)\n+  {\n+   dialogActive = false;\n+   resumeImpl();\n+  }\n+ }\n+\n+ protected void alert(int messageId)\n+ {\n+  String msg = getResources().getString(messageId);\n+  alert(msg);\n+ }\n+\n+ private void assignTile(final TextView cell, final Tile tile)\n+ {\n+  final int number = tile.getNumber();\n+  cell.setText(0 == number ? \" \" : Integer.toString(number));\n+  cell.setTag(tile);\n+  cell.setBackgroundColor(getResources().getColor(\n+    0 == number ? R.color.blank_tile : R.color.numeric_tile_background));\n+ }\n+\n+ private void assignTile(final ImageView cell, final Tile tile)\n+ {\n+  cell.setImageDrawable(tile.getDrawable());\n+  cell.setTag(tile);\n+ }\n+\n+ private void initImageCell(ImageView imageCell)\n+ {\n+  imageCell.setOnClickListener(this);\n+  imageCell.setOnLongClickListener(this);\n+ }\n+\n+ private void initNumericCell(TextView numericCell)\n+ {\n+  numericCell.setGravity(Gravity.CENTER);\n+  numericCell.setTextColor(getResources().getColor(R.color.numeric_tile_text));\n+  numericCell.setOnClickListener(this);\n+  numericCell.setOnLongClickListener(this);\n+ }\n+\n+ private void changeBoardImage(Serializable id)\n+ {\n+  game.setSelectedImage(id);\n+  try\n+  {\n+   game.updateImageSize(this);\n+  }\n+  catch (ImageProcessingException failure)\n+  {\n+   game.resetSelectedImage();\n+   Log.e(getClass().getName(), failure.getMessage(), failure);\n+   alert(R.string.image_load_error);\n+  }\n+ }\n+\n+ private Game game;\n+ private RelativeLayout windowLayout;\n+ private TableLayout numericBoardView, imageBoardView;\n+ private TextView[][] numericCells;\n+ private ImageView[][] imageCells;\n+ private boolean dialogActive;\n+ private int lastWidth = -1, lastHeight = -1;\n+ private CountDownTimer previewTimer, dimTimer;\n+ private TextView countDownCell;\n+\n+ private static final int IMAGE_SELECTION_REQUEST_CODE = 1;\n+ private static final int CONGRATULATIONS_REQUEST_CODE = 2;\n+}\n\\ No newline at end of file"], "score": 1.0, "methods_t": ["CountDownTimer Game IllegalStateException ImageView Intent RelativeLayout RelativeLayout.LayoutParams TableLayout TableRow TableRow.LayoutParams TextView UnsupportedOperationException ViewGroup.LayoutParams addMoveListener addRule addView alert assignTile cancel cancelPreviewTimer ceil changeBoardImage clearColorFilter commit congratulate containsKey dimImmovableTiles e edit finish get getAll getBoard getBoardModel getBoardSize getChildAt getChildCount getClass getColor getColumn getDifficulty getDisplayMetrics getDrawable getImageAspectRatio getItemId getMenuInflater getMessage getMoveCount getName getNumber getParent getPreferences getResources getRow getSelectedImageId getSerializableExtra getSize getString getTag getTileAt hideBoard inflate initBoard initGame initImage initImageCell initLayout initNumericCell invalidate isImageSelected isSolved isStarted load loadImage move newGame permittedMoveFor preview putExtra removeAllViews removeView resetSelectedImage resizeContent restart resumeImpl round save saveSettings setBackgroundColor setColorFilter setContentView setGravity setImageDrawable setLayoutParams setMargins setOnClickListener setOnLongClickListener setSelectedImage setTag setText setTextColor setTextSize setTileSize showImageBoard showNumericBoard showPreview start startActivityForResult toString toggleBoardType updateImageSize valueOf w wrongClick"], "_version_": 1526752050868649984, "subject_t": ["Publish n-Puzzle sources"], "comments_t": ["   // scale to screen height    // fix height = width / imageRatio   // force resizeContent() if the board was hidden since onMeasure() events might have been missed    // scale to screen width /** \n * Returns the current board size. \n */\n /** \n * Handles a long click on the blank tile.\n */\n   // load and resize the image   // repeat for both tiles // \t+ height + \")\"); /** \n * Handles user's clicks and taps on the board.\n */\n // \t+ width + \") \" + \", height = \" /** \n * Discards the current board state and starts a new game. Unless you are switching activities, you have to follow up this method with a call to  {@link #resumeImpl()} to showthe new board.\n * @param selectNewImage tells the puzzle whether the userwould like to select a new image\n */\n   // calculate spacing allotment /** \n * Toggles the \"cheat mode\" that shows the tiles' numbers.\n */\n //     Log.d( /** \n * Updates the view when the model posts a tile move notification.\n */\n   // border width 1 dp rounded up to nearest whole pixels   // size and fill cell views /** \n * User's interface to the puzzle.\n */\n    // fix width = imageRatio * height // \t+ Integer.toHexString(heightMeasureSpec) + \" (\" //       \"resizing to width = \" + Integer.toHexString(widthMeasureSpec) + \" (\"   // make the dimensions divisible by row/column count //       getClass().getName(), /** \n * Starts a new game with a specific difficulty level. If there is an image selected for the current game, uses the same image for the new game.  Unless you are switching activities, you have to follow up this method with a call to  {@link #resumeImpl()} to showthe new board.\n * @param difficulty difficulty level for the new game\n */\n"], "callsites_t": ["android.content.SharedPreferences.Editor.commit() android.content.Intent.putExtra(<unknown>, <unknown>) android.view.ViewGroup.removeAllViews() name.livitski.games.puzzle.android.GamePlay.showPreview() android.view.ViewGroup.getChildCount() java.util.Map<java.lang.String,>.get(<unknown>) name.livitski.games.puzzle.android.GamePlay.getBoardModel() <unknown>.getRow() name.livitski.games.puzzle.android.GamePlay.alert(<unknown>) <unknown>.isImageSelected() <unknown>.getResources() android.view.ViewGroup.addView(android.widget.TextView) android.widget.TableRow.LayoutParams.TableRow.LayoutParams(int, int) name.livitski.games.puzzle.android.GamePlay.assignTile(android.widget.ImageView, name.livitski.games.puzzle.android.Tile) name.livitski.games.puzzle.android.GamePlay.wrongClick() android.view.ViewGroup.removeAllViews() android.widget.TextView.setText(java.lang.String) java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) name.livitski.games.puzzle.android.GamePlay.getBoardModel() <unknown>.isImageSelected() android.view.ViewGroup.getChildCount() name.livitski.games.puzzle.android.GamePlay.showImageBoard() name.livitski.games.puzzle.android.GamePlay.hideBoard() name.livitski.games.puzzle.android.GamePlay.dimImmovableTiles(boolean) <unknown>.edit() name.livitski.games.puzzle.android.GamePlay.showImageBoard() android.view.View.setTag(name.livitski.games.puzzle.android.Tile) name.livitski.games.puzzle.android.GamePlay.getBoardSize() android.widget.TextView.setTextColor(<unknown>) android.widget.ImageView.setImageDrawable(<unknown>) <unknown>.setSelectedImage(java.io.Serializable) android.view.View.invalidate() android.view.View.getTag() name.livitski.games.puzzle.android.GamePlay.resumeImpl() <unknown>.setTileSize(int, int) name.livitski.games.puzzle.android.GamePlay.initImageCell(android.widget.ImageView) <unknown>.startActivityForResult(android.content.Intent, int) <unknown>.move(name.livitski.games.puzzle.android.Move) java.lang.Class.getName() name.livitski.games.puzzle.android.GamePlay.initBoard() name.livitski.games.puzzle.android.GamePlay.newGame(Game.Level) <unknown>.startActivityForResult(android.content.Intent, int) <unknown>.preview() java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) <unknown>.setContentView(android.widget.RelativeLayout, android.view.ViewGroup.LayoutParams) android.view.View.setLayoutParams(android.widget.TableRow.LayoutParams) <unknown>.updateImageSize(name.livitski.games.puzzle.android.GamePlay) <unknown>.getDisplayMetrics() android.view.View.MeasureSpec.getSize(int) android.view.View.getTag() android.view.View.invalidate() android.view.ViewGroup.addView(android.widget.TableLayout) <unknown>.RelativeLayout(name.livitski.games.puzzle.android.GamePlay) android.view.ViewGroup.addView(android.widget.TextView) java.lang.Class.getName() <unknown>.Game() java.lang.Math.round(float) name.livitski.games.puzzle.android.GamePlay.saveSettings() <unknown>.start() name.livitski.games.puzzle.android.GamePlay.assignTile(android.widget.TextView, name.livitski.games.puzzle.android.Tile) <unknown>.loadImage(name.livitski.games.puzzle.android.GamePlay) java.lang.IllegalStateException.IllegalStateException(java.lang.String) android.view.View.setLayoutParams(android.widget.RelativeLayout.LayoutParams) android.widget.RelativeLayout.LayoutParams.addRule(int) android.widget.TableRow.TableRow(name.livitski.games.puzzle.android.GamePlay) name.livitski.games.puzzle.android.GamePlay.congratulate() <unknown>.getMoveCount() name.livitski.games.puzzle.android.GamePlay.assignTile(android.widget.TextView, name.livitski.games.puzzle.android.Tile) <unknown>.getResources() <unknown>.getMessage() android.widget.TextView.setTextSize(int, float) android.view.ViewGroup.getChildCount() <unknown>.getTileAt(int, int) android.content.Intent.getSerializableExtra(<unknown>) java.lang.Object.getClass() android.view.View.setLayoutParams(android.widget.TableRow.LayoutParams) <unknown>.finish() java.lang.Object.getClass() <unknown>.isImageSelected() name.livitski.games.puzzle.android.GamePlay.initNumericCell(android.widget.TextView) android.widget.TableLayout.addView(android.widget.TableRow) <unknown>.isImageSelected() <unknown>.getMenuInflater() name.livitski.games.puzzle.android.GamePlay.restart(<unknown>) android.widget.ImageView.ImageView(name.livitski.games.puzzle.android.GamePlay) <unknown>.getColumn() android.view.View.setLayoutParams(android.widget.RelativeLayout.LayoutParams) android.content.SharedPreferences.getAll() name.livitski.games.puzzle.android.GamePlay.getBoardModel() <unknown>.getDifficulty() name.livitski.games.puzzle.android.GamePlay.resumeImpl() android.view.ViewGroup.removeView(android.widget.TextView) android.os.CountDownTimer.start() android.view.View.setOnClickListener(name.livitski.games.puzzle.android.GamePlay) <unknown>.permittedMoveFor(name.livitski.games.puzzle.android.Tile) name.livitski.games.puzzle.android.GamePlay.initNumericCell(android.widget.TextView) name.livitski.games.puzzle.android.GamePlay.restart(<unknown>) android.view.View.setLayoutParams(android.widget.TableRow.LayoutParams) .CountDownTimer(int, int) android.content.Intent.putExtra(<unknown>, <unknown>) name.livitski.games.puzzle.android.GamePlay.cancelPreviewTimer() <unknown>.getResources() name.livitski.games.puzzle.android.GamePlay.hideBoard() android.view.MenuItem.getItemId() <unknown>.getColor(<unknown>) android.widget.TableLayout.TableLayout(name.livitski.games.puzzle.android.GamePlay) <unknown>.getResources() android.view.View.getParent() <unknown>.isSolved() <unknown>.getColor(<unknown>) <unknown>.getDifficulty() name.livitski.games.puzzle.android.GamePlay.initGame() name.livitski.games.puzzle.android.GamePlay.resizeContent(int, int) name.livitski.games.puzzle.android.GamePlay.changeBoardImage(java.io.Serializable) android.view.ViewGroup.getChildCount() name.livitski.games.puzzle.android.GamePlay.assignTile(android.widget.ImageView, name.livitski.games.puzzle.android.Tile) .CountDownTimer(long, long) <unknown>.resetSelectedImage() <unknown>.getMessage() <unknown>.getNumber() android.widget.TextView.TextView(name.livitski.games.puzzle.android.GamePlay) java.lang.Object.getClass() android.view.View.setOnClickListener(name.livitski.games.puzzle.android.GamePlay) name.livitski.games.puzzle.android.GamePlay.resumeImpl() <unknown>.getBoard() java.lang.Integer.toString(int) android.widget.TableLayout.addView(android.widget.TableRow) android.view.ViewGroup.LayoutParams.ViewGroup.LayoutParams(int, int) java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String) java.lang.IllegalStateException.IllegalStateException(java.lang.String) android.view.View.setBackgroundColor(<unknown>) android.view.ViewGroup.getChildAt(int) java.util.Map<java.lang.String,>.containsKey(<unknown>) android.widget.ImageView.clearColorFilter() android.util.Log.e(java.lang.String, <unknown>, name.livitski.games.puzzle.android.ImageProcessingException) android.view.MenuInflater.inflate(<unknown>, android.view.Menu) <unknown>.getImageAspectRatio() java.lang.Object.Game(name.livitski.games.puzzle.android.Level) <unknown>.getNumber() name.livitski.games.puzzle.android.GamePlay.initImage() java.util.Map<java.lang.String,>.get(<unknown>) android.util.Log.e(java.lang.String, <unknown>, name.livitski.games.puzzle.android.ImageProcessingException) java.lang.Class.getName() <unknown>.valueOf(java.lang.String) android.view.View.invalidate() android.content.Intent.Intent(name.livitski.games.puzzle.android.GamePlay, java.lang.Class) <unknown>.getSize() name.livitski.games.puzzle.android.GamePlay.getBoardModel() name.livitski.games.puzzle.android.GamePlay.changeBoardImage(java.io.Serializable) android.view.View.getTag() name.livitski.games.puzzle.android.GamePlay.restart(boolean) <unknown>.getPreferences(<unknown>) android.view.ViewGroup.removeView(android.view.View) name.livitski.games.puzzle.android.GamePlay.getBoardSize() android.view.ViewGroup.addView(android.view.View) <unknown>.getColor(<unknown>) <unknown>.permittedMoveFor(name.livitski.games.puzzle.android.Tile) android.widget.TextView.setTextSize(int, float) android.util.Log.w(java.lang.String, java.lang.String, java.lang.RuntimeException) name.livitski.games.puzzle.android.GamePlay.getBoardModel() <unknown>.isStarted() android.widget.TextView.setText(java.lang.String) <unknown>.getColor(<unknown>) <unknown>.resetSelectedImage() <unknown>.getResources() name.livitski.games.puzzle.android.GamePlay.alert(java.lang.String) <unknown>.save(android.content.SharedPreferences.Editor) name.livitski.games.puzzle.android.GamePlay.changeBoardImage(java.io.Serializable) name.livitski.games.puzzle.android.GamePlay.restart(boolean) android.view.ViewGroup.addView(android.widget.TableLayout) name.livitski.games.puzzle.android.GamePlay.newGame(null) name.livitski.games.puzzle.android.GamePlay.initLayout() <unknown>.getSelectedImageId() name.livitski.games.puzzle.android.GamePlay.hideBoard() android.view.ViewGroup.removeAllViews() <unknown>.addMoveListener(name.livitski.games.puzzle.android.GamePlay) name.livitski.games.puzzle.android.GamePlay.restart(name.livitski.games.puzzle.android.Level) android.view.View.setOnLongClickListener(name.livitski.games.puzzle.android.GamePlay) java.lang.Integer.toString(int) java.lang.IllegalStateException.IllegalStateException(java.lang.String) <unknown>.load(android.content.SharedPreferences) name.livitski.games.puzzle.android.GamePlay.showNumericBoard() name.livitski.games.puzzle.android.GamePlay.restart(boolean) android.content.Intent.getSerializableExtra(<unknown>) name.livitski.games.puzzle.android.GamePlay.newGame(null) name.livitski.games.puzzle.android.GamePlay.dimImmovableTiles(boolean) name.livitski.games.puzzle.android.GamePlay.resumeImpl() android.view.View.setOnLongClickListener(name.livitski.games.puzzle.android.GamePlay) <unknown>.start() android.content.Intent.Intent(name.livitski.games.puzzle.android.GamePlay, java.lang.Class) android.widget.TextView.setTextColor(<unknown>) name.livitski.games.puzzle.android.GamePlay.initBoard() <unknown>.getSelectedImageId() <unknown>.getDrawable() name.livitski.games.puzzle.android.GamePlay.restart(<unknown>) java.util.Map<java.lang.String,>.containsKey(<unknown>) name.livitski.games.puzzle.android.GamePlay.getBoardSize() android.widget.RelativeLayout.LayoutParams.RelativeLayout.LayoutParams(int, int) name.livitski.games.puzzle.android.GamePlay.newGame(<unknown>) java.lang.Math.ceil(float) name.livitski.games.puzzle.android.GamePlay.toggleBoardType() android.os.CountDownTimer.cancel() android.os.CountDownTimer.start() android.view.View.setBackgroundColor(<unknown>) <unknown>.getResources() <unknown>.getResources() java.lang.Object.Game(<unknown>) <unknown>.getPreferences(<unknown>) android.view.ViewGroup.MarginLayoutParams.setMargins(int, int, int, int) name.livitski.games.puzzle.android.GamePlay.hideBoard() name.livitski.games.puzzle.android.GamePlay.alert(<unknown>) android.widget.ImageView.setColorFilter(int) name.livitski.games.puzzle.android.GamePlay.showImageBoard() <unknown>.getString(int) <unknown>.getDifficulty() <unknown>.isImageSelected() android.view.View.MeasureSpec.getSize(int) android.widget.TextView.setGravity(int) <unknown>.getColor(<unknown>) <unknown>.getSize() <unknown>.getNumber() android.view.ViewGroup.addView(android.widget.ImageView)"], "id": "StanLivitski/n-puzzle\u000051310f3f319ee7f2f096ce471fa68e5ea0a7d047\u0000src/name/livitski/games/puzzle/android/GamePlay.java", "callsites_cs": "android.content.SharedPreferences.Editor.commit()#android.content.Intent.putExtra(<unknown>, <unknown>)#android.view.ViewGroup.removeAllViews()#name.livitski.games.puzzle.android.GamePlay.showPreview()#android.view.ViewGroup.getChildCount()#java.util.Map<java.lang.String,>.get(<unknown>)#name.livitski.games.puzzle.android.GamePlay.getBoardModel()#<unknown>.getRow()#name.livitski.games.puzzle.android.GamePlay.alert(<unknown>)#<unknown>.isImageSelected()#<unknown>.getResources()#android.view.ViewGroup.addView(android.widget.TextView)#android.widget.TableRow.LayoutParams.TableRow.LayoutParams(int, int)#name.livitski.games.puzzle.android.GamePlay.assignTile(android.widget.ImageView, name.livitski.games.puzzle.android.Tile)#name.livitski.games.puzzle.android.GamePlay.wrongClick()#android.view.ViewGroup.removeAllViews()#android.widget.TextView.setText(java.lang.String)#java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String)#name.livitski.games.puzzle.android.GamePlay.getBoardModel()#<unknown>.isImageSelected()#android.view.ViewGroup.getChildCount()#name.livitski.games.puzzle.android.GamePlay.showImageBoard()#name.livitski.games.puzzle.android.GamePlay.hideBoard()#name.livitski.games.puzzle.android.GamePlay.dimImmovableTiles(boolean)#<unknown>.edit()#name.livitski.games.puzzle.android.GamePlay.showImageBoard()#android.view.View.setTag(name.livitski.games.puzzle.android.Tile)#name.livitski.games.puzzle.android.GamePlay.getBoardSize()#android.widget.TextView.setTextColor(<unknown>)#android.widget.ImageView.setImageDrawable(<unknown>)#<unknown>.setSelectedImage(java.io.Serializable)#android.view.View.invalidate()#android.view.View.getTag()#name.livitski.games.puzzle.android.GamePlay.resumeImpl()#<unknown>.setTileSize(int, int)#name.livitski.games.puzzle.android.GamePlay.initImageCell(android.widget.ImageView)#<unknown>.startActivityForResult(android.content.Intent, int)#<unknown>.move(name.livitski.games.puzzle.android.Move)#java.lang.Class.getName()#name.livitski.games.puzzle.android.GamePlay.initBoard()#name.livitski.games.puzzle.android.GamePlay.newGame(Game.Level)#<unknown>.startActivityForResult(android.content.Intent, int)#<unknown>.preview()#java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String)#<unknown>.setContentView(android.widget.RelativeLayout, android.view.ViewGroup.LayoutParams)#android.view.View.setLayoutParams(android.widget.TableRow.LayoutParams)#<unknown>.updateImageSize(name.livitski.games.puzzle.android.GamePlay)#<unknown>.getDisplayMetrics()#android.view.View.MeasureSpec.getSize(int)#android.view.View.getTag()#android.view.View.invalidate()#android.view.ViewGroup.addView(android.widget.TableLayout)#<unknown>.RelativeLayout(name.livitski.games.puzzle.android.GamePlay)#android.view.ViewGroup.addView(android.widget.TextView)#java.lang.Class.getName()#<unknown>.Game()#java.lang.Math.round(float)#name.livitski.games.puzzle.android.GamePlay.saveSettings()#<unknown>.start()#name.livitski.games.puzzle.android.GamePlay.assignTile(android.widget.TextView, name.livitski.games.puzzle.android.Tile)#<unknown>.loadImage(name.livitski.games.puzzle.android.GamePlay)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#android.view.View.setLayoutParams(android.widget.RelativeLayout.LayoutParams)#android.widget.RelativeLayout.LayoutParams.addRule(int)#android.widget.TableRow.TableRow(name.livitski.games.puzzle.android.GamePlay)#name.livitski.games.puzzle.android.GamePlay.congratulate()#<unknown>.getMoveCount()#name.livitski.games.puzzle.android.GamePlay.assignTile(android.widget.TextView, name.livitski.games.puzzle.android.Tile)#<unknown>.getResources()#<unknown>.getMessage()#android.widget.TextView.setTextSize(int, float)#android.view.ViewGroup.getChildCount()#<unknown>.getTileAt(int, int)#android.content.Intent.getSerializableExtra(<unknown>)#java.lang.Object.getClass()#android.view.View.setLayoutParams(android.widget.TableRow.LayoutParams)#<unknown>.finish()#java.lang.Object.getClass()#<unknown>.isImageSelected()#name.livitski.games.puzzle.android.GamePlay.initNumericCell(android.widget.TextView)#android.widget.TableLayout.addView(android.widget.TableRow)#<unknown>.isImageSelected()#<unknown>.getMenuInflater()#name.livitski.games.puzzle.android.GamePlay.restart(<unknown>)#android.widget.ImageView.ImageView(name.livitski.games.puzzle.android.GamePlay)#<unknown>.getColumn()#android.view.View.setLayoutParams(android.widget.RelativeLayout.LayoutParams)#android.content.SharedPreferences.getAll()#name.livitski.games.puzzle.android.GamePlay.getBoardModel()#<unknown>.getDifficulty()#name.livitski.games.puzzle.android.GamePlay.resumeImpl()#android.view.ViewGroup.removeView(android.widget.TextView)#android.os.CountDownTimer.start()#android.view.View.setOnClickListener(name.livitski.games.puzzle.android.GamePlay)#<unknown>.permittedMoveFor(name.livitski.games.puzzle.android.Tile)#name.livitski.games.puzzle.android.GamePlay.initNumericCell(android.widget.TextView)#name.livitski.games.puzzle.android.GamePlay.restart(<unknown>)#android.view.View.setLayoutParams(android.widget.TableRow.LayoutParams)#.CountDownTimer(int, int)#android.content.Intent.putExtra(<unknown>, <unknown>)#name.livitski.games.puzzle.android.GamePlay.cancelPreviewTimer()#<unknown>.getResources()#name.livitski.games.puzzle.android.GamePlay.hideBoard()#android.view.MenuItem.getItemId()#<unknown>.getColor(<unknown>)#android.widget.TableLayout.TableLayout(name.livitski.games.puzzle.android.GamePlay)#<unknown>.getResources()#android.view.View.getParent()#<unknown>.isSolved()#<unknown>.getColor(<unknown>)#<unknown>.getDifficulty()#name.livitski.games.puzzle.android.GamePlay.initGame()#name.livitski.games.puzzle.android.GamePlay.resizeContent(int, int)#name.livitski.games.puzzle.android.GamePlay.changeBoardImage(java.io.Serializable)#android.view.ViewGroup.getChildCount()#name.livitski.games.puzzle.android.GamePlay.assignTile(android.widget.ImageView, name.livitski.games.puzzle.android.Tile)#.CountDownTimer(long, long)#<unknown>.resetSelectedImage()#<unknown>.getMessage()#<unknown>.getNumber()#android.widget.TextView.TextView(name.livitski.games.puzzle.android.GamePlay)#java.lang.Object.getClass()#android.view.View.setOnClickListener(name.livitski.games.puzzle.android.GamePlay)#name.livitski.games.puzzle.android.GamePlay.resumeImpl()#<unknown>.getBoard()#java.lang.Integer.toString(int)#android.widget.TableLayout.addView(android.widget.TableRow)#android.view.ViewGroup.LayoutParams.ViewGroup.LayoutParams(int, int)#java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#android.view.View.setBackgroundColor(<unknown>)#android.view.ViewGroup.getChildAt(int)#java.util.Map<java.lang.String,>.containsKey(<unknown>)#android.widget.ImageView.clearColorFilter()#android.util.Log.e(java.lang.String, <unknown>, name.livitski.games.puzzle.android.ImageProcessingException)#android.view.MenuInflater.inflate(<unknown>, android.view.Menu)#<unknown>.getImageAspectRatio()#java.lang.Object.Game(name.livitski.games.puzzle.android.Level)#<unknown>.getNumber()#name.livitski.games.puzzle.android.GamePlay.initImage()#java.util.Map<java.lang.String,>.get(<unknown>)#android.util.Log.e(java.lang.String, <unknown>, name.livitski.games.puzzle.android.ImageProcessingException)#java.lang.Class.getName()#<unknown>.valueOf(java.lang.String)#android.view.View.invalidate()#android.content.Intent.Intent(name.livitski.games.puzzle.android.GamePlay, java.lang.Class)#<unknown>.getSize()#name.livitski.games.puzzle.android.GamePlay.getBoardModel()#name.livitski.games.puzzle.android.GamePlay.changeBoardImage(java.io.Serializable)#android.view.View.getTag()#name.livitski.games.puzzle.android.GamePlay.restart(boolean)#<unknown>.getPreferences(<unknown>)#android.view.ViewGroup.removeView(android.view.View)#name.livitski.games.puzzle.android.GamePlay.getBoardSize()#android.view.ViewGroup.addView(android.view.View)#<unknown>.getColor(<unknown>)#<unknown>.permittedMoveFor(name.livitski.games.puzzle.android.Tile)#android.widget.TextView.setTextSize(int, float)#android.util.Log.w(java.lang.String, java.lang.String, java.lang.RuntimeException)#name.livitski.games.puzzle.android.GamePlay.getBoardModel()#<unknown>.isStarted()#android.widget.TextView.setText(java.lang.String)#<unknown>.getColor(<unknown>)#<unknown>.resetSelectedImage()#<unknown>.getResources()#name.livitski.games.puzzle.android.GamePlay.alert(java.lang.String)#<unknown>.save(android.content.SharedPreferences.Editor)#name.livitski.games.puzzle.android.GamePlay.changeBoardImage(java.io.Serializable)#name.livitski.games.puzzle.android.GamePlay.restart(boolean)#android.view.ViewGroup.addView(android.widget.TableLayout)#name.livitski.games.puzzle.android.GamePlay.newGame(null)#name.livitski.games.puzzle.android.GamePlay.initLayout()#<unknown>.getSelectedImageId()#name.livitski.games.puzzle.android.GamePlay.hideBoard()#android.view.ViewGroup.removeAllViews()#<unknown>.addMoveListener(name.livitski.games.puzzle.android.GamePlay)#name.livitski.games.puzzle.android.GamePlay.restart(name.livitski.games.puzzle.android.Level)#android.view.View.setOnLongClickListener(name.livitski.games.puzzle.android.GamePlay)#java.lang.Integer.toString(int)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#<unknown>.load(android.content.SharedPreferences)#name.livitski.games.puzzle.android.GamePlay.showNumericBoard()#name.livitski.games.puzzle.android.GamePlay.restart(boolean)#android.content.Intent.getSerializableExtra(<unknown>)#name.livitski.games.puzzle.android.GamePlay.newGame(null)#name.livitski.games.puzzle.android.GamePlay.dimImmovableTiles(boolean)#name.livitski.games.puzzle.android.GamePlay.resumeImpl()#android.view.View.setOnLongClickListener(name.livitski.games.puzzle.android.GamePlay)#<unknown>.start()#android.content.Intent.Intent(name.livitski.games.puzzle.android.GamePlay, java.lang.Class)#android.widget.TextView.setTextColor(<unknown>)#name.livitski.games.puzzle.android.GamePlay.initBoard()#<unknown>.getSelectedImageId()#<unknown>.getDrawable()#name.livitski.games.puzzle.android.GamePlay.restart(<unknown>)#java.util.Map<java.lang.String,>.containsKey(<unknown>)#name.livitski.games.puzzle.android.GamePlay.getBoardSize()#android.widget.RelativeLayout.LayoutParams.RelativeLayout.LayoutParams(int, int)#name.livitski.games.puzzle.android.GamePlay.newGame(<unknown>)#java.lang.Math.ceil(float)#name.livitski.games.puzzle.android.GamePlay.toggleBoardType()#android.os.CountDownTimer.cancel()#android.os.CountDownTimer.start()#android.view.View.setBackgroundColor(<unknown>)#<unknown>.getResources()#<unknown>.getResources()#java.lang.Object.Game(<unknown>)#<unknown>.getPreferences(<unknown>)#android.view.ViewGroup.MarginLayoutParams.setMargins(int, int, int, int)#name.livitski.games.puzzle.android.GamePlay.hideBoard()#name.livitski.games.puzzle.android.GamePlay.alert(<unknown>)#android.widget.ImageView.setColorFilter(int)#name.livitski.games.puzzle.android.GamePlay.showImageBoard()#<unknown>.getString(int)#<unknown>.getDifficulty()#<unknown>.isImageSelected()#android.view.View.MeasureSpec.getSize(int)#android.widget.TextView.setGravity(int)#<unknown>.getColor(<unknown>)#<unknown>.getSize()#<unknown>.getNumber()#android.view.ViewGroup.addView(android.widget.ImageView)"}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.content.Context android.content.DialogInterface android.widget.Button android.view.View android.util.Log android.app.Dialog android.view.Window com.vinsol.expensetracker.utils.AudioPlay"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\n\nimport android.app.Dialog;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\n\npublic class AudioPlayDialog extends Dialog implements android.view.View.OnClickListener,android.content.DialogInterface.OnDismissListener,android.content.DialogInterface.OnCancelListener{\n\n\tprivate Button audio_play_dialog_stop_button;\n\tprivate Button audio_play_dialog_play_button;\n\tprivate Button audio_play_dialog_cancel_button;\n\tprivate Chronometer audio_play_dialog_time_details_chronometer;\n\tprivate AudioPlay mAudioPlay;\n\tprivate MyCount countDownTimer;\n\tprivate String mFile ;\n\tprivate Context mContext;\n\t\n\tpublic AudioPlayDialog(Context context,String id) {\n\t\tsuper(context);\n\t\tmContext = context;\n\t\tmFile = id;\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\t\n\t\tsetContentView(R.layout.audio_play_dialog);\n\t\tmAudioPlay = new AudioPlay(id, context);\n\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\taudio_play_dialog_stop_button = (Button) findViewById(R.id.audio_play_dialog_stop_button);\n\t\taudio_play_dialog_play_button = (Button) findViewById(R.id.audio_play_dialog_play_button);\n\t\taudio_play_dialog_cancel_button = (Button) findViewById(R.id.audio_play_dialog_cancel_button);\n\t\taudio_play_dialog_time_details_chronometer = (Chronometer) findViewById(R.id.audio_play_dialog_time_details_chronometer);\n\t\taudio_play_dialog_cancel_button.setOnClickListener(this);\n\t\taudio_play_dialog_play_button.setOnClickListener(this);\n\t\taudio_play_dialog_stop_button.setOnClickListener(this);\n\t\tsetOnDismissListener(this);\n\t\tsetOnCancelListener(this);\n\t\tmAudioPlay.startPlayBack();\n\t\tcountDownTimer.start();\n\t\tshow();\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif(v.getId() == R.id.audio_play_dialog_cancel_button){\n\t\t\tcountDownTimer.cancel();\n\t\t\tmAudioPlay.stopPlayBack();\n\t\t\tdismiss();\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.audio_play_dialog_play_button){\n\t\t\taudio_play_dialog_play_button.setVisibility(View.GONE);\n\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t}\n\t\t\tmAudioPlay = new AudioPlay(mFile, mContext);\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\tcountDownTimer.start();\n\t\t\tmAudioPlay.startPlayBack();\n\t\t\taudio_play_dialog_stop_button.setVisibility(View.VISIBLE);\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.audio_play_dialog_stop_button){\n\t\t\t\n\t\t\taudio_play_dialog_stop_button.setVisibility(View.GONE);\n\t\t\tmAudioPlay.stopPlayBack();\n\t\t\tcountDownTimer.cancel();\n\t\t\taudio_play_dialog_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\taudio_play_dialog_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\t\t\n\t}\n\t\n\t\n\t\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\taudio_play_dialog_stop_button.setVisibility(View.GONE);\n\t\t\taudio_play_dialog_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\n\n\t@Override\n\tpublic void onDismiss(DialogInterface dialog) {\n\t\tLog.v(\"mAudioPlay.isAudioPlaying() dismiss\", mAudioPlay.isAudioPlaying()+\"\");\n\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\tmAudioPlay.stopPlayBack();\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onCancel(DialogInterface dialog) {\n\t\tLog.v(\"mAudioPlay.isAudioPlaying() cancel\", mAudioPlay.isAudioPlaying()+\"\");\n\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\tmAudioPlay.stopPlayBack();\n\t\t}\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-23T13:11:17Z", "hash_sni": "68951a9cc591d45e5125b2630e69c80c321acca4", "name_sni": "src/com/vinsol/expensetracker/AudioPlayDialog.java", "patch_t": ["+package com.vinsol.expensetracker;\n+\n+import com.vinsol.expensetracker.utils.AudioPlay;\n+import com.vinsol.expensetracker.utils.DisplayTime;\n+\n+import android.app.Dialog;\n+import android.content.Context;\n+import android.content.DialogInterface;\n+import android.os.CountDownTimer;\n+import android.util.Log;\n+import android.view.View;\n+import android.view.Window;\n+import android.widget.Button;\n+import android.widget.Chronometer;\n+\n+public class AudioPlayDialog extends Dialog implements android.view.View.OnClickListener,android.content.DialogInterface.OnDismissListener,android.content.DialogInterface.OnCancelListener{\n+\n+\tprivate Button audio_play_dialog_stop_button;\n+\tprivate Button audio_play_dialog_play_button;\n+\tprivate Button audio_play_dialog_cancel_button;\n+\tprivate Chronometer audio_play_dialog_time_details_chronometer;\n+\tprivate AudioPlay mAudioPlay;\n+\tprivate MyCount countDownTimer;\n+\tprivate String mFile ;\n+\tprivate Context mContext;\n+\t\n+\tpublic AudioPlayDialog(Context context,String id) {\n+\t\tsuper(context);\n+\t\tmContext = context;\n+\t\tmFile = id;\n+\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\t\n+\t\tsetContentView(R.layout.audio_play_dialog);\n+\t\tmAudioPlay = new AudioPlay(id, context);\n+\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n+\t\taudio_play_dialog_stop_button = (Button) findViewById(R.id.audio_play_dialog_stop_button);\n+\t\taudio_play_dialog_play_button = (Button) findViewById(R.id.audio_play_dialog_play_button);\n+\t\taudio_play_dialog_cancel_button = (Button) findViewById(R.id.audio_play_dialog_cancel_button);\n+\t\taudio_play_dialog_time_details_chronometer = (Chronometer) findViewById(R.id.audio_play_dialog_time_details_chronometer);\n+\t\taudio_play_dialog_cancel_button.setOnClickListener(this);\n+\t\taudio_play_dialog_play_button.setOnClickListener(this);\n+\t\taudio_play_dialog_stop_button.setOnClickListener(this);\n+\t\tsetOnDismissListener(this);\n+\t\tsetOnCancelListener(this);\n+\t\tmAudioPlay.startPlayBack();\n+\t\tcountDownTimer.start();\n+\t\tshow();\n+\t}\n+\n+\t@Override\n+\tpublic void onClick(View v) {\n+\n+\t\tif(v.getId() == R.id.audio_play_dialog_cancel_button){\n+\t\t\tcountDownTimer.cancel();\n+\t\t\tmAudioPlay.stopPlayBack();\n+\t\t\tdismiss();\n+\t\t}\n+\t\t\n+\t\tif(v.getId() == R.id.audio_play_dialog_play_button){\n+\t\t\taudio_play_dialog_play_button.setVisibility(View.GONE);\n+\t\t\tif(mAudioPlay.isAudioPlaying()){\n+\t\t\t\tcountDownTimer.cancel();\n+\t\t\t\tmAudioPlay.stopPlayBack();\n+\t\t\t}\n+\t\t\tmAudioPlay = new AudioPlay(mFile, mContext);\n+\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n+\t\t\tcountDownTimer.start();\n+\t\t\tmAudioPlay.startPlayBack();\n+\t\t\taudio_play_dialog_stop_button.setVisibility(View.VISIBLE);\n+\t\t}\n+\t\t\n+\t\tif(v.getId() == R.id.audio_play_dialog_stop_button){\n+\t\t\t\n+\t\t\taudio_play_dialog_stop_button.setVisibility(View.GONE);\n+\t\t\tmAudioPlay.stopPlayBack();\n+\t\t\tcountDownTimer.cancel();\n+\t\t\taudio_play_dialog_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n+\t\t\taudio_play_dialog_play_button.setVisibility(View.VISIBLE);\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\t\n+\t\n+\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n+\t//countdowntimer is an abstract class, so extend it and fill in methods\n+\tprivate class MyCount extends CountDownTimer{\n+\n+\t\tDisplayTime mDisplayTime;\n+\t\t\n+\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n+\t\t\tsuper(millisInFuture, countDownInterval);\n+\t\t\tmDisplayTime = new DisplayTime();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void onFinish() {\n+\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n+\t\t\taudio_play_dialog_stop_button.setVisibility(View.GONE);\n+\t\t\taudio_play_dialog_play_button.setVisibility(View.VISIBLE);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void onTick(long millisUntilFinished) {\n+\t\t\taudio_play_dialog_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n+\t\t}\n+\t}\n+\n+\n+\n+\t@Override\n+\tpublic void onDismiss(DialogInterface dialog) {\n+\t\tLog.v(\"mAudioPlay.isAudioPlaying() dismiss\", mAudioPlay.isAudioPlaying()+\"\");\n+\t\tif(mAudioPlay.isAudioPlaying()){\n+\t\t\tmAudioPlay.stopPlayBack();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void onCancel(DialogInterface dialog) {\n+\t\tLog.v(\"mAudioPlay.isAudioPlaying() cancel\", mAudioPlay.isAudioPlaying()+\"\");\n+\t\tif(mAudioPlay.isAudioPlaying()){\n+\t\t\tmAudioPlay.stopPlayBack();\n+\t\t}\n+\t}\n+}"], "score": 1.0, "methods_t": ["AudioPlay DisplayTime MyCount cancel dismiss findViewById getDisplayTime getId getPlayBackTime isAudioPlaying requestWindowFeature setContentView setOnCancelListener setOnClickListener setOnDismissListener setText setVisibility show start startPlayBack stopPlayBack v"], "_version_": 1526747867947991040, "subject_t": ["Added some controls to list and set to open list view whenever save entry is pressed"], "comments_t": ["\t//countdowntimer is an abstract class, so extend it and fill in methods \t/////////   *********       CountdownTimer for Chronometer    *********    //////////      "], "parents_ss": ["bbc9105f50f395b3c534b895dcb4c75346818f20"], "id": "vinsol/expense-tracker\u000068951a9cc591d45e5125b2630e69c80c321acca4\u0000src/com/vinsol/expensetracker/AudioPlayDialog.java", "callsites_cs": "<unknown>.startPlayBack()#<unknown>.isAudioPlaying()#com.vinsol.expensetracker.AudioPlayDialog.MyCount.MyCount(<unknown>, int)#android.app.Dialog.findViewById(<unknown>)#android.app.Dialog.setContentView(<unknown>)#android.os.CountDownTimer.start()#<unknown>.getDisplayTime(<unknown>)#android.util.Log.v(java.lang.String, <unknown>)#<unknown>.DisplayTime()#<unknown>.AudioPlay(java.lang.String, android.content.Context)#<unknown>.stopPlayBack()#android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog)#android.view.View.setVisibility(int)#<unknown>.getPlayBackTime()#<unknown>.getPlayBackTime()#android.view.View.getId()#android.view.View.setVisibility(int)#android.app.Dialog.setOnCancelListener(com.vinsol.expensetracker.AudioPlayDialog)#<unknown>.getDisplayTime(long)#android.app.Dialog.dismiss()#android.util.Log.v(java.lang.String, <unknown>)#android.os.CountDownTimer.start()#android.app.Dialog.findViewById(<unknown>)#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog)#<unknown>.startPlayBack()#android.view.View.setVisibility(int)#com.vinsol.expensetracker.AudioPlayDialog.MyCount.MyCount(<unknown>, int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog)#<unknown>.getPlayBackTime()#<unknown>.stopPlayBack()#android.os.CountDownTimer.cancel()#android.widget.TextView.setText(<unknown>)#<unknown>.stopPlayBack()#android.app.Dialog.show()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.app.Dialog.findViewById(<unknown>)#android.app.Dialog.setOnDismissListener(com.vinsol.expensetracker.AudioPlayDialog)#android.view.View.setVisibility(int)#android.app.Dialog.findViewById(<unknown>)#android.app.Dialog.requestWindowFeature(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.AudioPlay(java.lang.String, android.content.Context)", "callsites_t": ["<unknown>.startPlayBack() <unknown>.isAudioPlaying() com.vinsol.expensetracker.AudioPlayDialog.MyCount.MyCount(<unknown>, int) android.app.Dialog.findViewById(<unknown>) android.app.Dialog.setContentView(<unknown>) android.os.CountDownTimer.start() <unknown>.getDisplayTime(<unknown>) android.util.Log.v(java.lang.String, <unknown>) <unknown>.DisplayTime() <unknown>.AudioPlay(java.lang.String, android.content.Context) <unknown>.stopPlayBack() android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog) android.view.View.setVisibility(int) <unknown>.getPlayBackTime() <unknown>.getPlayBackTime() android.view.View.getId() android.view.View.setVisibility(int) android.app.Dialog.setOnCancelListener(com.vinsol.expensetracker.AudioPlayDialog) <unknown>.getDisplayTime(long) android.app.Dialog.dismiss() android.util.Log.v(java.lang.String, <unknown>) android.os.CountDownTimer.start() android.app.Dialog.findViewById(<unknown>) <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog) <unknown>.startPlayBack() android.view.View.setVisibility(int) com.vinsol.expensetracker.AudioPlayDialog.MyCount.MyCount(<unknown>, int) android.view.View.setOnClickListener(com.vinsol.expensetracker.AudioPlayDialog) <unknown>.getPlayBackTime() <unknown>.stopPlayBack() android.os.CountDownTimer.cancel() android.widget.TextView.setText(<unknown>) <unknown>.stopPlayBack() android.app.Dialog.show() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.app.Dialog.findViewById(<unknown>) android.app.Dialog.setOnDismissListener(com.vinsol.expensetracker.AudioPlayDialog) android.view.View.setVisibility(int) android.app.Dialog.findViewById(<unknown>) android.app.Dialog.requestWindowFeature(int) <unknown>.getDisplayTime(<unknown>) <unknown>.AudioPlay(java.lang.String, android.content.Context)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent android.view.Window com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class Voice extends Activity implements OnClickListener{\n\t\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\t\n\t\t///////   ****** No Title Bar   ********* /////////\n        \n        \n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        \n        setContentView(R.layout.text_voice_camera);\n        \n        \n        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n        \n        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n    \ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n    \ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n    \tmDatabaseAdapter = new DatabaseAdapter(this);\n    \t\n    \t////////*********     Get id from intent extras     ********   ////////////\n        intentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n        _id = intentExtras.getLong(\"_id\");\n    \t\n        \n        \n        \n        ////////   ********  Handle Date Bar   *********   ////////\n        new DateHandler(this);\n        \n        \n        ////////   ********   Starts Recording each time activity starts   ******   ///////\n        if(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n        \tsetGraphicsVoice();\n        \tcontrolVoiceChronometer();\n        \tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n        \tmRecordingHelper.startRecording();\n        } \n        else {\n        \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n        }\n        setClickListeners();\n\t\t\n\t\t////////*********     Get Last most accurate location info   *********   /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t\t\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\t\t\n\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t}\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n\t\t\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n\t\t\n\t\t\n\t\t////  ***** if stop button pressed ****** //////\n\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n\t\t\tmRecordingHelper.stopRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t}\n\t\t\n\t\t\n\t\t////  ***** if play button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n\t\t\tmAudioPlay = new AudioPlay(_id+\"\",this);\n\t\t\t\n\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n\t\t\tif(!mAudioPlay.isAudioPlaying()){\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\t\t\n\t\t////  ***** if rerecord button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){}\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\t\t\t\n\t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n\t\t\tif(mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\t\t\n\t\t////////********  Adding Action to save entry     *********    ///////////\n\t\t\n\t\tif(v.getId() == R.id.text_voice_camera_save_entry){\n\t\t\t///////    *******  Creating HashMap to update info   *******  ////////\n\t\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, text_voice_camera_amount.getText().toString());\n\t\t\t\n\t\t\tif(text_voice_camera_tag.getText().toString() != \"\"){\n\t\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t\t}\n\t\t\n\t\t\t//////    *******   Update database if user added additional info   *******  ///////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.editDatabase(_list);\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t}\n\t\n\t\n\t\t/////////     *********   Adding action if delete button **********  /////////\n\t\n\t\tif(v.getId() == R.id.text_voice_camera_delete){\n\t\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t}\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\n\t\t\tnew FileDelete(_id);\n\t\t\n\t\t\t//////   *******   Delete entry from database ********   /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n\t\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-23T13:11:17Z", "hash_sni": "68951a9cc591d45e5125b2630e69c80c321acca4", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" import com.vinsol.expensetracker.utils.RecordingHelper;\n \n import android.app.Activity;\n+import android.content.Intent;\n import android.os.Bundle;\n import android.os.CountDownTimer;\n import android.os.SystemClock;\n@@ -239,6 +240,8 @@ public class Voice extends Activity implements OnClickListener{\n \t\t\tmDatabaseAdapter.editDatabase(_list);\n \t\t\tmDatabaseAdapter.close();\n \t\t\tfinish();\n+\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n+\t\t\tstartActivity(intentExpenseListing);\n \t\t}\n \t\n \t\n@@ -294,6 +297,5 @@ public class Voice extends Activity implements OnClickListener{\n \t\tpublic void onTick(long millisUntilFinished) {\n \t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n \t\t}\n-\n \t}\n }"], "score": 1.0, "methods_t": ["AudioPlay DatabaseAdapter DateHandler DisplayTime FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper cancel close controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish getBundleExtra getDisplayTime getExternalStorageState getId getIntent getLastLocation getLong getPlayBackTime getText isAudioPlaying isRecording length makeText open printStackTrace put requestWindowFeature setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526747867951136768, "subject_t": ["Added some controls to list and set to open list view whenever save entry is pressed"], "comments_t": ["\t\t////////********  Adding Action to save entry     *********    /////////// \t//countdowntimer is an abstract class, so extend it and fill in methods         ///////   ***** Sets Title Voice Entry *********/////// \t\t///////   ****** No Title Bar   ********* /////////         ////////   ********    Initializing and assigning memory to UI Items **********    /////////     \t////////*********     Get id from intent extras     ********   //////////// \t\t\t///////    *******  Creating HashMap to update info   *******  //////// \t\t\t///////   *******   Chronometer Starts Countdown   ******  /////// \t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** /////// \t\t\t//////  ******  Restarts chronometer and recording   *******  //////// \t\t////////    *******    Adding Click Listeners to UI Items ******** ////////// \t\t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t////////*********     Get Last most accurate location info   *********   ///////// \t\t////  ***** if play button pressed ****** //////\t\t \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   //////// \t\t\t//////   *******   Delete entry from database ********   ///////// \t\t////  ***** if rerecord button pressed ****** //////\t\t \t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t///////   ********     Adding On Click Actions to click listeners *********    ////////// \t\t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******////// \t\t\t//////    *******   Update database if user added additional info   *******  /////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////       \t\t////  ***** if stop button pressed ****** //////         ////////   ********   Starts Recording each time activity starts   ******   /////// \t\t///////   ***** Sets Title Voice Entry *********/////// \t\t\t//////   ******   Handles UI items on button click  ******  ///////         //////   ******  Shows Voice Details ********//////// \t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////         ////////   ********  Handle Date Bar   *********   //////// \t\t/////////     *********   Adding action if delete button **********  /////////"], "parents_ss": ["dccaf53589664a199bf52233870ad72f687e19ec"], "id": "vinsol/expense-tracker\u000068951a9cc591d45e5125b2630e69c80c321acca4\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.isRecording()#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#<unknown>.deleteDatabaseEntryID(java.lang.String)#android.app.Activity.getIntent()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.getLastLocation()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.view.View.setVisibility(int)#android.widget.EditText.getText()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.app.Activity.finish()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#com.vinsol.expensetracker.Voice.setGraphicsVoice()#android.app.Activity.startActivity(android.content.Intent)#android.app.Activity.findViewById(<unknown>)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#java.lang.CharSequence.toString()#java.lang.CharSequence.toString()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#<unknown>.stopPlayBack()#android.view.View.setVisibility(int)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#<unknown>.DisplayTime()#android.os.SystemClock.elapsedRealtime()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#android.os.Environment.getExternalStorageState()#android.widget.Chronometer.setOnChronometerTickListener()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.lang.CharSequence.length()#<unknown>.getPlayBackTime()#.OnChronometerTickListener()#android.app.Activity.requestWindowFeature(int)#<unknown>.open()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#android.view.View.setVisibility(int)#android.widget.Toast.show()#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.startPlayBack()#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#<unknown>.isRecording()#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.isRecording() <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() <unknown>.getPlayBackTime() <unknown>.stopRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.view.View.setVisibility(int) android.widget.Chronometer.start() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) <unknown>.deleteDatabaseEntryID(java.lang.String) android.app.Activity.getIntent() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.getLastLocation() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.view.View.setVisibility(int) android.widget.EditText.getText() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.app.Activity.finish() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) com.vinsol.expensetracker.Voice.setGraphicsVoice() android.app.Activity.startActivity(android.content.Intent) android.app.Activity.findViewById(<unknown>) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() java.lang.CharSequence.toString() java.lang.CharSequence.toString() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) com.vinsol.expensetracker.Voice.controlVoiceChronometer() <unknown>.stopPlayBack() android.view.View.setVisibility(int) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) <unknown>.DisplayTime() android.os.SystemClock.elapsedRealtime() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) android.os.Environment.getExternalStorageState() android.widget.Chronometer.setOnChronometerTickListener() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.lang.CharSequence.length() <unknown>.getPlayBackTime() .OnChronometerTickListener() android.app.Activity.requestWindowFeature(int) <unknown>.open() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) android.view.View.setVisibility(int) android.widget.Toast.show() android.view.View.setVisibility(int) android.widget.Chronometer.start() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.startPlayBack() java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) android.view.View.getId() <unknown>.isRecording() android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Alvaro valles", "repo_sni": "francho/unutopia-android", "imports_t": ["android.content.BroadcastReceiver android.os.CountDownTimer android.widget.ProgressBar android.app.Notification android.view.animation.Animation android.app.PendingIntent android.widget.Toast android.content.IntentFilter android.view.View.OnClickListener android.content.Context android.graphics.Typeface android.os.Bundle android.widget.TextView android.content.Intent android.view.Menu android.view.View android.util.Log android.view.animation.AnimationUtils android.app.Activity android.app.NotificationManager com.valles.rssreader.service.LoaderIntentService"], "email_sni": "alvaro.valles@moventos.com", "contents_t": ["package com.valles.rssreader;\n\nimport com.valles.rssreader.service.LoaderIntentService;\n\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.app.Activity;\nimport android.app.Notification;\nimport android.app.NotificationManager;\nimport android.app.PendingIntent;\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.graphics.Typeface;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.animation.Animation;\nimport android.view.animation.AnimationUtils;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class SplashActivity extends Activity {\n\n\tprivate ProgressBar Loadpro;\n\tprivate TextView Continuar;\n\tprivate TextView TxtLoad ;\n\tprivate CountDownTimer timer;\n\tprivate Animation alpha;\n\tString TAG =\"SplashActivity\";\n\tprivate static final int NOTIFICATION_DOWNLOAD_ID = 1;\n\t\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.splash);\n              \t\n        /*Intent intentService = new Intent(SplashActivity.this,LoaderIntentService.class);\n        intentService.putExtra(\"progress\", 0);\n        this.startService(intentService);*/\n        \t\n        Intent intentService = new Intent(\"com.valles.rssreader.ACTION_INTENT_SERVICE\");\n        intentService.putExtra(\"progress\", 0);\n    \tthis.startService(intentService);\t             \n \n       final TextView TxtTit = (TextView) findViewById(R.id.lbltit);\n       final TextView TxtNom = (TextView) findViewById(R.id.lblnom);\n       Continuar = (TextView) findViewById(R.id.btnloading);\n       Loadpro = (ProgressBar) findViewById(R.id.proload);\n       TxtLoad = (TextView) findViewById(R.id.loading);\n       \n        Typeface font1 = Typeface.createFromAsset(getAssets(),\"Last Ninja.ttf\");\n        Continuar.setTypeface(font1);\n        TxtLoad.setTypeface(font1);\n        TxtTit.setTypeface(font1);\n        TxtNom.setTypeface(font1);\n        \n        Continuar.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n            \ttimer.cancel();\n            \tIntent intent = new Intent(SplashActivity.this, ArticleListActivity.class);     \n                startActivity(intent);             \t\n            }\n        });\n        \n        Continuar.setVisibility(View.GONE);\n\n        alpha = AnimationUtils.loadAnimation(this, R.anim.alpha);\n        alpha.reset();\n        TxtLoad.startAnimation(alpha);\n        \n        IntentFilter filter = new IntentFilter();\n        filter.addAction(LoaderIntentService.START_LOAD);\n        filter.addAction(LoaderIntentService.SET_PROGRESS);\n        filter.addAction(LoaderIntentService.END_LOAD);\n        \n        ProgressReceiver progressControl = new ProgressReceiver();\n        registerReceiver(progressControl, filter);\n    }\n    \n    private class ProgressReceiver extends BroadcastReceiver {\n\t\t\n\t\tpublic void onReceive(Context context, Intent intent) {\n\t\t\t\n\t\t\tif(intent.getAction().equals(LoaderIntentService.START_LOAD)) {\n\t\t\t\tString URLs = intent.getStringExtra(\"url\").toString();\n\t\t\t\tint max = intent.getIntExtra(\"set_max\", 0);\n\t\t\t\tint prog = intent.getIntExtra(\"progress\", 0);\t\t\t\t\n\t\t\t\tLoadpro.setMax(max);\n\t\t\t\tLoadpro.setProgress(prog);\n\t\t\t\tToast.makeText(SplashActivity.this, \"Cargando: \" + URLs, Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t\telse if(intent.getAction().equals(LoaderIntentService.SET_PROGRESS)) {\n\t\t\t\tint prog = intent.getIntExtra(\"progress\", 0);\n\t\t\t\tLoadpro.setProgress(prog);\n\t\t\t}\n\t\t\telse if(intent.getAction().equals(LoaderIntentService.END_LOAD)) {\n\t\t\t\tToast.makeText(SplashActivity.this, \"Carga Finalizada\", Toast.LENGTH_SHORT).show();\n\t\t\t\tNotifications(intent.getIntExtra(\"progress\", 0));\n\t\t\t\talpha.cancel();\n    \t\t\tTxtLoad.setAnimation(null);\t\t \n    \t\t\tTxtLoad.setVisibility(View.GONE);\n    \t\t\tContinuar.setVisibility(View.VISIBLE);\n    \t\t\tAutoLaunch();\n\t\t\t}\n\t\t}\n    }\n\n\tpublic void AutoLaunch(){\n\t\ttimer = new CountDownTimer(3000,1000) {  \t\n\t\t\tpublic void onTick(long millisUntilFinished) {}\t\t\t\n\n\t\t\tpublic void onFinish() {\n   \t\t\t \tIntent intent = new Intent(SplashActivity.this, ArticleListActivity.class);     \n                startActivity(intent); \n   \t\t \t}\t \n\t    }.start();     \n\t}\n\t\n\tpublic void Notifications(int num){\n\t\t\n\t\tString NotificationService = Context.NOTIFICATION_SERVICE;\n\t\tNotificationManager notificationManager =  (NotificationManager) getSystemService(NotificationService);\n\t\t\n\t\tint icono = android.R.drawable.btn_star;\n\t\tCharSequence textoEstado = num + \" nuevas noticias!\";\n\t\tlong hora = System.currentTimeMillis();\n\t\t \n\t\tNotification notifcation =  new Notification(icono, textoEstado, hora);\n\t\t\n\t\tContext contexto = getApplicationContext();\n\t\tCharSequence titulo = \"HRSS Reader\";\n\t\tCharSequence descripcion = \"Han sido descargadas \" + num + \" nuevas noticias\";\n\t\t \n\t\tIntent notIntent = new Intent(contexto, SplashActivity.class);\n\t\t \n\t\tPendingIntent contIntent = PendingIntent.getActivity(contexto, 0, notIntent, 0);\n\t\t \n\t\tnotifcation.setLatestEventInfo(contexto, titulo, descripcion, contIntent);\n\t\tnotifcation.flags |= Notification.FLAG_AUTO_CANCEL;\n\t\tnotifcation.flags |= Notification.DEFAULT_VIBRATE;\n\t\t\n\t\tnotificationManager.notify(NOTIFICATION_DOWNLOAD_ID, notifcation);\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2012-12-19T12:18:45Z", "hash_sni": "3a030dc0e4d44846a7598599866f8e30966f87c3", "name_sni": "herras78/RSSReader/src/com/valles/rssreader/SplashActivity.java", "patch_t": [" \t\tpublic void onReceive(Context context, Intent intent) {\n \t\t\t\n \t\t\tif(intent.getAction().equals(LoaderIntentService.START_LOAD)) {\n+\t\t\t\tString URLs = intent.getStringExtra(\"url\").toString();\n \t\t\t\tint max = intent.getIntExtra(\"set_max\", 0);\n-\t\t\t\tint prog = intent.getIntExtra(\"progress\", 0);\n+\t\t\t\tint prog = intent.getIntExtra(\"progress\", 0);\t\t\t\t\n \t\t\t\tLoadpro.setMax(max);\n \t\t\t\tLoadpro.setProgress(prog);\n+\t\t\t\tToast.makeText(SplashActivity.this, \"Cargando: \" + URLs, Toast.LENGTH_SHORT).show();\n \t\t\t}\n \t\t\telse if(intent.getAction().equals(LoaderIntentService.SET_PROGRESS)) {\n \t\t\t\tint prog = intent.getIntExtra(\"progress\", 0);"], "score": 1.0, "methods_t": ["AutoLaunch CountDownTimer Intent IntentFilter Notification Notifications OnClickListener ProgressReceiver addAction cancel createFromAsset currentTimeMillis equals findViewById getAction getActivity getApplicationContext getAssets getIntExtra getStringExtra getSystemService loadAnimation makeText notify putExtra registerReceiver reset setAnimation setContentView setLatestEventInfo setMax setOnClickListener setProgress setTypeface setVisibility show start startActivity startAnimation startService toString"], "_version_": 1526749975016374272, "subject_t": ["Cargando varios Feds desde Recurso Array"], "comments_t": ["/*Intent intentService = new Intent(SplashActivity.this,LoaderIntentService.class);\nintentService.putExtra(\"progress\", 0);\nthis.startService(intentService);*/\n"], "parents_ss": ["2f57f6b909aaece0123f61bc0b80ad763e300a31"], "id": "francho/unutopia-android\u00003a030dc0e4d44846a7598599866f8e30966f87c3\u0000herras78/RSSReader/src/com/valles/rssreader/SplashActivity.java", "callsites_cs": "android.widget.Toast.makeText(com.valles.rssreader.SplashActivity, java.lang.String, int)#android.widget.TextView.setTypeface(android.graphics.Typeface)#com.valles.rssreader.SplashActivity.ProgressReceiver.ProgressReceiver()#java.lang.String.toString()#android.widget.Toast.show()#com.valles.rssreader.SplashActivity.AutoLaunch()#android.view.View.startAnimation(android.view.animation.Animation)#android.widget.TextView.setTypeface(android.graphics.Typeface)#android.content.Intent.putExtra(java.lang.String, int)#android.content.IntentFilter.IntentFilter()#android.widget.ProgressBar.setProgress(int)#android.content.Intent.Intent(com.valles.rssreader.SplashActivity, java.lang.Class)#java.lang.String.equals(<unknown>)#android.content.Intent.getAction()#android.app.Activity.findViewById(<unknown>)#android.content.IntentFilter.addAction(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.CountDownTimer.start()#android.widget.Toast.show()#android.content.Intent.getIntExtra(java.lang.String, int)#android.app.PendingIntent.getActivity(android.content.Context, int, android.content.Intent, int)#android.content.ContextWrapper.getAssets()#android.app.Notification.Notification(int, java.lang.CharSequence, long)#android.view.animation.AnimationUtils.loadAnimation(com.valles.rssreader.SplashActivity, <unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(<unknown>)#android.content.Intent.Intent(com.valles.rssreader.SplashActivity, java.lang.Class)#android.content.Intent.getIntExtra(java.lang.String, int)#android.widget.Toast.makeText(com.valles.rssreader.SplashActivity, java.lang.String, int)#android.app.Activity.startActivity(android.content.Intent)#android.app.Activity.getSystemService(java.lang.String)#android.view.View.setOnClickListener()#android.content.Intent.getStringExtra(java.lang.String)#android.content.ContextWrapper.getApplicationContext()#java.lang.String.equals(<unknown>)#android.content.IntentFilter.addAction(<unknown>)#android.content.IntentFilter.addAction(<unknown>)#android.view.View.setAnimation(null)#android.os.CountDownTimer.cancel()#android.app.Activity.startActivity(android.content.Intent)#com.valles.rssreader.SplashActivity.Notifications(int)#android.app.NotificationManager.notify(int, android.app.Notification)#android.content.ContextWrapper.registerReceiver(com.valles.rssreader.SplashActivity.ProgressReceiver, android.content.IntentFilter)#android.view.animation.Animation.cancel()#android.widget.TextView.setTypeface(android.graphics.Typeface)#.OnClickListener()#.CountDownTimer(int, int)#android.content.Intent.Intent(android.content.Context, java.lang.Class)#android.widget.TextView.setTypeface(android.graphics.Typeface)#android.view.View.setVisibility(int)#android.content.ContextWrapper.startService(android.content.Intent)#android.view.animation.Animation.reset()#android.app.Notification.setLatestEventInfo(android.content.Context, java.lang.CharSequence, java.lang.CharSequence, android.app.PendingIntent)#android.app.Activity.setContentView(<unknown>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.ProgressBar.setMax(int)#java.lang.System.currentTimeMillis()#android.graphics.Typeface.createFromAsset(android.content.res.AssetManager, java.lang.String)#android.view.View.setVisibility(int)#android.content.Intent.Intent(java.lang.String)", "callsites_t": ["android.widget.Toast.makeText(com.valles.rssreader.SplashActivity, java.lang.String, int) android.widget.TextView.setTypeface(android.graphics.Typeface) com.valles.rssreader.SplashActivity.ProgressReceiver.ProgressReceiver() java.lang.String.toString() android.widget.Toast.show() com.valles.rssreader.SplashActivity.AutoLaunch() android.view.View.startAnimation(android.view.animation.Animation) android.widget.TextView.setTypeface(android.graphics.Typeface) android.content.Intent.putExtra(java.lang.String, int) android.content.IntentFilter.IntentFilter() android.widget.ProgressBar.setProgress(int) android.content.Intent.Intent(com.valles.rssreader.SplashActivity, java.lang.Class) java.lang.String.equals(<unknown>) android.content.Intent.getAction() android.app.Activity.findViewById(<unknown>) android.content.IntentFilter.addAction(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.CountDownTimer.start() android.widget.Toast.show() android.content.Intent.getIntExtra(java.lang.String, int) android.app.PendingIntent.getActivity(android.content.Context, int, android.content.Intent, int) android.content.ContextWrapper.getAssets() android.app.Notification.Notification(int, java.lang.CharSequence, long) android.view.animation.AnimationUtils.loadAnimation(com.valles.rssreader.SplashActivity, <unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(<unknown>) android.content.Intent.Intent(com.valles.rssreader.SplashActivity, java.lang.Class) android.content.Intent.getIntExtra(java.lang.String, int) android.widget.Toast.makeText(com.valles.rssreader.SplashActivity, java.lang.String, int) android.app.Activity.startActivity(android.content.Intent) android.app.Activity.getSystemService(java.lang.String) android.view.View.setOnClickListener() android.content.Intent.getStringExtra(java.lang.String) android.content.ContextWrapper.getApplicationContext() java.lang.String.equals(<unknown>) android.content.IntentFilter.addAction(<unknown>) android.content.IntentFilter.addAction(<unknown>) android.view.View.setAnimation(null) android.os.CountDownTimer.cancel() android.app.Activity.startActivity(android.content.Intent) com.valles.rssreader.SplashActivity.Notifications(int) android.app.NotificationManager.notify(int, android.app.Notification) android.content.ContextWrapper.registerReceiver(com.valles.rssreader.SplashActivity.ProgressReceiver, android.content.IntentFilter) android.view.animation.Animation.cancel() android.widget.TextView.setTypeface(android.graphics.Typeface) .OnClickListener() .CountDownTimer(int, int) android.content.Intent.Intent(android.content.Context, java.lang.Class) android.widget.TextView.setTypeface(android.graphics.Typeface) android.view.View.setVisibility(int) android.content.ContextWrapper.startService(android.content.Intent) android.view.animation.Animation.reset() android.app.Notification.setLatestEventInfo(android.content.Context, java.lang.CharSequence, java.lang.CharSequence, android.app.PendingIntent) android.app.Activity.setContentView(<unknown>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.widget.ProgressBar.setMax(int) java.lang.System.currentTimeMillis() android.graphics.Typeface.createFromAsset(android.content.res.AssetManager, java.lang.String) android.view.View.setVisibility(int) android.content.Intent.Intent(java.lang.String)"]}, {"user_sni": "yaochangwei", "repo_sni": "fruitranger/PulltorefreshListView", "imports_t": ["android.os.CountDownTimer yaochangwei.pulltorefreshlistview.widget.RefreshableListView.OnHeaderViewChangedListener android.view.View android.util.Log android.view.animation.AnimationUtils android.content.Context android.view.ViewGroup android.view.animation.Interpolator"], "email_sni": "yaochangwei@gmail.com", "contents_t": ["package yaochangwei.pulltorefreshlistview.widget;\n\nimport yaochangwei.pulltorefreshlistview.widget.RefreshableListView.OnHeaderViewChangedListener;\nimport android.content.Context;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.animation.AnimationUtils;\nimport android.view.animation.Interpolator;\n\npublic class ListHeaderView extends ViewGroup {\n\n\t/** Set the height of the list header */\n\tprivate int mHeight;\n\n\t/** Interpolator */\n\tprivate static final Interpolator sInterpolator = new Interpolator() {\n\n\t\tpublic float getInterpolation(float t) {\n\t\t\tt -= 1.0f;\n\t\t\treturn t * t * t + 1.0f;\n\t\t}\n\n\t};\n\n\t/** Max Duration */\n\tprivate static final int MAX_DURATION = 350;\n\n\tprivate int mDistance;\n\tprivate int mInitHeight;\n\tprivate boolean mImediateUpdate = false;\n\n\t// The height when user release can trigger update.\n\tprivate int mUpdateHeight;\n\n\tprotected RefreshableListView mListView;\n\n\tprivate static final int INVALID_STATE = -1;\n\n\t/** The state shoudl be when close execute */\n\tprivate int mNextState = INVALID_STATE;\n\n\tOnHeaderViewChangedListener mOnHeaderViewChangedListener;\n\n\t/** The header upate status control the header view */\n\tint mUpdatingStatus = UPDATING_IDLE;\n\n\tprivate static final int UPDATING_IDLE = 0;\n\tprivate static final int UPDATING_READY = 1;\n\tprivate static final int UPDATING_ON_GOING = 2;\n\tprivate static final int UPDATING_FINISH = 3;\n\n\t/** Max pull height. */\n\tprivate int mMaxPullHeight;\n\n\tprivate static final int MAX_PULL_HEIGHT_DP = 200;\n\n\tpublic ListHeaderView(Context context, RefreshableListView list) {\n\t\tsuper(context);\n\t\tmListView = list;\n\t\tmMaxPullHeight = (int) (context.getResources().getDisplayMetrics().density\n\t\t\t\t* MAX_PULL_HEIGHT_DP + 0.5f);\n\t}\n\n\t@Override\n\tprotected void onLayout(boolean changed, int l, int t, int r, int b) {\n\t\tfinal View childView = getChildView();\n\t\tif (childView == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfinal int childViewWidth = childView.getMeasuredWidth();\n\t\tfinal int childViewHeight = childView.getMeasuredHeight();\n\t\tfinal int measuredHeight = getMeasuredHeight();\n\t\tchildView.layout(0, measuredHeight - childViewHeight, childViewWidth,\n\t\t\t\tmeasuredHeight);\n\t}\n\n\t@Override\n\tprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\t\tint width = MeasureSpec.getSize(widthMeasureSpec);\n\t\tif (mHeight < 0) {\n\t\t\tmHeight = 0;\n\t\t}\n\t\tsetMeasuredDimension(width, mHeight);\n\n\t\tfinal View childView = getChildView();\n\t\tif (childView != null) {\n\t\t\tchildView.measure(widthMeasureSpec, heightMeasureSpec);\n\t\t\tmUpdateHeight = childView.getMeasuredHeight();\n\t\t}\n\t}\n\n\tpublic void startUpdate(Runnable runnable) {\n\t\tmUpdatingStatus = UPDATING_READY;\n\t\tmUpdateRunnable = runnable;\n\t\tmInitHeight = mHeight;\n\t\tmDistance = mInitHeight - mUpdateHeight;\n\t\tif (mDistance < 0) {\n\t\t\tmDistance = mInitHeight;\n\t\t}\n\t\t// getChildView().setVisibility(View.INVISIBLE);\n\t\tint duration = (int) (mDistance * 3);\n\t\tduration = duration > MAX_DURATION ? MAX_DURATION : duration;\n\t\tLog.d(VIEW_LOG_TAG, \"duration:\" + duration);\n\t\tfinal CloseTimer timer = new CloseTimer(duration);\n\t\ttimer.startTimer();\n\t}\n\n\tprivate Runnable mUpdateRunnable;\n\n\tpublic int close(int nextState) {\n\t\tmUpdatingStatus = UPDATING_FINISH;\n\t\tif (mOnHeaderViewChangedListener != null) {\n\t\t\tmOnHeaderViewChangedListener.onViewUpdateFinish(this);\n\t\t}\n\t\tmDistance = mInitHeight = mHeight;\n\t\tint duration = (int) (mDistance * 4);\n\t\tduration = duration > MAX_DURATION ? MAX_DURATION : duration;\n\t\tmNextState = nextState;\n\t\tfinal CloseTimer timer = new CloseTimer(duration);\n\t\ttimer.startTimer();\n\t\treturn duration;\n\t}\n\n\tpublic boolean isUpdateNeeded() {\n\t\tif (mImediateUpdate) {\n\t\t\tmImediateUpdate = false;\n\t\t\treturn true;\n\t\t}\n\n\t\tfinal int distance = mHeight - mUpdateHeight;\n\t\tboolean needUpdate = distance >= 0;\n\t\treturn needUpdate;\n\t}\n\n\tpublic void moveToUpdateHeight() {\n\t\tsetHeaderHeight(mUpdateHeight);\n\t\tmImediateUpdate = true;\n\t}\n\n\tprivate class CloseTimer extends CountDownTimer {\n\n\t\tprivate long mStart;\n\t\tprivate float mDurationReciprocal;\n\n\t\tprivate static final int COUNT_DOWN_INTERVAL = 15;\n\n\t\tpublic CloseTimer(long millisInFuture) {\n\t\t\tsuper(millisInFuture, COUNT_DOWN_INTERVAL);\n\t\t\tmDurationReciprocal = 1.0f / millisInFuture;\n\t\t}\n\n\t\tpublic void startTimer() {\n\t\t\tmStart = AnimationUtils.currentAnimationTimeMillis();\n\t\t\tstart();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tfloat x = 1.0f;\n\t\t\tif (mNextState != INVALID_STATE) {\n\t\t\t\tmListView.setState(mNextState);\n\t\t\t\tmNextState = INVALID_STATE;\n\t\t\t}\n\t\t\tsetHeaderHeight((int) (mInitHeight - mDistance * x));\n\t\t\tif (mUpdateRunnable != null) {\n\t\t\t\tfinal Runnable runnable = mUpdateRunnable;\n\t\t\t\tnew Thread(runnable).start();\n\t\t\t\tmUpdateRunnable = null;\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tfinal int interval = (int) (AnimationUtils\n\t\t\t\t\t.currentAnimationTimeMillis() - mStart);\n\t\t\tfloat x = interval * mDurationReciprocal;\n\t\t\tx = sInterpolator.getInterpolation(x);\n\t\t\tsetHeaderHeight((int) (mInitHeight - mDistance * x));\n\t\t}\n\n\t}\n\n\tprotected View getChildView() {\n\t\tfinal int childCount = getChildCount();\n\t\tif (childCount != 1) {\n\t\t\treturn null;\n\t\t}\n\t\treturn getChildAt(0);\n\t}\n\n\t@Override\n\tpublic void addView(View child) {\n\t\tfinal int childCount = getChildCount();\n\t\tif (childCount > 0) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"ListHeaderView can only have one child view\");\n\t\t}\n\t\tsuper.addView(child);\n\t}\n\n\tprivate boolean mCanUpdate;\n\n\tpublic void setHeaderHeight(int height) {\n\t\tif (mHeight == height && height == 0) {\n\t\t\t// ignore duplicate 0 height setting.\n\t\t\treturn;\n\t\t}\n\n\t\tif (height > mMaxPullHeight) {\n\t\t\treturn;\n\t\t}\n\n\t\tfinal int updateHeight = mUpdateHeight;\n\t\tmHeight = height;\n\n\t\tif (mUpdatingStatus != UPDATING_IDLE) {\n\t\t\tif (mUpdatingStatus == UPDATING_READY\n\t\t\t\t\t&& mOnHeaderViewChangedListener != null) {\n\t\t\t\tmOnHeaderViewChangedListener.onViewUpdating(this);\n\t\t\t\tmUpdatingStatus = UPDATING_ON_GOING;\n\t\t\t}\n\t\t} else {\n\t\t\tif ((height < updateHeight) && mCanUpdate) {\n\t\t\t\tif (mOnHeaderViewChangedListener != null) {\n\t\t\t\t\tmOnHeaderViewChangedListener.onViewChanged(this, false);\n\t\t\t\t}\n\t\t\t\tmCanUpdate = false;\n\t\t\t} else if ((height >= updateHeight) && !mCanUpdate) {\n\t\t\t\tif (mOnHeaderViewChangedListener != null) {\n\t\t\t\t\tmOnHeaderViewChangedListener.onViewChanged(this, true);\n\t\t\t\t}\n\t\t\t\tmCanUpdate = true;\n\t\t\t}\n\t\t}\n\t\trequestLayout();\n\n\t\tif (height == 0) {\n\t\t\tmUpdatingStatus = UPDATING_IDLE;\n\t\t\tmCanUpdate = false;\n\t\t}\n\t}\n\n}\n"], "body_t": ["<empty>"], "date_tdt": "2013-06-18T02:16:14Z", "hash_sni": "ac930091ff66b7539596a2bece6de65b5abfde70", "name_sni": "src/yaochangwei/pulltorefreshlistview/widget/ListHeaderView.java", "patch_t": [" \t// The height when user release can trigger update.\n \tprivate int mUpdateHeight;\n \n-\tprivate RefreshableListView mListView;\n+\tprotected RefreshableListView mListView;\n \n \tprivate static final int INVALID_STATE = -1;\n \n@@ -110,7 +110,7 @@ public class ListHeaderView extends ViewGroup {\n \n \tprivate Runnable mUpdateRunnable;\n \n-\tpublic void close(int nextState) {\n+\tpublic int close(int nextState) {\n \t\tmUpdatingStatus = UPDATING_FINISH;\n \t\tif (mOnHeaderViewChangedListener != null) {\n \t\t\tmOnHeaderViewChangedListener.onViewUpdateFinish(this);\n@@ -121,6 +121,7 @@ public class ListHeaderView extends ViewGroup {\n \t\tmNextState = nextState;\n \t\tfinal CloseTimer timer = new CloseTimer(duration);\n \t\ttimer.startTimer();\n+\t\treturn duration;\n \t}\n \n \tpublic boolean isUpdateNeeded() {\n@@ -182,7 +183,7 @@ public class ListHeaderView extends ViewGroup {\n \n \t}\n \n-\tprivate View getChildView() {\n+\tprotected View getChildView() {\n \t\tfinal int childCount = getChildCount();\n \t\tif (childCount != 1) {\n \t\t\treturn null;\n@@ -234,7 +235,6 @@ public class ListHeaderView extends ViewGroup {\n \t\t\t\tmCanUpdate = true;\n \t\t\t}\n \t\t}\n-\n \t\trequestLayout();\n \n \t\tif (height == 0) {"], "score": 1.0, "methods_t": ["CloseTimer IllegalStateException Interpolator Thread currentAnimationTimeMillis d getChildAt getChildCount getChildView getDisplayMetrics getInterpolation getMeasuredHeight getMeasuredWidth getResources getSize layout measure onViewChanged onViewUpdateFinish onViewUpdating requestLayout setHeaderHeight setMeasuredDimension setState start startTimer"], "_version_": 1526748817780637696, "subject_t": ["add the pull up to refresh feature."], "comments_t": ["/** \n * The header upate status control the header view \n */\n \t// The height when user release can trigger update. \t\t\t// ignore duplicate 0 height setting. /** \n * Set the height of the list header \n */\n /** \n * Interpolator \n */\n /** \n * The state shoudl be when close execute \n */\n /** \n * Max Duration \n */\n /** \n * Max pull height. \n */\n \t\t// getChildView().setVisibility(View.INVISIBLE);"], "parents_ss": ["b777e1cf0c7cf3a256642a1148a2b82478bcf07b"], "id": "fruitranger/PulltorefreshListView\u0000ac930091ff66b7539596a2bece6de65b5abfde70\u0000src/yaochangwei/pulltorefreshlistview/widget/ListHeaderView.java", "callsites_cs": "yaochangwei.pulltorefreshlistview.widget.ListHeaderView.CloseTimer.startTimer()#yaochangwei.pulltorefreshlistview.widget.ListHeaderView.setHeaderHeight(int)#yaochangwei.pulltorefreshlistview.widget.ListHeaderView.setHeaderHeight(int)#android.animation.TimeInterpolator.getInterpolation(float)#.Interpolator()#android.util.Log.d(java.lang.String, java.lang.String)#android.view.View.layout(int, int, int, int)#android.view.View.getMeasuredHeight()#android.os.CountDownTimer.start()#android.view.ViewGroup.getChildCount()#android.view.animation.AnimationUtils.currentAnimationTimeMillis()#android.view.ViewGroup.getChildCount()#<unknown>.onViewUpdateFinish(yaochangwei.pulltorefreshlistview.widget.ListHeaderView)#android.view.ViewGroup.getChildAt(int)#yaochangwei.pulltorefreshlistview.widget.ListHeaderView.setHeaderHeight(int)#<unknown>.setState(int)#android.view.View.requestLayout()#java.lang.Thread.start()#<unknown>.onViewUpdating(yaochangwei.pulltorefreshlistview.widget.ListHeaderView)#java.lang.IllegalStateException.IllegalStateException(java.lang.String)#android.view.View.getMeasuredHeight()#android.view.View.getMeasuredWidth()#android.view.View.setMeasuredDimension(int, int)#android.content.res.Resources.getDisplayMetrics()#android.view.View.measure(int, int)#android.view.animation.AnimationUtils.currentAnimationTimeMillis()#yaochangwei.pulltorefreshlistview.widget.ListHeaderView.CloseTimer.startTimer()#yaochangwei.pulltorefreshlistview.widget.ListHeaderView.CloseTimer.CloseTimer(int)#<unknown>.onViewChanged(yaochangwei.pulltorefreshlistview.widget.ListHeaderView, boolean)#java.lang.Thread.Thread(java.lang.Runnable)#android.view.View.getMeasuredHeight()#yaochangwei.pulltorefreshlistview.widget.ListHeaderView.getChildView()#yaochangwei.pulltorefreshlistview.widget.ListHeaderView.CloseTimer.CloseTimer(int)#android.view.View.MeasureSpec.getSize(int)#<unknown>.onViewChanged(yaochangwei.pulltorefreshlistview.widget.ListHeaderView, boolean)#android.content.Context.getResources()#yaochangwei.pulltorefreshlistview.widget.ListHeaderView.getChildView()", "callsites_t": ["yaochangwei.pulltorefreshlistview.widget.ListHeaderView.CloseTimer.startTimer() yaochangwei.pulltorefreshlistview.widget.ListHeaderView.setHeaderHeight(int) yaochangwei.pulltorefreshlistview.widget.ListHeaderView.setHeaderHeight(int) android.animation.TimeInterpolator.getInterpolation(float) .Interpolator() android.util.Log.d(java.lang.String, java.lang.String) android.view.View.layout(int, int, int, int) android.view.View.getMeasuredHeight() android.os.CountDownTimer.start() android.view.ViewGroup.getChildCount() android.view.animation.AnimationUtils.currentAnimationTimeMillis() android.view.ViewGroup.getChildCount() <unknown>.onViewUpdateFinish(yaochangwei.pulltorefreshlistview.widget.ListHeaderView) android.view.ViewGroup.getChildAt(int) yaochangwei.pulltorefreshlistview.widget.ListHeaderView.setHeaderHeight(int) <unknown>.setState(int) android.view.View.requestLayout() java.lang.Thread.start() <unknown>.onViewUpdating(yaochangwei.pulltorefreshlistview.widget.ListHeaderView) java.lang.IllegalStateException.IllegalStateException(java.lang.String) android.view.View.getMeasuredHeight() android.view.View.getMeasuredWidth() android.view.View.setMeasuredDimension(int, int) android.content.res.Resources.getDisplayMetrics() android.view.View.measure(int, int) android.view.animation.AnimationUtils.currentAnimationTimeMillis() yaochangwei.pulltorefreshlistview.widget.ListHeaderView.CloseTimer.startTimer() yaochangwei.pulltorefreshlistview.widget.ListHeaderView.CloseTimer.CloseTimer(int) <unknown>.onViewChanged(yaochangwei.pulltorefreshlistview.widget.ListHeaderView, boolean) java.lang.Thread.Thread(java.lang.Runnable) android.view.View.getMeasuredHeight() yaochangwei.pulltorefreshlistview.widget.ListHeaderView.getChildView() yaochangwei.pulltorefreshlistview.widget.ListHeaderView.CloseTimer.CloseTimer(int) android.view.View.MeasureSpec.getSize(int) <unknown>.onViewChanged(yaochangwei.pulltorefreshlistview.widget.ListHeaderView, boolean) android.content.Context.getResources() yaochangwei.pulltorefreshlistview.widget.ListHeaderView.getChildView()"]}, {"user_sni": "ufo22940268", "repo_sni": "ufo22940268/CountDownProgress", "imports_t": ["android.os.CountDownTimer android.os.Handler android.view.View.OnClickListener android.graphics.Color android.view.MenuItem java.util.Random android.os.Bundle android.widget.Button android.content.Intent android.view.Menu android.view.View android.util.Log com.nineoldandroids.animation.ObjectAnimator com.nineoldandroids.animation.Animator android.app.Activity android.widget.Switch de.passsy.holocircularprogressbar.HoloCircularProgressBar"], "email_sni": "ufo22940268@gmail.com", "contents_t": ["package de.passsy.circularprogressbarsample;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.graphics.Color;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.Handler;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Switch;\n\nimport com.nineoldandroids.animation.Animator;\nimport com.nineoldandroids.animation.ObjectAnimator;\n\nimport java.util.Random;\n\nimport de.passsy.holocircularprogressbar.HoloCircularProgressBar;\n\n/**\n * The Class CircularProgressBarSample.\n *\n * @author Pascal Welsch\n * @since 05.03.2013\n */\npublic class CircularProgressBarSample extends Activity {\n\n    private static final String TAG = CircularProgressBarSample.class.getSimpleName();\n\n    /**\n     * The Switch button.\n     */\n    private Button mColorSwitchButton;\n\n    private HoloCircularProgressBar mHoloCircularProgressBar;\n    private ObjectAnimator mProgressBarAnimator;\n    protected boolean mAnimationHasEnded = false;\n    private Button mZero;\n    private Button mOne;\n    private Switch mAutoAnimateSwitch;\n    private Handler mHandler = new Handler();\n    public static final int TIME_RANGE = 360;\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see android.app.Activity#onCreate(android.os.Bundle)\n     */\n    @Override\n    protected void onCreate(final Bundle savedInstanceState) {\n        if (getIntent() != null) {\n            final Bundle extras = getIntent().getExtras();\n            if (extras != null) {\n                final int theme = extras.getInt(\"theme\");\n                if (theme != 0) {\n                    setTheme(theme);\n                }\n            }\n        }\n\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_home);\n        System.out.println(\"CircularProgressBarSample.onCreate\");\n\n        mHoloCircularProgressBar = (HoloCircularProgressBar) findViewById(R.id.holoCircularProgressBar1);\n\n        mHoloCircularProgressBar.setTextSize((float) getResources().getDimensionPixelSize(R.dimen.elapse_time_text_size));\n        mHoloCircularProgressBar.setTimeRange(TIME_RANGE);\n\n        new CountDownTimer(TIME_RANGE * 1000, 1 * 1000) {\n            @Override\n            public void onTick(long millisUntilFinished) {\n                System.out.println(\"millisUntilFinished = \" + millisUntilFinished);\n                mHoloCircularProgressBar.setLeftTime((int) (millisUntilFinished/1000));\n            }\n\n            @Override\n            public void onFinish() {\n\n            }\n        }.start();\n    }\n\n    /**\n     * generates random colors for the ProgressBar\n     */\n    protected void switchColor() {\n        Random r = new Random();\n        int randomColor = Color.rgb(r.nextInt(256), r.nextInt(256), r.nextInt(256));\n        mHoloCircularProgressBar.setProgressColor(randomColor);\n\n        randomColor = Color.rgb(r.nextInt(256), r.nextInt(256), r.nextInt(256));\n        mHoloCircularProgressBar.setProgressBackgroundColor(randomColor);\n    }\n\n    /**\n     * Animate.\n     *\n     * @param progressBar the progress bar\n     * @param listener    the listener\n     */\n    private void animate(final HoloCircularProgressBar progressBar, final Animator.AnimatorListener listener) {\n        final float progress = (float) (Math.random() * 2);\n        int duration = 3000;\n        progressBar.animate(listener, progress, duration);\n    }\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see android.app.Activity#onCreateOptionsMenu(android.view.Menu)\n     */\n    @Override\n    public boolean onCreateOptionsMenu(final Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.circular_progress_bar_sample, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n            case R.id.menu_switch_theme:\n                switchTheme();\n                break;\n\n            default:\n                Log.w(TAG, \"couldn't map a click action for \" + item);\n                break;\n        }\n\n        return super.onOptionsItemSelected(item);\n    }\n\n    /**\n     * Switch theme.\n     */\n    public void switchTheme() {\n\n        final Intent intent = getIntent();\n        final Bundle extras = getIntent().getExtras();\n        if (extras != null) {\n            final int theme = extras.getInt(\"theme\", -1);\n            if (theme == R.style.AppThemeLight) {\n                getIntent().removeExtra(\"theme\");\n            } else {\n                intent.putExtra(\"theme\", R.style.AppThemeLight);\n            }\n        } else {\n            intent.putExtra(\"theme\", R.style.AppThemeLight);\n        }\n        finish();\n        startActivity(intent);\n    }\n\n}\n"], "body_t": ["<empty>"], "date_tdt": "2014-06-09T06:01:35Z", "hash_sni": "5ce852d62cdae141c74d3aa92ca5e806c563fde8", "name_sni": "sample/src/de/passsy/circularprogressbarsample/CircularProgressBarSample.java", "patch_t": [" \n         super.onCreate(savedInstanceState);\n         setContentView(R.layout.activity_home);\n+        System.out.println(\"CircularProgressBarSample.onCreate\");\n \n         mHoloCircularProgressBar = (HoloCircularProgressBar) findViewById(R.id.holoCircularProgressBar1);\n \n@@ -73,6 +74,7 @@ public class CircularProgressBarSample extends Activity {\n         new CountDownTimer(TIME_RANGE * 1000, 1 * 1000) {\n             @Override\n             public void onTick(long millisUntilFinished) {\n+                System.out.println(\"millisUntilFinished = \" + millisUntilFinished);\n                 mHoloCircularProgressBar.setLeftTime((int) (millisUntilFinished/1000));\n             }\n "], "score": 1.0, "methods_t": ["CountDownTimer Handler Random animate findViewById finish getDimensionPixelSize getExtras getInt getIntent getItemId getMenuInflater getResources getSimpleName inflate nextInt println putExtra random removeExtra rgb setContentView setLeftTime setProgressBackgroundColor setProgressColor setTextSize setTheme setTimeRange start startActivity switchTheme w"], "_version_": 1526748774439845888, "subject_t": ["up"], "comments_t": ["/** \n * generates random colors for the ProgressBar\n */\n /*\n* (non-Javadoc)\n*\n* @see android.app.Activity#onCreateOptionsMenu(android.view.Menu)\n*/\n /*\n* (non-Javadoc)\n*\n* @see android.app.Activity#onCreate(android.os.Bundle)\n*/\n /** \n * Animate.\n * @param progressBar the progress bar\n * @param listener    the listener\n */\n /** \n * The Class CircularProgressBarSample.\n * @author Pascal Welsch\n * @since 05.03.2013\n */\n /** \n * Switch theme.\n */\n /** \n * The Switch button.\n */\n         // Inflate the menu; this adds items to the action bar if it is present."], "parents_ss": ["017812014ab7014d90441ea2e88bd1f3b5f05165"], "id": "ufo22940268/CountDownProgress\u00005ce852d62cdae141c74d3aa92ca5e806c563fde8\u0000sample/src/de/passsy/circularprogressbarsample/CircularProgressBarSample.java", "callsites_cs": "de.passsy.circularprogressbarsample.CircularProgressBarSample.switchTheme()#android.os.Handler.Handler()#android.app.Activity.findViewById(<unknown>)#java.io.PrintStream.println(java.lang.String)#android.view.MenuInflater.inflate(<unknown>, android.view.Menu)#android.os.Bundle.getInt(java.lang.String)#.CountDownTimer(int, int)#android.app.Activity.getMenuInflater()#android.app.Activity.getIntent()#android.app.Activity.startActivity(android.content.Intent)#<unknown>.setLeftTime(int)#android.content.res.Resources.getDimensionPixelSize(<unknown>)#java.lang.Math.random()#android.view.ContextThemeWrapper.getResources()#android.os.Bundle.getInt(java.lang.String, int)#android.os.CountDownTimer.start()#android.graphics.Color.rgb(int, int, int)#android.app.Activity.finish()#<unknown>.animate(Animator.AnimatorListener, float, int)#java.util.Random.Random()#java.util.Random.nextInt(int)#<unknown>.setTextSize(float)#<unknown>.setTimeRange(int)#<unknown>.setProgressColor(int)#android.content.Intent.getExtras()#android.app.Activity.getIntent()#android.content.Intent.putExtra(java.lang.String, <unknown>)#android.view.MenuItem.getItemId()#android.content.Intent.getExtras()#android.util.Log.w(java.lang.String, java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.setProgressBackgroundColor(int)#android.view.ContextThemeWrapper.setTheme(int)#java.lang.Class.getSimpleName()#android.content.Intent.removeExtra(java.lang.String)#java.io.PrintStream.println(java.lang.String)", "callsites_t": ["de.passsy.circularprogressbarsample.CircularProgressBarSample.switchTheme() android.os.Handler.Handler() android.app.Activity.findViewById(<unknown>) java.io.PrintStream.println(java.lang.String) android.view.MenuInflater.inflate(<unknown>, android.view.Menu) android.os.Bundle.getInt(java.lang.String) .CountDownTimer(int, int) android.app.Activity.getMenuInflater() android.app.Activity.getIntent() android.app.Activity.startActivity(android.content.Intent) <unknown>.setLeftTime(int) android.content.res.Resources.getDimensionPixelSize(<unknown>) java.lang.Math.random() android.view.ContextThemeWrapper.getResources() android.os.Bundle.getInt(java.lang.String, int) android.os.CountDownTimer.start() android.graphics.Color.rgb(int, int, int) android.app.Activity.finish() <unknown>.animate(Animator.AnimatorListener, float, int) java.util.Random.Random() java.util.Random.nextInt(int) <unknown>.setTextSize(float) <unknown>.setTimeRange(int) <unknown>.setProgressColor(int) android.content.Intent.getExtras() android.app.Activity.getIntent() android.content.Intent.putExtra(java.lang.String, <unknown>) android.view.MenuItem.getItemId() android.content.Intent.getExtras() android.util.Log.w(java.lang.String, java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.setProgressBackgroundColor(int) android.view.ContextThemeWrapper.setTheme(int) java.lang.Class.getSimpleName() android.content.Intent.removeExtra(java.lang.String) java.io.PrintStream.println(java.lang.String)"]}, {"user_sni": "rrtigga", "repo_sni": "rrtigga/GetDisciplined", "imports_t": ["android.text.Spannable android.widget.CheckBox android.app.Notification android.text.SpannableString android.view.View.OnClickListener android.content.Context android.os.Bundle android.content.DialogInterface android.widget.CompoundButton android.view.Menu com.triggertrap.seekarc.SeekArc android.view.MenuInflater java.util.ArrayList android.widget.SeekBar.OnSeekBarChangeListener java.util.Date android.app.PendingIntent android.graphics.Typeface android.content.SharedPreferences com.ibc.android.demo.appslist.app.HeartBeat android.widget.TextView android.net.Uri android.app.admin.DevicePolicyManager android.os.CountDownTimer android.app.AlarmManager android.widget.Toast android.content.Intent java.util.Map android.app.NotificationManager android.content.ComponentName android.content.pm.ActivityInfo android.widget.SeekBar android.view.MenuItem android.app.AlertDialog android.support.v7.app.ActionBarActivity android.view.View android.util.Log"], "email_sni": "rrtigga@ucdavis.edu", "contents_t": ["package com.spicycurryman.getdisciplined10.app;\n\nimport android.app.AlarmManager;\nimport android.app.AlertDialog;\nimport android.app.Notification;\nimport android.app.NotificationManager;\nimport android.app.PendingIntent;\nimport android.app.admin.DevicePolicyManager;\nimport android.content.ComponentName;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.content.pm.ActivityInfo;\nimport android.graphics.Typeface;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.support.v7.app.ActionBarActivity;\nimport android.text.Spannable;\nimport android.text.SpannableString;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.CheckBox;\nimport android.widget.CompoundButton;\nimport android.widget.SeekBar;\nimport android.widget.SeekBar.OnSeekBarChangeListener;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.ibc.android.demo.appslist.app.HeartBeat;\nimport com.triggertrap.seekarc.SeekArc;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.Map;\n\npublic class MainActivity extends ActionBarActivity {\n    private SeekArc mSeekArc;\n    private SeekBar mRotation;\n    private SeekBar mStartAngle;\n    private SeekBar mSweepAngle;\n    private SeekBar mArcWidth;\n    private SeekBar mProgressWidth;\n    private CheckBox mRoundedEdges;\n    private CheckBox mTouchInside;\n    private CheckBox mClockwise;\n    private TextView mSeekArcProgress;\n    private TextView mSeekArcMinuteProgress;\n\n\n\n    //will show the time\n    private TextView number_text;\n\n    private TextView minute_text;\n\n    private TextView little_hour_text2;\n    private TextView little_minute_text2;\n\n\n\n    CountDownTimer countDownTimer;          // built in android class CountDownTimer\n    long totalTimeCountInMilliseconds;\n    long timeBlinkInMilliseconds;           // start time of start blinking\n    boolean blink;\n\n\n    SharedPreferences startimerPreferences;\n    SharedPreferences endTimerPreferences;\n    SharedPreferences endservice;\n\n\n    ArrayList<String> packagezList;\n    SharedPreferences sharedPrefsapp;\n    Map<String, ?> allEntries;\n\n\n    long timerstarted; //this is when the user hit start timer.\n    long timerends; //this is the time when the time when the timer will end;\n    long reopened; //this is when time when the user reopens the application;\n\n\n\n    long newtotalTimeCountInMilliseconds;\n\n\n    // Consider showing drawable scrubber after pressing H M or S\n\n\n\n\n    CircleButton block_button1;\n    CircleButton start_timer;\n\n\n    int hourint, minuteint;\n\n\n    private static final int REQUEST_CODE = 0;\n    private DevicePolicyManager mDPM;\n    private ComponentName mAdminName;\n\n    public boolean onCreateOptionsMenu(Menu menu){\n        MenuInflater inflater = getMenuInflater();\n        inflater.inflate(R.menu.main, menu);\n        return true;\n    }\n\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n            case R.id.setting_drop:\n                Intent sharingIntent = new Intent(android.content.Intent.ACTION_SEND);\n                sharingIntent.setType(\"text/plain\");\n                String shareBody = \"Hey you gotta check out this app I found, GetDisciplined! It really helps me stay focused! http://play.google.com/store/apps/details?id=com.spicycurryman.getdisciplined10.app \";\n                sharingIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, \"Check out GetDisciplined\");\n                sharingIntent.putExtra(android.content.Intent.EXTRA_TEXT, shareBody);\n                startActivity(Intent.createChooser(sharingIntent, \"Share via\"));\n                return true;\n            case R.id.follow_us_drop:\n                Intent followintent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://www.twitter.com/getdisciplined\"));\n                startActivity(followintent);\n                return true;\n            case R.id.feedback_drop:\n                Intent emailIntent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(\n                        \"mailto\",\"getdisciplinedapp@gmail.com\", null));\n                startActivity(Intent.createChooser(emailIntent, \"Send email...\"));\n                return true;\n\n\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n\n\n    @Override\n    protected void onResume()\n    {\n        super.onResume();\n        ApplicationCheck.activityResumed();\n\n\n        try\n        {\n            // Initiate DevicePolicyManager.\n            mDPM = (DevicePolicyManager)getSystemService(Context.DEVICE_POLICY_SERVICE);\n            // Set DeviceAdminDemo Receiver for active the component with different option\n            mAdminName = new ComponentName(this, DeviceAdmin.class);\n\n            if (!mDPM.isAdminActive(mAdminName)) {\n                // try to become active\n                Intent intent = new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN);\n                intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, mAdminName);\n                intent.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION,\n                        \"\\nIt's time to GetDisciplined! ;)\"+\n                                \"\\n It\u2019s this simple: \\n\" +\n                                \"1) Drag the red circle scrubber on the top to set the amount of time for how long you want the apps to be blocked for\\n\" +\n                                \"(Press the hour time and drag the scrubber to set the time for hours and press the minute time and drag the scrubber to set the time for minutes)\\n\" +\n                                \"2) Press the list button and check the distracting apps you want to block\\n\" +\n                                \"3) Press the timer button to start the time\");\n                startActivityForResult(intent, REQUEST_CODE);\n            }\n            else\n            {\n                // Already is a device administrator, can do security operations now.\n                //mDPM.lockNow();\n            }\n        } catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n    }\n\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\n        super.onCreate(savedInstanceState);\n        setTheme(R.style.Theme_Light_appalled);\n\n        setContentView(R.layout.merge);\n\n\n\n        try\n        {\n            // Initiate DevicePolicyManager.\n            mDPM = (DevicePolicyManager)getSystemService(Context.DEVICE_POLICY_SERVICE);\n            // Set DeviceAdminDemo Receiver for active the component with different option\n            mAdminName = new ComponentName(this, DeviceAdmin.class);\n\n            if (!mDPM.isAdminActive(mAdminName)) {\n                // try to become active\n                Intent intent = new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN);\n                intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, mAdminName);\n                intent.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION,\n                        \"\\nIt's time to GetDisciplined! ;)\"+\n                                \"\\n It\u2019s this simple: \\n\" +\n                                \"1) Drag the red circle scrubber on the top to set the amount of time for how long you want the apps to be blocked for\\n\" +\n                                \"(Press the hour time and drag the scrubber to set the time for hours and press the minute time and drag the scrubber to set the time for minutes)\\n\" +\n                                \"2) Press the list button and check the distracting apps you want to block\\n\" +\n                                \"3) Press the timer button to start the time\");\n                startActivityForResult(intent, REQUEST_CODE);\n            }\n            else\n            {\n                // Already is a device administrator, can do security operations now.\n                //mDPM.lockNow();\n            }\n        } catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n\n\n        // here is where the service is started.\n        //startService(new Intent(this, HeartBeat.class));\n\n/*\n        Intent iHeartBeatService = new Intent(this, HeartBeat.class);\n        PendingIntent piHeartBeatService = PendingIntent.getService(this, 0, iHeartBeatService, PendingIntent.FLAG_UPDATE_CURRENT);\n        AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);\n        alarmManager.cancel(piHeartBeatService);\n        alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), 300000, piHeartBeatService);\n*/\n\n\n        Intent ishintent = new Intent(this, HeartBeat.class);\n        PendingIntent pintent = PendingIntent.getService(this, 0, ishintent, 0);\n        AlarmManager alarm = (AlarmManager)getSystemService(Context.ALARM_SERVICE);\n        alarm.cancel(pintent);\n        alarm.setRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(),150000, pintent);\n        getApplicationContext().startService(ishintent);\n\n\n\n\n\n        //set views\n\n        start_timer = (CircleButton) findViewById(R.id.start_button);\n        number_text = (TextView) findViewById(R.id.hour_progress_number);\n        minute_text = (TextView) findViewById(R.id.minute_progress_number);\n\n\n        //getReferenceOfViews ();                         // get all views\n        setActionListeners ();\n\n        // This determine what the actual \"countdown\" time will be.\n        //totalTimeCountInMilliseconds = 60 * 1000;      // time count for 3 minutes = 180 seconds\n        //timeBlinkInMilliseconds = 30 * 1000;\n\n        //Make sure you find out why it appears after a whole 1 second after the app appears\n        SpannableString s = new SpannableString(\"GetDisciplined\");\n        s.setSpan(new TypefaceSpan(this, \"miso.otf\"), 0, s.length(),\n                Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n\n// Update the action bar title with the TypefaceSpan instance\n        android.support.v7.app.ActionBar actionBar = getSupportActionBar();\n        actionBar.setTitle(s);\n        // set the action bar in this activity as the home\n        actionBar.setHomeButtonEnabled(true);\n\n        //Listeners for the buttons\n        addListenerOnButton();\n\n\n\n        //Editing Button Text\n\n\n\n        number_text = (TextView)findViewById(R.id.hour_progress_number);\n        number_text.setTypeface(Typeface.createFromAsset(getAssets(), \"fonts/roboto-thin.ttf\"));\n\n        minute_text = (TextView)findViewById(R.id.minute_progress_number);\n        minute_text.setTypeface(Typeface.createFromAsset(getAssets(), \"fonts/roboto-thin.ttf\"));\n\n\n        little_hour_text2 = (TextView)findViewById(R.id.little_hour_text2);\n        little_hour_text2.setTypeface(Typeface.createFromAsset(getAssets(), \"fonts/roboto-thin.ttf\"));\n\n        little_minute_text2 = (TextView)findViewById(R.id.little_minute_text2);\n        little_minute_text2.setTypeface(Typeface.createFromAsset(getAssets(), \"fonts/roboto-thin.ttf\"));\n\n\n        mSeekArc = (SeekArc) findViewById(R.id.seekArc);\n\n\n//Here is the actual \"hour progress number\" aka the TextView that changes as the scrubber is dragged around\n        mSeekArcProgress = (TextView) findViewById(R.id.hour_progress_number);\n\n        mSeekArcMinuteProgress = (TextView) findViewById(R.id.minute_progress_number);\n\n\n        startimerPreferences = getPreferences(MODE_APPEND);\n\n        Date startDate = new Date(startimerPreferences.getLong(\"time\", 0));\n        timerstarted = startDate.getTime();\n\n\n        endTimerPreferences = getPreferences(MODE_APPEND);\n        Date endDate = new Date(endTimerPreferences.getLong(\"endtime\", 0));\n        timerends = endDate.getTime();\n\n\n        Date openagain = new Date(System.currentTimeMillis());\n        reopened = openagain.getTime();\n\n\n        //make textview selectable\n\n        View.OnClickListener clickListener = new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n\n                if((v.getId() == R.id.hour_progress_number)){\n                    number_text.setTextColor(getResources().getColor(R.color.black));\n                    little_hour_text2.setTextColor(getResources().getColor(R.color.black));\n\n\n\n\n\n                    minute_text.setTextColor(getResources().getColor(R.color.red_highlight));\n                    little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n\n\n\n\n\n                    //corresponding button logic should below here\n                    mSeekArc.setOnSeekArcChangeListener(new SeekArc.OnSeekArcChangeListener() {\n\n                        @Override\n                        public void onStopTrackingTouch(SeekArc seekArc) {\n                        }\n                        @Override\n                        public void onStartTrackingTouch(SeekArc seekArc) {\n                            number_text.setTextColor(getResources().getColor(R.color.black));\n                        }\n\n\n                        //This sets the actual string for the hours\n                        @Override\n                        public void onProgressChanged(SeekArc seekArc, int progress,\n                                                      boolean fromUser) {\n\n                            int progress_count = 0;\n\n                            for (int i=0;i<24;i=i+1)\n                            {\n\n                                if (progress ==120) {\n                                    mSeekArcProgress.setText(\"24\");\n\n                                }\n                                else if (progress == progress_count)\n                                {\n                                    mSeekArcProgress.setText(String.valueOf(String.format(\"%02d\",i)));\n                                }\n\n                                progress_count = progress_count + 5;\n\n                            }\n                        }\n                    });\n                } else if((v.getId() == R.id.minute_progress_number)){\n\n                    minute_text.setTextColor(getResources().getColor(R.color.black));\n                    little_minute_text2.setTextColor(getResources().getColor(R.color.black));\n\n\n\n                    number_text.setTextColor(getResources().getColor(R.color.red_highlight));\n                    little_hour_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n\n\n\n\n                    //corresponding button logic should below here\n\n                    mSeekArc.setOnSeekArcChangeListener(new SeekArc.OnSeekArcChangeListener() {\n\n\n                        @Override\n                        public void onStopTrackingTouch(SeekArc seekArc) {\n                        }\n                        @Override\n                        public void onStartTrackingTouch(SeekArc seekArc) {\n                            minute_text.setTextColor(getResources().getColor(R.color.black));\n                        }\n\n\n                        //This sets the actual string for the minutes\n                        @Override\n                        public void onProgressChanged(SeekArc seekArc, int progress,\n                                                      boolean fromUser) {\n                            int progress_count = 0;\n\n                            for (int i=0;i<120;i++)\n                            {\n\n                                if (progress ==120) {\n                                    mSeekArcMinuteProgress.setText(\"00\");\n\n\n\n\n                                }\n                                else if (progress == progress_count)\n                                {\n                                    mSeekArcMinuteProgress.setText(String.valueOf(String.format(\"%02d\",i)));\n                                }\n\n                                progress_count = progress_count + 2;\n\n\n                            }\n\n                        }\n                    });\n                }\n\n            }\n        };\n\n        findViewById(R.id.hour_progress_number).setOnClickListener(clickListener);\n        findViewById(R.id.minute_progress_number).setOnClickListener(clickListener);\n\n\n        findViewById(R.id.minute_progress_number).performClick();\n\n\n\n        mRotation = (SeekBar) findViewById(R.id.rotation);\n        mStartAngle = (SeekBar) findViewById(R.id.startAngle);\n        mSweepAngle  = (SeekBar) findViewById(R.id.sweepAngle);\n        mArcWidth = (SeekBar) findViewById(R.id.arcWidth);\n        mProgressWidth = (SeekBar) findViewById(R.id.progressWidth);\n        mRoundedEdges = (CheckBox) findViewById(R.id.roundedEdges);\n        mTouchInside = (CheckBox) findViewById(R.id.touchInside);\n        mClockwise = (CheckBox) findViewById(R.id.clockwise);\n\n        mRotation.setProgress(mSeekArc.getArcRotation());\n        mStartAngle.setProgress(mSeekArc.getStartAngle());\n        mSweepAngle.setProgress(mSeekArc.getSweepAngle());\n        mArcWidth.setProgress(mSeekArc.getArcWidth());\n        mProgressWidth.setProgress(mSeekArc.getProgressWidth());\n\n\n        mRotation.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n            @Override\n            public void onStopTrackingTouch(SeekBar arg0) {\n\n            }\n            @Override\n            public void onStartTrackingTouch(SeekBar arg0) {\n            }\n\n            @Override\n            public void onProgressChanged(SeekBar view, int progress, boolean fromUser) {\n                mSeekArc.setArcRotation(progress);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mStartAngle.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n            @Override\n            public void onStopTrackingTouch(SeekBar arg0) {\n\n            }\n            @Override\n            public void onStartTrackingTouch(SeekBar arg0) {\n            }\n\n            @Override\n            public void onProgressChanged(SeekBar view, int progress, boolean fromUser) {\n                mSeekArc.setStartAngle(progress);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mSweepAngle.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n            @Override\n            public void onStopTrackingTouch(SeekBar arg0) {\n\n            }\n            @Override\n            public void onStartTrackingTouch(SeekBar arg0) {\n            }\n\n            @Override\n            public void onProgressChanged(SeekBar view, int progress, boolean fromUser) {\n                mSeekArc.setSweepAngle(progress);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mArcWidth.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n            @Override\n            public void onStopTrackingTouch(SeekBar arg0) {\n\n            }\n            @Override\n            public void onStartTrackingTouch(SeekBar arg0) {\n            }\n\n            @Override\n            public void onProgressChanged(SeekBar view, int progress, boolean fromUser) {\n                mSeekArc.setArcWidth(progress);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mProgressWidth.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n            @Override\n            public void onStopTrackingTouch(SeekBar arg0) {\n\n            }\n            @Override\n            public void onStartTrackingTouch(SeekBar arg0) {\n            }\n\n            @Override\n            public void onProgressChanged(SeekBar view, int progress, boolean fromUser) {\n                mSeekArc.setProgressWidth(progress);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mRoundedEdges.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(CompoundButton buttonView,boolean isChecked) {\n                mSeekArc.setRoundedEdges(isChecked);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mTouchInside.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(CompoundButton buttonView,boolean isChecked) {\n                mSeekArc.setTouchInSide(false);\n            }\n        });\n\n        mClockwise.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(CompoundButton buttonView,boolean isChecked) {\n                mSeekArc.setClockwise(isChecked);\n                mSeekArc.invalidate();\n            }\n        });\n\n\n        if(timerstarted > 0)\n        {\n            if(reopened <timerends){\n                //start countdown timer with new time.\n                //set countdowntime to timerends-reopen.\n\n                newtotalTimeCountInMilliseconds = timerends-reopened;\n\n\n                number_text.setTextColor(getResources().getColor(R.color.red_highlight));\n                little_hour_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n\n                minute_text.setTextColor(getResources().getColor(R.color.red_highlight));\n                little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n\n\n\n\n                // yo\n\n                number_text.setClickable(false);\n\n                minute_text.setClickable(false);\n\n\n\n\n\n\n                countDownTimer = new CountDownTimer(newtotalTimeCountInMilliseconds, 500) {\n                    // 500 means, onTick function will be called at every 500 milliseconds\n\n                    @Override\n                    public void onTick(long leftTimeInMilliseconds) {\n\n                        long seconds = leftTimeInMilliseconds / 1000;\n                        mSeekArc.setVisibility(View.INVISIBLE);\n                        start_timer.setVisibility(View.INVISIBLE);\n                        //block_button1.setVisibility(View.INVISIBLE);\n\n\n                        if (leftTimeInMilliseconds < timeBlinkInMilliseconds) {\n                            // textViewShowTime.setTextAppearance(getApplicationContext(), R.style.blinkText);\n                            // change the style of the textview .. giving a red alert style\n\n                            if (blink) {\n                                number_text.setVisibility(View.VISIBLE);\n                                minute_text.setVisibility(View.VISIBLE);\n\n\n                                // if blink is true, textview will be visible\n                            } else {\n                                number_text.setVisibility(View.INVISIBLE);\n                                minute_text.setVisibility(View.INVISIBLE);\n\n\n                            }\n\n                            blink = !blink;         // toggle the value of blink\n                        }\n\n                        minute_text.setText(String.format(\"%02d\", (seconds / 60) % 60));\n                        number_text.setText(String.format(\"%02d\", seconds / 3600));                     // format the textview to show the easily readable format\n                    }\n\n\n                    @Override\n                    public void onFinish() {\n                        // this function will be called when the timecount is finished\n                        //textViewShowTime.setText(\"Time up!\");\n                        number_text.setVisibility(View.VISIBLE);\n                        minute_text.setVisibility(View.VISIBLE);\n                        mSeekArc.setVisibility(View.VISIBLE);\n                        start_timer.setVisibility(View.VISIBLE);\n\n                        number_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                        minute_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                        little_hour_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                        little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                        number_text.setClickable(true);\n\n                        minute_text.setClickable(true);\n\n\n\n\n\n                    }\n\n                }.start();\n\n\n\n            }\n        }\n\n    }\n\n    private static final long TIME_INTERVAL = 2000; // # milliseconds, desired time passed between two back presses.\n    private long mBackPressed;\n\n    @Override\n    public void onBackPressed()\n    {\n        if (mBackPressed + TIME_INTERVAL > System.currentTimeMillis())\n        {\n            super.onBackPressed();\n            return;\n        }\n        else { Toast.makeText(getBaseContext(), \"Tap back button again to exit\", Toast.LENGTH_SHORT).show(); }\n\n        mBackPressed = System.currentTimeMillis();\n    }\n\n    public void addListenerOnButton() {\n\n        final Context context = this;\n\n        block_button1 = (CircleButton) findViewById(R.id.block_button);\n\n        block_button1.setOnClickListener(new OnClickListener() {\n\n            @Override\n            public void onClick(View arg0) {\n\n                Intent intent = new Intent(context, InstalledAppActivity.class);\n                startActivity(intent);\n\n            }\n\n        });\n\n    }\n\n    private void setActionListeners() {\n\n        number_text = (TextView) findViewById(R.id.hour_progress_number);\n        minute_text = (TextView) findViewById(R.id.minute_progress_number);\n\n        start_timer.setOnClickListener(new View.OnClickListener() {\n\n            @Override\n            public void onClick(View view) {\n\n                AlertDialog.Builder zeroerror = new AlertDialog.Builder(MainActivity.this)\n                        .setMessage(\"Dude, you didn't set a time! :P\")\n                        .setNegativeButton(\"Whoops! My bad!\", new DialogInterface.OnClickListener() {\n                            public void onClick(DialogInterface dialog, int which) {\n                                Log.d(\"AlertDialog\", \"Negative\");\n                                dialog.cancel();\n                            }\n                        });\n\n\n                AlertDialog alertzero = zeroerror.create();\n\n\n                AlertDialog.Builder noapp = new AlertDialog.Builder(MainActivity.this)\n                        .setMessage(\"Hey silly! You didn't select any apps to block!\")\n                        .setNegativeButton(\"Oh, silly me!\", new DialogInterface.OnClickListener() {\n                            public void onClick(DialogInterface dialog, int which) {\n                                Log.d(\"AlertDialog\", \"Negative\");\n                                dialog.cancel();\n                            }\n                        });\n\n\n                AlertDialog zeroapp = noapp.create();\n\n\n\n                hourint = Integer.valueOf(number_text.getText().toString());\n\n                minuteint = Integer.valueOf(minute_text.getText().toString());\n\n\n\n                AlertDialog.Builder timeset = new AlertDialog.Builder(MainActivity.this)\n\n\n                        .setMessage(\"Are you sure you want to block the selected apps for \"+ hourint +\" hour(s) and \"+ minuteint + \" minutes?!\")\n                        .setPositiveButton(\"Yeah man!\", new DialogInterface.OnClickListener() {\n\n\n\n                            public void onClick(DialogInterface dialog, int which) {\n\n                                number_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                minute_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                little_hour_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                number_text.setClickable(false);\n\n                                minute_text.setClickable(false);\n\n\n                                hourint = Integer.valueOf(number_text.getText().toString());\n\n                                minuteint = Integer.valueOf(minute_text.getText().toString());\n\n\n                                //Make sure it stays alive no matter what until stopservice is called when the timer runs out\n\n\n                                Date currenttime = new Date(System.currentTimeMillis());\n\n                                timerstarted = currenttime.getTime();\n                                startimerPreferences = getPreferences(MODE_APPEND);\n                                SharedPreferences.Editor starteditor = startimerPreferences.edit();\n                                starteditor.putLong(\"time\", timerstarted);\n                                starteditor.apply();\n\n\n                                Date endtime = new Date(System.currentTimeMillis());\n\n\n                                if ((((hourint * 60 * 60) + (minuteint * 60)  ) * 1000) > 0) {\n                                    timerends = endtime.getTime() + (((hourint * 60 * 60) + (minuteint * 60) ) * 1000);\n\n\n                                } else {\n                                    timerends = 0;\n                                }\n\n\n                                Log.e(\"This is the end time:  \", timerends + \"\");\n                                endTimerPreferences = getPreferences(MODE_APPEND);\n                                SharedPreferences.Editor endeditor = endTimerPreferences.edit();\n                                endeditor.putLong(\"endtime\", timerends);\n                                endeditor.apply();\n\n                                endservice = getApplicationContext().getSharedPreferences(\"endservice\", Context.MODE_PRIVATE);\n                                SharedPreferences.Editor serviceeditor = endservice.edit();\n                                serviceeditor.putLong(\"endservice\", timerstarted + (((hourint * 60 * 60) + (minuteint * 60) ) * 1000));\n                                Log.e(\"Check out this time:  \", timerends + \"\");\n\n                                serviceeditor.apply();\n\n\n                                totalTimeCountInMilliseconds = (((hourint * 60 * 60) + (minuteint * 60) ) * 1000);      // time count\n                                timeBlinkInMilliseconds = 30 * 1000;\n\n                                countDownTimer = new CountDownTimer(totalTimeCountInMilliseconds, 500) {\n                                    // 500 means, onTick function will be called at every 500 milliseconds\n\n                                    @Override\n                                    public void onTick(long leftTimeInMilliseconds) {\n\n                                        long seconds = leftTimeInMilliseconds / 1000;\n                                        mSeekArc.setVisibility(View.INVISIBLE);\n                                        start_timer.setVisibility(View.INVISIBLE);\n                                        //block_button1.setVisibility(View.INVISIBLE);\n\n\n                                        if (leftTimeInMilliseconds < timeBlinkInMilliseconds) {\n                                            // textViewShowTime.setTextAppearance(getApplicationContext(), R.style.blinkText);\n                                            // change the style of the textview .. giving a red alert style\n\n                                            if (blink) {\n                                                number_text.setVisibility(View.VISIBLE);\n                                                minute_text.setVisibility(View.VISIBLE);\n\n\n                                                // if blink is true, textview will be visible\n                                            } else {\n                                                number_text.setVisibility(View.INVISIBLE);\n                                                minute_text.setVisibility(View.INVISIBLE);\n\n\n                                            }\n\n                                            blink = !blink;         // toggle the value of blink\n                                        }\n\n                                        minute_text.setText(String.format(\"%02d\", (seconds / 60) % 60));\n                                        number_text.setText(String.format(\"%02d\", seconds / 3600));                     // format the textview to show the easily readable format\n                                    }\n\n\n                                    @Override\n                                    public void onFinish() {\n                                        number_text.setVisibility(View.VISIBLE);\n                                        minute_text.setVisibility(View.VISIBLE);\n                                        mSeekArc.setVisibility(View.VISIBLE);\n                                        start_timer.setVisibility(View.VISIBLE);\n\n\n                                        number_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                        minute_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                        little_hour_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                        little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                        number_text.setClickable(true);\n\n                                        minute_text.setClickable(true);\n\n\n                                        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n                                        Notification myNotification = new Notification(R.drawable.ic_launcher, \"Time's up!\", System.currentTimeMillis());\n                                        Context context = getApplicationContext();\n                                        String notificationTitle = \"Apps are now unlocked!\";\n                                        String notificationText = \"Great job being productive! ;)\";\n                                        Intent myIntent = new Intent(MainActivity.this, MainActivity.class);\n                                        PendingIntent pendingIntent = PendingIntent.getActivity(MainActivity.this, 0,   myIntent, Intent.FILL_IN_ACTION);\n                                        myNotification.flags |= Notification.FLAG_AUTO_CANCEL;\n                                        myNotification.setLatestEventInfo(context, notificationTitle, notificationText, pendingIntent);\n                                        notificationManager.notify(1, myNotification);\n\n\n                                    }\n\n                                }.start();\n                            }\n                        });\n                timeset.setNegativeButton(\"Nope!\", new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int which) {\n                        Log.d(\"AlertDialog\", \"Negative\");\n                        dialog.cancel();\n                    }\n                });\n\n\n                AlertDialog timerright = timeset.create();\n\n                hourint = Integer.valueOf(number_text.getText().toString());\n\n                minuteint = Integer.valueOf(minute_text.getText().toString());\n\n\n\n\n                sharedPrefsapp = getApplicationContext().getSharedPreferences(\"appdb\", Context.MODE_PRIVATE);\n                allEntries= null;\n                allEntries = sharedPrefsapp.getAll();\n                packagezList= null;\n\n                packagezList = new ArrayList<String>();\n\n                for (Map.Entry<String, ?> entry : allEntries.entrySet()) {\n                    packagezList.add(entry.getKey());\n\n                }\n\n\n\n                if((((hourint * 60 * 60) + (minuteint * 60)  ) * 1000) == 0)\n                {\n                    alertzero.show();\n                }\n\n                else if (packagezList.size() ==0){\n                    noapp.show();\n                }\n\n\n\n                else\n                {\n                    timerright.show();\n                }\n\n            }\n\n\n        });\n    }\n\n\n    @Override\n    protected void onPause() {\n        super.onPause();\n        ApplicationCheck.activityPaused();\n    }\n\n\n}\n"], "body_t": ["<empty>"], "date_tdt": "2015-06-30T18:41:02Z", "hash_sni": "6c8b142f292c626a3bb53633b0b2ed6a7f255849", "name_sni": "app/src/main/java/com/spicycurryman/getdisciplined10/app/MainActivity.java", "patch_t": ["                 intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, mAdminName);\n                 intent.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION,\n                         \"\\nIt's time to GetDisciplined! ;)\"+\n-                        \"\\n It\u2019s this simple: \\n\" +\n-                        \"1) Drag the red circle scrubber on the top to set the amount of time for how long you want the apps to be blocked for\\n\" +\n-                        \"(Press the hour time and drag the scrubber to set the time for hours and press the minute time and drag the scrubber to set the time for minutes)\\n\" +\n-                        \"2) Press the list button and check the distracting apps you want to block\\n\" +\n-                        \"3) Press the timer button to start the time\");\n+                                \"\\n It\u2019s this simple: \\n\" +\n+                                \"1) Drag the red circle scrubber on the top to set the amount of time for how long you want the apps to be blocked for\\n\" +\n+                                \"(Press the hour time and drag the scrubber to set the time for hours and press the minute time and drag the scrubber to set the time for minutes)\\n\" +\n+                                \"2) Press the list button and check the distracting apps you want to block\\n\" +\n+                                \"3) Press the timer button to start the time\");\n                 startActivityForResult(intent, REQUEST_CODE);\n             }\n             else"], "score": 1.0, "methods_t": ["AlertDialog.Builder ArrayList, String ComponentName CompoundButton.OnCheckedChangeListener CountDownTimer Date DialogInterface.OnClickListener Intent Notification OnClickListener OnSeekBarChangeListener SeekArc.OnSeekArcChangeListener SpannableString TypefaceSpan View.OnClickListener activityPaused activityResumed add addListenerOnButton apply cancel create createChooser createFromAsset currentTimeMillis d e edit entrySet findViewById format fromParts getActivity getAll getApplicationContext getArcRotation getArcWidth getAssets getBaseContext getColor getId getItemId getKey getLong getMenuInflater getPreferences getProgressWidth getResources getService getSharedPreferences getStartAngle getSupportActionBar getSweepAngle getSystemService getText getTime inflate invalidate isAdminActive length makeText notify parse performClick printStackTrace putExtra putLong setActionListeners setArcRotation setArcWidth setClickable setClockwise setContentView setHomeButtonEnabled setLatestEventInfo setMessage setNegativeButton setOnCheckedChangeListener setOnClickListener setOnSeekArcChangeListener setOnSeekBarChangeListener setPositiveButton setProgress setProgressWidth setRepeating setRequestedOrientation setRoundedEdges setSpan setStartAngle setSweepAngle setText setTextColor setTheme setTitle setTouchInSide setType setTypeface setVisibility show size start startActivity startActivityForResult startService toString valueOf"], "_version_": 1526746631867727872, "subject_t": ["Fixed for Android-L. Tested Properly. Released"], "comments_t": ["// Update the action bar title with the TypefaceSpan instance         //make textview selectable                             blink = !blink;         // toggle the value of blink         //Listeners for the buttons         //set views             // Initiate DevicePolicyManager.                                     // 500 means, onTick function will be called at every 500 milliseconds                 //set countdowntime to timerends-reopen.     private static final long TIME_INTERVAL = 2000; // # milliseconds, desired time passed between two back presses.                             // change the style of the textview .. giving a red alert style                 // try to become active                 // yo             // Set DeviceAdminDemo Receiver for active the component with different option                     // 500 means, onTick function will be called at every 500 milliseconds         //Editing Button Text                                             // textViewShowTime.setTextAppearance(getApplicationContext(), R.style.blinkText);         //timeBlinkInMilliseconds = 30 * 1000;                                             blink = !blink;         // toggle the value of blink                 //start countdown timer with new time.     long timerends; //this is the time when the time when the timer will end;                 //mDPM.lockNow();                                 totalTimeCountInMilliseconds = (((hourint * 60 * 60) + (minuteint * 60) ) * 1000);      // time count                                             // change the style of the textview .. giving a red alert style         // here is where the service is started.     CountDownTimer countDownTimer;          // built in android class CountDownTimer                 // Already is a device administrator, can do security operations now.     // Consider showing drawable scrubber after pressing H M or S     long reopened; //this is when time when the user reopens the application;                                         //block_button1.setVisibility(View.INVISIBLE);                         // this function will be called when the timecount is finished         //Make sure you find out why it appears after a whole 1 second after the app appears                     //corresponding button logic should below here                             // textViewShowTime.setTextAppearance(getApplicationContext(), R.style.blinkText);                         //This sets the actual string for the hours         //totalTimeCountInMilliseconds = 60 * 1000;      // time count for 3 minutes = 180 seconds     //will show the time     long timeBlinkInMilliseconds;           // start time of start blinking         //getReferenceOfViews ();                         // get all views         // set the action bar in this activity as the home                                 // if blink is true, textview will be visible                         //This sets the actual string for the minutes /*\nIntent iHeartBeatService = new Intent(this, HeartBeat.class);\nPendingIntent piHeartBeatService = PendingIntent.getService(this, 0, iHeartBeatService, PendingIntent.FLAG_UPDATE_CURRENT);\nAlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);\nalarmManager.cancel(piHeartBeatService);\nalarmManager.setRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), 300000, piHeartBeatService);\n*/\n                         number_text.setText(String.format(\"%02d\", seconds / 3600));                     // format the textview to show the easily readable format         //startService(new Intent(this, HeartBeat.class));                                                 // if blink is true, textview will be visible                                 //Make sure it stays alive no matter what until stopservice is called when the timer runs out                         //textViewShowTime.setText(\"Time up!\");     long timerstarted; //this is when the user hit start timer.         // This determine what the actual \"countdown\" time will be. //Here is the actual \"hour progress number\" aka the TextView that changes as the scrubber is dragged around                         //block_button1.setVisibility(View.INVISIBLE);                                         number_text.setText(String.format(\"%02d\", seconds / 3600));                     // format the textview to show the easily readable format"], "parents_ss": ["a3160f8a55f080dda06426faacd751b65f0fd73c"], "id": "rrtigga/GetDisciplined\u00006c8b142f292c626a3bb53633b0b2ed6a7f255849\u0000app/src/main/java/com/spicycurryman/getdisciplined10/app/MainActivity.java", "callsites_cs": "android.os.CountDownTimer.start()#<unknown>.setContentView(<unknown>)#android.app.admin.DevicePolicyManager.isAdminActive(android.content.ComponentName)#android.content.Intent.Intent(java.lang.String)#android.content.SharedPreferences.edit()#android.view.View.setVisibility(int)#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setTextColor(<unknown>)#<unknown>.startActivityForResult(android.content.Intent, int)#java.lang.CharSequence.toString()#<unknown>.getResources()#.OnSeekBarChangeListener()#<unknown>.findViewById(<unknown>)#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#android.view.View.setClickable(boolean)#<unknown>.SeekArc.OnSeekArcChangeListener()#<unknown>.activityPaused()#<unknown>.getSystemService(java.lang.String)#android.widget.TextView.setTextColor(<unknown>)#<unknown>.getApplicationContext()#android.widget.TextView.setTextColor(<unknown>)#<unknown>.getSystemService(java.lang.String)#<unknown>.getSystemService(java.lang.String)#android.content.SharedPreferences.Editor.putLong(java.lang.String, long)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.AlarmManager.cancel(android.app.PendingIntent)#<unknown>.setVisibility(int)#<unknown>.getArcWidth()#android.widget.TextView.setText(<unknown>)#android.widget.ProgressBar.setProgress(<unknown>)#android.graphics.Typeface.createFromAsset(<unknown>, java.lang.String)#<unknown>.getAssets()#android.widget.TextView.getText()#android.widget.ProgressBar.setProgress(<unknown>)#<unknown>.getPreferences(<unknown>)#android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, )#android.view.View.setVisibility(int)#android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, )#android.widget.TextView.setText(<unknown>)#android.widget.ProgressBar.setProgress(<unknown>)#java.lang.System.currentTimeMillis()#<unknown>.setOnSeekArcChangeListener()#<unknown>.getSharedPreferences(java.lang.String, int)#android.widget.TextView.setTextColor(<unknown>)#.CountDownTimer(long, int)#<unknown>.getProgressWidth()#<unknown>.setVisibility(int)#android.widget.TextView.setText(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setClickable(boolean)#<unknown>.getPreferences(<unknown>)#android.content.SharedPreferences.Editor.apply()#java.lang.System.currentTimeMillis()#<unknown>.findViewById(<unknown>)#<unknown>.setTouchInSide(boolean)#.CompoundButton.OnCheckedChangeListener()#<unknown>.startActivity(android.content.Intent)#<unknown>.startActivity(android.content.Intent)#<unknown>.findViewById(<unknown>)#<unknown>.setOnSeekArcChangeListener()#<unknown>.findViewById(<unknown>)#android.text.SpannableString.SpannableString(java.lang.String)#<unknown>.getResources()#android.app.AlertDialog.Builder.create()#<unknown>.setTheme(<unknown>)#<unknown>.findViewById(<unknown>)#android.content.Intent.Intent(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class)#<unknown>.getColor(<unknown>)#android.content.Intent.createChooser(android.content.Intent, java.lang.String)#java.util.Date.Date(long)#android.content.SharedPreferences.Editor.apply()#android.app.AlertDialog.Builder.setMessage(java.lang.String)#<unknown>.setVisibility(int)#<unknown>.setVisibility(int)#<unknown>.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#<unknown>.setSweepAngle(int)#android.app.PendingIntent.getService(com.spicycurryman.getdisciplined10.app.MainActivity, int, android.content.Intent, int)#java.lang.Throwable.printStackTrace()#android.widget.SeekBar.setOnSeekBarChangeListener()#android.view.View.setVisibility(int)#<unknown>.getColor(<unknown>)#<unknown>.findViewById(<unknown>)#<unknown>.setProgressWidth(int)#android.widget.TextView.setTextColor(<unknown>)#<unknown>.getApplicationContext()#android.view.View.setVisibility(int)#<unknown>.setVisibility(int)#<unknown>.findViewById(<unknown>)#java.util.Map.Entry<java.lang.String,>.getKey()#android.view.View.setVisibility(int)#java.util.Date.getTime()#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setTypeface(<unknown>)#java.util.Date.Date(long)#android.widget.TextView.setTextColor(<unknown>)#<unknown>.startActivityForResult(android.content.Intent, int)#<unknown>.getSystemService(java.lang.String)#java.lang.String.format(java.lang.String, long)#android.widget.Toast.makeText(<unknown>, java.lang.String, int)#.OnClickListener()#.View.OnClickListener()#<unknown>.setVisibility(int)#java.lang.Integer.valueOf(java.lang.String)#android.app.Dialog.show()#android.content.SharedPreferences.getAll()#android.widget.CompoundButton.setOnCheckedChangeListener()#android.widget.TextView.setTextColor(<unknown>)#<unknown>.getColor(<unknown>)#android.widget.SeekBar.setOnSeekBarChangeListener()#<unknown>.setTitle(android.text.SpannableString)#android.view.View.setVisibility(int)#android.widget.TextView.setTextColor(<unknown>)#android.content.Intent.Intent(java.lang.String, android.net.Uri)#android.widget.TextView.setTypeface(<unknown>)#<unknown>.setOnClickListener()#<unknown>.setArcWidth(int)#java.util.Date.getTime()#android.content.Intent.putExtra(java.lang.String, android.content.ComponentName)#android.content.SharedPreferences.getLong(java.lang.String, int)#android.view.View.getId()#<unknown>.getSupportActionBar()#android.content.SharedPreferences.getLong(java.lang.String, int)#android.os.CountDownTimer.start()#android.widget.SeekBar.setOnSeekBarChangeListener()#android.view.View.setVisibility(int)#java.util.Map<java.lang.String,>.entrySet()#android.app.AlertDialog.Builder.AlertDialog.Builder(com.spicycurryman.getdisciplined10.app.MainActivity)#<unknown>.startActivity(android.content.Intent)#android.app.Dialog.show()#<unknown>.findViewById(<unknown>)#android.content.ComponentName.ComponentName(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class)#android.widget.TextView.getText()#android.app.Notification.Notification(<unknown>, java.lang.String, long)#<unknown>.getSharedPreferences(java.lang.String, int)#android.widget.TextView.getText()#<unknown>.getColor(<unknown>)#<unknown>.getStartAngle()#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setTextColor(<unknown>)#<unknown>.setOnClickListener(android.view.View.OnClickListener)#java.lang.String.format(java.lang.String, long)#android.widget.SeekBar.setOnSeekBarChangeListener()#android.widget.TextView.setText(<unknown>)#android.content.Intent.putExtra(java.lang.String, java.lang.String)#android.widget.TextView.setTextColor(<unknown>)#android.content.Intent.putExtra(java.lang.String, java.lang.String)#android.content.SharedPreferences.Editor.putLong(java.lang.String, long)#android.view.MenuInflater.inflate(<unknown>, android.view.Menu)#java.lang.Throwable.printStackTrace()#android.widget.TextView.getText()#android.widget.TextView.setTextColor(<unknown>)#<unknown>.setOnClickListener(android.view.View.OnClickListener)#android.content.SharedPreferences.edit()#android.content.DialogInterface.cancel()#<unknown>.getApplicationContext()#<unknown>.TypefaceSpan(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.String)#android.content.Intent.Intent(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class)#android.widget.ProgressBar.setProgress(<unknown>)#android.view.View.setClickable(boolean)#android.content.Intent.Intent(java.lang.String, android.net.Uri)#<unknown>.findViewById(<unknown>)#android.view.View.setClickable(boolean)#java.lang.String.format(java.lang.String, int)#<unknown>.getResources()#<unknown>.getResources()#android.widget.TextView.setTextColor(<unknown>)#<unknown>.setStartAngle(int)#java.util.Date.getTime()#.View.OnClickListener()#.DialogInterface.OnClickListener()#android.app.admin.DevicePolicyManager.isAdminActive(android.content.ComponentName)#java.lang.String.format(java.lang.String, long)#<unknown>.getBaseContext()#android.content.Intent.putExtra(java.lang.String, java.lang.String)#<unknown>.getMenuInflater()#android.widget.TextView.setTextColor(<unknown>)#android.content.Intent.setType(java.lang.String)#android.widget.TextView.setText(<unknown>)#<unknown>.getResources()#com.spicycurryman.getdisciplined10.app.MainActivity.addListenerOnButton()#<unknown>.getArcRotation()#android.view.View.setClickable(boolean)#android.app.AlertDialog.Builder.setPositiveButton(java.lang.String, )#<unknown>.findViewById(<unknown>)#<unknown>.findViewById(<unknown>)#<unknown>.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setClickable(boolean)#android.content.Intent.Intent(android.content.Context, java.lang.Class)#android.widget.TextView.setTextColor(<unknown>)#android.text.SpannableStringInternal.length()#<unknown>.getColor(<unknown>)#java.util.Date.getTime()#android.view.View.setClickable(boolean)#android.widget.ProgressBar.setProgress(<unknown>)#<unknown>.startService(android.content.Intent)#android.widget.TextView.setTextColor(<unknown>)#java.util.Date.Date(long)#<unknown>.setRoundedEdges(boolean)#<unknown>.getResources()#java.lang.CharSequence.toString()#android.widget.TextView.setText(java.lang.String)#<unknown>.setOnClickListener()#java.lang.CharSequence.toString()#android.content.Intent.Intent(java.lang.String)#android.widget.CompoundButton.setOnCheckedChangeListener()#android.content.Intent.putExtra(java.lang.String, android.content.ComponentName)#android.app.AlertDialog.Builder.show()#android.content.ComponentName.ComponentName(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class)#android.app.NotificationManager.notify(int, android.app.Notification)#android.widget.TextView.setTextColor(<unknown>)#android.widget.CompoundButton.setOnCheckedChangeListener()#<unknown>.invalidate()#<unknown>.setVisibility(int)#<unknown>.show()#java.util.ArrayList<java.lang.String>.ArrayList, String()#.CountDownTimer(long, int)#android.net.Uri.fromParts(java.lang.String, java.lang.String, null)#android.app.AlertDialog.Builder.create()#android.net.Uri.parse(java.lang.String)#android.widget.TextView.setTypeface(<unknown>)#java.lang.CharSequence.toString()#<unknown>.getColor(<unknown>)#android.content.Intent.createChooser(android.content.Intent, java.lang.String)#android.content.SharedPreferences.edit()#android.widget.TextView.setTextColor(<unknown>)#<unknown>.setHomeButtonEnabled(boolean)#<unknown>.activityResumed()#android.app.PendingIntent.getActivity(com.spicycurryman.getdisciplined10.app.MainActivity, int, android.content.Intent, int)#android.util.Log.e(java.lang.String, java.lang.String)#<unknown>.findViewById(<unknown>)#java.util.Date.Date(long)#<unknown>.performClick()#android.widget.TextView.setTextColor(<unknown>)#android.app.AlertDialog.Builder.create()#<unknown>.getApplicationContext()#<unknown>.setClockwise(boolean)#java.lang.Integer.valueOf(java.lang.String)#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setText(<unknown>)#<unknown>.setRequestedOrientation(int)#java.lang.System.currentTimeMillis()#android.app.Notification.setLatestEventInfo(android.content.Context, java.lang.String, java.lang.String, android.app.PendingIntent)#<unknown>.getSweepAngle()#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setTextColor(<unknown>)#android.content.SharedPreferences.Editor.putLong(java.lang.String, long)#<unknown>.findViewById(<unknown>)#java.lang.Integer.valueOf(java.lang.String)#java.util.ArrayList<java.lang.String>.size()#android.content.SharedPreferences.Editor.apply()#android.app.AlarmManager.setRepeating(int, long, int, android.app.PendingIntent)#<unknown>.invalidate()#java.lang.System.currentTimeMillis()#android.content.Intent.Intent(java.lang.String)#android.app.AlertDialog.Builder.setMessage(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.view.View.setClickable(boolean)#<unknown>.setArcRotation(int)#java.lang.String.valueOf(<unknown>)#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setTypeface(<unknown>)#<unknown>.getColor(<unknown>)#java.lang.String.format(java.lang.String, long)#android.util.Log.e(java.lang.String, java.lang.String)#<unknown>.findViewById(<unknown>)#<unknown>.findViewById(<unknown>)#android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, )#android.widget.TextView.setTextColor(<unknown>)#android.text.SpannableString.setSpan(com.spicycurryman.getdisciplined10.app.TypefaceSpan, int, int, int)#android.view.MenuItem.getItemId()#com.spicycurryman.getdisciplined10.app.MainActivity.setActionListeners()#android.app.AlertDialog.Builder.setMessage(java.lang.String)#java.lang.Integer.valueOf(java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.findViewById(<unknown>)#<unknown>.setVisibility(int)#android.widget.SeekBar.setOnSeekBarChangeListener()#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)", "callsites_t": ["android.os.CountDownTimer.start() <unknown>.setContentView(<unknown>) android.app.admin.DevicePolicyManager.isAdminActive(android.content.ComponentName) android.content.Intent.Intent(java.lang.String) android.content.SharedPreferences.edit() android.view.View.setVisibility(int) android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setTextColor(<unknown>) <unknown>.startActivityForResult(android.content.Intent, int) java.lang.CharSequence.toString() <unknown>.getResources() .OnSeekBarChangeListener() <unknown>.findViewById(<unknown>) java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, java.lang.String) android.view.View.setClickable(boolean) <unknown>.SeekArc.OnSeekArcChangeListener() <unknown>.activityPaused() <unknown>.getSystemService(java.lang.String) android.widget.TextView.setTextColor(<unknown>) <unknown>.getApplicationContext() android.widget.TextView.setTextColor(<unknown>) <unknown>.getSystemService(java.lang.String) <unknown>.getSystemService(java.lang.String) android.content.SharedPreferences.Editor.putLong(java.lang.String, long) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.AlarmManager.cancel(android.app.PendingIntent) <unknown>.setVisibility(int) <unknown>.getArcWidth() android.widget.TextView.setText(<unknown>) android.widget.ProgressBar.setProgress(<unknown>) android.graphics.Typeface.createFromAsset(<unknown>, java.lang.String) <unknown>.getAssets() android.widget.TextView.getText() android.widget.ProgressBar.setProgress(<unknown>) <unknown>.getPreferences(<unknown>) android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, ) android.view.View.setVisibility(int) android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, ) android.widget.TextView.setText(<unknown>) android.widget.ProgressBar.setProgress(<unknown>) java.lang.System.currentTimeMillis() <unknown>.setOnSeekArcChangeListener() <unknown>.getSharedPreferences(java.lang.String, int) android.widget.TextView.setTextColor(<unknown>) .CountDownTimer(long, int) <unknown>.getProgressWidth() <unknown>.setVisibility(int) android.widget.TextView.setText(<unknown>) android.view.View.setVisibility(int) android.view.View.setClickable(boolean) <unknown>.getPreferences(<unknown>) android.content.SharedPreferences.Editor.apply() java.lang.System.currentTimeMillis() <unknown>.findViewById(<unknown>) <unknown>.setTouchInSide(boolean) .CompoundButton.OnCheckedChangeListener() <unknown>.startActivity(android.content.Intent) <unknown>.startActivity(android.content.Intent) <unknown>.findViewById(<unknown>) <unknown>.setOnSeekArcChangeListener() <unknown>.findViewById(<unknown>) android.text.SpannableString.SpannableString(java.lang.String) <unknown>.getResources() android.app.AlertDialog.Builder.create() <unknown>.setTheme(<unknown>) <unknown>.findViewById(<unknown>) android.content.Intent.Intent(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class) <unknown>.getColor(<unknown>) android.content.Intent.createChooser(android.content.Intent, java.lang.String) java.util.Date.Date(long) android.content.SharedPreferences.Editor.apply() android.app.AlertDialog.Builder.setMessage(java.lang.String) <unknown>.setVisibility(int) <unknown>.setVisibility(int) <unknown>.startActivity(android.content.Intent) android.view.View.setVisibility(int) <unknown>.setSweepAngle(int) android.app.PendingIntent.getService(com.spicycurryman.getdisciplined10.app.MainActivity, int, android.content.Intent, int) java.lang.Throwable.printStackTrace() android.widget.SeekBar.setOnSeekBarChangeListener() android.view.View.setVisibility(int) <unknown>.getColor(<unknown>) <unknown>.findViewById(<unknown>) <unknown>.setProgressWidth(int) android.widget.TextView.setTextColor(<unknown>) <unknown>.getApplicationContext() android.view.View.setVisibility(int) <unknown>.setVisibility(int) <unknown>.findViewById(<unknown>) java.util.Map.Entry<java.lang.String,>.getKey() android.view.View.setVisibility(int) java.util.Date.getTime() android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setTypeface(<unknown>) java.util.Date.Date(long) android.widget.TextView.setTextColor(<unknown>) <unknown>.startActivityForResult(android.content.Intent, int) <unknown>.getSystemService(java.lang.String) java.lang.String.format(java.lang.String, long) android.widget.Toast.makeText(<unknown>, java.lang.String, int) .OnClickListener() .View.OnClickListener() <unknown>.setVisibility(int) java.lang.Integer.valueOf(java.lang.String) android.app.Dialog.show() android.content.SharedPreferences.getAll() android.widget.CompoundButton.setOnCheckedChangeListener() android.widget.TextView.setTextColor(<unknown>) <unknown>.getColor(<unknown>) android.widget.SeekBar.setOnSeekBarChangeListener() <unknown>.setTitle(android.text.SpannableString) android.view.View.setVisibility(int) android.widget.TextView.setTextColor(<unknown>) android.content.Intent.Intent(java.lang.String, android.net.Uri) android.widget.TextView.setTypeface(<unknown>) <unknown>.setOnClickListener() <unknown>.setArcWidth(int) java.util.Date.getTime() android.content.Intent.putExtra(java.lang.String, android.content.ComponentName) android.content.SharedPreferences.getLong(java.lang.String, int) android.view.View.getId() <unknown>.getSupportActionBar() android.content.SharedPreferences.getLong(java.lang.String, int) android.os.CountDownTimer.start() android.widget.SeekBar.setOnSeekBarChangeListener() android.view.View.setVisibility(int) java.util.Map<java.lang.String,>.entrySet() android.app.AlertDialog.Builder.AlertDialog.Builder(com.spicycurryman.getdisciplined10.app.MainActivity) <unknown>.startActivity(android.content.Intent) android.app.Dialog.show() <unknown>.findViewById(<unknown>) android.content.ComponentName.ComponentName(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class) android.widget.TextView.getText() android.app.Notification.Notification(<unknown>, java.lang.String, long) <unknown>.getSharedPreferences(java.lang.String, int) android.widget.TextView.getText() <unknown>.getColor(<unknown>) <unknown>.getStartAngle() android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setTextColor(<unknown>) <unknown>.setOnClickListener(android.view.View.OnClickListener) java.lang.String.format(java.lang.String, long) android.widget.SeekBar.setOnSeekBarChangeListener() android.widget.TextView.setText(<unknown>) android.content.Intent.putExtra(java.lang.String, java.lang.String) android.widget.TextView.setTextColor(<unknown>) android.content.Intent.putExtra(java.lang.String, java.lang.String) android.content.SharedPreferences.Editor.putLong(java.lang.String, long) android.view.MenuInflater.inflate(<unknown>, android.view.Menu) java.lang.Throwable.printStackTrace() android.widget.TextView.getText() android.widget.TextView.setTextColor(<unknown>) <unknown>.setOnClickListener(android.view.View.OnClickListener) android.content.SharedPreferences.edit() android.content.DialogInterface.cancel() <unknown>.getApplicationContext() <unknown>.TypefaceSpan(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.String) android.content.Intent.Intent(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class) android.widget.ProgressBar.setProgress(<unknown>) android.view.View.setClickable(boolean) android.content.Intent.Intent(java.lang.String, android.net.Uri) <unknown>.findViewById(<unknown>) android.view.View.setClickable(boolean) java.lang.String.format(java.lang.String, int) <unknown>.getResources() <unknown>.getResources() android.widget.TextView.setTextColor(<unknown>) <unknown>.setStartAngle(int) java.util.Date.getTime() .View.OnClickListener() .DialogInterface.OnClickListener() android.app.admin.DevicePolicyManager.isAdminActive(android.content.ComponentName) java.lang.String.format(java.lang.String, long) <unknown>.getBaseContext() android.content.Intent.putExtra(java.lang.String, java.lang.String) <unknown>.getMenuInflater() android.widget.TextView.setTextColor(<unknown>) android.content.Intent.setType(java.lang.String) android.widget.TextView.setText(<unknown>) <unknown>.getResources() com.spicycurryman.getdisciplined10.app.MainActivity.addListenerOnButton() <unknown>.getArcRotation() android.view.View.setClickable(boolean) android.app.AlertDialog.Builder.setPositiveButton(java.lang.String, ) <unknown>.findViewById(<unknown>) <unknown>.findViewById(<unknown>) <unknown>.findViewById(<unknown>) android.view.View.setVisibility(int) android.view.View.setClickable(boolean) android.content.Intent.Intent(android.content.Context, java.lang.Class) android.widget.TextView.setTextColor(<unknown>) android.text.SpannableStringInternal.length() <unknown>.getColor(<unknown>) java.util.Date.getTime() android.view.View.setClickable(boolean) android.widget.ProgressBar.setProgress(<unknown>) <unknown>.startService(android.content.Intent) android.widget.TextView.setTextColor(<unknown>) java.util.Date.Date(long) <unknown>.setRoundedEdges(boolean) <unknown>.getResources() java.lang.CharSequence.toString() android.widget.TextView.setText(java.lang.String) <unknown>.setOnClickListener() java.lang.CharSequence.toString() android.content.Intent.Intent(java.lang.String) android.widget.CompoundButton.setOnCheckedChangeListener() android.content.Intent.putExtra(java.lang.String, android.content.ComponentName) android.app.AlertDialog.Builder.show() android.content.ComponentName.ComponentName(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class) android.app.NotificationManager.notify(int, android.app.Notification) android.widget.TextView.setTextColor(<unknown>) android.widget.CompoundButton.setOnCheckedChangeListener() <unknown>.invalidate() <unknown>.setVisibility(int) <unknown>.show() java.util.ArrayList<java.lang.String>.ArrayList, String() .CountDownTimer(long, int) android.net.Uri.fromParts(java.lang.String, java.lang.String, null) android.app.AlertDialog.Builder.create() android.net.Uri.parse(java.lang.String) android.widget.TextView.setTypeface(<unknown>) java.lang.CharSequence.toString() <unknown>.getColor(<unknown>) android.content.Intent.createChooser(android.content.Intent, java.lang.String) android.content.SharedPreferences.edit() android.widget.TextView.setTextColor(<unknown>) <unknown>.setHomeButtonEnabled(boolean) <unknown>.activityResumed() android.app.PendingIntent.getActivity(com.spicycurryman.getdisciplined10.app.MainActivity, int, android.content.Intent, int) android.util.Log.e(java.lang.String, java.lang.String) <unknown>.findViewById(<unknown>) java.util.Date.Date(long) <unknown>.performClick() android.widget.TextView.setTextColor(<unknown>) android.app.AlertDialog.Builder.create() <unknown>.getApplicationContext() <unknown>.setClockwise(boolean) java.lang.Integer.valueOf(java.lang.String) android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setText(<unknown>) <unknown>.setRequestedOrientation(int) java.lang.System.currentTimeMillis() android.app.Notification.setLatestEventInfo(android.content.Context, java.lang.String, java.lang.String, android.app.PendingIntent) <unknown>.getSweepAngle() android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setTextColor(<unknown>) android.content.SharedPreferences.Editor.putLong(java.lang.String, long) <unknown>.findViewById(<unknown>) java.lang.Integer.valueOf(java.lang.String) java.util.ArrayList<java.lang.String>.size() android.content.SharedPreferences.Editor.apply() android.app.AlarmManager.setRepeating(int, long, int, android.app.PendingIntent) <unknown>.invalidate() java.lang.System.currentTimeMillis() android.content.Intent.Intent(java.lang.String) android.app.AlertDialog.Builder.setMessage(java.lang.String) android.widget.TextView.setText(java.lang.String) android.view.View.setClickable(boolean) <unknown>.setArcRotation(int) java.lang.String.valueOf(<unknown>) android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setTypeface(<unknown>) <unknown>.getColor(<unknown>) java.lang.String.format(java.lang.String, long) android.util.Log.e(java.lang.String, java.lang.String) <unknown>.findViewById(<unknown>) <unknown>.findViewById(<unknown>) android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, ) android.widget.TextView.setTextColor(<unknown>) android.text.SpannableString.setSpan(com.spicycurryman.getdisciplined10.app.TypefaceSpan, int, int, int) android.view.MenuItem.getItemId() com.spicycurryman.getdisciplined10.app.MainActivity.setActionListeners() android.app.AlertDialog.Builder.setMessage(java.lang.String) java.lang.Integer.valueOf(java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.findViewById(<unknown>) <unknown>.setVisibility(int) android.widget.SeekBar.setOnSeekBarChangeListener() android.view.View.setVisibility(int) android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate RelativeLayout dateBarRelativeLayout;\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t}\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tif(mShowList.get(7) != null)\n\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\tif(mShowList.get(6) != null)\n\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\telse {\n\t\t\t\tnew ShowDateHandler(this);\n\t\t\t}\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id\n\t\t\t\t\t\t+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button\n\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(new DisplayTime()\n\t\t\t\t\t\t\t\t\t.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tnew FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG)\n\t\t\t\t\t.show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivity(editIntent);\n\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-08T06:01:31Z", "hash_sni": "2058d5ef1b368874bedb0513dfd82447f57c7295", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" \t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n \t\t\tif(mShowList.get(7) != null)\n \t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n+\t\t\tif(mShowList.get(6) != null)\n+\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n+\t\t\telse {\n+\t\t\t\tnew ShowDateHandler(this);\n+\t\t\t}\n \t\t}\n \t\tshow_text_voice_camera_delete.setOnClickListener(this);\n \t\tshow_text_voice_camera_play_button.setOnClickListener(this);"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler ShowLocationHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getDrawable getExternalStorageState getId getInstance getIntent getPlayBackTime getResources getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putExtra setBackgroundDrawable setContentView setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack stop stopPlayBack toString updateUI"], "_version_": 1526747169600569344, "subject_t": ["Show page top bar show location and date"], "comments_t": ["\t\t// //// ****** If audio recording started then stop recording audio \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t// ***** /////// \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["3e104af2785ff32ea4090b1c19d872057af2560b"], "id": "vinsol/expense-tracker\u00002058d5ef1b368874bedb0513dfd82447f57c7295\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.stopPlayBack()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.widget.Toast.show()#<unknown>.isAudioPlaying()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.open()#android.content.Context.getString(<unknown>)#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.view.ContextThemeWrapper.getResources()#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#android.os.CountDownTimer.cancel()#android.app.Activity.findViewById(<unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setBackgroundDrawable(<unknown>)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.Toast.show()#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.res.Resources.getDrawable(<unknown>)#android.view.View.setVisibility(int)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.app.Activity.startActivity(android.content.Intent)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#android.view.View.setVisibility(int)", "callsites_t": ["java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.stopPlayBack() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) android.widget.Toast.show() <unknown>.isAudioPlaying() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.open() android.content.Context.getString(<unknown>) <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.view.ContextThemeWrapper.getResources() android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() java.io.File.File(java.lang.String) android.widget.Toast.show() android.os.CountDownTimer.cancel() android.app.Activity.findViewById(<unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setBackgroundDrawable(<unknown>) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.app.Activity.findViewById(<unknown>) java.io.File.canRead() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.Toast.show() java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.content.res.Resources.getDrawable(<unknown>) android.view.View.setVisibility(int) <unknown>.getPlayBackTime() android.app.Activity.finish() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.app.Activity.startActivity(android.content.Intent) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) android.view.View.setVisibility(int)"]}, {"user_sni": "Alok Vaish", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File android.view.Window com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity java.util.Calendar"], "email_sni": "alok@alok-PC.(none)", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate RelativeLayout dateBarRelativeLayout;\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t}\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tnew ShowDateHandler(this, mCalendar);\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id\n\t\t\t\t\t\t+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button\n\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(new DisplayTime()\n\t\t\t\t\t\t\t\t\t.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tnew FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG)\n\t\t\t\t\t.show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivity(editIntent);\n\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer\n\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-05T10:55:07Z", "hash_sni": "45743dbcb8929dde178d12bb814b367564b9bd8b", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" import android.view.Window;\n import android.widget.Button;\n import android.widget.Chronometer;\n-import android.widget.ImageView;\n import android.widget.RelativeLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n@@ -24,8 +23,8 @@ import com.vinsol.expensetracker.utils.FileDelete;\n \n public class ShowVoiceActivity extends Activity implements OnClickListener {\n \n+\tprivate RelativeLayout dateBarRelativeLayout;\n \tprivate TextView show_text_voice_camera_header_title;\n-\tprivate ImageView show_text_voice_camera_voice_details_separator;\n \tprivate RelativeLayout show_text_voice_camera_voice_details;\n \tprivate TextView show_text_voice_camera_amount;\n \tprivate TextView show_text_voice_camera_tag_textview;\n@@ -47,9 +46,9 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\tsuper.onCreate(savedInstanceState);\n \t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n \t\tsetContentView(R.layout.show_text_voice_camera);\n-\n+\t\t\n+\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n \t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n-\t\tshow_text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.show_text_voice_camera_voice_details_separator);\n \t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n \t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n \t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n@@ -59,6 +58,8 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n \t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n \n+\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n+\t\t\n \t\tmDatabaseAdapter = new DatabaseAdapter(this);\n \n \t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n@@ -123,10 +124,6 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t// ///// ***** Sets Title Voice Entry *********///////\n \t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n \n-\t\t// ///// ***** Sets Title Voice Entry *********///////\n-\t\tshow_text_voice_camera_voice_details_separator\n-\t\t\t\t.setVisibility(View.VISIBLE);\n-\n \t\t// //// ****** Shows Voice Details ********////////\n \t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n \t}"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getDrawable getExternalStorageState getId getInstance getIntent getPlayBackTime getResources getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putExtra requestWindowFeature setBackgroundDrawable setContentView setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack stop stopPlayBack toString updateUI"], "_version_": 1526746345781592064, "subject_t": ["Show page: voice and camera entries designs integrated"], "comments_t": ["\t\t// //// ****** If audio recording started then stop recording audio \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t// ***** /////// \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["7b3bcf773839728f143405476891b1e8237cd2f1"], "id": "vinsol/expense-tracker\u000045743dbcb8929dde178d12bb814b367564b9bd8b\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#android.widget.Toast.show()#<unknown>.isAudioPlaying()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.open()#android.content.Context.getString(<unknown>)#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.view.ContextThemeWrapper.getResources()#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#android.app.Activity.requestWindowFeature(int)#android.os.CountDownTimer.cancel()#android.app.Activity.findViewById(<unknown>)#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setBackgroundDrawable(<unknown>)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#android.view.View.setVisibility(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.show()#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.res.Resources.getDrawable(<unknown>)#android.view.View.setVisibility(int)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.app.Activity.startActivity(android.content.Intent)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#android.view.View.setVisibility(int)", "callsites_t": ["java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) android.widget.Toast.show() <unknown>.isAudioPlaying() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.open() android.content.Context.getString(<unknown>) <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.view.ContextThemeWrapper.getResources() android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() java.io.File.File(java.lang.String) android.widget.Toast.show() android.app.Activity.requestWindowFeature(int) android.os.CountDownTimer.cancel() android.app.Activity.findViewById(<unknown>) <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.util.Calendar) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setBackgroundDrawable(<unknown>) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.app.Activity.findViewById(<unknown>) java.io.File.canRead() android.view.View.setVisibility(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.show() java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.content.res.Resources.getDrawable(<unknown>) android.view.View.setVisibility(int) <unknown>.getPlayBackTime() android.app.Activity.finish() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.app.Activity.startActivity(android.content.Intent) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) android.view.View.setVisibility(int)"]}, {"user_sni": "Sheldon Neilson", "repo_sni": "SheldonNeilson/Android-Alarm-Clock", "imports_t": ["android.widget.CheckedTextView za.co.neilson.alarm.AlarmActivity android.os.Bundle android.widget.ListView android.view.HapticFeedbackConstants android.content.DialogInterface android.app.AlertDialog.Builder android.view.Menu android.view.Window android.view.MenuInflater android.app.ListActivity za.co.neilson.alarm.service.AlarmServiceBroadcastReciever android.widget.ImageButton android.widget.TextView android.net.Uri android.content.DialogInterface.OnCancelListener za.co.neilson.alarm.R android.view.View.OnTouchListener java.util.Calendar android.os.CountDownTimer android.app.TimePickerDialog android.content.res.Configuration android.widget.Toast za.co.neilson.alarm.Alarm android.content.Intent android.media.AudioManager android.media.MediaPlayer android.content.DialogInterface.OnMultiChoiceClickListener za.co.neilson.alarm.preferences.AlarmPreference.Key android.content.DialogInterface.OnClickListener android.widget.EditText android.view.MenuItem android.app.TimePickerDialog.OnTimeSetListener android.app.AlertDialog android.widget.TimePicker za.co.neilson.alarm.database.Database android.view.View android.view.MotionEvent android.os.Vibrator android.content.ActivityNotFoundException"], "email_sni": "sheldon@neilson.co.za", "contents_t": ["package za.co.neilson.alarm.preferences;\n\nimport java.util.Calendar;\n\nimport za.co.neilson.alarm.Alarm;\nimport za.co.neilson.alarm.AlarmActivity;\nimport za.co.neilson.alarm.database.Database;\nimport za.co.neilson.alarm.preferences.AlarmPreference.Key;\nimport za.co.neilson.alarm.service.AlarmServiceBroadcastReciever;\nimport za.co.neilson.alarm.R;\nimport android.app.AlertDialog;\nimport android.app.ListActivity;\nimport android.app.TimePickerDialog;\nimport android.app.AlertDialog.Builder;\nimport android.app.TimePickerDialog.OnTimeSetListener;\nimport android.content.ActivityNotFoundException;\nimport android.content.DialogInterface;\nimport android.content.DialogInterface.OnCancelListener;\nimport android.content.DialogInterface.OnClickListener;\nimport android.content.DialogInterface.OnMultiChoiceClickListener;\nimport android.content.res.Configuration;\nimport android.content.Intent;\nimport android.media.AudioManager;\nimport android.media.MediaPlayer;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.Vibrator;\nimport android.view.HapticFeedbackConstants;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.Window;\nimport android.view.View.OnTouchListener;\nimport android.widget.CheckedTextView;\nimport android.widget.EditText;\nimport android.widget.ImageButton;\nimport android.widget.ListView;\nimport android.widget.TextView;\nimport android.widget.TimePicker;\nimport android.widget.Toast;\n\npublic class AlarmPreferencesActivity extends ListActivity {\n\n\tImageButton deleteButton;\n\tTextView okButton;\n\tTextView cancelButton;\n\tprivate Alarm alarm;\n\tprivate MediaPlayer mediaPlayer;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.alarm_preferences);\n\n\t\tdeleteButton = (ImageButton) findViewById(R.id.toolbar).findViewById(R.id.button_delete);\n\t\tdeleteButton.setOnTouchListener(new OnTouchListener() {\n\t\t\t@Override\n\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\n\t\t\t\tswitch (event.getAction()) {\n\t\t\t\tcase MotionEvent.ACTION_DOWN:\n\t\t\t\t\tdeleteButton.setBackgroundColor(getResources().getColor(R.color.holo_blue_light));\n\t\t\t\t\tbreak;\n\t\t\t\tcase MotionEvent.ACTION_UP:\n\t\t\t\t\tv.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tBuilder dialog = new AlertDialog.Builder(AlarmPreferencesActivity.this);\n\t\t\t\t\tdialog.setTitle(\"Delete\");\n\t\t\t\t\tdialog.setMessage(\"Delete this alarm?\");\n\t\t\t\t\tdialog.setPositiveButton(\"Ok\", new OnClickListener() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\n\t\t\t\t\t\t\tDatabase.init(getApplicationContext());\n\t\t\t\t\t\t\tif (getMathAlarm().getId() < 1) {\n\t\t\t\t\t\t\t\t//Alarm not saved\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tDatabase.deleteEntry(alarm);\n\t\t\t\t\t\t\t\tcallMathAlarmScheduleService();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfinish();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tdialog.setNegativeButton(\"Cancel\", new OnClickListener() {\n\t\t\t\t\t\t\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tdialog.show();\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase MotionEvent.ACTION_MOVE:\n\t\t\t\tcase MotionEvent.ACTION_CANCEL:\n\t\t\t\t\tdeleteButton.setBackgroundColor(getResources().getColor(android.R.color.transparent));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t\tokButton = (TextView) findViewById(R.id.textView_OK);\n\t\tokButton.setOnTouchListener(new OnTouchListener() {\n\t\t\t@Override\n\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\n\t\t\t\tswitch (event.getAction()) {\n\t\t\t\tcase MotionEvent.ACTION_DOWN:\n\t\t\t\t\tokButton.setBackgroundColor(getResources().getColor(R.color.holo_blue_light));\n\t\t\t\t\tbreak;\n\t\t\t\tcase MotionEvent.ACTION_UP:\n\t\t\t\t\tv.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);\n\t\t\t\t\tDatabase.init(getApplicationContext());\n\t\t\t\t\tif (getMathAlarm().getId() < 1) {\n\t\t\t\t\t\tDatabase.create(getMathAlarm());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tDatabase.update(getMathAlarm());\n\t\t\t\t\t}\n\t\t\t\t\tcallMathAlarmScheduleService();\n\t\t\t\t\tToast.makeText(AlarmPreferencesActivity.this, getMathAlarm().getTimeUntilNextAlarmMessage(), Toast.LENGTH_LONG).show();\n\t\t\t\t\tfinish();\n\t\t\t\tcase MotionEvent.ACTION_MOVE:\n\t\t\t\tcase MotionEvent.ACTION_CANCEL:\n\t\t\t\t\tokButton.setBackgroundColor(getResources().getColor(android.R.color.transparent));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t\tcancelButton = (TextView) findViewById(R.id.textView_cancel);\n\t\tcancelButton.setOnTouchListener(new OnTouchListener() {\n\t\t\t@Override\n\t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n\n\t\t\t\tswitch (event.getAction()) {\n\t\t\t\tcase MotionEvent.ACTION_DOWN:\n\t\t\t\t\tcancelButton.setBackgroundColor(getResources().getColor(R.color.holo_blue_light));\n\t\t\t\t\tbreak;\n\t\t\t\tcase MotionEvent.ACTION_UP:\n\t\t\t\t\tv.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);\n\t\t\t\t\tfinish();\n\t\t\t\tcase MotionEvent.ACTION_MOVE:\n\t\t\t\tcase MotionEvent.ACTION_CANCEL:\n\t\t\t\t\tcancelButton.setBackgroundColor(getResources().getColor(android.R.color.transparent));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t\tBundle bundle = getIntent().getExtras();\n\t\tif (bundle != null && bundle.containsKey(\"alarm\")) {\n\t\t\tsetMathAlarm((Alarm) bundle.getSerializable(\"alarm\"));\n\t\t}\n\n\t}\n\n\tprivate void callMathAlarmScheduleService() {\n\t\tIntent mathAlarmServiceIntent = new Intent(this, AlarmServiceBroadcastReciever.class);\n\t\tsendBroadcast(mathAlarmServiceIntent, null);\n\t}\n\n\tprivate CountDownTimer alarmToneTimer;\n\n\t@Override\n\tprotected void onListItemClick(ListView l, View v, int position, long id) {\n\t\tsuper.onListItemClick(l, v, position, id);\n\n\t\tfinal AlarmPreferenceListAdapter alarmPreferenceListAdapter = (AlarmPreferenceListAdapter) getListAdapter();\n\t\tfinal AlarmPreference alarmPreference = (AlarmPreference) alarmPreferenceListAdapter.getItem(position);\n\n\t\tAlertDialog.Builder alert;\n\t\tv.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);\n\t\tswitch (alarmPreference.getType()) {\n\t\tcase BOOLEAN:\n\t\t\tCheckedTextView checkedTextView = (CheckedTextView) v;\n\t\t\tboolean checked = !checkedTextView.isChecked();\n\t\t\t((CheckedTextView) v).setChecked(checked);\n\t\t\tswitch (alarmPreference.getKey()) {\n\t\t\tcase ALARM_ACTIVE:\n\t\t\t\talarm.setAlarmActive(checked);\n\t\t\t\tbreak;\n\t\t\tcase ALARM_VIBRATE:\n\t\t\t\talarm.setVibrate(checked);\n\t\t\t\tif (checked) {\n\t\t\t\t\tVibrator vibrator = (Vibrator) getSystemService(VIBRATOR_SERVICE);\n\t\t\t\t\tvibrator.vibrate(1000);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\talarmPreference.setValue(checked);\n\t\t\tbreak;\n\t\tcase STRING:\n\n\t\t\talert = new AlertDialog.Builder(this);\n\n\t\t\talert.setTitle(alarmPreference.getTitle());\n\t\t\t// alert.setMessage(message);\n\n\t\t\t// Set an EditText view to get user input\n\t\t\tfinal EditText input = new EditText(this);\n\n\t\t\tinput.setText(alarmPreference.getValue().toString());\n\n\t\t\talert.setView(input);\n\t\t\talert.setPositiveButton(\"Ok\", new DialogInterface.OnClickListener() {\n\t\t\t\tpublic void onClick(DialogInterface dialog, int whichButton) {\n\n\t\t\t\t\talarmPreference.setValue(input.getText().toString());\n\n\t\t\t\t\tif (alarmPreference.getKey() == Key.ALARM_NAME) {\n\t\t\t\t\t\talarm.setAlarmName(alarmPreference.getValue().toString());\n\t\t\t\t\t}\n\n\t\t\t\t\talarmPreferenceListAdapter.setMathAlarm(getMathAlarm());\n\t\t\t\t\talarmPreferenceListAdapter.notifyDataSetChanged();\n\t\t\t\t}\n\t\t\t});\n\t\t\talert.show();\n\t\t\tbreak;\n\t\tcase LIST:\n\t\t\talert = new AlertDialog.Builder(this);\n\n\t\t\talert.setTitle(alarmPreference.getTitle());\n\t\t\t// alert.setMessage(message);\n\n\t\t\tCharSequence[] items = new CharSequence[alarmPreference.getOptions().length];\n\t\t\tfor (int i = 0; i < items.length; i++)\n\t\t\t\titems[i] = alarmPreference.getOptions()[i];\n\n\t\t\talert.setItems(items, new OnClickListener() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\tswitch (alarmPreference.getKey()) {\n\t\t\t\t\tcase ALARM_DIFFICULTY:\n\t\t\t\t\t\tAlarm.Difficulty d = Alarm.Difficulty.values()[which];\n\t\t\t\t\t\talarm.setDifficulty(d);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ALARM_TONE:\n\t\t\t\t\t\talarm.setAlarmTonePath(alarmPreferenceListAdapter.getAlarmTonePaths()[which]);\n\t\t\t\t\t\tif (alarm.getAlarmTonePath() != null) {\n\t\t\t\t\t\t\tif (mediaPlayer == null) {\n\t\t\t\t\t\t\t\tmediaPlayer = new MediaPlayer();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (mediaPlayer.isPlaying())\n\t\t\t\t\t\t\t\t\tmediaPlayer.stop();\n\t\t\t\t\t\t\t\tmediaPlayer.reset();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t// mediaPlayer.setVolume(1.0f, 1.0f);\n\t\t\t\t\t\t\t\tmediaPlayer.setVolume(0.2f, 0.2f);\n\t\t\t\t\t\t\t\tmediaPlayer.setDataSource(AlarmPreferencesActivity.this, Uri.parse(alarm.getAlarmTonePath()));\n\t\t\t\t\t\t\t\tmediaPlayer.setAudioStreamType(AudioManager.STREAM_ALARM);\n\t\t\t\t\t\t\t\tmediaPlayer.setLooping(false);\n\t\t\t\t\t\t\t\tmediaPlayer.prepare();\n\t\t\t\t\t\t\t\tmediaPlayer.start();\n\n\t\t\t\t\t\t\t\t// Force the mediaPlayer to stop after 3\n\t\t\t\t\t\t\t\t// seconds...\n\t\t\t\t\t\t\t\tif (alarmToneTimer != null)\n\t\t\t\t\t\t\t\t\talarmToneTimer.cancel();\n\t\t\t\t\t\t\t\talarmToneTimer = new CountDownTimer(3000, 3000) {\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void onTick(long millisUntilFinished) {\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void onFinish() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tif (mediaPlayer.isPlaying())\n\t\t\t\t\t\t\t\t\t\t\t\tmediaPlayer.stop();\n\t\t\t\t\t\t\t\t\t\t} catch (Exception e) {\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\talarmToneTimer.start();\n\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tif (mediaPlayer.isPlaying())\n\t\t\t\t\t\t\t\t\t\tmediaPlayer.stop();\n\t\t\t\t\t\t\t\t} catch (Exception e2) {\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\talarmPreferenceListAdapter.setMathAlarm(getMathAlarm());\n\t\t\t\t\talarmPreferenceListAdapter.notifyDataSetChanged();\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t\talert.show();\n\t\t\tbreak;\n\t\tcase MULTIPLE_LIST:\n\t\t\talert = new AlertDialog.Builder(this);\n\n\t\t\talert.setTitle(alarmPreference.getTitle());\n\t\t\t// alert.setMessage(message);\n\n\t\t\tCharSequence[] multiListItems = new CharSequence[alarmPreference.getOptions().length];\n\t\t\tfor (int i = 0; i < multiListItems.length; i++)\n\t\t\t\tmultiListItems[i] = alarmPreference.getOptions()[i];\n\n\t\t\tboolean[] checkedItems = new boolean[multiListItems.length];\n\t\t\tfor (Alarm.Day day : getMathAlarm().getDays()) {\n\t\t\t\tcheckedItems[day.ordinal()] = true;\n\t\t\t}\n\t\t\talert.setMultiChoiceItems(multiListItems, checkedItems, new OnMultiChoiceClickListener() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(final DialogInterface dialog, int which, boolean isChecked) {\n\n\t\t\t\t\tAlarm.Day thisDay = Alarm.Day.values()[which];\n\n\t\t\t\t\tif (isChecked) {\n\t\t\t\t\t\talarm.addDay(thisDay);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//Only remove the day if there are more than 1 selected\n\t\t\t\t\t\tif(alarm.getDays().length > 1){\n\t\t\t\t\t\t\talarm.removeDay(thisDay);\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t//If the last day was unchecked, re-check it\n\t\t\t\t\t\t\t((AlertDialog) dialog).getListView().setItemChecked(which, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t});\n\t\t\talert.setOnCancelListener(new OnCancelListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onCancel(DialogInterface dialog) {\n\t\t\t\t\talarmPreferenceListAdapter.setMathAlarm(getMathAlarm());\n\t\t\t\t\talarmPreferenceListAdapter.notifyDataSetChanged();\n\n\t\t\t\t}\n\t\t\t});\n\t\t\talert.show();\n\t\t\tbreak;\n\t\tcase TIME:\n\t\t\tTimePickerDialog timePickerDialog = new TimePickerDialog(this, new OnTimeSetListener() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onTimeSet(TimePicker timePicker, int hours, int minutes) {\n\t\t\t\t\tCalendar newAlarmTime = Calendar.getInstance();\n\t\t\t\t\tnewAlarmTime.set(Calendar.HOUR_OF_DAY, hours);\n\t\t\t\t\tnewAlarmTime.set(Calendar.MINUTE, minutes);\n\t\t\t\t\tnewAlarmTime.set(Calendar.SECOND, 0);\n\t\t\t\t\talarm.setAlarmTime(newAlarmTime);\n\t\t\t\t\talarmPreferenceListAdapter.setMathAlarm(getMathAlarm());\n\t\t\t\t\talarmPreferenceListAdapter.notifyDataSetChanged();\n\t\t\t\t}\n\t\t\t}, alarm.getAlarmTime().get(Calendar.HOUR_OF_DAY), alarm.getAlarmTime().get(Calendar.MINUTE), true);\n\t\t\ttimePickerDialog.setTitle(alarmPreference.getTitle());\n\t\t\ttimePickerDialog.show();\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t@Override\n\tpublic Object onRetainNonConfigurationInstance() {\n\t\tObject[] bundle = { getMathAlarm(), getListAdapter() };\n\t\treturn bundle;\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\t\tsuper.onPause();\n\t\ttry {\n\t\t\tif (mediaPlayer != null)\n\t\t\t\tmediaPlayer.release();\n\t\t} catch (Exception e) {\n\t\t}\n\n\t\t// setListAdapter(null);\n\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\n\t\t// Restore data in event of case of orientation change\n\t\t@SuppressWarnings(\"deprecation\")\n\t\tfinal Object data = getLastNonConfigurationInstance();\n\t\tif (data == null) {\n\t\t\tif (getMathAlarm() == null)\n\t\t\t\tsetMathAlarm(new Alarm());\n\n\t\t\tsetListAdapter(new AlarmPreferenceListAdapter(this, getMathAlarm()));\n\t\t} else {\n\t\t\tObject[] bundle = (Object[]) data;\n\t\t\tsetMathAlarm((Alarm) bundle[0]);\n\t\t\tsetListAdapter((AlarmPreferenceListAdapter) bundle[1]);\n\t\t}\n\t\tsuper.onResume();\n\t}\n\n\tpublic Alarm getMathAlarm() {\n\t\treturn alarm;\n\t}\n\n\tpublic void setMathAlarm(Alarm alarm) {\n\t\tthis.alarm = alarm;\n\t}\n\n\t@Override\n\tpublic boolean onCreateOptionsMenu(Menu menu) {\n\t\tMenuInflater inflater = getMenuInflater();\n\t\tinflater.inflate(R.menu.menu, menu);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic boolean onOptionsItemSelected(MenuItem item) {\n\t\tswitch (item.getItemId()) {\n\t\tcase R.id.menu_item_rate:\n\t\t\tUri uri = Uri.parse(\"market://details?id=\" + getPackageName());\n\t\t\tIntent goToMarket = new Intent(Intent.ACTION_VIEW, uri);\n\t\t\ttry {\n\t\t\t\tstartActivity(goToMarket);\n\t\t\t} catch (ActivityNotFoundException e) {\n\t\t\t\tToast.makeText(this, \"Couldn't launch the market\", Toast.LENGTH_LONG).show();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase R.id.menu_item_website:\n\t\t\tString url = \"http://www.neilson.co.za\";\n\t\t\tIntent i = new Intent(Intent.ACTION_VIEW);\n\t\t\ti.setData(Uri.parse(url));\n\t\t\tstartActivity(i);\n\t\t\tbreak;\n\t\tcase R.id.menu_item_report:\n\t\t\tIntent send = new Intent(Intent.ACTION_SENDTO);\n\t\t\tString uriText;\n\n\t\t\tString emailAddress = \"bugs@neilson.co.za\";\n\t\t\tString subject = R.string.app_name + \" Bug Report\";\n\t\t\tString body = \"Debug:\";\n\t\t\tbody += \"\\n OS Version: \" + System.getProperty(\"os.version\") + \"(\" + android.os.Build.VERSION.INCREMENTAL + \")\";\n\t\t\tbody += \"\\n OS API Level: \" + android.os.Build.VERSION.SDK_INT;\n\t\t\tbody += \"\\n Device: \" + android.os.Build.DEVICE;\n\t\t\tbody += \"\\n Model (and Product): \" + android.os.Build.MODEL + \" (\" + android.os.Build.PRODUCT + \")\";\n\t\t\tbody += \"\\n Screen Width: \" + getWindow().getWindowManager().getDefaultDisplay().getWidth();\n\t\t\tbody += \"\\n Screen Height: \" + getWindow().getWindowManager().getDefaultDisplay().getHeight();\n\t\t\tbody += \"\\n Hardware Keyboard Present: \" + (getResources().getConfiguration().keyboard != Configuration.KEYBOARD_NOKEYS);\n\n\t\t\turiText = \"mailto:\" + emailAddress + \"?subject=\" + subject + \"&body=\" + body;\n\n\t\t\turiText = uriText.replace(\" \", \"%20\");\n\t\t\tUri emalUri = Uri.parse(uriText);\n\n\t\t\tsend.setData(emalUri);\n\t\t\tstartActivity(Intent.createChooser(send, \"Send mail...\"));\n\t\t\tbreak;\n\t\t}\n\t\treturn super.onOptionsItemSelected(item);\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2014-01-22T07:06:11Z", "hash_sni": "ccaa2592d988533e282bc4a4307fc6ce9de441a9", "name_sni": "src/za/co/neilson/alarm/preferences/AlarmPreferencesActivity.java", "patch_t": [" import java.util.Calendar;\n \n import za.co.neilson.alarm.Alarm;\n+import za.co.neilson.alarm.AlarmActivity;\n import za.co.neilson.alarm.database.Database;\n import za.co.neilson.alarm.preferences.AlarmPreference.Key;\n import za.co.neilson.alarm.service.AlarmServiceBroadcastReciever;\n@@ -10,6 +11,7 @@ import za.co.neilson.alarm.R;\n import android.app.AlertDialog;\n import android.app.ListActivity;\n import android.app.TimePickerDialog;\n+import android.app.AlertDialog.Builder;\n import android.app.TimePickerDialog.OnTimeSetListener;\n import android.content.ActivityNotFoundException;\n import android.content.DialogInterface;\n@@ -42,7 +44,7 @@ import android.widget.Toast;\n \n public class AlarmPreferencesActivity extends ListActivity {\n \n-\tImageButton saveButton;\n+\tImageButton deleteButton;\n \tTextView okButton;\n \tTextView cancelButton;\n \tprivate Alarm alarm;\n@@ -54,40 +56,55 @@ public class AlarmPreferencesActivity extends ListActivity {\n \t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n \t\tsetContentView(R.layout.alarm_preferences);\n \n-\t\tsaveButton = (ImageButton) findViewById(R.id.toolbar).findViewById(\n-\t\t\t\tR.id.button_save);\n-\t\tsaveButton.setOnTouchListener(new OnTouchListener() {\n+\t\tdeleteButton = (ImageButton) findViewById(R.id.toolbar).findViewById(R.id.button_delete);\n+\t\tdeleteButton.setOnTouchListener(new OnTouchListener() {\n \t\t\t@Override\n \t\t\tpublic boolean onTouch(View v, MotionEvent event) {\n-\t\t\t\t\n+\n \t\t\t\tswitch (event.getAction()) {\n \t\t\t\tcase MotionEvent.ACTION_DOWN:\n-\t\t\t\t\tsaveButton.setBackgroundColor(getResources().getColor(\n-\t\t\t\t\t\t\tR.color.holo_blue_light));\n+\t\t\t\t\tdeleteButton.setBackgroundColor(getResources().getColor(R.color.holo_blue_light));\n \t\t\t\t\tbreak;\n \t\t\t\tcase MotionEvent.ACTION_UP:\n \t\t\t\t\tv.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);\n-\t\t\t\t\tDatabase.init(getApplicationContext());\n-\t\t\t\t\tif (getMathAlarm().getId() < 1) {\n-\t\t\t\t\t\tDatabase.create(getMathAlarm());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tDatabase.update(getMathAlarm());\n-\t\t\t\t\t}\n-\t\t\t\t\tcallMathAlarmScheduleService();\n-\t\t\t\t\tToast.makeText(AlarmPreferencesActivity.this,\n-\t\t\t\t\t\t\tgetMathAlarm().getTimeUntilNextAlarmMessage(),\n-\t\t\t\t\t\t\tToast.LENGTH_LONG).show();\n-\t\t\t\t\tfinish();\n+\t\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\tBuilder dialog = new AlertDialog.Builder(AlarmPreferencesActivity.this);\n+\t\t\t\t\tdialog.setTitle(\"Delete\");\n+\t\t\t\t\tdialog.setMessage(\"Delete this alarm?\");\n+\t\t\t\t\tdialog.setPositiveButton(\"Ok\", new OnClickListener() {\n+\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n+\n+\t\t\t\t\t\t\tDatabase.init(getApplicationContext());\n+\t\t\t\t\t\t\tif (getMathAlarm().getId() < 1) {\n+\t\t\t\t\t\t\t\t//Alarm not saved\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tDatabase.deleteEntry(alarm);\n+\t\t\t\t\t\t\t\tcallMathAlarmScheduleService();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tfinish();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t\t\tdialog.setNegativeButton(\"Cancel\", new OnClickListener() {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n+\t\t\t\t\t\t\tdialog.dismiss();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t\t\tdialog.show();\n+\t\t\t\t\t\t\t\t\t\t\n \t\t\t\tcase MotionEvent.ACTION_MOVE:\n \t\t\t\tcase MotionEvent.ACTION_CANCEL:\n-\t\t\t\t\tsaveButton.setBackgroundColor(getResources().getColor(\n-\t\t\t\t\t\t\tandroid.R.color.transparent));\t\t\t\t\t\t\t\t\n+\t\t\t\t\tdeleteButton.setBackgroundColor(getResources().getColor(android.R.color.transparent));\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t\treturn true;\n \t\t\t}\n \t\t});\n-\t\t\n+\n \t\tokButton = (TextView) findViewById(R.id.textView_OK);\n \t\tokButton.setOnTouchListener(new OnTouchListener() {\n \t\t\t@Override\n@@ -95,8 +112,7 @@ public class AlarmPreferencesActivity extends ListActivity {\n \n \t\t\t\tswitch (event.getAction()) {\n \t\t\t\tcase MotionEvent.ACTION_DOWN:\n-\t\t\t\t\tokButton.setBackgroundColor(getResources().getColor(\n-\t\t\t\t\t\t\tR.color.holo_blue_light));\n+\t\t\t\t\tokButton.setBackgroundColor(getResources().getColor(R.color.holo_blue_light));\n \t\t\t\t\tbreak;\n \t\t\t\tcase MotionEvent.ACTION_UP:\n \t\t\t\t\tv.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);\n@@ -107,20 +123,17 @@ public class AlarmPreferencesActivity extends ListActivity {\n \t\t\t\t\t\tDatabase.update(getMathAlarm());\n \t\t\t\t\t}\n \t\t\t\t\tcallMathAlarmScheduleService();\n-\t\t\t\t\tToast.makeText(AlarmPreferencesActivity.this,\n-\t\t\t\t\t\t\tgetMathAlarm().getTimeUntilNextAlarmMessage(),\n-\t\t\t\t\t\t\tToast.LENGTH_LONG).show();\n+\t\t\t\t\tToast.makeText(AlarmPreferencesActivity.this, getMathAlarm().getTimeUntilNextAlarmMessage(), Toast.LENGTH_LONG).show();\n \t\t\t\t\tfinish();\n \t\t\t\tcase MotionEvent.ACTION_MOVE:\n \t\t\t\tcase MotionEvent.ACTION_CANCEL:\n-\t\t\t\t\tokButton.setBackgroundColor(getResources().getColor(\n-\t\t\t\t\t\t\tandroid.R.color.transparent));\n+\t\t\t\t\tokButton.setBackgroundColor(getResources().getColor(android.R.color.transparent));\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t\treturn true;\n \t\t\t}\n \t\t});\n-\t\t\n+\n \t\tcancelButton = (TextView) findViewById(R.id.textView_cancel);\n \t\tcancelButton.setOnTouchListener(new OnTouchListener() {\n \t\t\t@Override\n@@ -128,22 +141,20 @@ public class AlarmPreferencesActivity extends ListActivity {\n \n \t\t\t\tswitch (event.getAction()) {\n \t\t\t\tcase MotionEvent.ACTION_DOWN:\n-\t\t\t\t\tcancelButton.setBackgroundColor(getResources().getColor(\n-\t\t\t\t\t\t\tR.color.holo_blue_light));\n+\t\t\t\t\tcancelButton.setBackgroundColor(getResources().getColor(R.color.holo_blue_light));\n \t\t\t\t\tbreak;\n \t\t\t\tcase MotionEvent.ACTION_UP:\n \t\t\t\t\tv.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);\n \t\t\t\t\tfinish();\n \t\t\t\tcase MotionEvent.ACTION_MOVE:\n \t\t\t\tcase MotionEvent.ACTION_CANCEL:\n-\t\t\t\t\tcancelButton.setBackgroundColor(getResources().getColor(\n-\t\t\t\t\t\t\tandroid.R.color.transparent));\n+\t\t\t\t\tcancelButton.setBackgroundColor(getResources().getColor(android.R.color.transparent));\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t\treturn true;\n \t\t\t}\n \t\t});\n-\t\t\n+\n \t\tBundle bundle = getIntent().getExtras();\n \t\tif (bundle != null && bundle.containsKey(\"alarm\")) {\n \t\t\tsetMathAlarm((Alarm) bundle.getSerializable(\"alarm\"));\n@@ -152,20 +163,18 @@ public class AlarmPreferencesActivity extends ListActivity {\n \t}\n \n \tprivate void callMathAlarmScheduleService() {\n-\t\tIntent mathAlarmServiceIntent = new Intent(this,\n-\t\t\t\tAlarmServiceBroadcastReciever.class);\n+\t\tIntent mathAlarmServiceIntent = new Intent(this, AlarmServiceBroadcastReciever.class);\n \t\tsendBroadcast(mathAlarmServiceIntent, null);\n \t}\n \n-\t\n \tprivate CountDownTimer alarmToneTimer;\n+\n \t@Override\n \tprotected void onListItemClick(ListView l, View v, int position, long id) {\n \t\tsuper.onListItemClick(l, v, position, id);\n \n \t\tfinal AlarmPreferenceListAdapter alarmPreferenceListAdapter = (AlarmPreferenceListAdapter) getListAdapter();\n-\t\tfinal AlarmPreference alarmPreference = (AlarmPreference) alarmPreferenceListAdapter\n-\t\t\t\t.getItem(position);\n+\t\tfinal AlarmPreference alarmPreference = (AlarmPreference) alarmPreferenceListAdapter.getItem(position);\n \n \t\tAlertDialog.Builder alert;\n \t\tv.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);\n@@ -197,29 +206,23 @@ public class AlarmPreferencesActivity extends ListActivity {\n \n \t\t\t// Set an EditText view to get user input\n \t\t\tfinal EditText input = new EditText(this);\n-\t\t\t\n+\n \t\t\tinput.setText(alarmPreference.getValue().toString());\n \n \t\t\talert.setView(input);\n-\t\t\talert.setPositiveButton(\"Ok\",\n-\t\t\t\t\tnew DialogInterface.OnClickListener() {\n-\t\t\t\t\t\tpublic void onClick(DialogInterface dialog,\n-\t\t\t\t\t\t\t\tint whichButton) {\n+\t\t\talert.setPositiveButton(\"Ok\", new DialogInterface.OnClickListener() {\n+\t\t\t\tpublic void onClick(DialogInterface dialog, int whichButton) {\n \n-\t\t\t\t\t\t\talarmPreference.setValue(input.getText()\n-\t\t\t\t\t\t\t\t\t.toString());\n+\t\t\t\t\talarmPreference.setValue(input.getText().toString());\n \n-\t\t\t\t\t\t\tif (alarmPreference.getKey() == Key.ALARM_NAME) {\n-\t\t\t\t\t\t\t\talarm.setAlarmName(alarmPreference\n-\t\t\t\t\t\t\t\t\t\t.getValue().toString());\n-\t\t\t\t\t\t\t}\n+\t\t\t\t\tif (alarmPreference.getKey() == Key.ALARM_NAME) {\n+\t\t\t\t\t\talarm.setAlarmName(alarmPreference.getValue().toString());\n+\t\t\t\t\t}\n \n-\t\t\t\t\t\t\talarmPreferenceListAdapter\n-\t\t\t\t\t\t\t\t\t.setMathAlarm(getMathAlarm());\n-\t\t\t\t\t\t\talarmPreferenceListAdapter\n-\t\t\t\t\t\t\t\t\t.notifyDataSetChanged();\n-\t\t\t\t\t\t}\n-\t\t\t\t\t});\n+\t\t\t\t\talarmPreferenceListAdapter.setMathAlarm(getMathAlarm());\n+\t\t\t\t\talarmPreferenceListAdapter.notifyDataSetChanged();\n+\t\t\t\t}\n+\t\t\t});\n \t\t\talert.show();\n \t\t\tbreak;\n \t\tcase LIST:\n@@ -228,8 +231,7 @@ public class AlarmPreferencesActivity extends ListActivity {\n \t\t\talert.setTitle(alarmPreference.getTitle());\n \t\t\t// alert.setMessage(message);\n \n-\t\t\tCharSequence[] items = new CharSequence[alarmPreference\n-\t\t\t\t\t.getOptions().length];\n+\t\t\tCharSequence[] items = new CharSequence[alarmPreference.getOptions().length];\n \t\t\tfor (int i = 0; i < items.length; i++)\n \t\t\t\titems[i] = alarmPreference.getOptions()[i];\n \n@@ -243,22 +245,19 @@ public class AlarmPreferencesActivity extends ListActivity {\n \t\t\t\t\t\talarm.setDifficulty(d);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase ALARM_TONE:\n-\t\t\t\t\t\talarm.setAlarmTonePath(alarmPreferenceListAdapter\n-\t\t\t\t\t\t\t\t\t\t.getAlarmTonePaths()[which]);\n+\t\t\t\t\t\talarm.setAlarmTonePath(alarmPreferenceListAdapter.getAlarmTonePaths()[which]);\n \t\t\t\t\t\tif (alarm.getAlarmTonePath() != null) {\n-\t\t\t\t\t\t\tif (mediaPlayer == null){\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tif (mediaPlayer == null) {\n \t\t\t\t\t\t\t\tmediaPlayer = new MediaPlayer();\n-\t\t\t\t\t\t\t}else{\n-\t\t\t\t\t\t\tif(mediaPlayer.isPlaying())\n-\t\t\t\t\t\t\t\tmediaPlayer.stop();\n-\t\t\t\t\t\t\tmediaPlayer.reset();\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tif (mediaPlayer.isPlaying())\n+\t\t\t\t\t\t\t\t\tmediaPlayer.stop();\n+\t\t\t\t\t\t\t\tmediaPlayer.reset();\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\ttry {\n-//\t\t\t\t\t\t\t\tmediaPlayer.setVolume(1.0f, 1.0f);\n+\t\t\t\t\t\t\t\t// mediaPlayer.setVolume(1.0f, 1.0f);\n \t\t\t\t\t\t\t\tmediaPlayer.setVolume(0.2f, 0.2f);\n-\t\t\t\t\t\t\t\tmediaPlayer.setDataSource(\n-\t\t\t\t\t\t\t\t\t\tAlarmPreferencesActivity.this,\n-\t\t\t\t\t\t\t\t\t\tUri.parse(alarm.getAlarmTonePath()));\n+\t\t\t\t\t\t\t\tmediaPlayer.setDataSource(AlarmPreferencesActivity.this, Uri.parse(alarm.getAlarmTonePath()));\n \t\t\t\t\t\t\t\tmediaPlayer.setAudioStreamType(AudioManager.STREAM_ALARM);\n \t\t\t\t\t\t\t\tmediaPlayer.setLooping(false);\n \t\t\t\t\t\t\t\tmediaPlayer.prepare();\n@@ -266,7 +265,7 @@ public class AlarmPreferencesActivity extends ListActivity {\n \n \t\t\t\t\t\t\t\t// Force the mediaPlayer to stop after 3\n \t\t\t\t\t\t\t\t// seconds...\n-\t\t\t\t\t\t\t\tif(alarmToneTimer != null)\n+\t\t\t\t\t\t\t\tif (alarmToneTimer != null)\n \t\t\t\t\t\t\t\t\talarmToneTimer.cancel();\n \t\t\t\t\t\t\t\talarmToneTimer = new CountDownTimer(3000, 3000) {\n \t\t\t\t\t\t\t\t\t@Override\n@@ -278,7 +277,7 @@ public class AlarmPreferencesActivity extends ListActivity {\n \t\t\t\t\t\t\t\t\tpublic void onFinish() {\n \t\t\t\t\t\t\t\t\t\ttry {\n \t\t\t\t\t\t\t\t\t\t\tif (mediaPlayer.isPlaying())\n-\t\t\t\t\t\t\t\t\t\t\t\tmediaPlayer.stop();\t\t\t\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\t\t\t\t\tmediaPlayer.stop();\n \t\t\t\t\t\t\t\t\t\t} catch (Exception e) {\n \n \t\t\t\t\t\t\t\t\t\t}\n@@ -288,13 +287,15 @@ public class AlarmPreferencesActivity extends ListActivity {\n \t\t\t\t\t\t\t} catch (Exception e) {\n \t\t\t\t\t\t\t\ttry {\n \t\t\t\t\t\t\t\t\tif (mediaPlayer.isPlaying())\n-\t\t\t\t\t\t\t\t\tmediaPlayer.stop();\n+\t\t\t\t\t\t\t\t\t\tmediaPlayer.stop();\n \t\t\t\t\t\t\t\t} catch (Exception e2) {\n \n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t\tbreak;\n+\t\t\t\t\tdefault:\n+\t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n \t\t\t\t\talarmPreferenceListAdapter.setMathAlarm(getMathAlarm());\n \t\t\t\t\talarmPreferenceListAdapter.notifyDataSetChanged();\n@@ -310,8 +311,7 @@ public class AlarmPreferencesActivity extends ListActivity {\n \t\t\talert.setTitle(alarmPreference.getTitle());\n \t\t\t// alert.setMessage(message);\n \n-\t\t\tCharSequence[] multiListItems = new CharSequence[alarmPreference\n-\t\t\t\t\t.getOptions().length];\n+\t\t\tCharSequence[] multiListItems = new CharSequence[alarmPreference.getOptions().length];\n \t\t\tfor (int i = 0; i < multiListItems.length; i++)\n \t\t\t\tmultiListItems[i] = alarmPreference.getOptions()[i];\n \n@@ -319,23 +319,27 @@ public class AlarmPreferencesActivity extends ListActivity {\n \t\t\tfor (Alarm.Day day : getMathAlarm().getDays()) {\n \t\t\t\tcheckedItems[day.ordinal()] = true;\n \t\t\t}\n-\t\t\talert.setMultiChoiceItems(multiListItems, checkedItems,\n-\t\t\t\t\tnew OnMultiChoiceClickListener() {\n-\n-\t\t\t\t\t\t@Override\n-\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which,\n-\t\t\t\t\t\t\t\tboolean isChecked) {\n+\t\t\talert.setMultiChoiceItems(multiListItems, checkedItems, new OnMultiChoiceClickListener() {\n \n-\t\t\t\t\t\t\tAlarm.Day thisDay = Alarm.Day.values()[which];\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onClick(final DialogInterface dialog, int which, boolean isChecked) {\n \n-\t\t\t\t\t\t\tif (isChecked) {\n-\t\t\t\t\t\t\t\talarm.addDay(thisDay);\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\talarm.removeDay(thisDay);\n-\t\t\t\t\t\t\t}\n+\t\t\t\t\tAlarm.Day thisDay = Alarm.Day.values()[which];\n \n+\t\t\t\t\tif (isChecked) {\n+\t\t\t\t\t\talarm.addDay(thisDay);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t//Only remove the day if there are more than 1 selected\n+\t\t\t\t\t\tif(alarm.getDays().length > 1){\n+\t\t\t\t\t\t\talarm.removeDay(thisDay);\n+\t\t\t\t\t\t}else{\n+\t\t\t\t\t\t\t//If the last day was unchecked, re-check it\n+\t\t\t\t\t\t\t((AlertDialog) dialog).getListView().setItemChecked(which, true);\n \t\t\t\t\t\t}\n-\t\t\t\t\t});\n+\t\t\t\t\t}\n+\n+\t\t\t\t}\n+\t\t\t});\n \t\t\talert.setOnCancelListener(new OnCancelListener() {\n \t\t\t\t@Override\n \t\t\t\tpublic void onCancel(DialogInterface dialog) {\n@@ -347,24 +351,19 @@ public class AlarmPreferencesActivity extends ListActivity {\n \t\t\talert.show();\n \t\t\tbreak;\n \t\tcase TIME:\n-\t\t\tTimePickerDialog timePickerDialog = new TimePickerDialog(this,\n-\t\t\t\t\tnew OnTimeSetListener() {\n+\t\t\tTimePickerDialog timePickerDialog = new TimePickerDialog(this, new OnTimeSetListener() {\n \n-\t\t\t\t\t\t@Override\n-\t\t\t\t\t\tpublic void onTimeSet(TimePicker timePicker, int hours,\n-\t\t\t\t\t\t\t\tint minutes) {\n-\t\t\t\t\t\t\tCalendar newAlarmTime = Calendar.getInstance();\n-\t\t\t\t\t\t\tnewAlarmTime.set(Calendar.HOUR_OF_DAY, hours);\n-\t\t\t\t\t\t\tnewAlarmTime.set(Calendar.MINUTE, minutes);\n-\t\t\t\t\t\t\tnewAlarmTime.set(Calendar.SECOND, 0);\n-\t\t\t\t\t\t\talarm.setAlarmTime(newAlarmTime);\n-\t\t\t\t\t\t\talarmPreferenceListAdapter\n-\t\t\t\t\t\t\t\t\t.setMathAlarm(getMathAlarm());\n-\t\t\t\t\t\t\talarmPreferenceListAdapter\n-\t\t\t\t\t\t\t\t\t.notifyDataSetChanged();\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}, alarm.getAlarmTime().get(Calendar.HOUR_OF_DAY),\n-\t\t\t\t\talarm.getAlarmTime().get(Calendar.MINUTE), true);\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onTimeSet(TimePicker timePicker, int hours, int minutes) {\n+\t\t\t\t\tCalendar newAlarmTime = Calendar.getInstance();\n+\t\t\t\t\tnewAlarmTime.set(Calendar.HOUR_OF_DAY, hours);\n+\t\t\t\t\tnewAlarmTime.set(Calendar.MINUTE, minutes);\n+\t\t\t\t\tnewAlarmTime.set(Calendar.SECOND, 0);\n+\t\t\t\t\talarm.setAlarmTime(newAlarmTime);\n+\t\t\t\t\talarmPreferenceListAdapter.setMathAlarm(getMathAlarm());\n+\t\t\t\t\talarmPreferenceListAdapter.notifyDataSetChanged();\n+\t\t\t\t}\n+\t\t\t}, alarm.getAlarmTime().get(Calendar.HOUR_OF_DAY), alarm.getAlarmTime().get(Calendar.MINUTE), true);\n \t\t\ttimePickerDialog.setTitle(alarmPreference.getTitle());\n \t\t\ttimePickerDialog.show();\n \t\tdefault:\n@@ -401,8 +400,7 @@ public class AlarmPreferencesActivity extends ListActivity {\n \t\t\tif (getMathAlarm() == null)\n \t\t\t\tsetMathAlarm(new Alarm());\n \n-\t\t\tsetListAdapter(new AlarmPreferenceListAdapter(this,\n-\t\t\t\t\tgetMathAlarm()));\n+\t\t\tsetListAdapter(new AlarmPreferenceListAdapter(this, getMathAlarm()));\n \t\t} else {\n \t\t\tObject[] bundle = (Object[]) data;\n \t\t\tsetMathAlarm((Alarm) bundle[0]);\n@@ -419,7 +417,6 @@ public class AlarmPreferencesActivity extends ListActivity {\n \t\tthis.alarm = alarm;\n \t}\n \n-\t\n \t@Override\n \tpublic boolean onCreateOptionsMenu(Menu menu) {\n \t\tMenuInflater inflater = getMenuInflater();\n@@ -431,14 +428,12 @@ public class AlarmPreferencesActivity extends ListActivity {\n \tpublic boolean onOptionsItemSelected(MenuItem item) {\n \t\tswitch (item.getItemId()) {\n \t\tcase R.id.menu_item_rate:\n-\t\t\tUri uri = Uri.parse(\"market://details?id=\"\n-\t\t\t\t\t+ getPackageName());\n+\t\t\tUri uri = Uri.parse(\"market://details?id=\" + getPackageName());\n \t\t\tIntent goToMarket = new Intent(Intent.ACTION_VIEW, uri);\n \t\t\ttry {\n \t\t\t\tstartActivity(goToMarket);\n \t\t\t} catch (ActivityNotFoundException e) {\n-\t\t\t\tToast.makeText(this, \"Couldn't launch the market\",\n-\t\t\t\t\t\tToast.LENGTH_LONG).show();\n+\t\t\t\tToast.makeText(this, \"Couldn't launch the market\", Toast.LENGTH_LONG).show();\n \t\t\t}\n \t\t\tbreak;\n \t\tcase R.id.menu_item_website:\n@@ -454,23 +449,15 @@ public class AlarmPreferencesActivity extends ListActivity {\n \t\t\tString emailAddress = \"bugs@neilson.co.za\";\n \t\t\tString subject = R.string.app_name + \" Bug Report\";\n \t\t\tString body = \"Debug:\";\n-\t\t\tbody += \"\\n OS Version: \" + System.getProperty(\"os.version\") + \"(\"\n-\t\t\t\t\t+ android.os.Build.VERSION.INCREMENTAL + \")\";\n+\t\t\tbody += \"\\n OS Version: \" + System.getProperty(\"os.version\") + \"(\" + android.os.Build.VERSION.INCREMENTAL + \")\";\n \t\t\tbody += \"\\n OS API Level: \" + android.os.Build.VERSION.SDK_INT;\n \t\t\tbody += \"\\n Device: \" + android.os.Build.DEVICE;\n-\t\t\tbody += \"\\n Model (and Product): \" + android.os.Build.MODEL + \" (\"\n-\t\t\t\t\t+ android.os.Build.PRODUCT + \")\";\n-\t\t\tbody += \"\\n Screen Width: \"\n-\t\t\t\t\t+ getWindow().getWindowManager().getDefaultDisplay()\n-\t\t\t\t\t\t\t.getWidth();\n-\t\t\tbody += \"\\n Screen Height: \"\n-\t\t\t\t\t+ getWindow().getWindowManager().getDefaultDisplay()\n-\t\t\t\t\t\t\t.getHeight();\n-\t\t\tbody += \"\\n Hardware Keyboard Present: \"\n-\t\t\t\t\t+ (getResources().getConfiguration().keyboard != Configuration.KEYBOARD_NOKEYS);\n-\n-\t\t\turiText = \"mailto:\" + emailAddress + \"?subject=\" + subject\n-\t\t\t\t\t+ \"&body=\" + body;\n+\t\t\tbody += \"\\n Model (and Product): \" + android.os.Build.MODEL + \" (\" + android.os.Build.PRODUCT + \")\";\n+\t\t\tbody += \"\\n Screen Width: \" + getWindow().getWindowManager().getDefaultDisplay().getWidth();\n+\t\t\tbody += \"\\n Screen Height: \" + getWindow().getWindowManager().getDefaultDisplay().getHeight();\n+\t\t\tbody += \"\\n Hardware Keyboard Present: \" + (getResources().getConfiguration().keyboard != Configuration.KEYBOARD_NOKEYS);\n+\n+\t\t\turiText = \"mailto:\" + emailAddress + \"?subject=\" + subject + \"&body=\" + body;\n \n \t\t\turiText = uriText.replace(\" \", \"%20\");\n \t\t\tUri emalUri = Uri.parse(uriText);"], "score": 1.0, "methods_t": ["Alarm AlarmPreferenceListAdapter AlertDialog.Builder CountDownTimer DialogInterface.OnClickListener EditText Intent MediaPlayer OnCancelListener OnClickListener OnMultiChoiceClickListener OnTimeSetListener OnTouchListener TimePickerDialog addDay callMathAlarmScheduleService cancel containsKey create createChooser deleteEntry dismiss findViewById finish get getAction getAlarmTime getAlarmTonePath getAlarmTonePaths getApplicationContext getColor getConfiguration getDays getDefaultDisplay getExtras getHeight getId getInstance getIntent getItem getItemId getKey getLastNonConfigurationInstance getListAdapter getListView getMathAlarm getMenuInflater getOptions getPackageName getProperty getResources getSerializable getSystemService getText getTimeUntilNextAlarmMessage getTitle getType getValue getWidth getWindow getWindowManager inflate init isChecked isPlaying makeText notifyDataSetChanged ordinal parse performHapticFeedback prepare release removeDay replace requestWindowFeature reset sendBroadcast set setAlarmActive setAlarmName setAlarmTime setAlarmTonePath setAudioStreamType setBackgroundColor setChecked setContentView setData setDataSource setDifficulty setItemChecked setItems setListAdapter setLooping setMathAlarm setMessage setMultiChoiceItems setNegativeButton setOnCancelListener setOnTouchListener setPositiveButton setText setTitle setValue setVibrate setView setVolume show start startActivity stop toString update values vibrate"], "_version_": 1526748524969984000, "subject_t": ["Addresses a bug that caused the application to crash when all repeat days were deselected. It is no longer possible to deselect all days, at least one must remain checked."], "comments_t": ["\t\t\t\t\t\t\t\t// seconds... \t\t\t// alert.setMessage(message); \t\t\t\t\t\t\t\t//Alarm not saved \t\t\t\t\t\t//Only remove the day if there are more than 1 selected \t\t\t\t\t\t\t\t// mediaPlayer.setVolume(1.0f, 1.0f); \t\t\t// Set an EditText view to get user input \t\t// Restore data in event of case of orientation change \t\t\t\t\t\t\t\t// Force the mediaPlayer to stop after 3 \t\t\t\t\t\t\t//If the last day was unchecked, re-check it \t\t// setListAdapter(null);"], "parents_ss": ["173ec05ded8d073d941407396a1358688324b16b"], "id": "SheldonNeilson/Android-Alarm-Clock\u0000ccaa2592d988533e282bc4a4307fc6ce9de441a9\u0000src/za/co/neilson/alarm/preferences/AlarmPreferencesActivity.java", "callsites_cs": ".OnClickListener()#android.content.ContextWrapper.getApplicationContext()#android.app.AlertDialog.getListView()#android.app.Activity.findViewById(<unknown>)#android.view.ContextThemeWrapper.getResources()#android.view.WindowManager.getDefaultDisplay()#<unknown>.setAlarmTonePath(<unknown>)#android.os.CountDownTimer.cancel()#android.app.AlertDialog.Builder.AlertDialog.Builder(za.co.neilson.alarm.preferences.AlarmPreferencesActivity)#<unknown>.getAlarmTonePaths()#android.content.ContextWrapper.getPackageName()#android.media.MediaPlayer.setVolume(float, float)#android.content.Intent.getExtras()#android.view.View.performHapticFeedback(int)#android.app.AlertDialog.Builder.AlertDialog.Builder(za.co.neilson.alarm.preferences.AlarmPreferencesActivity)#android.widget.CheckedTextView.setChecked(boolean)#.OnTimeSetListener()#android.app.AlertDialog.Builder.setTitle(java.lang.String)#android.content.ContextWrapper.getApplicationContext()#<unknown>.setMathAlarm(za.co.neilson.alarm.preferences.Alarm)#android.content.ContextWrapper.sendBroadcast(android.content.Intent, null)#android.os.CountDownTimer.start()#android.widget.CheckedTextView.isChecked()#android.widget.Toast.makeText(za.co.neilson.alarm.preferences.AlarmPreferencesActivity, java.lang.String, int)#android.content.Intent.Intent(java.lang.String)#za.co.neilson.alarm.preferences.AlarmPreferencesActivity.setMathAlarm(za.co.neilson.alarm.preferences.Alarm)#<unknown>.getValue()#android.os.Bundle.getSerializable(java.lang.String)#android.app.Dialog.show()#android.app.ListActivity.getListAdapter()#android.view.View.setBackgroundColor(<unknown>)#android.media.MediaPlayer.setAudioStreamType(int)#<unknown>.notifyDataSetChanged()#.OnMultiChoiceClickListener()#android.view.MenuInflater.inflate(<unknown>, android.view.Menu)#za.co.neilson.alarm.preferences.AlarmPreferencesActivity.callMathAlarmScheduleService()#android.content.res.Resources.getColor(<unknown>)#android.media.MediaPlayer.setDataSource(za.co.neilson.alarm.preferences.AlarmPreferencesActivity, <unknown>)#android.app.AlertDialog.Builder.setPositiveButton(java.lang.String, )#android.content.Intent.createChooser(android.content.Intent, java.lang.String)#<unknown>.values()#android.content.Intent.Intent(java.lang.String)#<unknown>.setDifficulty(Alarm.Difficulty)#android.media.MediaPlayer.setLooping(boolean)#<unknown>.getAlarmTime()#java.util.Calendar.set(int, int)#.OnClickListener()#android.content.Intent.Intent(java.lang.String, android.net.Uri)#<unknown>.getKey()#android.app.Activity.finish()#<unknown>.setVibrate(boolean)#android.app.AlertDialog.Builder.show()#za.co.neilson.alarm.preferences.AlarmPreferencesActivity.getMathAlarm()#android.media.MediaPlayer.MediaPlayer()#.OnCancelListener()#za.co.neilson.alarm.preferences.AlarmPreferencesActivity.callMathAlarmScheduleService()#.OnTouchListener()#android.view.ContextThemeWrapper.getResources()#.DialogInterface.OnClickListener()#android.app.Activity.finish()#android.view.MenuItem.getItemId()#<unknown>.setValue(java.lang.String)#<unknown>.getValue()#<unknown>.init(android.content.Context)#android.media.MediaPlayer.stop()#android.app.AlertDialog.Builder.setMessage(java.lang.String)#android.app.ListActivity.setListAdapter(za.co.neilson.alarm.preferences.AlarmPreferenceListAdapter)#java.lang.String.replace(java.lang.String, java.lang.String)#android.view.Display.getHeight()#za.co.neilson.alarm.preferences.AlarmPreferencesActivity.getMathAlarm()#android.app.Activity.getWindow()#android.app.Activity.setContentView(<unknown>)#java.lang.System.getProperty(java.lang.String)#android.view.View.performHapticFeedback(int)#java.lang.Object.AlarmPreferenceListAdapter(za.co.neilson.alarm.preferences.AlarmPreferencesActivity, za.co.neilson.alarm.preferences.Alarm)#android.content.Intent.setData(android.net.Uri)#android.app.AlertDialog.Builder.setOnCancelListener()#<unknown>.removeDay(Alarm.Day)#android.net.Uri.parse(java.lang.String)#<unknown>.show()#android.app.ListActivity.setListAdapter(za.co.neilson.alarm.preferences.AlarmPreferenceListAdapter)#<unknown>.getAlarmTonePath()#android.view.View.setOnTouchListener()#android.net.Uri.parse(java.lang.String)#<unknown>.setValue(boolean)#<unknown>.init(android.content.Context)#<unknown>.setMathAlarm(za.co.neilson.alarm.preferences.Alarm)#za.co.neilson.alarm.preferences.AlarmPreferencesActivity.getMathAlarm()#android.view.Window.getWindowManager()#<unknown>.getDays()#android.media.MediaPlayer.isPlaying()#android.view.View.setBackgroundColor(<unknown>)#android.view.View.setOnTouchListener()#<unknown>.getType()#za.co.neilson.alarm.preferences.AlarmPreferencesActivity.getMathAlarm()#.CountDownTimer(int, int)#android.app.TimePickerDialog.TimePickerDialog(za.co.neilson.alarm.preferences.AlarmPreferencesActivity, , <unknown>, <unknown>, boolean)#za.co.neilson.alarm.preferences.AlarmPreferencesActivity.getMathAlarm()#<unknown>.getOptions()#<unknown>.setAlarmActive(boolean)#android.app.Activity.getLastNonConfigurationInstance()#android.app.Activity.startActivity(android.content.Intent)#android.content.res.Resources.getConfiguration()#android.app.Activity.findViewById(<unknown>)#android.app.AlertDialog.Builder.setMultiChoiceItems(java.lang.CharSequence[], boolean[], )#android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, )#<unknown>.deleteEntry(za.co.neilson.alarm.preferences.Alarm)#android.view.View.setBackgroundColor(<unknown>)#<unknown>.notifyDataSetChanged()#android.view.Display.getWidth()#<unknown>.setAlarmTime(java.util.Calendar)#android.content.res.Resources.getColor(<unknown>)#<unknown>.getKey()#android.app.AlertDialog.setTitle(<unknown>)#android.widget.Toast.show()#android.view.MotionEvent.getAction()#android.widget.Toast.makeText(za.co.neilson.alarm.preferences.AlarmPreferencesActivity, <unknown>, int)#android.media.MediaPlayer.reset()#<unknown>.getId()#<unknown>.getId()#android.app.Activity.getIntent()#android.media.MediaPlayer.isPlaying()#za.co.neilson.alarm.preferences.AlarmPreferencesActivity.getMathAlarm()#android.app.Activity.requestWindowFeature(int)#za.co.neilson.alarm.preferences.AlarmPreferencesActivity.setMathAlarm(za.co.neilson.alarm.preferences.Alarm)#<unknown>.Alarm()#java.util.Calendar.set(int, int)#android.widget.EditText.EditText(za.co.neilson.alarm.preferences.AlarmPreferencesActivity)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.create(za.co.neilson.alarm.preferences.Alarm)#za.co.neilson.alarm.preferences.AlarmPreferencesActivity.getMathAlarm()#android.app.AlertDialog.Builder.setPositiveButton(java.lang.String, )#<unknown>.values()#android.app.ListActivity.getListAdapter()#android.media.MediaPlayer.prepare()#android.view.View.setBackgroundColor(<unknown>)#android.net.Uri.parse(<unknown>)#android.app.Activity.startActivity(android.content.Intent)#android.app.AlertDialog.Builder.setItems(java.lang.CharSequence[], )#android.view.View.setBackgroundColor(<unknown>)#<unknown>.getTitle()#<unknown>.setMathAlarm(za.co.neilson.alarm.preferences.Alarm)#android.content.DialogInterface.dismiss()#android.media.MediaPlayer.start()#za.co.neilson.alarm.preferences.AlarmPreferencesActivity.setMathAlarm(za.co.neilson.alarm.preferences.Alarm)#<unknown>.get(int)#java.util.Calendar.set(int, int)#<unknown>.getItem(int)#android.app.Activity.getMenuInflater()#<unknown>.findViewById(<unknown>)#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setBackgroundColor(<unknown>)#android.view.View.setOnTouchListener()#android.app.Activity.getSystemService(java.lang.String)#<unknown>.addDay(Alarm.Day)#za.co.neilson.alarm.preferences.AlarmPreferencesActivity.getMathAlarm()#android.widget.TextView.setText(<unknown>)#android.app.AlertDialog.Builder.setView(android.widget.EditText)#java.util.Calendar.getInstance()#android.media.MediaPlayer.release()#android.app.Activity.findViewById(<unknown>)#android.widget.EditText.getText()#<unknown>.getTimeUntilNextAlarmMessage()#<unknown>.toString()#<unknown>.get(int)#android.media.MediaPlayer.stop()#<unknown>.notifyDataSetChanged()#<unknown>.getDays()#<unknown>.toString()#android.net.Uri.parse(java.lang.String)#android.os.Vibrator.vibrate(int)#<unknown>.setAlarmName(<unknown>)#android.widget.AbsListView.setItemChecked(int, boolean)#android.app.AlertDialog.Builder.setTitle(<unknown>)#java.lang.CharSequence.toString()#android.content.Intent.Intent(za.co.neilson.alarm.preferences.AlarmPreferencesActivity, java.lang.Class)#<unknown>.ordinal()#android.content.Intent.setData(android.net.Uri)#android.app.AlertDialog.Builder.show()#<unknown>.update(za.co.neilson.alarm.preferences.Alarm)", "callsites_t": [".OnClickListener() android.content.ContextWrapper.getApplicationContext() android.app.AlertDialog.getListView() android.app.Activity.findViewById(<unknown>) android.view.ContextThemeWrapper.getResources() android.view.WindowManager.getDefaultDisplay() <unknown>.setAlarmTonePath(<unknown>) android.os.CountDownTimer.cancel() android.app.AlertDialog.Builder.AlertDialog.Builder(za.co.neilson.alarm.preferences.AlarmPreferencesActivity) <unknown>.getAlarmTonePaths() android.content.ContextWrapper.getPackageName() android.media.MediaPlayer.setVolume(float, float) android.content.Intent.getExtras() android.view.View.performHapticFeedback(int) android.app.AlertDialog.Builder.AlertDialog.Builder(za.co.neilson.alarm.preferences.AlarmPreferencesActivity) android.widget.CheckedTextView.setChecked(boolean) .OnTimeSetListener() android.app.AlertDialog.Builder.setTitle(java.lang.String) android.content.ContextWrapper.getApplicationContext() <unknown>.setMathAlarm(za.co.neilson.alarm.preferences.Alarm) android.content.ContextWrapper.sendBroadcast(android.content.Intent, null) android.os.CountDownTimer.start() android.widget.CheckedTextView.isChecked() android.widget.Toast.makeText(za.co.neilson.alarm.preferences.AlarmPreferencesActivity, java.lang.String, int) android.content.Intent.Intent(java.lang.String) za.co.neilson.alarm.preferences.AlarmPreferencesActivity.setMathAlarm(za.co.neilson.alarm.preferences.Alarm) <unknown>.getValue() android.os.Bundle.getSerializable(java.lang.String) android.app.Dialog.show() android.app.ListActivity.getListAdapter() android.view.View.setBackgroundColor(<unknown>) android.media.MediaPlayer.setAudioStreamType(int) <unknown>.notifyDataSetChanged() .OnMultiChoiceClickListener() android.view.MenuInflater.inflate(<unknown>, android.view.Menu) za.co.neilson.alarm.preferences.AlarmPreferencesActivity.callMathAlarmScheduleService() android.content.res.Resources.getColor(<unknown>) android.media.MediaPlayer.setDataSource(za.co.neilson.alarm.preferences.AlarmPreferencesActivity, <unknown>) android.app.AlertDialog.Builder.setPositiveButton(java.lang.String, ) android.content.Intent.createChooser(android.content.Intent, java.lang.String) <unknown>.values() android.content.Intent.Intent(java.lang.String) <unknown>.setDifficulty(Alarm.Difficulty) android.media.MediaPlayer.setLooping(boolean) <unknown>.getAlarmTime() java.util.Calendar.set(int, int) .OnClickListener() android.content.Intent.Intent(java.lang.String, android.net.Uri) <unknown>.getKey() android.app.Activity.finish() <unknown>.setVibrate(boolean) android.app.AlertDialog.Builder.show() za.co.neilson.alarm.preferences.AlarmPreferencesActivity.getMathAlarm() android.media.MediaPlayer.MediaPlayer() .OnCancelListener() za.co.neilson.alarm.preferences.AlarmPreferencesActivity.callMathAlarmScheduleService() .OnTouchListener() android.view.ContextThemeWrapper.getResources() .DialogInterface.OnClickListener() android.app.Activity.finish() android.view.MenuItem.getItemId() <unknown>.setValue(java.lang.String) <unknown>.getValue() <unknown>.init(android.content.Context) android.media.MediaPlayer.stop() android.app.AlertDialog.Builder.setMessage(java.lang.String) android.app.ListActivity.setListAdapter(za.co.neilson.alarm.preferences.AlarmPreferenceListAdapter) java.lang.String.replace(java.lang.String, java.lang.String) android.view.Display.getHeight() za.co.neilson.alarm.preferences.AlarmPreferencesActivity.getMathAlarm() android.app.Activity.getWindow() android.app.Activity.setContentView(<unknown>) java.lang.System.getProperty(java.lang.String) android.view.View.performHapticFeedback(int) java.lang.Object.AlarmPreferenceListAdapter(za.co.neilson.alarm.preferences.AlarmPreferencesActivity, za.co.neilson.alarm.preferences.Alarm) android.content.Intent.setData(android.net.Uri) android.app.AlertDialog.Builder.setOnCancelListener() <unknown>.removeDay(Alarm.Day) android.net.Uri.parse(java.lang.String) <unknown>.show() android.app.ListActivity.setListAdapter(za.co.neilson.alarm.preferences.AlarmPreferenceListAdapter) <unknown>.getAlarmTonePath() android.view.View.setOnTouchListener() android.net.Uri.parse(java.lang.String) <unknown>.setValue(boolean) <unknown>.init(android.content.Context) <unknown>.setMathAlarm(za.co.neilson.alarm.preferences.Alarm) za.co.neilson.alarm.preferences.AlarmPreferencesActivity.getMathAlarm() android.view.Window.getWindowManager() <unknown>.getDays() android.media.MediaPlayer.isPlaying() android.view.View.setBackgroundColor(<unknown>) android.view.View.setOnTouchListener() <unknown>.getType() za.co.neilson.alarm.preferences.AlarmPreferencesActivity.getMathAlarm() .CountDownTimer(int, int) android.app.TimePickerDialog.TimePickerDialog(za.co.neilson.alarm.preferences.AlarmPreferencesActivity, , <unknown>, <unknown>, boolean) za.co.neilson.alarm.preferences.AlarmPreferencesActivity.getMathAlarm() <unknown>.getOptions() <unknown>.setAlarmActive(boolean) android.app.Activity.getLastNonConfigurationInstance() android.app.Activity.startActivity(android.content.Intent) android.content.res.Resources.getConfiguration() android.app.Activity.findViewById(<unknown>) android.app.AlertDialog.Builder.setMultiChoiceItems(java.lang.CharSequence[], boolean[], ) android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, ) <unknown>.deleteEntry(za.co.neilson.alarm.preferences.Alarm) android.view.View.setBackgroundColor(<unknown>) <unknown>.notifyDataSetChanged() android.view.Display.getWidth() <unknown>.setAlarmTime(java.util.Calendar) android.content.res.Resources.getColor(<unknown>) <unknown>.getKey() android.app.AlertDialog.setTitle(<unknown>) android.widget.Toast.show() android.view.MotionEvent.getAction() android.widget.Toast.makeText(za.co.neilson.alarm.preferences.AlarmPreferencesActivity, <unknown>, int) android.media.MediaPlayer.reset() <unknown>.getId() <unknown>.getId() android.app.Activity.getIntent() android.media.MediaPlayer.isPlaying() za.co.neilson.alarm.preferences.AlarmPreferencesActivity.getMathAlarm() android.app.Activity.requestWindowFeature(int) za.co.neilson.alarm.preferences.AlarmPreferencesActivity.setMathAlarm(za.co.neilson.alarm.preferences.Alarm) <unknown>.Alarm() java.util.Calendar.set(int, int) android.widget.EditText.EditText(za.co.neilson.alarm.preferences.AlarmPreferencesActivity) android.os.Bundle.containsKey(java.lang.String) <unknown>.create(za.co.neilson.alarm.preferences.Alarm) za.co.neilson.alarm.preferences.AlarmPreferencesActivity.getMathAlarm() android.app.AlertDialog.Builder.setPositiveButton(java.lang.String, ) <unknown>.values() android.app.ListActivity.getListAdapter() android.media.MediaPlayer.prepare() android.view.View.setBackgroundColor(<unknown>) android.net.Uri.parse(<unknown>) android.app.Activity.startActivity(android.content.Intent) android.app.AlertDialog.Builder.setItems(java.lang.CharSequence[], ) android.view.View.setBackgroundColor(<unknown>) <unknown>.getTitle() <unknown>.setMathAlarm(za.co.neilson.alarm.preferences.Alarm) android.content.DialogInterface.dismiss() android.media.MediaPlayer.start() za.co.neilson.alarm.preferences.AlarmPreferencesActivity.setMathAlarm(za.co.neilson.alarm.preferences.Alarm) <unknown>.get(int) java.util.Calendar.set(int, int) <unknown>.getItem(int) android.app.Activity.getMenuInflater() <unknown>.findViewById(<unknown>) android.app.Activity.startActivity(android.content.Intent) android.view.View.setBackgroundColor(<unknown>) android.view.View.setOnTouchListener() android.app.Activity.getSystemService(java.lang.String) <unknown>.addDay(Alarm.Day) za.co.neilson.alarm.preferences.AlarmPreferencesActivity.getMathAlarm() android.widget.TextView.setText(<unknown>) android.app.AlertDialog.Builder.setView(android.widget.EditText) java.util.Calendar.getInstance() android.media.MediaPlayer.release() android.app.Activity.findViewById(<unknown>) android.widget.EditText.getText() <unknown>.getTimeUntilNextAlarmMessage() <unknown>.toString() <unknown>.get(int) android.media.MediaPlayer.stop() <unknown>.notifyDataSetChanged() <unknown>.getDays() <unknown>.toString() android.net.Uri.parse(java.lang.String) android.os.Vibrator.vibrate(int) <unknown>.setAlarmName(<unknown>) android.widget.AbsListView.setItemChecked(int, boolean) android.app.AlertDialog.Builder.setTitle(<unknown>) java.lang.CharSequence.toString() android.content.Intent.Intent(za.co.neilson.alarm.preferences.AlarmPreferencesActivity, java.lang.Class) <unknown>.ordinal() android.content.Intent.setData(android.net.Uri) android.app.AlertDialog.Builder.show() <unknown>.update(za.co.neilson.alarm.preferences.Alarm)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items\n\t\t// ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n\t\t\t\t//TODO \n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ******\n\t\t// ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText()\n\t\t\t\t.toString();\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t\t.getText().length() > 5) {\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock\n\t\t\t\t\t.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\")\n\t\t\t\t&& !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount\n\t\t\t\t\t.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText()\n\t\t\t\t\t.toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString()\n\t\t\t\t.equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(\n\t\t\t\t\t\t\ttext_voice_camera_date_bar_dateview.getText()\n\t\t\t\t\t\t\t\t\t.toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,\n\t\t\t\t\t\t\tmDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\n\t\t// ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);\n\t\tstartActivity(intentExpenseListing);\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-08T06:36:28Z", "hash_sni": "97fc4ed71d60227730b2b631d6d55295dac2dc91", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \t\tmDatabaseAdapter.editDatabase(_list);\n \t\tmDatabaseAdapter.close();\n \t\tfinish();\n-\t\tif (!intentExtras.containsKey(\"timeInMillis\")\n-\t\t\t\t&& !intentExtras.containsKey(\"mDisplayList\")) {\n-\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n-\t\t\tstartActivity(intentExpenseListing);\n-\t\t}\n+\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n+\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);\n+\t\tstartActivity(intentExpenseListing);\n \t}\n \n \t// /////// ********* CountdownTimer for Chronometer ********* //////////"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper addFlags canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim"], "_version_": 1526748499180257280, "subject_t": ["Removed hacks to control intents used flags instead of hacks"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// /////// \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// //// ******* Update database if user added additional info ******* \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// //// ****** If audio recording started then stop recording audio \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t\t//TODO  \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// ////// ******** Starts Recording each time activity starts ****** \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// ***** /////// \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// ********** ///////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["3e104af2785ff32ea4090b1c19d872057af2560b"], "id": "vinsol/expense-tracker\u000097fc4ed71d60227730b2b631d6d55295dac2dc91\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.widget.TextView.setText(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Intent.addFlags(int)#android.os.SystemClock.elapsedRealtime()#android.widget.TextView.getText()#<unknown>.DisplayTime()#android.view.KeyEvent.getRepeatCount()#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#<unknown>.isRecording()#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.widget.TextView.setText(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.lang.Long.toString(long) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Intent.addFlags(int) android.os.SystemClock.elapsedRealtime() android.widget.TextView.getText() <unknown>.DisplayTime() android.view.KeyEvent.getRepeatCount() android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) <unknown>.isRecording() android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Alok Vaish", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener android.os.Bundle android.view.Window java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast android.widget.ImageView"], "email_sni": "alok@alok-PC.(none)", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\t// ///// ****** No Title Bar ********* /////////\n\n\t\tthis.requestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items\n\t\t// ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n\t\t\t\t//TODO \n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ******\n\t\t// ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\n\t\t// //////********* Get Last most accurate location info *********\n\t\t// /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText()\n\t\t\t\t.toString();\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer\n\t\t\t\t\t\t\t\t.getText().length() > 5) {\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button\n\t\t\t\t\t\t\t\t\t.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\ttext_voice_camera_time_details_chronometer\n\t\t\t\t\t\t.setText(new DisplayTime().getDisplayTime(mAudioPlay\n\t\t\t\t\t\t\t\t.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock\n\t\t\t\t\t.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\")\n\t\t\t\t&& !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount\n\t\t\t\t\t.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText()\n\t\t\t\t\t.toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString()\n\t\t\t\t.equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(\n\t\t\t\t\t\t\ttext_voice_camera_date_bar_dateview.getText()\n\t\t\t\t\t\t\t\t\t.toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,\n\t\t\t\t\t\t\tmDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(MainActivity.mCurrentLocation != null  && setLocation == true){\n\t\t\tif (!MainActivity.mCurrentLocation.equals(\"\")) {\n\t\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION,MainActivity.mCurrentLocation);\n\t\t\t}\n\t\t}\n\t\t// //// ******* Update database if user added additional info *******\n\t\t// ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tif (!intentExtras.containsKey(\"timeInMillis\")\n\t\t\t\t&& !intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime\n\t\t\t\t\t.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-02T10:40:29Z", "hash_sni": "beaf7fe9b520d580ed5fa85e5ff296a3bcceb003", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" public class Voice extends Activity implements OnClickListener {\n \n \tprivate TextView text_voice_camera_header_title;\n-\tprivate ImageView text_voice_camera_voice_details_separator;\n \tprivate RelativeLayout text_voice_camera_voice_details;\n \tprivate Chronometer text_voice_camera_time_details_chronometer;\n \tprivate Button text_voice_camera_stop_button;\n@@ -66,7 +65,6 @@ public class Voice extends Activity implements OnClickListener {\n \t\t// ********** /////////\n \n \t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n-\t\ttext_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n \t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n \t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n \t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n@@ -219,9 +217,6 @@ public class Voice extends Activity implements OnClickListener {\n \t\t// ///// ***** Sets Title Voice Entry *********///////\n \t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n \n-\t\t// ///// ***** Sets Title Voice Entry *********///////\n-\t\ttext_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n-\n \t\t// //// ****** Shows Voice Details ********////////\n \t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n \t}"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime File FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLastLocation getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put requestWindowFeature saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526749297329045504, "subject_t": ["Text Entry designs integrated"], "comments_t": ["\t\t// ///// ****** No Title Bar ********* ///////// \t\t// or later, or by the code above on earlier versions of the platform. \t\t// /////// \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// //// ******* Update database if user added additional info ******* \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //////********* Get Last most accurate location info ********* \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// //// ****** If audio recording started then stop recording audio \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t\t//TODO  \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// ////// ******** Starts Recording each time activity starts ****** \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// ***** /////// \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// ********** ///////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["6e2b273cd790726e04a2d9c30035646fc5bc2636"], "id": "vinsol/expense-tracker\u0000beaf7fe9b520d580ed5fa85e5ff296a3bcceb003\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.widget.TextView.setText(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.app.Activity.finish()#java.io.File.File(java.lang.String)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#<unknown>.getLastLocation()#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#<unknown>.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#android.widget.TextView.getText()#<unknown>.DisplayTime()#android.view.KeyEvent.getRepeatCount()#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.requestWindowFeature(int)#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#<unknown>.isRecording()#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.widget.TextView.setText(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.lang.Long.toString(long) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.app.Activity.finish() java.io.File.File(java.lang.String) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) <unknown>.getLastLocation() android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) <unknown>.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() android.widget.TextView.getText() <unknown>.DisplayTime() android.view.KeyEvent.getRepeatCount() <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.requestWindowFeature(int) android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) <unknown>.isRecording() android.widget.Chronometer.setBase(long)"]}, {"user_sni": "rrtigga", "repo_sni": "rrtigga/GetDisciplined", "imports_t": ["android.text.Spannable android.widget.CheckBox android.app.Notification android.text.SpannableString android.view.View.OnClickListener android.content.Context android.os.Bundle android.content.DialogInterface android.widget.CompoundButton android.view.Menu com.triggertrap.seekarc.SeekArc android.view.MenuInflater java.util.ArrayList android.widget.SeekBar.OnSeekBarChangeListener java.util.Date android.app.PendingIntent android.graphics.Typeface android.content.SharedPreferences com.ibc.android.demo.appslist.app.HeartBeat android.widget.TextView android.net.Uri android.app.admin.DevicePolicyManager android.os.CountDownTimer android.app.AlarmManager android.widget.Toast android.content.Intent java.util.Map android.app.NotificationManager android.content.ComponentName android.content.pm.ActivityInfo android.widget.SeekBar android.view.MenuItem android.app.AlertDialog android.support.v7.app.ActionBarActivity android.view.View android.util.Log"], "email_sni": "rrtigga@ucdavis.edu", "contents_t": ["package com.spicycurryman.getdisciplined10.app;\n\nimport android.app.AlarmManager;\nimport android.app.AlertDialog;\nimport android.app.Notification;\nimport android.app.NotificationManager;\nimport android.app.PendingIntent;\nimport android.app.admin.DevicePolicyManager;\nimport android.content.ComponentName;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.content.pm.ActivityInfo;\nimport android.graphics.Typeface;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.support.v7.app.ActionBarActivity;\nimport android.text.Spannable;\nimport android.text.SpannableString;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.CheckBox;\nimport android.widget.CompoundButton;\nimport android.widget.SeekBar;\nimport android.widget.SeekBar.OnSeekBarChangeListener;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.ibc.android.demo.appslist.app.HeartBeat;\nimport com.triggertrap.seekarc.SeekArc;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.Map;\n\npublic class MainActivity extends ActionBarActivity {\n    private SeekArc mSeekArc;\n    private SeekBar mRotation;\n    private SeekBar mStartAngle;\n    private SeekBar mSweepAngle;\n    private SeekBar mArcWidth;\n    private SeekBar mProgressWidth;\n    private CheckBox mRoundedEdges;\n    private CheckBox mTouchInside;\n    private CheckBox mClockwise;\n    private TextView mSeekArcProgress;\n    private TextView mSeekArcMinuteProgress;\n\n\n\n    //will show the time\n    private TextView number_text;\n\n    private TextView minute_text;\n\n    private TextView little_hour_text2;\n    private TextView little_minute_text2;\n\n\n\n    CountDownTimer countDownTimer;          // built in android class CountDownTimer\n    long totalTimeCountInMilliseconds;\n    long timeBlinkInMilliseconds;           // start time of start blinking\n    boolean blink;\n\n\n    SharedPreferences startimerPreferences;\n    SharedPreferences endTimerPreferences;\n    SharedPreferences endservice;\n\n\n    ArrayList<String> packagezList= new ArrayList<String>();\n    SharedPreferences sharedPrefsapp;\n    Map<String, ?> allEntries;\n\n\n    long timerstarted; //this is when the user hit start timer.\n    long timerends; //this is the time when the time when the timer will end;\n    long reopened; //this is when time when the user reopens the application;\n\n\n\n    long newtotalTimeCountInMilliseconds;\n\n\n    // Consider showing drawable scrubber after pressing H M or S\n\n\n\n\n    CircleButton block_button1;\n    CircleButton start_timer;\n\n\n    int hourint, minuteint;\n\n\n    private static final int REQUEST_CODE = 0;\n    private DevicePolicyManager mDPM;\n    private ComponentName mAdminName;\n\n    public boolean onCreateOptionsMenu(Menu menu){\n        MenuInflater inflater = getMenuInflater();\n        inflater.inflate(R.menu.main, menu);\n        return true;\n    }\n\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n\n        switch (item.getItemId()) {\n            case R.id.setting_drop:\n                Intent sharingIntent = new Intent(android.content.Intent.ACTION_SEND);\n                sharingIntent.setType(\"text/plain\");\n                String shareBody = \"Hey you gotta check out this app I found, GetDisciplined! It really helps me stay focused! http://play.google.com/store/apps/details?id=com.spicycurryman.getdisciplined10.app \";\n                sharingIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, \"Check out GetDisciplined\");\n                sharingIntent.putExtra(android.content.Intent.EXTRA_TEXT, shareBody);\n                startActivity(Intent.createChooser(sharingIntent, \"Share via\"));\n                return true;\n            case R.id.follow_us_drop:\n                Intent followintent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://www.twitter.com/getdisciplined\"));\n                startActivity(followintent);\n                return true;\n            case R.id.feedback_drop:\n                Intent emailIntent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(\n                        \"mailto\",\"getdisciplinedapp@gmail.com\", null));\n                startActivity(Intent.createChooser(emailIntent, \"Send email...\"));\n                return true;\n\n\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n\n\n    @Override\n    protected void onResume()\n    {\n        super.onResume();\n        ApplicationCheck.activityResumed();\n\n\n\n    }\n\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\n        super.onCreate(savedInstanceState);\n        setTheme(R.style.Theme_Light_appalled);\n\n        setContentView(R.layout.merge);\n\n\n\n\n\n\n        // here is where the service is started.\n        //startService(new Intent(this, HeartBeat.class));\n\n/*\n        Intent iHeartBeatService = new Intent(this, HeartBeat.class);\n        PendingIntent piHeartBeatService = PendingIntent.getService(this, 0, iHeartBeatService, PendingIntent.FLAG_UPDATE_CURRENT);\n        AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);\n        alarmManager.cancel(piHeartBeatService);\n        alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), 300000, piHeartBeatService);\n*/\n\n\n        Intent ishintent = new Intent(this, HeartBeat.class);\n        PendingIntent pintent = PendingIntent.getService(this, 0, ishintent, 0);\n        AlarmManager alarm = (AlarmManager)getSystemService(Context.ALARM_SERVICE);\n        alarm.cancel(pintent);\n        alarm.setRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(),150000, pintent);\n        getApplicationContext().startService(ishintent);\n\n\n\n\n\n        //set views\n\n        start_timer = (CircleButton) findViewById(R.id.start_button);\n        number_text = (TextView) findViewById(R.id.hour_progress_number);\n        minute_text = (TextView) findViewById(R.id.minute_progress_number);\n\n\n        //getReferenceOfViews ();                         // get all views\n        setActionListeners ();\n\n        // This determine what the actual \"countdown\" time will be.\n        //totalTimeCountInMilliseconds = 60 * 1000;      // time count for 3 minutes = 180 seconds\n        //timeBlinkInMilliseconds = 30 * 1000;\n\n        //Make sure you find out why it appears after a whole 1 second after the app appears\n        SpannableString s = new SpannableString(\"GetDisciplined\");\n        s.setSpan(new TypefaceSpan(this, \"miso.otf\"), 0, s.length(),\n                Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n\n// Update the action bar title with the TypefaceSpan instance\n        android.support.v7.app.ActionBar actionBar = getSupportActionBar();\n        actionBar.setTitle(s);\n        // set the action bar in this activity as the home\n        actionBar.setHomeButtonEnabled(true);\n\n        //Listeners for the buttons\n        addListenerOnButton();\n\n\n\n        //Editing Button Text\n\n\n\n        number_text = (TextView)findViewById(R.id.hour_progress_number);\n        number_text.setTypeface(Typeface.createFromAsset(getAssets(), \"fonts/roboto-thin.ttf\"));\n\n        minute_text = (TextView)findViewById(R.id.minute_progress_number);\n        minute_text.setTypeface(Typeface.createFromAsset(getAssets(), \"fonts/roboto-thin.ttf\"));\n\n\n        little_hour_text2 = (TextView)findViewById(R.id.little_hour_text2);\n        little_hour_text2.setTypeface(Typeface.createFromAsset(getAssets(), \"fonts/roboto-thin.ttf\"));\n\n        little_minute_text2 = (TextView)findViewById(R.id.little_minute_text2);\n        little_minute_text2.setTypeface(Typeface.createFromAsset(getAssets(), \"fonts/roboto-thin.ttf\"));\n\n\n        mSeekArc = (SeekArc) findViewById(R.id.seekArc);\n\n\n//Here is the actual \"hour progress number\" aka the TextView that changes as the scrubber is dragged around\n        mSeekArcProgress = (TextView) findViewById(R.id.hour_progress_number);\n\n        mSeekArcMinuteProgress = (TextView) findViewById(R.id.minute_progress_number);\n\n\n        startimerPreferences = getPreferences(MODE_APPEND);\n\n        Date startDate = new Date(startimerPreferences.getLong(\"time\", 0));\n        timerstarted = startDate.getTime();\n\n\n        endTimerPreferences = getPreferences(MODE_APPEND);\n        Date endDate = new Date(endTimerPreferences.getLong(\"endtime\", 0));\n        timerends = endDate.getTime();\n\n\n        Date openagain = new Date(System.currentTimeMillis());\n        reopened = openagain.getTime();\n\n\n        //make textview selectable\n\n        View.OnClickListener clickListener = new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n\n                if((v.getId() == R.id.hour_progress_number)){\n                    number_text.setTextColor(getResources().getColor(R.color.black));\n                    little_hour_text2.setTextColor(getResources().getColor(R.color.black));\n\n\n\n\n\n                    minute_text.setTextColor(getResources().getColor(R.color.red_highlight));\n                    little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n\n\n\n\n\n                    //corresponding button logic should below here\n                    mSeekArc.setOnSeekArcChangeListener(new SeekArc.OnSeekArcChangeListener() {\n\n                        @Override\n                        public void onStopTrackingTouch(SeekArc seekArc) {\n                        }\n                        @Override\n                        public void onStartTrackingTouch(SeekArc seekArc) {\n                            number_text.setTextColor(getResources().getColor(R.color.black));\n                        }\n\n\n                        //This sets the actual string for the hours\n                        @Override\n                        public void onProgressChanged(SeekArc seekArc, int progress,\n                                                      boolean fromUser) {\n\n                            int progress_count = 0;\n\n                            for (int i=0;i<24;i=i+1)\n                            {\n\n                                if (progress ==120) {\n                                    mSeekArcProgress.setText(\"24\");\n\n                                }\n                                else if (progress == progress_count)\n                                {\n                                    mSeekArcProgress.setText(String.valueOf(String.format(\"%02d\",i)));\n                                }\n\n                                progress_count = progress_count + 5;\n\n                            }\n                        }\n                    });\n                } else if((v.getId() == R.id.minute_progress_number)){\n\n                    minute_text.setTextColor(getResources().getColor(R.color.black));\n                    little_minute_text2.setTextColor(getResources().getColor(R.color.black));\n\n\n\n                    number_text.setTextColor(getResources().getColor(R.color.red_highlight));\n                    little_hour_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n\n\n\n\n                    //corresponding button logic should below here\n\n                    mSeekArc.setOnSeekArcChangeListener(new SeekArc.OnSeekArcChangeListener() {\n\n\n                        @Override\n                        public void onStopTrackingTouch(SeekArc seekArc) {\n                        }\n                        @Override\n                        public void onStartTrackingTouch(SeekArc seekArc) {\n                            minute_text.setTextColor(getResources().getColor(R.color.black));\n                        }\n\n\n                        //This sets the actual string for the minutes\n                        @Override\n                        public void onProgressChanged(SeekArc seekArc, int progress,\n                                                      boolean fromUser) {\n                            int progress_count = 0;\n\n                            for (int i=0;i<120;i++)\n                            {\n\n                                if (progress ==120) {\n                                    mSeekArcMinuteProgress.setText(\"00\");\n\n\n\n\n                                }\n                                else if (progress == progress_count)\n                                {\n                                    mSeekArcMinuteProgress.setText(String.valueOf(String.format(\"%02d\",i)));\n                                }\n\n                                progress_count = progress_count + 2;\n\n\n                            }\n\n                        }\n                    });\n                }\n\n            }\n        };\n\n        findViewById(R.id.hour_progress_number).setOnClickListener(clickListener);\n        findViewById(R.id.minute_progress_number).setOnClickListener(clickListener);\n\n\n        findViewById(R.id.minute_progress_number).performClick();\n\n\n\n        mRotation = (SeekBar) findViewById(R.id.rotation);\n        mStartAngle = (SeekBar) findViewById(R.id.startAngle);\n        mSweepAngle  = (SeekBar) findViewById(R.id.sweepAngle);\n        mArcWidth = (SeekBar) findViewById(R.id.arcWidth);\n        mProgressWidth = (SeekBar) findViewById(R.id.progressWidth);\n        mRoundedEdges = (CheckBox) findViewById(R.id.roundedEdges);\n        mTouchInside = (CheckBox) findViewById(R.id.touchInside);\n        mClockwise = (CheckBox) findViewById(R.id.clockwise);\n\n        mRotation.setProgress(mSeekArc.getArcRotation());\n        mStartAngle.setProgress(mSeekArc.getStartAngle());\n        mSweepAngle.setProgress(mSeekArc.getSweepAngle());\n        mArcWidth.setProgress(mSeekArc.getArcWidth());\n        mProgressWidth.setProgress(mSeekArc.getProgressWidth());\n\n\n        mRotation.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n            @Override\n            public void onStopTrackingTouch(SeekBar arg0) {\n\n            }\n            @Override\n            public void onStartTrackingTouch(SeekBar arg0) {\n            }\n\n            @Override\n            public void onProgressChanged(SeekBar view, int progress, boolean fromUser) {\n                mSeekArc.setArcRotation(progress);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mStartAngle.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n            @Override\n            public void onStopTrackingTouch(SeekBar arg0) {\n\n            }\n            @Override\n            public void onStartTrackingTouch(SeekBar arg0) {\n            }\n\n            @Override\n            public void onProgressChanged(SeekBar view, int progress, boolean fromUser) {\n                mSeekArc.setStartAngle(progress);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mSweepAngle.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n            @Override\n            public void onStopTrackingTouch(SeekBar arg0) {\n\n            }\n            @Override\n            public void onStartTrackingTouch(SeekBar arg0) {\n            }\n\n            @Override\n            public void onProgressChanged(SeekBar view, int progress, boolean fromUser) {\n                mSeekArc.setSweepAngle(progress);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mArcWidth.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n            @Override\n            public void onStopTrackingTouch(SeekBar arg0) {\n\n            }\n            @Override\n            public void onStartTrackingTouch(SeekBar arg0) {\n            }\n\n            @Override\n            public void onProgressChanged(SeekBar view, int progress, boolean fromUser) {\n                mSeekArc.setArcWidth(progress);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mProgressWidth.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n            @Override\n            public void onStopTrackingTouch(SeekBar arg0) {\n\n            }\n            @Override\n            public void onStartTrackingTouch(SeekBar arg0) {\n            }\n\n            @Override\n            public void onProgressChanged(SeekBar view, int progress, boolean fromUser) {\n                mSeekArc.setProgressWidth(progress);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mRoundedEdges.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(CompoundButton buttonView,boolean isChecked) {\n                mSeekArc.setRoundedEdges(isChecked);\n                mSeekArc.invalidate();\n            }\n        });\n\n        mTouchInside.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(CompoundButton buttonView,boolean isChecked) {\n                mSeekArc.setTouchInSide(false);\n            }\n        });\n\n        mClockwise.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(CompoundButton buttonView,boolean isChecked) {\n                mSeekArc.setClockwise(isChecked);\n                mSeekArc.invalidate();\n            }\n        });\n\n\n        if(timerstarted > 0)\n        {\n            if(reopened <timerends){\n                //start countdown timer with new time.\n                //set countdowntime to timerends-reopen.\n\n                newtotalTimeCountInMilliseconds = timerends-reopened;\n\n\n                number_text.setTextColor(getResources().getColor(R.color.red_highlight));\n                little_hour_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n\n                minute_text.setTextColor(getResources().getColor(R.color.red_highlight));\n                little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n\n\n\n\n                // yo\n\n                number_text.setClickable(false);\n\n                minute_text.setClickable(false);\n\n\n\n\n\n\n                countDownTimer = new CountDownTimer(newtotalTimeCountInMilliseconds, 500) {\n                    // 500 means, onTick function will be called at every 500 milliseconds\n\n                    @Override\n                    public void onTick(long leftTimeInMilliseconds) {\n\n                        long seconds = leftTimeInMilliseconds / 1000;\n                        mSeekArc.setVisibility(View.INVISIBLE);\n                        start_timer.setVisibility(View.INVISIBLE);\n                        //block_button1.setVisibility(View.INVISIBLE);\n\n\n                        if (leftTimeInMilliseconds < timeBlinkInMilliseconds) {\n                            // textViewShowTime.setTextAppearance(getApplicationContext(), R.style.blinkText);\n                            // change the style of the textview .. giving a red alert style\n\n                            if (blink) {\n                                number_text.setVisibility(View.VISIBLE);\n                                minute_text.setVisibility(View.VISIBLE);\n\n\n                                // if blink is true, textview will be visible\n                            } else {\n                                number_text.setVisibility(View.INVISIBLE);\n                                minute_text.setVisibility(View.INVISIBLE);\n\n\n                            }\n\n                            blink = !blink;         // toggle the value of blink\n                        }\n\n                        minute_text.setText(String.format(\"%02d\", (seconds / 60) % 60));\n                        number_text.setText(String.format(\"%02d\", seconds / 3600));                     // format the textview to show the easily readable format\n                    }\n\n\n                    @Override\n                    public void onFinish() {\n                        // this function will be called when the timecount is finished\n                        //textViewShowTime.setText(\"Time up!\");\n                        number_text.setVisibility(View.VISIBLE);\n                        minute_text.setVisibility(View.VISIBLE);\n                        mSeekArc.setVisibility(View.VISIBLE);\n                        start_timer.setVisibility(View.VISIBLE);\n\n                        number_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                        minute_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                        little_hour_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                        little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                        number_text.setClickable(true);\n\n                        minute_text.setClickable(true);\n\n\n\n\n\n                    }\n\n                }.start();\n\n\n\n            }\n        }\n\n    }\n\n    private static final long TIME_INTERVAL = 2000; // # milliseconds, desired time passed between two back presses.\n    private long mBackPressed;\n\n    @Override\n    public void onBackPressed()\n    {\n        if (mBackPressed + TIME_INTERVAL > System.currentTimeMillis())\n        {\n            super.onBackPressed();\n            return;\n        }\n        else { Toast.makeText(getBaseContext(), \"Tap back button again to exit\", Toast.LENGTH_SHORT).show(); }\n\n        mBackPressed = System.currentTimeMillis();\n    }\n\n    public void addListenerOnButton() {\n\n        final Context context = this;\n\n        block_button1 = (CircleButton) findViewById(R.id.block_button);\n\n        block_button1.setOnClickListener(new OnClickListener() {\n\n            @Override\n            public void onClick(View arg0) {\n\n                Intent intent = new Intent(context, InstalledAppActivity.class);\n                startActivity(intent);\n\n            }\n\n        });\n\n    }\n\n    private void setActionListeners() {\n\n        number_text = (TextView) findViewById(R.id.hour_progress_number);\n        minute_text = (TextView) findViewById(R.id.minute_progress_number);\n\n        start_timer.setOnClickListener(new View.OnClickListener() {\n\n            @Override\n            public void onClick(View view) {\n\n                AlertDialog.Builder zeroerror = new AlertDialog.Builder(MainActivity.this)\n                        .setMessage(\"Dude, you didn't set a time! :P\")\n                        .setNegativeButton(\"Whoops! My bad!\", new DialogInterface.OnClickListener() {\n                            public void onClick(DialogInterface dialog, int which) {\n                                Log.d(\"AlertDialog\", \"Negative\");\n                                dialog.cancel();\n                            }\n                        });\n\n\n                AlertDialog alertzero = zeroerror.create();\n\n\n                AlertDialog.Builder noapp = new AlertDialog.Builder(MainActivity.this)\n                        .setMessage(\"Hey silly! You didn't select any apps to block!\")\n                        .setNegativeButton(\"Oh, silly me!\", new DialogInterface.OnClickListener() {\n                            public void onClick(DialogInterface dialog, int which) {\n                                Log.d(\"AlertDialog\", \"Negative\");\n                                dialog.cancel();\n                            }\n                        });\n\n\n                AlertDialog zeroapp = noapp.create();\n\n\n\n                hourint = Integer.valueOf(number_text.getText().toString());\n\n                minuteint = Integer.valueOf(minute_text.getText().toString());\n\n\n\n                AlertDialog.Builder timeset = new AlertDialog.Builder(MainActivity.this)\n\n\n                        .setMessage(\"Are you sure you want to block the selected apps for \"+ hourint +\" hour(s) and \"+ minuteint + \" minutes?!\")\n                        .setPositiveButton(\"Yeah man!\", new DialogInterface.OnClickListener() {\n\n\n\n                            public void onClick(DialogInterface dialog, int which) {\n\n                                number_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                minute_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                little_hour_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                number_text.setClickable(false);\n\n                                minute_text.setClickable(false);\n\n\n                                hourint = Integer.valueOf(number_text.getText().toString());\n\n                                minuteint = Integer.valueOf(minute_text.getText().toString());\n\n\n                                //Make sure it stays alive no matter what until stopservice is called when the timer runs out\n\n\n                                Date currenttime = new Date(System.currentTimeMillis());\n\n                                timerstarted = currenttime.getTime();\n                                startimerPreferences = getPreferences(MODE_APPEND);\n                                SharedPreferences.Editor starteditor = startimerPreferences.edit();\n                                starteditor.putLong(\"time\", timerstarted);\n                                starteditor.apply();\n\n\n                                Date endtime = new Date(System.currentTimeMillis());\n\n\n                                if ((((hourint * 60 * 60) + (minuteint * 60)  ) * 1000) > 0) {\n                                    timerends = endtime.getTime() + (((hourint * 60 * 60) + (minuteint * 60) ) * 1000);\n\n\n                                } else {\n                                    timerends = 0;\n                                }\n\n\n                                Log.e(\"This is the end time:  \", timerends + \"\");\n                                endTimerPreferences = getPreferences(MODE_APPEND);\n                                SharedPreferences.Editor endeditor = endTimerPreferences.edit();\n                                endeditor.putLong(\"endtime\", timerends);\n                                endeditor.apply();\n\n                                endservice = getApplicationContext().getSharedPreferences(\"endservice\", Context.MODE_PRIVATE);\n                                SharedPreferences.Editor serviceeditor = endservice.edit();\n                                serviceeditor.putLong(\"endservice\", timerstarted + (((hourint * 60 * 60) + (minuteint * 60) ) * 1000));\n                                Log.e(\"Check out this time:  \", timerends + \"\");\n\n                                serviceeditor.apply();\n\n\n                                totalTimeCountInMilliseconds = (((hourint * 60 * 60) + (minuteint * 60) ) * 1000);      // time count\n                                timeBlinkInMilliseconds = 30 * 1000;\n\n                                countDownTimer = new CountDownTimer(totalTimeCountInMilliseconds, 500) {\n                                    // 500 means, onTick function will be called at every 500 milliseconds\n\n                                    @Override\n                                    public void onTick(long leftTimeInMilliseconds) {\n\n                                        long seconds = leftTimeInMilliseconds / 1000;\n                                        mSeekArc.setVisibility(View.INVISIBLE);\n                                        start_timer.setVisibility(View.INVISIBLE);\n                                        //block_button1.setVisibility(View.INVISIBLE);\n\n\n                                        if (leftTimeInMilliseconds < timeBlinkInMilliseconds) {\n                                            // textViewShowTime.setTextAppearance(getApplicationContext(), R.style.blinkText);\n                                            // change the style of the textview .. giving a red alert style\n\n                                            if (blink) {\n                                                number_text.setVisibility(View.VISIBLE);\n                                                minute_text.setVisibility(View.VISIBLE);\n\n\n                                                // if blink is true, textview will be visible\n                                            } else {\n                                                number_text.setVisibility(View.INVISIBLE);\n                                                minute_text.setVisibility(View.INVISIBLE);\n\n\n                                            }\n\n                                            blink = !blink;         // toggle the value of blink\n                                        }\n\n                                        minute_text.setText(String.format(\"%02d\", (seconds / 60) % 60));\n                                        number_text.setText(String.format(\"%02d\", seconds / 3600));                     // format the textview to show the easily readable format\n                                    }\n\n\n                                    @Override\n                                    public void onFinish() {\n                                        number_text.setVisibility(View.VISIBLE);\n                                        minute_text.setVisibility(View.VISIBLE);\n                                        mSeekArc.setVisibility(View.VISIBLE);\n                                        start_timer.setVisibility(View.VISIBLE);\n\n\n                                        number_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                        minute_text.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                        little_hour_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                        little_minute_text2.setTextColor(getResources().getColor(R.color.red_highlight));\n\n                                        number_text.setClickable(true);\n\n                                        minute_text.setClickable(true);\n\n\n                                        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n                                        Notification myNotification = new Notification(R.drawable.ic_launcher, \"Time's up!\", System.currentTimeMillis());\n                                        Context context = getApplicationContext();\n                                        String notificationTitle = \"Apps are now unlocked!\";\n                                        String notificationText = \"Great job being productive! ;)\";\n                                        Intent myIntent = new Intent(MainActivity.this, MainActivity.class);\n                                        PendingIntent pendingIntent = PendingIntent.getActivity(MainActivity.this, 0,   myIntent, Intent.FILL_IN_ACTION);\n                                        myNotification.flags |= Notification.FLAG_AUTO_CANCEL;\n                                        myNotification.setLatestEventInfo(context, notificationTitle, notificationText, pendingIntent);\n                                        notificationManager.notify(1, myNotification);\n\n\n                                    }\n\n                                }.start();\n                            }\n                        });\n                timeset.setNegativeButton(\"Nope!\", new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int which) {\n                        Log.d(\"AlertDialog\", \"Negative\");\n                        dialog.cancel();\n                    }\n                });\n\n\n                AlertDialog timerright = timeset.create();\n\n                hourint = Integer.valueOf(number_text.getText().toString());\n\n                minuteint = Integer.valueOf(minute_text.getText().toString());\n\n\n\n\n                sharedPrefsapp = getApplicationContext().getSharedPreferences(\"appdb\", Context.MODE_PRIVATE);\n                allEntries= null;\n                allEntries = sharedPrefsapp.getAll();\n\n\n                for (Map.Entry<String, ?> entry : allEntries.entrySet()) {\n                    packagezList.add(entry.getKey());\n\n                }\n\n\n\n                if((((hourint * 60 * 60) + (minuteint * 60)  ) * 1000) == 0)\n                {\n                    //alertzero.show();\n                }\n\n                else if (packagezList.size() ==0){\n                    noapp.show();\n                }\n\n\n\n                else\n                {\n                    timerright.show();\n                }\n\n            }\n\n\n        });\n    }\n\n\n    @Override\n    protected void onPause() {\n        super.onPause();\n        ApplicationCheck.activityPaused();\n    }\n\n\n}\n"], "body_t": ["<empty>"], "date_tdt": "2015-07-07T08:49:56Z", "hash_sni": "884ebae03c8bee242d8b030637a9d30bfeb080e3", "name_sni": "app/src/main/java/com/spicycurryman/getdisciplined10/app/MainActivity.java", "patch_t": ["     SharedPreferences endservice;\n \n \n-    ArrayList<String> packagezList;\n+    ArrayList<String> packagezList= new ArrayList<String>();\n     SharedPreferences sharedPrefsapp;\n     Map<String, ?> allEntries;\n \n@@ -148,35 +148,7 @@ public class MainActivity extends ActionBarActivity {\n         ApplicationCheck.activityResumed();\n \n \n-        try\n-        {\n-            // Initiate DevicePolicyManager.\n-            mDPM = (DevicePolicyManager)getSystemService(Context.DEVICE_POLICY_SERVICE);\n-            // Set DeviceAdminDemo Receiver for active the component with different option\n-            mAdminName = new ComponentName(this, DeviceAdmin.class);\n-\n-            if (!mDPM.isAdminActive(mAdminName)) {\n-                // try to become active\n-                Intent intent = new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN);\n-                intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, mAdminName);\n-                intent.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION,\n-                        \"\\nIt's time to GetDisciplined! ;)\"+\n-                                \"\\n It\u2019s this simple: \\n\" +\n-                                \"1) Drag the red circle scrubber on the top to set the amount of time for how long you want the apps to be blocked for\\n\" +\n-                                \"(Press the hour time and drag the scrubber to set the time for hours and press the minute time and drag the scrubber to set the time for minutes)\\n\" +\n-                                \"2) Press the list button and check the distracting apps you want to block\\n\" +\n-                                \"3) Press the timer button to start the time\");\n-                startActivityForResult(intent, REQUEST_CODE);\n-            }\n-            else\n-            {\n-                // Already is a device administrator, can do security operations now.\n-                //mDPM.lockNow();\n-            }\n-        } catch (Exception e)\n-        {\n-            e.printStackTrace();\n-        }\n+\n     }\n \n \n@@ -191,35 +163,7 @@ public class MainActivity extends ActionBarActivity {\n \n \n \n-        try\n-        {\n-            // Initiate DevicePolicyManager.\n-            mDPM = (DevicePolicyManager)getSystemService(Context.DEVICE_POLICY_SERVICE);\n-            // Set DeviceAdminDemo Receiver for active the component with different option\n-            mAdminName = new ComponentName(this, DeviceAdmin.class);\n-\n-            if (!mDPM.isAdminActive(mAdminName)) {\n-                // try to become active\n-                Intent intent = new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN);\n-                intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, mAdminName);\n-                intent.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION,\n-                        \"\\nIt's time to GetDisciplined! ;)\"+\n-                                \"\\n It\u2019s this simple: \\n\" +\n-                                \"1) Drag the red circle scrubber on the top to set the amount of time for how long you want the apps to be blocked for\\n\" +\n-                                \"(Press the hour time and drag the scrubber to set the time for hours and press the minute time and drag the scrubber to set the time for minutes)\\n\" +\n-                                \"2) Press the list button and check the distracting apps you want to block\\n\" +\n-                                \"3) Press the timer button to start the time\");\n-                startActivityForResult(intent, REQUEST_CODE);\n-            }\n-            else\n-            {\n-                // Already is a device administrator, can do security operations now.\n-                //mDPM.lockNow();\n-            }\n-        } catch (Exception e)\n-        {\n-            e.printStackTrace();\n-        }\n+\n \n \n         // here is where the service is started.\n@@ -911,9 +855,7 @@ public class MainActivity extends ActionBarActivity {\n                 sharedPrefsapp = getApplicationContext().getSharedPreferences(\"appdb\", Context.MODE_PRIVATE);\n                 allEntries= null;\n                 allEntries = sharedPrefsapp.getAll();\n-                packagezList= null;\n \n-                packagezList = new ArrayList<String>();\n \n                 for (Map.Entry<String, ?> entry : allEntries.entrySet()) {\n                     packagezList.add(entry.getKey());\n@@ -924,7 +866,7 @@ public class MainActivity extends ActionBarActivity {\n \n                 if((((hourint * 60 * 60) + (minuteint * 60)  ) * 1000) == 0)\n                 {\n-                    alertzero.show();\n+                    //alertzero.show();\n                 }\n \n                 else if (packagezList.size() ==0){"], "score": 1.0, "methods_t": ["AlertDialog.Builder ArrayList, String CompoundButton.OnCheckedChangeListener CountDownTimer Date DialogInterface.OnClickListener Intent Notification OnClickListener OnSeekBarChangeListener SeekArc.OnSeekArcChangeListener SpannableString TypefaceSpan View.OnClickListener activityPaused activityResumed add addListenerOnButton apply cancel create createChooser createFromAsset currentTimeMillis d e edit entrySet findViewById format fromParts getActivity getAll getApplicationContext getArcRotation getArcWidth getAssets getBaseContext getColor getId getItemId getKey getLong getMenuInflater getPreferences getProgressWidth getResources getService getSharedPreferences getStartAngle getSupportActionBar getSweepAngle getSystemService getText getTime inflate invalidate length makeText notify parse performClick putExtra putLong setActionListeners setArcRotation setArcWidth setClickable setClockwise setContentView setHomeButtonEnabled setLatestEventInfo setMessage setNegativeButton setOnCheckedChangeListener setOnClickListener setOnSeekArcChangeListener setOnSeekBarChangeListener setPositiveButton setProgress setProgressWidth setRepeating setRequestedOrientation setRoundedEdges setSpan setStartAngle setSweepAngle setText setTextColor setTheme setTitle setTouchInSide setType setTypeface setVisibility show size start startActivity startService toString valueOf"], "_version_": 1526749651873562624, "subject_t": ["Fixed packagelist errors with nullpointer exception arraylist, works for android L, changed to 15000 ms restart instead of 5000ms"], "comments_t": ["// Update the action bar title with the TypefaceSpan instance         //make textview selectable                             blink = !blink;         // toggle the value of blink         //Listeners for the buttons         //set views                                     // 500 means, onTick function will be called at every 500 milliseconds                 //set countdowntime to timerends-reopen.     private static final long TIME_INTERVAL = 2000; // # milliseconds, desired time passed between two back presses.                             // change the style of the textview .. giving a red alert style                 // yo                     // 500 means, onTick function will be called at every 500 milliseconds         //Editing Button Text                                             // textViewShowTime.setTextAppearance(getApplicationContext(), R.style.blinkText);         //timeBlinkInMilliseconds = 30 * 1000;                                             blink = !blink;         // toggle the value of blink                 //start countdown timer with new time.     long timerends; //this is the time when the time when the timer will end;                                 totalTimeCountInMilliseconds = (((hourint * 60 * 60) + (minuteint * 60) ) * 1000);      // time count                                             // change the style of the textview .. giving a red alert style         // here is where the service is started.     CountDownTimer countDownTimer;          // built in android class CountDownTimer     // Consider showing drawable scrubber after pressing H M or S     long reopened; //this is when time when the user reopens the application;                                         //block_button1.setVisibility(View.INVISIBLE);                     //alertzero.show();                         // this function will be called when the timecount is finished         //Make sure you find out why it appears after a whole 1 second after the app appears                     //corresponding button logic should below here                             // textViewShowTime.setTextAppearance(getApplicationContext(), R.style.blinkText);                         //This sets the actual string for the hours         //totalTimeCountInMilliseconds = 60 * 1000;      // time count for 3 minutes = 180 seconds     //will show the time     long timeBlinkInMilliseconds;           // start time of start blinking         //getReferenceOfViews ();                         // get all views         // set the action bar in this activity as the home                                 // if blink is true, textview will be visible                         //This sets the actual string for the minutes /*\nIntent iHeartBeatService = new Intent(this, HeartBeat.class);\nPendingIntent piHeartBeatService = PendingIntent.getService(this, 0, iHeartBeatService, PendingIntent.FLAG_UPDATE_CURRENT);\nAlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);\nalarmManager.cancel(piHeartBeatService);\nalarmManager.setRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), 300000, piHeartBeatService);\n*/\n                         number_text.setText(String.format(\"%02d\", seconds / 3600));                     // format the textview to show the easily readable format         //startService(new Intent(this, HeartBeat.class));                                                 // if blink is true, textview will be visible                                 //Make sure it stays alive no matter what until stopservice is called when the timer runs out                         //textViewShowTime.setText(\"Time up!\");     long timerstarted; //this is when the user hit start timer.         // This determine what the actual \"countdown\" time will be. //Here is the actual \"hour progress number\" aka the TextView that changes as the scrubber is dragged around                         //block_button1.setVisibility(View.INVISIBLE);                                         number_text.setText(String.format(\"%02d\", seconds / 3600));                     // format the textview to show the easily readable format"], "parents_ss": ["99e0b7c02018eb745bcf29c594508815c69082ea"], "id": "rrtigga/GetDisciplined\u0000884ebae03c8bee242d8b030637a9d30bfeb080e3\u0000app/src/main/java/com/spicycurryman/getdisciplined10/app/MainActivity.java", "callsites_cs": "android.os.CountDownTimer.start()#<unknown>.setContentView(<unknown>)#android.content.SharedPreferences.edit()#android.view.View.setVisibility(int)#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setTextColor(<unknown>)#java.lang.CharSequence.toString()#<unknown>.getResources()#.OnSeekBarChangeListener()#<unknown>.findViewById(<unknown>)#java.util.Date.getTime()#android.view.View.setClickable(boolean)#<unknown>.SeekArc.OnSeekArcChangeListener()#<unknown>.activityPaused()#<unknown>.getSystemService(java.lang.String)#android.widget.TextView.setTextColor(<unknown>)#<unknown>.getApplicationContext()#android.widget.TextView.setTextColor(<unknown>)#<unknown>.getSystemService(java.lang.String)#android.content.SharedPreferences.Editor.putLong(java.lang.String, long)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.AlarmManager.cancel(android.app.PendingIntent)#<unknown>.setVisibility(int)#<unknown>.getArcWidth()#android.widget.TextView.setText(<unknown>)#android.widget.ProgressBar.setProgress(<unknown>)#android.graphics.Typeface.createFromAsset(<unknown>, java.lang.String)#<unknown>.getAssets()#android.widget.TextView.getText()#android.widget.ProgressBar.setProgress(<unknown>)#<unknown>.getPreferences(<unknown>)#android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, )#android.view.View.setVisibility(int)#android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, )#android.widget.TextView.setText(<unknown>)#android.widget.ProgressBar.setProgress(<unknown>)#java.lang.System.currentTimeMillis()#<unknown>.setOnSeekArcChangeListener()#<unknown>.getSharedPreferences(java.lang.String, int)#android.widget.TextView.setTextColor(<unknown>)#.CountDownTimer(long, int)#<unknown>.getProgressWidth()#<unknown>.setVisibility(int)#android.widget.TextView.setText(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setClickable(boolean)#<unknown>.getPreferences(<unknown>)#android.content.SharedPreferences.Editor.apply()#java.lang.System.currentTimeMillis()#<unknown>.findViewById(<unknown>)#<unknown>.setTouchInSide(boolean)#.CompoundButton.OnCheckedChangeListener()#<unknown>.startActivity(android.content.Intent)#<unknown>.startActivity(android.content.Intent)#<unknown>.findViewById(<unknown>)#<unknown>.setOnSeekArcChangeListener()#<unknown>.findViewById(<unknown>)#android.text.SpannableString.SpannableString(java.lang.String)#<unknown>.getResources()#android.app.AlertDialog.Builder.create()#<unknown>.setTheme(<unknown>)#<unknown>.findViewById(<unknown>)#android.content.Intent.Intent(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class)#<unknown>.getColor(<unknown>)#android.content.Intent.createChooser(android.content.Intent, java.lang.String)#java.util.Date.Date(long)#android.content.SharedPreferences.Editor.apply()#android.app.AlertDialog.Builder.setMessage(java.lang.String)#<unknown>.setVisibility(int)#<unknown>.setVisibility(int)#java.util.ArrayList<java.lang.String>.ArrayList, String()#<unknown>.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#<unknown>.setSweepAngle(int)#android.app.PendingIntent.getService(com.spicycurryman.getdisciplined10.app.MainActivity, int, android.content.Intent, int)#android.widget.SeekBar.setOnSeekBarChangeListener()#android.view.View.setVisibility(int)#<unknown>.getColor(<unknown>)#<unknown>.findViewById(<unknown>)#<unknown>.setProgressWidth(int)#android.widget.TextView.setTextColor(<unknown>)#<unknown>.getApplicationContext()#android.view.View.setVisibility(int)#<unknown>.setVisibility(int)#<unknown>.findViewById(<unknown>)#java.util.Map.Entry<java.lang.String,>.getKey()#android.view.View.setVisibility(int)#java.util.Date.getTime()#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setTypeface(<unknown>)#java.util.Date.Date(long)#android.widget.TextView.setTextColor(<unknown>)#java.lang.String.format(java.lang.String, long)#android.widget.Toast.makeText(<unknown>, java.lang.String, int)#.OnClickListener()#.View.OnClickListener()#<unknown>.setVisibility(int)#java.lang.Integer.valueOf(java.lang.String)#android.content.SharedPreferences.getAll()#android.widget.CompoundButton.setOnCheckedChangeListener()#android.widget.TextView.setTextColor(<unknown>)#<unknown>.getColor(<unknown>)#android.widget.SeekBar.setOnSeekBarChangeListener()#<unknown>.setTitle(android.text.SpannableString)#android.view.View.setVisibility(int)#android.widget.TextView.setTextColor(<unknown>)#android.content.Intent.Intent(java.lang.String, android.net.Uri)#android.widget.TextView.setTypeface(<unknown>)#<unknown>.setArcWidth(int)#java.util.Date.getTime()#android.content.SharedPreferences.getLong(java.lang.String, int)#android.view.View.getId()#<unknown>.getSupportActionBar()#android.content.SharedPreferences.getLong(java.lang.String, int)#android.os.CountDownTimer.start()#android.widget.SeekBar.setOnSeekBarChangeListener()#android.view.View.setVisibility(int)#java.util.Map<java.lang.String,>.entrySet()#android.app.AlertDialog.Builder.AlertDialog.Builder(com.spicycurryman.getdisciplined10.app.MainActivity)#<unknown>.startActivity(android.content.Intent)#android.app.Dialog.show()#<unknown>.findViewById(<unknown>)#android.widget.TextView.getText()#android.app.Notification.Notification(<unknown>, java.lang.String, long)#<unknown>.getSharedPreferences(java.lang.String, int)#android.widget.TextView.getText()#<unknown>.getColor(<unknown>)#<unknown>.getStartAngle()#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setTextColor(<unknown>)#<unknown>.setOnClickListener(android.view.View.OnClickListener)#java.lang.String.format(java.lang.String, long)#android.widget.SeekBar.setOnSeekBarChangeListener()#android.widget.TextView.setText(<unknown>)#android.content.Intent.putExtra(java.lang.String, java.lang.String)#android.widget.TextView.setTextColor(<unknown>)#android.content.Intent.putExtra(java.lang.String, java.lang.String)#android.content.SharedPreferences.Editor.putLong(java.lang.String, long)#android.view.MenuInflater.inflate(<unknown>, android.view.Menu)#android.widget.TextView.getText()#android.widget.TextView.setTextColor(<unknown>)#<unknown>.setOnClickListener(android.view.View.OnClickListener)#android.content.SharedPreferences.edit()#android.content.DialogInterface.cancel()#<unknown>.getApplicationContext()#<unknown>.TypefaceSpan(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.String)#android.content.Intent.Intent(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class)#android.widget.ProgressBar.setProgress(<unknown>)#android.view.View.setClickable(boolean)#android.content.Intent.Intent(java.lang.String, android.net.Uri)#<unknown>.findViewById(<unknown>)#android.view.View.setClickable(boolean)#java.lang.String.format(java.lang.String, int)#<unknown>.getResources()#<unknown>.getResources()#android.widget.TextView.setTextColor(<unknown>)#<unknown>.setStartAngle(int)#java.util.Date.getTime()#.View.OnClickListener()#.DialogInterface.OnClickListener()#java.lang.String.format(java.lang.String, long)#<unknown>.getBaseContext()#<unknown>.getMenuInflater()#android.widget.TextView.setTextColor(<unknown>)#android.content.Intent.setType(java.lang.String)#android.widget.TextView.setText(<unknown>)#<unknown>.getResources()#com.spicycurryman.getdisciplined10.app.MainActivity.addListenerOnButton()#<unknown>.getArcRotation()#android.view.View.setClickable(boolean)#android.app.AlertDialog.Builder.setPositiveButton(java.lang.String, )#<unknown>.findViewById(<unknown>)#<unknown>.findViewById(<unknown>)#<unknown>.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setClickable(boolean)#android.content.Intent.Intent(android.content.Context, java.lang.Class)#android.widget.TextView.setTextColor(<unknown>)#android.text.SpannableStringInternal.length()#<unknown>.getColor(<unknown>)#java.util.Date.getTime()#android.view.View.setClickable(boolean)#android.widget.ProgressBar.setProgress(<unknown>)#<unknown>.startService(android.content.Intent)#android.widget.TextView.setTextColor(<unknown>)#java.util.Date.Date(long)#<unknown>.setRoundedEdges(boolean)#<unknown>.getResources()#java.lang.CharSequence.toString()#android.widget.TextView.setText(java.lang.String)#<unknown>.setOnClickListener()#java.lang.CharSequence.toString()#android.content.Intent.Intent(java.lang.String)#android.widget.CompoundButton.setOnCheckedChangeListener()#android.app.AlertDialog.Builder.show()#android.app.NotificationManager.notify(int, android.app.Notification)#android.widget.TextView.setTextColor(<unknown>)#android.widget.CompoundButton.setOnCheckedChangeListener()#<unknown>.invalidate()#<unknown>.setVisibility(int)#<unknown>.show()#.CountDownTimer(long, int)#android.net.Uri.fromParts(java.lang.String, java.lang.String, null)#android.app.AlertDialog.Builder.create()#android.net.Uri.parse(java.lang.String)#android.widget.TextView.setTypeface(<unknown>)#java.lang.CharSequence.toString()#<unknown>.getColor(<unknown>)#android.content.Intent.createChooser(android.content.Intent, java.lang.String)#<unknown>.setOnClickListener()#android.content.SharedPreferences.edit()#android.widget.TextView.setTextColor(<unknown>)#<unknown>.setHomeButtonEnabled(boolean)#<unknown>.activityResumed()#android.app.PendingIntent.getActivity(com.spicycurryman.getdisciplined10.app.MainActivity, int, android.content.Intent, int)#android.util.Log.e(java.lang.String, java.lang.String)#<unknown>.findViewById(<unknown>)#java.util.Date.Date(long)#<unknown>.performClick()#android.widget.TextView.setTextColor(<unknown>)#android.app.AlertDialog.Builder.create()#<unknown>.getApplicationContext()#<unknown>.setClockwise(boolean)#java.lang.Integer.valueOf(java.lang.String)#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setText(<unknown>)#<unknown>.setRequestedOrientation(int)#java.lang.System.currentTimeMillis()#android.app.Notification.setLatestEventInfo(android.content.Context, java.lang.String, java.lang.String, android.app.PendingIntent)#<unknown>.getSweepAngle()#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setTextColor(<unknown>)#android.content.SharedPreferences.Editor.putLong(java.lang.String, long)#<unknown>.findViewById(<unknown>)#java.lang.Integer.valueOf(java.lang.String)#java.util.ArrayList<java.lang.String>.size()#android.content.SharedPreferences.Editor.apply()#android.app.AlarmManager.setRepeating(int, long, int, android.app.PendingIntent)#<unknown>.invalidate()#java.lang.System.currentTimeMillis()#android.app.AlertDialog.Builder.setMessage(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.view.View.setClickable(boolean)#<unknown>.setArcRotation(int)#java.lang.String.valueOf(<unknown>)#android.widget.TextView.setTextColor(<unknown>)#android.widget.TextView.setTypeface(<unknown>)#<unknown>.getColor(<unknown>)#java.lang.String.format(java.lang.String, long)#android.util.Log.e(java.lang.String, java.lang.String)#<unknown>.findViewById(<unknown>)#<unknown>.findViewById(<unknown>)#android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, )#android.widget.TextView.setTextColor(<unknown>)#android.text.SpannableString.setSpan(com.spicycurryman.getdisciplined10.app.TypefaceSpan, int, int, int)#android.view.MenuItem.getItemId()#com.spicycurryman.getdisciplined10.app.MainActivity.setActionListeners()#android.app.AlertDialog.Builder.setMessage(java.lang.String)#java.lang.Integer.valueOf(java.lang.String)#android.util.Log.d(java.lang.String, java.lang.String)#<unknown>.findViewById(<unknown>)#<unknown>.setVisibility(int)#android.widget.SeekBar.setOnSeekBarChangeListener()#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)", "callsites_t": ["android.os.CountDownTimer.start() <unknown>.setContentView(<unknown>) android.content.SharedPreferences.edit() android.view.View.setVisibility(int) android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setTextColor(<unknown>) java.lang.CharSequence.toString() <unknown>.getResources() .OnSeekBarChangeListener() <unknown>.findViewById(<unknown>) java.util.Date.getTime() android.view.View.setClickable(boolean) <unknown>.SeekArc.OnSeekArcChangeListener() <unknown>.activityPaused() <unknown>.getSystemService(java.lang.String) android.widget.TextView.setTextColor(<unknown>) <unknown>.getApplicationContext() android.widget.TextView.setTextColor(<unknown>) <unknown>.getSystemService(java.lang.String) android.content.SharedPreferences.Editor.putLong(java.lang.String, long) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.AlarmManager.cancel(android.app.PendingIntent) <unknown>.setVisibility(int) <unknown>.getArcWidth() android.widget.TextView.setText(<unknown>) android.widget.ProgressBar.setProgress(<unknown>) android.graphics.Typeface.createFromAsset(<unknown>, java.lang.String) <unknown>.getAssets() android.widget.TextView.getText() android.widget.ProgressBar.setProgress(<unknown>) <unknown>.getPreferences(<unknown>) android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, ) android.view.View.setVisibility(int) android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, ) android.widget.TextView.setText(<unknown>) android.widget.ProgressBar.setProgress(<unknown>) java.lang.System.currentTimeMillis() <unknown>.setOnSeekArcChangeListener() <unknown>.getSharedPreferences(java.lang.String, int) android.widget.TextView.setTextColor(<unknown>) .CountDownTimer(long, int) <unknown>.getProgressWidth() <unknown>.setVisibility(int) android.widget.TextView.setText(<unknown>) android.view.View.setVisibility(int) android.view.View.setClickable(boolean) <unknown>.getPreferences(<unknown>) android.content.SharedPreferences.Editor.apply() java.lang.System.currentTimeMillis() <unknown>.findViewById(<unknown>) <unknown>.setTouchInSide(boolean) .CompoundButton.OnCheckedChangeListener() <unknown>.startActivity(android.content.Intent) <unknown>.startActivity(android.content.Intent) <unknown>.findViewById(<unknown>) <unknown>.setOnSeekArcChangeListener() <unknown>.findViewById(<unknown>) android.text.SpannableString.SpannableString(java.lang.String) <unknown>.getResources() android.app.AlertDialog.Builder.create() <unknown>.setTheme(<unknown>) <unknown>.findViewById(<unknown>) android.content.Intent.Intent(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class) <unknown>.getColor(<unknown>) android.content.Intent.createChooser(android.content.Intent, java.lang.String) java.util.Date.Date(long) android.content.SharedPreferences.Editor.apply() android.app.AlertDialog.Builder.setMessage(java.lang.String) <unknown>.setVisibility(int) <unknown>.setVisibility(int) java.util.ArrayList<java.lang.String>.ArrayList, String() <unknown>.startActivity(android.content.Intent) android.view.View.setVisibility(int) <unknown>.setSweepAngle(int) android.app.PendingIntent.getService(com.spicycurryman.getdisciplined10.app.MainActivity, int, android.content.Intent, int) android.widget.SeekBar.setOnSeekBarChangeListener() android.view.View.setVisibility(int) <unknown>.getColor(<unknown>) <unknown>.findViewById(<unknown>) <unknown>.setProgressWidth(int) android.widget.TextView.setTextColor(<unknown>) <unknown>.getApplicationContext() android.view.View.setVisibility(int) <unknown>.setVisibility(int) <unknown>.findViewById(<unknown>) java.util.Map.Entry<java.lang.String,>.getKey() android.view.View.setVisibility(int) java.util.Date.getTime() android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setTypeface(<unknown>) java.util.Date.Date(long) android.widget.TextView.setTextColor(<unknown>) java.lang.String.format(java.lang.String, long) android.widget.Toast.makeText(<unknown>, java.lang.String, int) .OnClickListener() .View.OnClickListener() <unknown>.setVisibility(int) java.lang.Integer.valueOf(java.lang.String) android.content.SharedPreferences.getAll() android.widget.CompoundButton.setOnCheckedChangeListener() android.widget.TextView.setTextColor(<unknown>) <unknown>.getColor(<unknown>) android.widget.SeekBar.setOnSeekBarChangeListener() <unknown>.setTitle(android.text.SpannableString) android.view.View.setVisibility(int) android.widget.TextView.setTextColor(<unknown>) android.content.Intent.Intent(java.lang.String, android.net.Uri) android.widget.TextView.setTypeface(<unknown>) <unknown>.setArcWidth(int) java.util.Date.getTime() android.content.SharedPreferences.getLong(java.lang.String, int) android.view.View.getId() <unknown>.getSupportActionBar() android.content.SharedPreferences.getLong(java.lang.String, int) android.os.CountDownTimer.start() android.widget.SeekBar.setOnSeekBarChangeListener() android.view.View.setVisibility(int) java.util.Map<java.lang.String,>.entrySet() android.app.AlertDialog.Builder.AlertDialog.Builder(com.spicycurryman.getdisciplined10.app.MainActivity) <unknown>.startActivity(android.content.Intent) android.app.Dialog.show() <unknown>.findViewById(<unknown>) android.widget.TextView.getText() android.app.Notification.Notification(<unknown>, java.lang.String, long) <unknown>.getSharedPreferences(java.lang.String, int) android.widget.TextView.getText() <unknown>.getColor(<unknown>) <unknown>.getStartAngle() android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setTextColor(<unknown>) <unknown>.setOnClickListener(android.view.View.OnClickListener) java.lang.String.format(java.lang.String, long) android.widget.SeekBar.setOnSeekBarChangeListener() android.widget.TextView.setText(<unknown>) android.content.Intent.putExtra(java.lang.String, java.lang.String) android.widget.TextView.setTextColor(<unknown>) android.content.Intent.putExtra(java.lang.String, java.lang.String) android.content.SharedPreferences.Editor.putLong(java.lang.String, long) android.view.MenuInflater.inflate(<unknown>, android.view.Menu) android.widget.TextView.getText() android.widget.TextView.setTextColor(<unknown>) <unknown>.setOnClickListener(android.view.View.OnClickListener) android.content.SharedPreferences.edit() android.content.DialogInterface.cancel() <unknown>.getApplicationContext() <unknown>.TypefaceSpan(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.String) android.content.Intent.Intent(com.spicycurryman.getdisciplined10.app.MainActivity, java.lang.Class) android.widget.ProgressBar.setProgress(<unknown>) android.view.View.setClickable(boolean) android.content.Intent.Intent(java.lang.String, android.net.Uri) <unknown>.findViewById(<unknown>) android.view.View.setClickable(boolean) java.lang.String.format(java.lang.String, int) <unknown>.getResources() <unknown>.getResources() android.widget.TextView.setTextColor(<unknown>) <unknown>.setStartAngle(int) java.util.Date.getTime() .View.OnClickListener() .DialogInterface.OnClickListener() java.lang.String.format(java.lang.String, long) <unknown>.getBaseContext() <unknown>.getMenuInflater() android.widget.TextView.setTextColor(<unknown>) android.content.Intent.setType(java.lang.String) android.widget.TextView.setText(<unknown>) <unknown>.getResources() com.spicycurryman.getdisciplined10.app.MainActivity.addListenerOnButton() <unknown>.getArcRotation() android.view.View.setClickable(boolean) android.app.AlertDialog.Builder.setPositiveButton(java.lang.String, ) <unknown>.findViewById(<unknown>) <unknown>.findViewById(<unknown>) <unknown>.findViewById(<unknown>) android.view.View.setVisibility(int) android.view.View.setClickable(boolean) android.content.Intent.Intent(android.content.Context, java.lang.Class) android.widget.TextView.setTextColor(<unknown>) android.text.SpannableStringInternal.length() <unknown>.getColor(<unknown>) java.util.Date.getTime() android.view.View.setClickable(boolean) android.widget.ProgressBar.setProgress(<unknown>) <unknown>.startService(android.content.Intent) android.widget.TextView.setTextColor(<unknown>) java.util.Date.Date(long) <unknown>.setRoundedEdges(boolean) <unknown>.getResources() java.lang.CharSequence.toString() android.widget.TextView.setText(java.lang.String) <unknown>.setOnClickListener() java.lang.CharSequence.toString() android.content.Intent.Intent(java.lang.String) android.widget.CompoundButton.setOnCheckedChangeListener() android.app.AlertDialog.Builder.show() android.app.NotificationManager.notify(int, android.app.Notification) android.widget.TextView.setTextColor(<unknown>) android.widget.CompoundButton.setOnCheckedChangeListener() <unknown>.invalidate() <unknown>.setVisibility(int) <unknown>.show() .CountDownTimer(long, int) android.net.Uri.fromParts(java.lang.String, java.lang.String, null) android.app.AlertDialog.Builder.create() android.net.Uri.parse(java.lang.String) android.widget.TextView.setTypeface(<unknown>) java.lang.CharSequence.toString() <unknown>.getColor(<unknown>) android.content.Intent.createChooser(android.content.Intent, java.lang.String) <unknown>.setOnClickListener() android.content.SharedPreferences.edit() android.widget.TextView.setTextColor(<unknown>) <unknown>.setHomeButtonEnabled(boolean) <unknown>.activityResumed() android.app.PendingIntent.getActivity(com.spicycurryman.getdisciplined10.app.MainActivity, int, android.content.Intent, int) android.util.Log.e(java.lang.String, java.lang.String) <unknown>.findViewById(<unknown>) java.util.Date.Date(long) <unknown>.performClick() android.widget.TextView.setTextColor(<unknown>) android.app.AlertDialog.Builder.create() <unknown>.getApplicationContext() <unknown>.setClockwise(boolean) java.lang.Integer.valueOf(java.lang.String) android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setText(<unknown>) <unknown>.setRequestedOrientation(int) java.lang.System.currentTimeMillis() android.app.Notification.setLatestEventInfo(android.content.Context, java.lang.String, java.lang.String, android.app.PendingIntent) <unknown>.getSweepAngle() android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setTextColor(<unknown>) android.content.SharedPreferences.Editor.putLong(java.lang.String, long) <unknown>.findViewById(<unknown>) java.lang.Integer.valueOf(java.lang.String) java.util.ArrayList<java.lang.String>.size() android.content.SharedPreferences.Editor.apply() android.app.AlarmManager.setRepeating(int, long, int, android.app.PendingIntent) <unknown>.invalidate() java.lang.System.currentTimeMillis() android.app.AlertDialog.Builder.setMessage(java.lang.String) android.widget.TextView.setText(java.lang.String) android.view.View.setClickable(boolean) <unknown>.setArcRotation(int) java.lang.String.valueOf(<unknown>) android.widget.TextView.setTextColor(<unknown>) android.widget.TextView.setTypeface(<unknown>) <unknown>.getColor(<unknown>) java.lang.String.format(java.lang.String, long) android.util.Log.e(java.lang.String, java.lang.String) <unknown>.findViewById(<unknown>) <unknown>.findViewById(<unknown>) android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, ) android.widget.TextView.setTextColor(<unknown>) android.text.SpannableString.setSpan(com.spicycurryman.getdisciplined10.app.TypefaceSpan, int, int, int) android.view.MenuItem.getItemId() com.spicycurryman.getdisciplined10.app.MainActivity.setActionListeners() android.app.AlertDialog.Builder.setMessage(java.lang.String) java.lang.Integer.valueOf(java.lang.String) android.util.Log.d(java.lang.String, java.lang.String) <unknown>.findViewById(<unknown>) <unknown>.setVisibility(int) android.widget.SeekBar.setOnSeekBarChangeListener() android.view.View.setVisibility(int) android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener com.vinsol.expensetracker.utils.DisplayDate android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.StringProcessing com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayDate;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\nimport com.vinsol.expensetracker.utils.StringProcessing;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\tprivate Boolean isChanged = false;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\")) {\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry)) || mEditList.get(5).equals(getString(R.string.unknown))){\n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ****** ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio  ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\tisChanged = true;\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif(mRecordingHelper != null)\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\t\n\t\t\tif(intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\t\tIntent mIntent = new Intent(this, ShowTextActivity.class);\n\t\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t\tBundle tempBundle = new Bundle();\n\t\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\t\tmEditList = new ArrayList<String>();\n\t\t\t\tmEditList.addAll(listOnResult);\n\t\t\t\tmIntent.putExtra(\"textShowBundle\", tempBundle);\n\t\t\t\tsetResult(Activity.RESULT_CANCELED, mIntent);\n\t\t\t}\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, \"\");\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,mDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\t\t ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\t\n\t\t\n\t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tBundle mToHighLight = new Bundle();\n\t\t\tmToHighLight.putString(\"toHighLight\", _list.get(DatabaseAdapter.KEY_ID));\n\t\t\tintentExpenseListing.putExtras(mToHighLight);\n\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t} else {\n\t\t\t\n\t\t\tIntent mIntent = new Intent(this, ShowVoiceActivity.class);\n\t\t\tBundle tempBundle = new Bundle();\n\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\tlistOnResult.add(mEditList.get(0));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_TAG));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_AMOUNT));\n\t\t\tif(listOnResult.get(2) == null || listOnResult.get(2) == \"\"){\n\t\t\t\tlistOnResult.set(2, \"?\");\n\t\t\t}\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n\t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDateDate(_list.get(DatabaseAdapter.KEY_DATE_TIME)));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(3));\n\t\t\t}\t\t\t\t\n\t\t\tif((!mEditList.get(1).equals(listOnResult.get(1))) || (!mEditList.get(2).equals(new StringProcessing().getStringDoubleDecimal(listOnResult.get(2)))) || isChanged ) {\n\t\t\t\tShowTextActivity.favID = null;\n\t\t\t\tHashMap<String, String> listForFav = new HashMap<String, String>();\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_FAVORITE, \"\");\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_ID, mEditList.get(0));\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.editDatabase(listForFav);\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t} else if(ShowVoiceActivity.favID == null) {\n\t\t\t\t\tlistOnResult.add(mEditList.get(4));\n\t\t\t\t}\n\t\t\t\telse { \n\t\t\t\t\tlistOnResult.add(ShowVoiceActivity.favID);\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(5));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n\t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(6));\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(7));\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList.addAll(listOnResult);\n\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\tmIntent.putExtra(\"voiceShowBundle\", tempBundle);\n\t\t\tsetResult(Activity.RESULT_OK, mIntent);\n\t\t}\n\t\tfinish();\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-13T10:30:04Z", "hash_sni": "4c263c85c19e7c3d163954d848a24b65df77ec02", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n \t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n \t\t} else {\n-\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n+\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, \"\");\n \t\t}\n \t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n \t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n@@ -418,6 +418,9 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\tlistOnResult.add(mEditList.get(0));\n \t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_TAG));\n \t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_AMOUNT));\n+\t\t\tif(listOnResult.get(2) == null || listOnResult.get(2) == \"\"){\n+\t\t\t\tlistOnResult.set(2, \"?\");\n+\t\t\t}\n \t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n \t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n \t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay Bundle DatabaseAdapter DateHandler DateHelper DisplayDate DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper StringProcessing add addAll addFlags canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLocationDate getLocationDateDate getLong getPlayBackTime getRepeatCount getString getStringArrayList getStringDoubleDecimal getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put putExtra putExtras putString putStringArrayList saveEntry set setBase setClickListeners setContentView setFirstDayOfWeek setGraphicsVoice setOnChronometerTickListener setOnClickListener setResult setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim"], "_version_": 1526749724716040192, "subject_t": ["Removed Bug"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// ////// ******** Starts Recording each time activity starts ****** /////// \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items ********** ///////// \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// //// ******* Update database if user added additional info *******\t\t /////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t// //// ****** If audio recording started then stop recording audio  ***** /////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["ed2b2302038299b1d5fbb7002a9cca5ee5890f8b"], "id": "vinsol/expense-tracker\u00004c263c85c19e7c3d163954d848a24b65df77ec02\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#<unknown>.getLocationDateDate(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.os.Bundle.putString(java.lang.String, <unknown>)#java.lang.String.equals(<unknown>)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#<unknown>.getLocationDate(<unknown>, java.lang.String)#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.Bundle()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#java.lang.String.equals(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setResult(int, android.content.Intent)#android.widget.TextView.getText()#android.content.Intent.putExtras(android.os.Bundle)#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.StringProcessing()#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.DisplayDate()#<unknown>.isAudioPlaying()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.widget.TextView.getText()#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.view.KeyEvent.getRepeatCount()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.content.Intent.addFlags(int)#android.os.Bundle.Bundle()#android.app.Activity.setResult(int, android.content.Intent)#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#<unknown>.isRecording()#java.lang.String.equals(<unknown>)#<unknown>.getStringDoubleDecimal(java.lang.String)#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) <unknown>.getLocationDateDate(<unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.os.Bundle.putString(java.lang.String, <unknown>) java.lang.String.equals(<unknown>) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.util.ArrayList<java.lang.String>.get(int) java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() <unknown>.getLocationDate(<unknown>, java.lang.String) android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.Bundle() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) java.lang.String.equals(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setResult(int, android.content.Intent) android.widget.TextView.getText() android.content.Intent.putExtras(android.os.Bundle) <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.StringProcessing() android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.DisplayDate() <unknown>.isAudioPlaying() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() java.util.ArrayList<java.lang.String>.add(<unknown>) android.widget.TextView.getText() <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.add(java.lang.String) android.view.KeyEvent.getRepeatCount() java.util.ArrayList<java.lang.String>.add(<unknown>) android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.ArrayList<java.lang.String>.ArrayList, String() android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.content.Intent.addFlags(int) android.os.Bundle.Bundle() android.app.Activity.setResult(int, android.content.Intent) android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) <unknown>.isRecording() java.lang.String.equals(<unknown>) <unknown>.getStringDoubleDecimal(java.lang.String) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.util.Log android.app.Activity java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate static final int EDIT_RESULT = 35;\n\tprivate RelativeLayout dateBarRelativeLayout;\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprotected static String favID = null;\n\tprivate FavoriteHelper mFavoriteHelper;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\t\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\t\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t}\n\t\t\t\n\t\t\tif(mShowList.get(4) != null){\n\t\t\t\tif(!mShowList.get(4).equals(\"\")){\n\t\t\t\t\tfavID = mShowList.get(4);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\n\t\t\tif(mShowList.get(7) != null)\n\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\n\t\t\tif(mShowList.get(6) != null)\n\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\telse {\n\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tmFavoriteHelper = new FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n\n\t\t\tmShowList.set(4, favID);\n\t\t\tintentExtras.remove(\"mDisplayList\");\n\t\t\tintentExtras.putStringArrayList(\"mDisplayList\", mShowList);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivityForResult(editIntent, EDIT_RESULT);\n//\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t\t\n\t\tsuper.onActivityResult(requestCode, resultCode, data);\n\t\tif (EDIT_RESULT == requestCode) {\n\t\t\tif(Activity.RESULT_OK == resultCode) {\n\t\t\t\t\n\t\t\t\tintentExtras = data.getBundleExtra(\"voiceShowBundle\");\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tmShowList = new ArrayList<String>();\n\t\t\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t\t\tLog.v(\"mShowListOnResult\", mShowList.toString());\n\t\t\t\t\tif(mShowList.get(0) != null){\n\t\t\t\t\t\tif(mShowList.get(0) != \"\"){\n\t\t\t\t\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfinish();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfinish();\n\t\t\t\t\t}\n\t\t\t\t\tString amount = mShowList.get(2);\n\t\t\t\t\tString tag = mShowList.get(1);\n\t\t\t\t\t\n\t\t\t\t\tif (amount != null) {\n\t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(7) != null)\n\t\t\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(6) != null)\n\t\t\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\t\t\telse {\n\t\t\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\t\tupdateUI();\n\t\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmFavoriteHelper.setShowList(mShowList);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\n\t\tif(resultCode == Activity.RESULT_CANCELED){\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-13T10:30:04Z", "hash_sni": "4c263c85c19e7c3d163954d848a24b65df77ec02", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" \t\t\t\t\tString amount = mShowList.get(2);\n \t\t\t\t\tString tag = mShowList.get(1);\n \t\t\t\t\t\n-\t\t\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n-\t\t\t\t\t\tif (!amount.contains(\"?\"))\n+\t\t\t\t\tif (amount != null) {\n \t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n \t\t\t\t\t}\n \t\t\t\t\t"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler ShowLocationHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getDrawable getExternalStorageState getId getInstance getIntent getPlayBackTime getResources getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putBoolean putExtra putStringArrayList remove set setBackgroundDrawable setContentView setFirstDayOfWeek setOnClickListener setShowList setText setTimeInMillis setVisibility show start startActivityForResult startPlayBack stop stopPlayBack toString updateUI v"], "_version_": 1526749724728623104, "subject_t": ["Removed Bug"], "comments_t": ["\t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** //\t\t\tfinish(); \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ****** If audio recording started then stop recording audio ***** /////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["ed2b2302038299b1d5fbb7002a9cca5ee5890f8b"], "id": "vinsol/expense-tracker\u00004c263c85c19e7c3d163954d848a24b65df77ec02\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "android.os.Bundle.remove(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.startActivityForResult(android.content.Intent, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.io.File.canRead()#android.widget.Toast.show()#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getPlayBackTime()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#<unknown>.open()#android.content.Context.getString(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#java.util.AbstractCollection<java.lang.String>.toString()#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.Toast.show()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.view.View.setVisibility(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#java.io.File.File(java.lang.String)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.view.ContextThemeWrapper.getResources()#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.content.Context.getString(<unknown>)#android.util.Log.v(java.lang.String, java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.setShowList(java.util.ArrayList<java.lang.String>)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#java.lang.String.equals(<unknown>)#android.os.Environment.getExternalStorageState()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#android.app.Activity.finish()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#java.lang.Long.toString(java.lang.Long)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#<unknown>.getDisplayTime(<unknown>)#android.os.CountDownTimer.cancel()#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setBackgroundDrawable(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.util.ArrayList<java.lang.String>.ArrayList, String()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.Toast.show()#java.lang.String.equals(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#java.util.Calendar.setTimeInMillis(long)#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.res.Resources.getDrawable(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#<unknown>.DisplayTime()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.os.Bundle.putBoolean(java.lang.String, boolean)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.getInstance()#android.view.View.setVisibility(int)", "callsites_t": ["android.os.Bundle.remove(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.startActivityForResult(android.content.Intent, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.io.File.canRead() android.widget.Toast.show() java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getPlayBackTime() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) <unknown>.open() android.content.Context.getString(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) java.util.AbstractCollection<java.lang.String>.toString() <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.Toast.show() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.widget.TextView.setText(java.lang.String) android.view.View.setVisibility(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) java.io.File.File(java.lang.String) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.view.ContextThemeWrapper.getResources() android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.content.Context.getString(<unknown>) android.util.Log.v(java.lang.String, java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.setShowList(java.util.ArrayList<java.lang.String>) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) java.lang.String.equals(<unknown>) android.os.Environment.getExternalStorageState() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() android.app.Activity.finish() java.io.File.File(java.lang.String) android.widget.Toast.show() java.lang.Long.toString(java.lang.Long) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() <unknown>.getDisplayTime(<unknown>) android.os.CountDownTimer.cancel() java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setBackgroundDrawable(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.util.ArrayList<java.lang.String>.ArrayList, String() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.Toast.show() java.lang.String.equals(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) java.util.Calendar.setTimeInMillis(long) java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.content.res.Resources.getDrawable(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) <unknown>.getPlayBackTime() android.app.Activity.finish() <unknown>.DisplayTime() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) android.content.Intent.getBundleExtra(java.lang.String) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.os.Bundle.putBoolean(java.lang.String, boolean) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) java.util.Calendar.getInstance() android.view.View.setVisibility(int)"]}, {"user_sni": "Tyler Holland", "repo_sni": "Tywholland/SimpleTimer", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent android.view.Menu com.tywholland.simpletimer.SimpleTimerApplication android.widget.EditText android.view.MenuItem android.content.SharedPreferences com.tywholland.simpletimer.Settings android.widget.TextView android.preference.PreferenceManager android.view.View com.tywholland.simpletimer.R android.app.Activity java.util.Calendar"], "email_sni": "tywholland@gmail.com", "contents_t": ["package com.tywholland.simpletimer.timer;\n\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.preference.PreferenceManager;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.tywholland.simpletimer.R;\nimport com.tywholland.simpletimer.Settings;\nimport com.tywholland.simpletimer.SimpleTimerApplication;\n\npublic class TimerActivity extends Activity {\n\tprivate static final String ALARM_TIME = \"alarmkey\";\n\tprivate static final String ALARM_NAME = \"alarmnamekey\";\n\tprivate static final int TIME_MAX_LENGTH = 6;\n\n\tprivate Button mStartButton;\n\tprivate Button mNumpad1;\n\tprivate Button mNumpad2;\n\tprivate Button mNumpad3;\n\tprivate Button mNumpad4;\n\tprivate Button mNumpad5;\n\tprivate Button mNumpad6;\n\tprivate Button mNumpad7;\n\tprivate Button mNumpad8;\n\tprivate Button mNumpad9;\n\tprivate Button mNumpad0;\n\tprivate Button mStopButton;\n\tprivate TextView mTimeView;\n\tprivate EditText mAlarmNameView;\n\tprivate SimpleTimerApplication mAlarmApplication;\n\tprivate CountDownTimer mCountDownTimer;\n\tprivate boolean mCountingDown;\n\n\t@Override\n\tpublic boolean onCreateOptionsMenu(Menu menu) {\n\t\tgetMenuInflater().inflate(R.menu.menu, menu);\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic boolean onOptionsItemSelected(MenuItem item) {\n\t\tswitch (item.getItemId()) {\n\t\tcase R.id.menu_settings:\n\t\t\tstartActivity(new Intent(getApplicationContext(), Settings.class));\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn super.onOptionsItemSelected(item);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tmAlarmApplication = (SimpleTimerApplication) getApplicationContext();\n\t\tif (PreferenceManager.getDefaultSharedPreferences(\n\t\t\t\tgetApplicationContext()).getBoolean(\n\t\t\t\tgetString(R.string.key_button_placement), true)) {\n\t\t\tsetContentView(R.layout.activity_main);\n\t\t} else {\n\t\t\tsetContentView(R.layout.activity_main_bottom_start);\n\t\t}\n\t\tmCountingDown = false;\n\n\t\trestoreText();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tif (PreferenceManager.getDefaultSharedPreferences(\n\t\t\t\tgetApplicationContext()).getBoolean(\n\t\t\t\tgetString(R.string.key_button_placement), true)) {\n\t\t\tsetContentView(R.layout.activity_main);\n\t\t} else {\n\t\t\tsetContentView(R.layout.activity_main_bottom_start);\n\t\t}\n\t\tmStartButton = (Button) findViewById(R.id.startbutton);\n\t\tmStartButton.setOnClickListener(new OnClickListener() {\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmAlarmApplication.stopTimer();\n\t\t\t\tmAlarmApplication.setAlarmName(mAlarmNameView.getText()\n\t\t\t\t\t\t.toString());\n\t\t\t\tmAlarmApplication.startTimer(TimerUtil\n\t\t\t\t\t\t.convertStringToMilliseconds(mAlarmApplication\n\t\t\t\t\t\t\t\t.getTimeString()));\n\t\t\t\tstopTextCountdown();\n\t\t\t\tstartTextCountdown();\n\t\t\t\tmAlarmApplication.setTimeString(\"\");\n\t\t\t\tmCountingDown = true;\n\t\t\t\tupdateButtons();\n\t\t\t}\n\t\t});\n\t\tmStopButton = (Button) findViewById(R.id.stopbutton);\n\t\tmStopButton.setOnClickListener(new OnClickListener() {\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tmAlarmApplication.setTimeString(\"\");\n\t\t\t\tmAlarmApplication.setAlarmName(\"\");\n\t\t\t\tmAlarmNameView.setText(\"\");\n\t\t\t\tmTimeView.setText(R.string.default_time);\n\t\t\t\tmAlarmApplication.stopTimer();\n\t\t\t\tstopTextCountdown();\n\t\t\t\tmCountingDown = false;\n\t\t\t\tupdateButtons();\n\t\t\t}\n\t\t});\n\t\tmAlarmNameView = (EditText) findViewById(R.id.alarmNameEditText);\n\t\tmAlarmNameView.setText(mAlarmApplication.getAlarmName());\n\t\tmAlarmNameView.clearFocus();\n\t\tmTimeView = (TextView) findViewById(R.id.timerTextView);\n\t\tmNumpad0 = (Button) findViewById(R.id.numpad0);\n\t\tmNumpad1 = (Button) findViewById(R.id.numpad1);\n\t\tmNumpad2 = (Button) findViewById(R.id.numpad2);\n\t\tmNumpad3 = (Button) findViewById(R.id.numpad3);\n\t\tmNumpad4 = (Button) findViewById(R.id.numpad4);\n\t\tmNumpad5 = (Button) findViewById(R.id.numpad5);\n\t\tmNumpad6 = (Button) findViewById(R.id.numpad6);\n\t\tmNumpad7 = (Button) findViewById(R.id.numpad7);\n\t\tmNumpad8 = (Button) findViewById(R.id.numpad8);\n\t\tmNumpad9 = (Button) findViewById(R.id.numpad9);\n\t\tmNumpad0.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad1.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad2.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad3.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad4.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad5.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad6.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad7.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad8.setOnClickListener(numpadButtonClickListener());\n\t\tmNumpad9.setOnClickListener(numpadButtonClickListener());\n\t\tupdateTimeView();\n\t\tupdateButtons();\n\t\tif (mCountDownTimer != null) {\n\t\t\tmCountDownTimer.cancel();\n\t\t}\n\t\tstartTextCountdown();\n\t\tif (!mCountingDown) {\n\t\t\t// Stop timer when app is launched if timer is not active\n\t\t\tmAlarmApplication.stopTimer();\n\t\t}\n\t}\n\n\tprivate void restoreText() {\n\t\tSharedPreferences settings = getPreferences(0);\n\t\tif (settings != null) {\n\t\t\tlong milliseconds = settings.getLong(ALARM_TIME, 0);\n\t\t\tCalendar c = Calendar.getInstance();\n\t\t\tc.setTimeInMillis(milliseconds);\n\t\t\tmAlarmApplication.setCurrentAlarmCalendar(c);\n\t\t\tString alarmName = settings.getString(ALARM_NAME, \"\");\n\t\t\tmAlarmApplication.setAlarmName(alarmName);\n\t\t}\n\t}\n\n\tprivate void startTextCountdown() {\n\t\tCalendar c = mAlarmApplication.getCurrentAlarmCalendar();\n\t\tif (c != null && c.getTimeInMillis() != 0) {\n\t\t\tlong alarmTime = c.getTimeInMillis();\n\t\t\tlong currentTime = Calendar.getInstance().getTimeInMillis();\n\t\t\tlong timeDifference = alarmTime - currentTime;\n\t\t\tif (timeDifference > 0) {\n\t\t\t\tmCountingDown = true;\n\t\t\t} else {\n\t\t\t\tmCountingDown = false;\n\t\t\t}\n\t\t\tmCountDownTimer = new CountDownTimer(timeDifference, 1000) {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\t\t\tmTimeView\n\t\t\t\t\t\t\t.setText(TimerUtil\n\t\t\t\t\t\t\t\t\t.getTimeStringFromMilliseconds(millisUntilFinished));\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onFinish() {\n\t\t\t\t\tmTimeView.setText(R.string.default_time);\n\t\t\t\t\tmCountingDown = false;\n\t\t\t\t}\n\t\t\t};\n\t\t\tmCountDownTimer.start();\n\t\t} else {\n\t\t\tmCountingDown = false;\n\t\t}\n\t\tupdateButtons();\n\t}\n\n\tprivate void stopTextCountdown() {\n\t\tif (mCountDownTimer != null) {\n\t\t\tmCountDownTimer.cancel();\n\t\t}\n\t}\n\n\tprivate OnClickListener numpadButtonClickListener() {\n\t\treturn new OnClickListener() {\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tif (!mCountingDown) {\n\t\t\t\t\tif (mAlarmApplication.getTimeString().length() < TIME_MAX_LENGTH) {\n\t\t\t\t\t\tmAlarmApplication.appendToTimeString(((Button) v)\n\t\t\t\t\t\t\t\t.getText().toString());\n\t\t\t\t\t\tupdateTimeView();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tToast.makeText(getApplicationContext(),\n\t\t\t\t\t\t\t\tR.string.time_too_long_warning,\n\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate void updateButtons() {\n\t\tmStartButton.setEnabled(!mCountingDown);\n\t\tmNumpad0.setEnabled(!mCountingDown);\n\t\tmNumpad1.setEnabled(!mCountingDown);\n\t\tmNumpad2.setEnabled(!mCountingDown);\n\t\tmNumpad3.setEnabled(!mCountingDown);\n\t\tmNumpad4.setEnabled(!mCountingDown);\n\t\tmNumpad5.setEnabled(!mCountingDown);\n\t\tmNumpad6.setEnabled(!mCountingDown);\n\t\tmNumpad7.setEnabled(!mCountingDown);\n\t\tmNumpad8.setEnabled(!mCountingDown);\n\t\tmNumpad9.setEnabled(!mCountingDown);\n\t}\n\n\tprivate void updateTimeView() {\n\t\tInteger hours = TimerUtil.getHoursFromTimeString(mAlarmApplication\n\t\t\t\t.getTimeString());\n\t\tInteger minutes = TimerUtil.getMinutesFromTimeString(mAlarmApplication\n\t\t\t\t.getTimeString());\n\t\tInteger seconds = TimerUtil.getSecondsFromTimeString(mAlarmApplication\n\t\t\t\t.getTimeString());\n\t\tmTimeView.setText(String.format(\"%02d\", hours) + \":\"\n\t\t\t\t+ String.format(\"%02d\", minutes) + \":\"\n\t\t\t\t+ String.format(\"%02d\", seconds));\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\t\tsuper.onPause();\n\t\tSharedPreferences settings = getPreferences(0);\n\t\tSharedPreferences.Editor editor = settings.edit();\n\t\teditor.putString(ALARM_NAME, mAlarmNameView.getText().toString());\n\t\teditor.commit();\n\t}\n\n\t@Override\n\tprotected void onStop() {\n\t\tsuper.onStop();\n\t\tSharedPreferences settings = getPreferences(0);\n\t\tSharedPreferences.Editor editor = settings.edit();\n\t\teditor.putLong(ALARM_TIME, mAlarmApplication.getCurrentAlarmCalendar()\n\t\t\t\t.getTimeInMillis());\n\t\teditor.commit();\n\t}\n}\n"], "body_t": ["Fixed issue #2"], "date_tdt": "2012-11-18T18:31:58Z", "hash_sni": "7017ecd6562e031a6d39af2f89e36af22d0e82b6", "name_sni": "src/com/tywholland/simpletimer/timer/TimerActivity.java", "patch_t": ["+package com.tywholland.simpletimer.timer;\n+\n+import java.util.Calendar;\n+\n+import android.app.Activity;\n+import android.content.Intent;\n+import android.content.SharedPreferences;\n+import android.os.Bundle;\n+import android.os.CountDownTimer;\n+import android.preference.PreferenceManager;\n+import android.view.Menu;\n+import android.view.MenuItem;\n+import android.view.View;\n+import android.view.View.OnClickListener;\n+import android.widget.Button;\n+import android.widget.EditText;\n+import android.widget.TextView;\n+import android.widget.Toast;\n+\n+import com.tywholland.simpletimer.R;\n+import com.tywholland.simpletimer.Settings;\n+import com.tywholland.simpletimer.SimpleTimerApplication;\n+\n+public class TimerActivity extends Activity {\n+\tprivate static final String ALARM_TIME = \"alarmkey\";\n+\tprivate static final String ALARM_NAME = \"alarmnamekey\";\n+\tprivate static final int TIME_MAX_LENGTH = 6;\n+\n+\tprivate Button mStartButton;\n+\tprivate Button mNumpad1;\n+\tprivate Button mNumpad2;\n+\tprivate Button mNumpad3;\n+\tprivate Button mNumpad4;\n+\tprivate Button mNumpad5;\n+\tprivate Button mNumpad6;\n+\tprivate Button mNumpad7;\n+\tprivate Button mNumpad8;\n+\tprivate Button mNumpad9;\n+\tprivate Button mNumpad0;\n+\tprivate Button mStopButton;\n+\tprivate TextView mTimeView;\n+\tprivate EditText mAlarmNameView;\n+\tprivate SimpleTimerApplication mAlarmApplication;\n+\tprivate CountDownTimer mCountDownTimer;\n+\tprivate boolean mCountingDown;\n+\n+\t@Override\n+\tpublic boolean onCreateOptionsMenu(Menu menu) {\n+\t\tgetMenuInflater().inflate(R.menu.menu, menu);\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean onOptionsItemSelected(MenuItem item) {\n+\t\tswitch (item.getItemId()) {\n+\t\tcase R.id.menu_settings:\n+\t\t\tstartActivity(new Intent(getApplicationContext(), Settings.class));\n+\t\t\treturn true;\n+\t\tdefault:\n+\t\t\treturn super.onOptionsItemSelected(item);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void onCreate(Bundle savedInstanceState) {\n+\t\tsuper.onCreate(savedInstanceState);\n+\t\tmAlarmApplication = (SimpleTimerApplication) getApplicationContext();\n+\t\tif (PreferenceManager.getDefaultSharedPreferences(\n+\t\t\t\tgetApplicationContext()).getBoolean(\n+\t\t\t\tgetString(R.string.key_button_placement), true)) {\n+\t\t\tsetContentView(R.layout.activity_main);\n+\t\t} else {\n+\t\t\tsetContentView(R.layout.activity_main_bottom_start);\n+\t\t}\n+\t\tmCountingDown = false;\n+\n+\t\trestoreText();\n+\t}\n+\n+\t@Override\n+\tprotected void onResume() {\n+\t\tsuper.onResume();\n+\t\tif (PreferenceManager.getDefaultSharedPreferences(\n+\t\t\t\tgetApplicationContext()).getBoolean(\n+\t\t\t\tgetString(R.string.key_button_placement), true)) {\n+\t\t\tsetContentView(R.layout.activity_main);\n+\t\t} else {\n+\t\t\tsetContentView(R.layout.activity_main_bottom_start);\n+\t\t}\n+\t\tmStartButton = (Button) findViewById(R.id.startbutton);\n+\t\tmStartButton.setOnClickListener(new OnClickListener() {\n+\t\t\tpublic void onClick(View v) {\n+\t\t\t\tmAlarmApplication.stopTimer();\n+\t\t\t\tmAlarmApplication.setAlarmName(mAlarmNameView.getText()\n+\t\t\t\t\t\t.toString());\n+\t\t\t\tmAlarmApplication.startTimer(TimerUtil\n+\t\t\t\t\t\t.convertStringToMilliseconds(mAlarmApplication\n+\t\t\t\t\t\t\t\t.getTimeString()));\n+\t\t\t\tstopTextCountdown();\n+\t\t\t\tstartTextCountdown();\n+\t\t\t\tmAlarmApplication.setTimeString(\"\");\n+\t\t\t\tmCountingDown = true;\n+\t\t\t\tupdateButtons();\n+\t\t\t}\n+\t\t});\n+\t\tmStopButton = (Button) findViewById(R.id.stopbutton);\n+\t\tmStopButton.setOnClickListener(new OnClickListener() {\n+\t\t\tpublic void onClick(View v) {\n+\t\t\t\tmAlarmApplication.setTimeString(\"\");\n+\t\t\t\tmAlarmApplication.setAlarmName(\"\");\n+\t\t\t\tmAlarmNameView.setText(\"\");\n+\t\t\t\tmTimeView.setText(R.string.default_time);\n+\t\t\t\tmAlarmApplication.stopTimer();\n+\t\t\t\tstopTextCountdown();\n+\t\t\t\tmCountingDown = false;\n+\t\t\t\tupdateButtons();\n+\t\t\t}\n+\t\t});\n+\t\tmAlarmNameView = (EditText) findViewById(R.id.alarmNameEditText);\n+\t\tmAlarmNameView.setText(mAlarmApplication.getAlarmName());\n+\t\tmAlarmNameView.clearFocus();\n+\t\tmTimeView = (TextView) findViewById(R.id.timerTextView);\n+\t\tmNumpad0 = (Button) findViewById(R.id.numpad0);\n+\t\tmNumpad1 = (Button) findViewById(R.id.numpad1);\n+\t\tmNumpad2 = (Button) findViewById(R.id.numpad2);\n+\t\tmNumpad3 = (Button) findViewById(R.id.numpad3);\n+\t\tmNumpad4 = (Button) findViewById(R.id.numpad4);\n+\t\tmNumpad5 = (Button) findViewById(R.id.numpad5);\n+\t\tmNumpad6 = (Button) findViewById(R.id.numpad6);\n+\t\tmNumpad7 = (Button) findViewById(R.id.numpad7);\n+\t\tmNumpad8 = (Button) findViewById(R.id.numpad8);\n+\t\tmNumpad9 = (Button) findViewById(R.id.numpad9);\n+\t\tmNumpad0.setOnClickListener(numpadButtonClickListener());\n+\t\tmNumpad1.setOnClickListener(numpadButtonClickListener());\n+\t\tmNumpad2.setOnClickListener(numpadButtonClickListener());\n+\t\tmNumpad3.setOnClickListener(numpadButtonClickListener());\n+\t\tmNumpad4.setOnClickListener(numpadButtonClickListener());\n+\t\tmNumpad5.setOnClickListener(numpadButtonClickListener());\n+\t\tmNumpad6.setOnClickListener(numpadButtonClickListener());\n+\t\tmNumpad7.setOnClickListener(numpadButtonClickListener());\n+\t\tmNumpad8.setOnClickListener(numpadButtonClickListener());\n+\t\tmNumpad9.setOnClickListener(numpadButtonClickListener());\n+\t\tupdateTimeView();\n+\t\tupdateButtons();\n+\t\tif (mCountDownTimer != null) {\n+\t\t\tmCountDownTimer.cancel();\n+\t\t}\n+\t\tstartTextCountdown();\n+\t\tif (!mCountingDown) {\n+\t\t\t// Stop timer when app is launched if timer is not active\n+\t\t\tmAlarmApplication.stopTimer();\n+\t\t}\n+\t}\n+\n+\tprivate void restoreText() {\n+\t\tSharedPreferences settings = getPreferences(0);\n+\t\tif (settings != null) {\n+\t\t\tlong milliseconds = settings.getLong(ALARM_TIME, 0);\n+\t\t\tCalendar c = Calendar.getInstance();\n+\t\t\tc.setTimeInMillis(milliseconds);\n+\t\t\tmAlarmApplication.setCurrentAlarmCalendar(c);\n+\t\t\tString alarmName = settings.getString(ALARM_NAME, \"\");\n+\t\t\tmAlarmApplication.setAlarmName(alarmName);\n+\t\t}\n+\t}\n+\n+\tprivate void startTextCountdown() {\n+\t\tCalendar c = mAlarmApplication.getCurrentAlarmCalendar();\n+\t\tif (c != null && c.getTimeInMillis() != 0) {\n+\t\t\tlong alarmTime = c.getTimeInMillis();\n+\t\t\tlong currentTime = Calendar.getInstance().getTimeInMillis();\n+\t\t\tlong timeDifference = alarmTime - currentTime;\n+\t\t\tif (timeDifference > 0) {\n+\t\t\t\tmCountingDown = true;\n+\t\t\t} else {\n+\t\t\t\tmCountingDown = false;\n+\t\t\t}\n+\t\t\tmCountDownTimer = new CountDownTimer(timeDifference, 1000) {\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onTick(long millisUntilFinished) {\n+\t\t\t\t\tmTimeView\n+\t\t\t\t\t\t\t.setText(TimerUtil\n+\t\t\t\t\t\t\t\t\t.getTimeStringFromMilliseconds(millisUntilFinished));\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onFinish() {\n+\t\t\t\t\tmTimeView.setText(R.string.default_time);\n+\t\t\t\t\tmCountingDown = false;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t\tmCountDownTimer.start();\n+\t\t} else {\n+\t\t\tmCountingDown = false;\n+\t\t}\n+\t\tupdateButtons();\n+\t}\n+\n+\tprivate void stopTextCountdown() {\n+\t\tif (mCountDownTimer != null) {\n+\t\t\tmCountDownTimer.cancel();\n+\t\t}\n+\t}\n+\n+\tprivate OnClickListener numpadButtonClickListener() {\n+\t\treturn new OnClickListener() {\n+\t\t\tpublic void onClick(View v) {\n+\t\t\t\tif (!mCountingDown) {\n+\t\t\t\t\tif (mAlarmApplication.getTimeString().length() < TIME_MAX_LENGTH) {\n+\t\t\t\t\t\tmAlarmApplication.appendToTimeString(((Button) v)\n+\t\t\t\t\t\t\t\t.getText().toString());\n+\t\t\t\t\t\tupdateTimeView();\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tToast.makeText(getApplicationContext(),\n+\t\t\t\t\t\t\t\tR.string.time_too_long_warning,\n+\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\tprivate void updateButtons() {\n+\t\tmStartButton.setEnabled(!mCountingDown);\n+\t\tmNumpad0.setEnabled(!mCountingDown);\n+\t\tmNumpad1.setEnabled(!mCountingDown);\n+\t\tmNumpad2.setEnabled(!mCountingDown);\n+\t\tmNumpad3.setEnabled(!mCountingDown);\n+\t\tmNumpad4.setEnabled(!mCountingDown);\n+\t\tmNumpad5.setEnabled(!mCountingDown);\n+\t\tmNumpad6.setEnabled(!mCountingDown);\n+\t\tmNumpad7.setEnabled(!mCountingDown);\n+\t\tmNumpad8.setEnabled(!mCountingDown);\n+\t\tmNumpad9.setEnabled(!mCountingDown);\n+\t}\n+\n+\tprivate void updateTimeView() {\n+\t\tInteger hours = TimerUtil.getHoursFromTimeString(mAlarmApplication\n+\t\t\t\t.getTimeString());\n+\t\tInteger minutes = TimerUtil.getMinutesFromTimeString(mAlarmApplication\n+\t\t\t\t.getTimeString());\n+\t\tInteger seconds = TimerUtil.getSecondsFromTimeString(mAlarmApplication\n+\t\t\t\t.getTimeString());\n+\t\tmTimeView.setText(String.format(\"%02d\", hours) + \":\"\n+\t\t\t\t+ String.format(\"%02d\", minutes) + \":\"\n+\t\t\t\t+ String.format(\"%02d\", seconds));\n+\t}\n+\n+\t@Override\n+\tprotected void onPause() {\n+\t\tsuper.onPause();\n+\t\tSharedPreferences settings = getPreferences(0);\n+\t\tSharedPreferences.Editor editor = settings.edit();\n+\t\teditor.putString(ALARM_NAME, mAlarmNameView.getText().toString());\n+\t\teditor.commit();\n+\t}\n+\n+\t@Override\n+\tprotected void onStop() {\n+\t\tsuper.onStop();\n+\t\tSharedPreferences settings = getPreferences(0);\n+\t\tSharedPreferences.Editor editor = settings.edit();\n+\t\teditor.putLong(ALARM_TIME, mAlarmApplication.getCurrentAlarmCalendar()\n+\t\t\t\t.getTimeInMillis());\n+\t\teditor.commit();\n+\t}\n+}"], "score": 1.0, "methods_t": ["CountDownTimer Intent OnClickListener appendToTimeString cancel clearFocus commit convertStringToMilliseconds edit findViewById format getAlarmName getApplicationContext getBoolean getCurrentAlarmCalendar getDefaultSharedPreferences getHoursFromTimeString getInstance getItemId getLong getMenuInflater getMinutesFromTimeString getPreferences getSecondsFromTimeString getString getText getTimeInMillis getTimeString getTimeStringFromMilliseconds inflate length makeText numpadButtonClickListener putLong putString restoreText setAlarmName setContentView setCurrentAlarmCalendar setEnabled setOnClickListener setText setTimeInMillis setTimeString show start startActivity startTextCountdown startTimer stopTextCountdown stopTimer toString updateButtons updateTimeView"], "_version_": 1526749333785935872, "subject_t": ["UI update and countdown in notification"], "comments_t": ["\t\t\t// Stop timer when app is launched if timer is not active"], "callsites_t": ["android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) com.tywholland.simpletimer.timer.TimerActivity.stopTextCountdown() android.content.Intent.Intent(android.content.Context, java.lang.Class) android.app.Activity.findViewById(<unknown>) android.content.SharedPreferences.edit() android.widget.TextView.setEnabled(boolean) <unknown>.convertStringToMilliseconds(<unknown>) <unknown>.getHoursFromTimeString(<unknown>) java.util.Calendar.setTimeInMillis(long) android.widget.TextView.setText(<unknown>) android.content.SharedPreferences.getString(java.lang.String, java.lang.String) android.view.View.setOnClickListener() android.app.Activity.findViewById(<unknown>) android.content.ContextWrapper.getApplicationContext() android.os.CountDownTimer.cancel() android.view.View.setOnClickListener(android.view.View.OnClickListener) android.view.View.setOnClickListener(android.view.View.OnClickListener) android.app.Activity.findViewById(<unknown>) com.tywholland.simpletimer.timer.TimerActivity.startTextCountdown() android.widget.TextView.setEnabled(boolean) android.app.Activity.findViewById(<unknown>) android.view.View.setOnClickListener(android.view.View.OnClickListener) <unknown>.getTimeInMillis() android.widget.TextView.setEnabled(boolean) android.content.Context.getString(<unknown>) com.tywholland.simpletimer.timer.TimerActivity.restoreText() android.widget.TextView.setText(<unknown>) android.app.Activity.getPreferences(int) android.app.Activity.findViewById(<unknown>) android.content.SharedPreferences.getLong(java.lang.String, int) <unknown>.stopTimer() android.content.SharedPreferences.Editor.putString(java.lang.String, java.lang.String) android.content.ContextWrapper.getApplicationContext() android.content.Context.getString(<unknown>) android.os.CountDownTimer.cancel() com.tywholland.simpletimer.timer.TimerActivity.updateButtons() android.app.Activity.findViewById(<unknown>) android.os.CountDownTimer.start() <unknown>.getCurrentAlarmCalendar() android.app.Activity.findViewById(<unknown>) java.lang.String.format(java.lang.String, java.lang.Integer) android.content.SharedPreferences.edit() java.util.Calendar.getTimeInMillis() java.lang.CharSequence.toString() android.widget.TextView.getText() <unknown>.getMinutesFromTimeString(<unknown>) <unknown>.getTimeString() android.app.Activity.setContentView(<unknown>) android.widget.Toast.makeText(android.content.Context, <unknown>, int) android.widget.TextView.setText(java.lang.String) android.app.Activity.getPreferences(int) android.app.Activity.startActivity(android.content.Intent) .OnClickListener() java.lang.String.format(java.lang.String, java.lang.Integer) android.view.View.setOnClickListener(android.view.View.OnClickListener) <unknown>.startTimer(<unknown>) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setOnClickListener(android.view.View.OnClickListener) <unknown>.getTimeString() android.view.View.setOnClickListener(android.view.View.OnClickListener) android.app.Activity.setContentView(<unknown>) android.widget.TextView.setEnabled(boolean) android.content.SharedPreferences.getBoolean(<unknown>, boolean) java.util.Calendar.getInstance() android.app.Activity.getMenuInflater() android.content.ContextWrapper.getApplicationContext() java.lang.CharSequence.toString() <unknown>.getAlarmName() android.widget.TextView.setEnabled(boolean) com.tywholland.simpletimer.timer.TimerActivity.updateButtons() android.widget.TextView.setEnabled(boolean) android.content.ContextWrapper.getApplicationContext() android.view.MenuItem.getItemId() <unknown>.setTimeString(java.lang.String) <unknown>.appendToTimeString(java.lang.String) android.widget.TextView.setEnabled(boolean) com.tywholland.simpletimer.timer.TimerActivity.numpadButtonClickListener() com.tywholland.simpletimer.timer.TimerActivity.startTextCountdown() <unknown>.getTimeStringFromMilliseconds(long) android.view.View.setOnClickListener() android.app.Activity.findViewById(<unknown>) android.view.View.clearFocus() android.view.MenuInflater.inflate(<unknown>, android.view.Menu) .OnClickListener() com.tywholland.simpletimer.timer.TimerActivity.updateTimeView() android.widget.EditText.getText() android.widget.TextView.setEnabled(boolean) java.util.Calendar.getInstance() java.lang.CharSequence.toString() android.app.Activity.findViewById(<unknown>) android.view.View.setOnClickListener(android.view.View.OnClickListener) <unknown>.setCurrentAlarmCalendar(java.util.Calendar) android.widget.TextView.setEnabled(boolean) <unknown>.setAlarmName(java.lang.String) android.app.Activity.findViewById(<unknown>) android.app.Activity.getPreferences(int) com.tywholland.simpletimer.timer.TimerActivity.updateButtons() android.app.Activity.setContentView(<unknown>) <unknown>.getTimeString() android.app.Activity.setContentView(<unknown>) android.view.View.setOnClickListener(android.view.View.OnClickListener) <unknown>.getSecondsFromTimeString(<unknown>) android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context) <unknown>.stopTimer() android.app.Activity.findViewById(<unknown>) java.util.Calendar.getTimeInMillis() android.content.SharedPreferences.Editor.commit() <unknown>.getCurrentAlarmCalendar() com.tywholland.simpletimer.timer.TimerActivity.updateTimeView() android.widget.EditText.getText() android.widget.TextView.setEnabled(boolean) android.app.Activity.findViewById(<unknown>) android.view.View.setOnClickListener(android.view.View.OnClickListener) <unknown>.show() android.view.View.setOnClickListener(android.view.View.OnClickListener) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) android.widget.TextView.setEnabled(boolean) android.content.SharedPreferences.Editor.commit() <unknown>.length() .CountDownTimer(long, int) android.content.SharedPreferences.Editor.putLong(java.lang.String, <unknown>) android.content.SharedPreferences.getBoolean(<unknown>, boolean) <unknown>.setAlarmName(java.lang.String) android.widget.TextView.setText(<unknown>) java.lang.String.format(java.lang.String, java.lang.Integer) <unknown>.setAlarmName(java.lang.String)"], "id": "Tywholland/SimpleTimer\u00007017ecd6562e031a6d39af2f89e36af22d0e82b6\u0000src/com/tywholland/simpletimer/timer/TimerActivity.java", "callsites_cs": "android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#com.tywholland.simpletimer.timer.TimerActivity.stopTextCountdown()#android.content.Intent.Intent(android.content.Context, java.lang.Class)#android.app.Activity.findViewById(<unknown>)#android.content.SharedPreferences.edit()#android.widget.TextView.setEnabled(boolean)#<unknown>.convertStringToMilliseconds(<unknown>)#<unknown>.getHoursFromTimeString(<unknown>)#java.util.Calendar.setTimeInMillis(long)#android.widget.TextView.setText(<unknown>)#android.content.SharedPreferences.getString(java.lang.String, java.lang.String)#android.view.View.setOnClickListener()#android.app.Activity.findViewById(<unknown>)#android.content.ContextWrapper.getApplicationContext()#android.os.CountDownTimer.cancel()#android.view.View.setOnClickListener(android.view.View.OnClickListener)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#android.app.Activity.findViewById(<unknown>)#com.tywholland.simpletimer.timer.TimerActivity.startTextCountdown()#android.widget.TextView.setEnabled(boolean)#android.app.Activity.findViewById(<unknown>)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#<unknown>.getTimeInMillis()#android.widget.TextView.setEnabled(boolean)#android.content.Context.getString(<unknown>)#com.tywholland.simpletimer.timer.TimerActivity.restoreText()#android.widget.TextView.setText(<unknown>)#android.app.Activity.getPreferences(int)#android.app.Activity.findViewById(<unknown>)#android.content.SharedPreferences.getLong(java.lang.String, int)#<unknown>.stopTimer()#android.content.SharedPreferences.Editor.putString(java.lang.String, java.lang.String)#android.content.ContextWrapper.getApplicationContext()#android.content.Context.getString(<unknown>)#android.os.CountDownTimer.cancel()#com.tywholland.simpletimer.timer.TimerActivity.updateButtons()#android.app.Activity.findViewById(<unknown>)#android.os.CountDownTimer.start()#<unknown>.getCurrentAlarmCalendar()#android.app.Activity.findViewById(<unknown>)#java.lang.String.format(java.lang.String, java.lang.Integer)#android.content.SharedPreferences.edit()#java.util.Calendar.getTimeInMillis()#java.lang.CharSequence.toString()#android.widget.TextView.getText()#<unknown>.getMinutesFromTimeString(<unknown>)#<unknown>.getTimeString()#android.app.Activity.setContentView(<unknown>)#android.widget.Toast.makeText(android.content.Context, <unknown>, int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.getPreferences(int)#android.app.Activity.startActivity(android.content.Intent)#.OnClickListener()#java.lang.String.format(java.lang.String, java.lang.Integer)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#<unknown>.startTimer(<unknown>)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#<unknown>.getTimeString()#android.view.View.setOnClickListener(android.view.View.OnClickListener)#android.app.Activity.setContentView(<unknown>)#android.widget.TextView.setEnabled(boolean)#android.content.SharedPreferences.getBoolean(<unknown>, boolean)#java.util.Calendar.getInstance()#android.app.Activity.getMenuInflater()#android.content.ContextWrapper.getApplicationContext()#java.lang.CharSequence.toString()#<unknown>.getAlarmName()#android.widget.TextView.setEnabled(boolean)#com.tywholland.simpletimer.timer.TimerActivity.updateButtons()#android.widget.TextView.setEnabled(boolean)#android.content.ContextWrapper.getApplicationContext()#android.view.MenuItem.getItemId()#<unknown>.setTimeString(java.lang.String)#<unknown>.appendToTimeString(java.lang.String)#android.widget.TextView.setEnabled(boolean)#com.tywholland.simpletimer.timer.TimerActivity.numpadButtonClickListener()#com.tywholland.simpletimer.timer.TimerActivity.startTextCountdown()#<unknown>.getTimeStringFromMilliseconds(long)#android.view.View.setOnClickListener()#android.app.Activity.findViewById(<unknown>)#android.view.View.clearFocus()#android.view.MenuInflater.inflate(<unknown>, android.view.Menu)#.OnClickListener()#com.tywholland.simpletimer.timer.TimerActivity.updateTimeView()#android.widget.EditText.getText()#android.widget.TextView.setEnabled(boolean)#java.util.Calendar.getInstance()#java.lang.CharSequence.toString()#android.app.Activity.findViewById(<unknown>)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#<unknown>.setCurrentAlarmCalendar(java.util.Calendar)#android.widget.TextView.setEnabled(boolean)#<unknown>.setAlarmName(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.getPreferences(int)#com.tywholland.simpletimer.timer.TimerActivity.updateButtons()#android.app.Activity.setContentView(<unknown>)#<unknown>.getTimeString()#android.app.Activity.setContentView(<unknown>)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#<unknown>.getSecondsFromTimeString(<unknown>)#android.preference.PreferenceManager.getDefaultSharedPreferences(android.content.Context)#<unknown>.stopTimer()#android.app.Activity.findViewById(<unknown>)#java.util.Calendar.getTimeInMillis()#android.content.SharedPreferences.Editor.commit()#<unknown>.getCurrentAlarmCalendar()#com.tywholland.simpletimer.timer.TimerActivity.updateTimeView()#android.widget.EditText.getText()#android.widget.TextView.setEnabled(boolean)#android.app.Activity.findViewById(<unknown>)#android.view.View.setOnClickListener(android.view.View.OnClickListener)#<unknown>.show()#android.view.View.setOnClickListener(android.view.View.OnClickListener)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setEnabled(boolean)#android.content.SharedPreferences.Editor.commit()#<unknown>.length()#.CountDownTimer(long, int)#android.content.SharedPreferences.Editor.putLong(java.lang.String, <unknown>)#android.content.SharedPreferences.getBoolean(<unknown>, boolean)#<unknown>.setAlarmName(java.lang.String)#android.widget.TextView.setText(<unknown>)#java.lang.String.format(java.lang.String, java.lang.Integer)#<unknown>.setAlarmName(java.lang.String)"}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener com.vinsol.expensetracker.utils.DisplayDate android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayDate;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\")) {\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n\t\t\t\t//TODO \n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ******\n\t\t// ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio\n\t\t// ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t;\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif(mRecordingHelper != null)\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,mDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\t\t ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\t\n\t\t\n\t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t} else {\n\t\t\t\n\t\t\tIntent mIntent = new Intent(this, ShowVoiceActivity.class);\n\t\t\tBundle tempBundle = new Bundle();\n\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\tlistOnResult.add(mEditList.get(0));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_TAG));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_AMOUNT));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n\t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDateDate(_list.get(DatabaseAdapter.KEY_DATE_TIME)));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(3));\n\t\t\t}\t\t\t\t\n\t\t\tlistOnResult.add(mEditList.get(4));\n\t\t\tlistOnResult.add(mEditList.get(5));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n\t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(6));\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(7));\n\t\t\tlistOnResult.add(mEditList.get(8));\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList.addAll(listOnResult);\n\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\tmIntent.putExtra(\"voiceShowBundle\", tempBundle);\n\t\t\tsetResult(Activity.RESULT_OK, mIntent);\n\t\t}\n\t\tfinish();\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-10T12:21:52Z", "hash_sni": "4561ad12c07a0d789d418a794ce568eb1a0249d3", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" import java.io.File;\n import java.util.ArrayList;\n import java.util.Calendar;\n-import java.util.Collections;\n import java.util.HashMap;\n \n import android.app.Activity;\n@@ -11,10 +10,8 @@ import android.content.Intent;\n import android.os.Bundle;\n import android.os.CountDownTimer;\n import android.os.SystemClock;\n-import android.util.Log;\n import android.view.KeyEvent;\n import android.view.View;\n-import android.view.WindowManager;\n import android.view.View.OnClickListener;\n import android.widget.Button;\n import android.widget.Chronometer;\n@@ -348,7 +345,6 @@ public class Voice extends Activity implements OnClickListener {\n \t\t}\n \t}\n \n-\t@SuppressWarnings(\"unchecked\")\n \tprivate void saveEntry() {\n \t\t\n \t\t// ///// ******* Creating HashMap to update info ******* ////////"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay Bundle DatabaseAdapter DateHandler DateHelper DisplayDate DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper add addAll addFlags canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLocationDate getLocationDateDate getLong getPlayBackTime getRepeatCount getString getStringArrayList getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put putExtra putStringArrayList saveEntry setBase setClickListeners setContentView setFirstDayOfWeek setGraphicsVoice setOnChronometerTickListener setOnClickListener setResult setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim"], "_version_": 1526753451374018560, "subject_t": ["Handled back press for show activity"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// /////// \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items ********** ///////// \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// //// ****** If audio recording started then stop recording audio \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// //// ******* Update database if user added additional info *******\t\t /////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t\t//TODO  \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// ////// ******** Starts Recording each time activity starts ****** \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// ***** /////// \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["e53c319d86f4121bcb0c1b38d07a9a4739f49a3c"], "id": "vinsol/expense-tracker\u00004561ad12c07a0d789d418a794ce568eb1a0249d3\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.isRecording()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#<unknown>.getLocationDateDate(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.setContentView(<unknown>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#<unknown>.getLocationDate(<unknown>, java.lang.String)#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.Bundle()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.widget.TextView.getText()#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.DisplayDate()#<unknown>.isAudioPlaying()#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Intent.addFlags(int)#android.os.SystemClock.elapsedRealtime()#android.widget.TextView.getText()#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.view.KeyEvent.getRepeatCount()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.app.Activity.setResult(int, android.content.Intent)#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#<unknown>.isRecording()#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.isRecording() java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) <unknown>.getLocationDateDate(<unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.setContentView(<unknown>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() <unknown>.getLocationDate(<unknown>, java.lang.String) android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.Bundle() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.widget.TextView.getText() <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.DisplayDate() <unknown>.isAudioPlaying() android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Intent.addFlags(int) android.os.SystemClock.elapsedRealtime() android.widget.TextView.getText() <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.add(java.lang.String) android.view.KeyEvent.getRepeatCount() java.util.ArrayList<java.lang.String>.add(<unknown>) android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.app.Activity.setResult(int, android.content.Intent) android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) <unknown>.isRecording() android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.util.Log android.app.Activity java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate static final int EDIT_RESULT = 35;\n\tprivate RelativeLayout dateBarRelativeLayout;\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\t\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\t\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t}\n\t\t\t\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\t\n\t\t\tif(mShowList.get(7) != null)\n\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\n\t\t\tif(mShowList.get(6) != null)\n\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\telse {\n\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tnew FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivityForResult(editIntent, EDIT_RESULT);\n//\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t\t\n\t\tsuper.onActivityResult(requestCode, resultCode, data);\n\t\tif (EDIT_RESULT == requestCode) {\n\t\t\tif(Activity.RESULT_OK == resultCode) {\n\t\t\t\t\n\t\t\t\tintentExtras = data.getBundleExtra(\"voiceShowBundle\");\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tLog.v(\"yo true\", true+\"\");\n\t\t\t\t\tmShowList = new ArrayList<String>();\n\t\t\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t\t\tLog.v(\"mShowListOnResult\", mShowList.toString());\n\t\t\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\t\t\tString amount = mShowList.get(2);\n\t\t\t\t\tString tag = mShowList.get(1);\n\t\t\t\t\t\n\t\t\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(7) != null)\n\t\t\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(6) != null)\n\t\t\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\t\t\telse {\n\t\t\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\t\tupdateUI();\n\t\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnew FavoriteHelper(this, mShowList);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-10T12:21:52Z", "hash_sni": "4561ad12c07a0d789d418a794ce568eb1a0249d3", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" \t\t\t\tcountDownTimer.cancel();\n \t\t\t} catch (NullPointerException e) {\n \t\t\t}\n-\t\t\t;\n-\n+\t\t\t\n \t\t\t// //// ****** Handles UI items on button click ****** ///////\n \t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n \t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n@@ -232,17 +231,14 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \n \t\t@Override\n \t\tpublic void onFinish() {\n-\t\t\tshow_text_voice_camera_time_details_chronometer\n-\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(mAudioPlay\n-\t\t\t\t\t\t\t.getPlayBackTime()));\n+\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n \t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n \t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n \t\t}\n \n \t\t@Override\n \t\tpublic void onTick(long millisUntilFinished) {\n-\t\t\tshow_text_voice_camera_time_details_chronometer\n-\t\t\t\t\t.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n+\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n \t\t}\n \t}\n \n@@ -250,8 +246,7 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \tprotected void onPause() {\n \n \t\t// //// ***** Check whether audio is recording or not ******* ///////\n-\t\t// //// ****** If audio recording started then stop recording audio\n-\t\t// ***** ///////\n+\t\t// //// ****** If audio recording started then stop recording audio ***** ///////\n \t\ttry {\n \t\t\tif (mAudioPlay.isAudioPlaying())\n \t\t\t\tmAudioPlay.stopPlayBack();\n@@ -285,8 +280,7 @@ public class ShowVoiceActivity extends Activity implements OnClickListener {\n \t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n \t\t\t\t\t}\n \t\t\t\t\t\n-\t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n-\t\t\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n+\t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))) {\n \t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n \t\t\t\t\t} else {\n \t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler ShowLocationHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getDrawable getExternalStorageState getId getInstance getIntent getPlayBackTime getResources getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putBoolean putExtra setBackgroundDrawable setContentView setFirstDayOfWeek setOnClickListener setText setTimeInMillis setVisibility show start startActivityForResult startPlayBack stop stopPlayBack toString updateUI v"], "_version_": 1526753451387650048, "subject_t": ["Handled back press for show activity"], "comments_t": ["\t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** //\t\t\tfinish(); \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ****** If audio recording started then stop recording audio ***** /////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["e53c319d86f4121bcb0c1b38d07a9a4739f49a3c"], "id": "vinsol/expense-tracker\u00004561ad12c07a0d789d418a794ce568eb1a0249d3\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.startActivityForResult(android.content.Intent, int)#android.util.Log.v(java.lang.String, java.lang.String)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.io.File.canRead()#android.widget.Toast.show()#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getPlayBackTime()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#<unknown>.open()#android.content.Context.getString(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#java.util.AbstractCollection<java.lang.String>.toString()#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.Toast.show()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.view.View.setVisibility(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#java.io.File.File(java.lang.String)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.view.ContextThemeWrapper.getResources()#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.content.Context.getString(<unknown>)#android.util.Log.v(java.lang.String, java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#java.lang.String.contains(java.lang.String)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#java.lang.String.equals(<unknown>)#android.os.Environment.getExternalStorageState()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#java.lang.Long.toString(java.lang.Long)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#<unknown>.getDisplayTime(<unknown>)#android.os.CountDownTimer.cancel()#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setBackgroundDrawable(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.util.ArrayList<java.lang.String>.ArrayList, String()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.Toast.show()#java.util.Calendar.setFirstDayOfWeek(int)#java.util.Calendar.setTimeInMillis(long)#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.res.Resources.getDrawable(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#<unknown>.DisplayTime()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.os.Bundle.putBoolean(java.lang.String, boolean)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.getInstance()#android.view.View.setVisibility(int)", "callsites_t": ["java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.startActivityForResult(android.content.Intent, int) android.util.Log.v(java.lang.String, java.lang.String) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.io.File.canRead() android.widget.Toast.show() java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getPlayBackTime() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) <unknown>.open() android.content.Context.getString(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) java.util.AbstractCollection<java.lang.String>.toString() <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.Toast.show() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.widget.TextView.setText(java.lang.String) android.view.View.setVisibility(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) java.io.File.File(java.lang.String) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.view.ContextThemeWrapper.getResources() android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.content.Context.getString(<unknown>) android.util.Log.v(java.lang.String, java.lang.String) android.widget.TextView.setText(java.lang.String) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) java.lang.String.contains(java.lang.String) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) java.lang.String.equals(<unknown>) android.os.Environment.getExternalStorageState() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() java.io.File.File(java.lang.String) android.widget.Toast.show() java.lang.Long.toString(java.lang.Long) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() <unknown>.getDisplayTime(<unknown>) android.os.CountDownTimer.cancel() java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setBackgroundDrawable(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.util.ArrayList<java.lang.String>.ArrayList, String() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.Toast.show() java.util.Calendar.setFirstDayOfWeek(int) java.util.Calendar.setTimeInMillis(long) java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.content.res.Resources.getDrawable(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) <unknown>.getPlayBackTime() android.app.Activity.finish() <unknown>.DisplayTime() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) android.content.Intent.getBundleExtra(java.lang.String) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.os.Bundle.putBoolean(java.lang.String, boolean) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) java.util.Calendar.getInstance() android.view.View.setVisibility(int)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent android.view.Window com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.EditText android.widget.Chronometer java.util.HashMap android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity com.vinsol.expensetracker.location.LocationLast android.widget.ImageView"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.util.HashMap;\n\nimport com.vinsol.expensetracker.location.LocationLast;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class Voice extends Activity implements OnClickListener{\n\t\n\tprivate TextView text_voice_camera_header_title;\n\tprivate ImageView text_voice_camera_voice_details_separator;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\t\n\t\t///////   ****** No Title Bar   ********* /////////\n        \n        \n        this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        \n        setContentView(R.layout.text_voice_camera);\n        \n        \n        ////////   ********    Initializing and assigning memory to UI Items **********    /////////\n        \n        text_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n        text_voice_camera_voice_details_separator = (ImageView) findViewById(R.id.text_voice_camera_voice_details_separator);\n        text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n        text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n        text_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n        text_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n        text_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n    \ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n    \ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n    \ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n    \tmDatabaseAdapter = new DatabaseAdapter(this);\n    \t\n    \t////////*********     Get id from intent extras     ********   ////////////\n        intentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n        _id = intentExtras.getLong(\"_id\");\n    \t\n        \n        \n        \n        ////////   ********  Handle Date Bar   *********   ////////\n        if(intentExtras.containsKey(\"timeInMillis\")){\n        \tnew DateHandler(this ,intentExtras.getLong(\"timeInMillis\"));\n        } else {\n        \tnew DateHandler(this);\n        }\n        \n        \n        ////////   ********   Starts Recording each time activity starts   ******   ///////\n        if(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n        \tsetGraphicsVoice();\n        \tcontrolVoiceChronometer();\n        \tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n        \tmRecordingHelper.startRecording();\n        } \n        else {\n        \tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n        }\n        setClickListeners();\n\t\t\n\t\t////////*********     Get Last most accurate location info   *********   /////////\n\t\tLocationLast mLocationLast = new LocationLast(this);\n\t\tmLocationLast.getLastLocation();\n\t}\n\t\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\n\t\n\t@Override\n\tprotected void onPause() {\n\t\t\n\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\tif(android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)){\n\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t}\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t////////    *******    Adding Click Listeners to UI Items ******** //////////\n\t\t\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\t\t\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\tif(text_voice_camera_time_details_chronometer.getText().length() > 5){\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_header_title.setText(\"Voice Entry\");\n        \n        ///////   ***** Sets Title Voice Entry *********///////\n        text_voice_camera_voice_details_separator.setVisibility(View.VISIBLE);\n        \n        //////   ******  Shows Voice Details ********////////\n        text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t///////   ********     Adding On Click Actions to click listeners *********    //////////\n\t\t\n\t\t\n\t\t////  ***** if stop button pressed ****** //////\n\t\tif(v.getId() == R.id.text_voice_camera_stop_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   ////////\n\t\t\tmRecordingHelper.stopRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t}\n\t\t\n\t\t\n\t\t////  ***** if play button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_play_button){\n\t\t\t//////\t     ********   to handle playback of recorded file   *********   ////////\n\t\t\tmAudioPlay = new AudioPlay(_id+\"\",this);\n\t\t\t\n\t\t\t///////   *******   Chronometer Starts Countdown   ******  ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\n\t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** ///////\n\t\t\tif(!mAudioPlay.isAudioPlaying()){\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\t\t\n\t\t////  ***** if rerecord button pressed ****** //////\t\t\n\t\telse if(v.getId() == R.id.text_voice_camera_rerecord_button){\n\t\t\ttry{\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t}catch(NullPointerException e){};\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){}\n\t\t\t\n\t\t\t//////   ******   Handles UI items on button click  ******  ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\t\t\t\n\t\t\t//////  ******  Restarts chronometer and recording   *******  ////////\n\t\t\tif(mRecordingHelper.isRecording())\n\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id+\"\",this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\t\t\n\t\t////////********  Adding Action to save entry     *********    ///////////\n\t\t\n\t\tif(v.getId() == R.id.text_voice_camera_save_entry){\n\t\t\tsaveEntry();\n\t\t}\n\t\n\t\n\t\t/////////     *********   Adding action if delete button **********  /////////\n\t\n\t\tif(v.getId() == R.id.text_voice_camera_delete){\n\t\t\t//////   *****  Check whether audio is recording or not   *******   ///////\n\t\t\t//////   ******   If audio recording started then stop recording audio   *****   ///////\n\t\t\ttry{\n\t\t\t\tif(mRecordingHelper.isRecording()){\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******//////\n\t\t\ttry{\n\t\t\t\tif(mAudioPlay.isAudioPlaying()){\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t}catch(NullPointerException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\n\t\t\tnew FileDelete(_id);\n\t\t\n\t\t\t//////   *******   Delete entry from database ********   /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n\t\n\tprivate void saveEntry() {\n\t\t///////    *******  Creating HashMap to update info   *******  ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\t\t\n\t\tif(!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")){\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double)((int)((mAmount+0.005)*100.0)/100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\t\n\t\tif(text_voice_camera_tag.getText().toString() != \"\"){\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\t\t\n\t\tif(!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString))\t\n\t\ttry{\n\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\t//////    *******   Update database if user added additional info   *******  ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\tfinish();\n\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t Intent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\t startActivity(intentExpenseListing);\n\t\t}\n\t}\n\n\n\t/////////   *********       CountdownTimer for Chronometer    *********    //////////      \n\t//countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer{\n\n\t\tDisplayTime mDisplayTime;\n\t\t\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\t\n\t\n\t///// ******************  Handling back press of key   ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event)  {\n\t     if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t    \t onBackPressed();\n\t         return true;\n\t      }\n\t    return super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t    // This will be called either automatically for you on 2.0    \n\t    // or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t    return;\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-11-26T07:08:32Z", "hash_sni": "f3f63e8b8e4ae305501369c5568614db6a2861fe", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" \t\tmDatabaseAdapter.editDatabase(_list);\n \t\tmDatabaseAdapter.close();\n \t\tfinish();\n-\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n-\t\tstartActivity(intentExpenseListing);\n+\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n+\t\t\t Intent intentExpenseListing = new Intent(this, ExpenseListing.class);\n+\t\t\t startActivity(intentExpenseListing);\n+\t\t}\n \t}\n \n "], "score": 1.0, "methods_t": ["AudioPlay DatabaseAdapter DateHandler DateHelper DisplayTime FileDelete HashMap, StringString Intent LocationLast MyCount OnChronometerTickListener RecordingHelper cancel close containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish getBundleExtra getDisplayTime getExternalStorageState getId getIntent getLastLocation getLong getPlayBackTime getRepeatCount getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble printStackTrace put requestWindowFeature saveEntry setBase setClickListeners setContentView setGraphicsVoice setOnChronometerTickListener setOnClickListener setText setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString"], "_version_": 1526754002221400064, "subject_t": ["Project More Stable"], "comments_t": ["\t\t////////********  Adding Action to save entry     *********    /////////// \t//countdowntimer is an abstract class, so extend it and fill in methods         ///////   ***** Sets Title Voice Entry *********/////// \t\t///////   ****** No Title Bar   ********* /////////         ////////   ********    Initializing and assigning memory to UI Items **********    /////////     \t////////*********     Get id from intent extras     ********   //////////// \t    // This will be called either automatically for you on 2.0     \t\t\t///////   *******   Chronometer Starts Countdown   ******  /////// \t\t\t/////   ********   Start Audio Playback and counter to play audio   ****** /////// \t\t\t//////  ******  Restarts chronometer and recording   *******  //////// \t\t////////    *******    Adding Click Listeners to UI Items ******** ////////// \t\t\t//////   *****  Check whether audio is recording or not   *******   /////// \t///// ******************  Handling back press of key   ********** /////////// \t\t////////*********     Get Last most accurate location info   *********   ///////// \t\t////  ***** if play button pressed ****** //////\t\t \t\t\t//////  *******  Stop Recording Audio and stop chronometer  ********   //////// \t\t\t//////   *******   Delete entry from database ********   ///////// \t\t////  ***** if rerecord button pressed ****** //////\t\t \t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t//////   *****  Check whether audio is recording or not   *******   /////// \t\t//////    *******   Update database if user added additional info   *******  /////// \t\t///////   ********     Adding On Click Actions to click listeners *********    ////////// \t\t\t//////   ******   If audio recording started then stop recording audio   *****   /////// \t\t\t/////  *******   If Audio PlayBack is there stop playing audio   *******////// \t/////////   *********       CountdownTimer for Chronometer    *********    //////////       \t\t////  ***** if stop button pressed ****** //////         ////////   ********   Starts Recording each time activity starts   ******   /////// \t    // or later, or by the code above on earlier versions of the platform. \t\t///////   ***** Sets Title Voice Entry *********/////// \t\t\t//////   ******   Handles UI items on button click  ******  ///////         //////   ******  Shows Voice Details ********//////// \t\t\t//////\t     ********   to handle playback of recorded file   *********   //////// \t\t///////    *******  Creating HashMap to update info   *******  ////////         ////////   ********  Handle Date Bar   *********   //////// \t\t/////////     *********   Adding action if delete button **********  /////////"], "parents_ss": ["8a3ef60f98fd1263702e2bce8474b8084c3598e9"], "id": "vinsol/expense-tracker\u0000f3f63e8b8e4ae305501369c5568614db6a2861fe\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.isRecording()#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.lang.Long.toString(long)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getLastLocation()#android.widget.TextView.getText()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#com.vinsol.expensetracker.Voice.onBackPressed()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.app.Activity.finish()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.lang.Long.toString(long)#com.vinsol.expensetracker.Voice.setGraphicsVoice()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.view.View.setVisibility(int)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getLong(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#android.view.View.setVisibility(int)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.close()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#android.os.SystemClock.elapsedRealtime()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.widget.TextView.getText()#android.content.Intent.getBundleExtra(java.lang.String)#android.app.Activity.setContentView(<unknown>)#android.view.KeyEvent.getRepeatCount()#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#android.os.Environment.getExternalStorageState()#android.widget.Chronometer.setOnChronometerTickListener()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.length()#<unknown>.getPlayBackTime()#.OnChronometerTickListener()#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.app.Activity.requestWindowFeature(int)#<unknown>.open()#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#android.view.View.setVisibility(int)#android.widget.Toast.show()#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#<unknown>.startPlayBack()#java.lang.CharSequence.toString()#<unknown>.close()#<unknown>.LocationLast(com.vinsol.expensetracker.Voice)#java.lang.Double.toString()#android.widget.Chronometer.stop()#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.view.View.getId()#<unknown>.isRecording()#android.widget.ImageView.setVisibility(int)#android.widget.Chronometer.setBase(long)#android.app.Activity.finish()", "callsites_t": ["<unknown>.isRecording() <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) android.view.View.setVisibility(int) android.widget.Chronometer.start() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.lang.Long.toString(long) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) android.view.View.setVisibility(int) <unknown>.getLastLocation() android.widget.TextView.getText() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() com.vinsol.expensetracker.Voice.onBackPressed() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.app.Activity.finish() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.lang.Long.toString(long) com.vinsol.expensetracker.Voice.setGraphicsVoice() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.view.View.setVisibility(int) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getLong(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() android.view.View.setVisibility(int) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.close() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() android.os.SystemClock.elapsedRealtime() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.widget.TextView.getText() android.content.Intent.getBundleExtra(java.lang.String) android.app.Activity.setContentView(<unknown>) android.view.KeyEvent.getRepeatCount() com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) android.os.Environment.getExternalStorageState() android.widget.Chronometer.setOnChronometerTickListener() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.length() <unknown>.getPlayBackTime() .OnChronometerTickListener() <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.app.Activity.requestWindowFeature(int) <unknown>.open() android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) android.view.View.setVisibility(int) android.widget.Toast.show() android.view.View.setVisibility(int) android.widget.Chronometer.start() android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) <unknown>.startPlayBack() java.lang.CharSequence.toString() <unknown>.close() <unknown>.LocationLast(com.vinsol.expensetracker.Voice) java.lang.Double.toString() android.widget.Chronometer.stop() java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) android.view.View.getId() <unknown>.isRecording() android.widget.ImageView.setVisibility(int) android.widget.Chronometer.setBase(long) android.app.Activity.finish()"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.view.View.OnClickListener com.vinsol.expensetracker.utils.DisplayDate android.os.Bundle java.util.ArrayList android.widget.Chronometer.OnChronometerTickListener com.vinsol.expensetracker.utils.DisplayTime android.view.KeyEvent android.widget.TextView com.vinsol.expensetracker.utils.FileDelete java.util.Calendar android.os.CountDownTimer android.widget.Toast com.vinsol.expensetracker.utils.StringProcessing com.vinsol.expensetracker.utils.DateHelper android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay com.vinsol.expensetracker.utils.RecordingHelper android.os.SystemClock android.widget.EditText com.vinsol.expensetracker.helpers.LocationHelper android.widget.Chronometer java.util.HashMap android.widget.RelativeLayout android.view.View android.app.Activity"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.SystemClock;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.Chronometer.OnChronometerTickListener;\nimport android.widget.EditText;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.helpers.LocationHelper;\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DateHelper;\nimport com.vinsol.expensetracker.utils.DisplayDate;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\nimport com.vinsol.expensetracker.utils.RecordingHelper;\nimport com.vinsol.expensetracker.utils.StringProcessing;\n\npublic class Voice extends Activity implements OnClickListener {\n\n\tprivate TextView text_voice_camera_header_title;\n\tprivate RelativeLayout text_voice_camera_voice_details;\n\tprivate Chronometer text_voice_camera_time_details_chronometer;\n\tprivate Button text_voice_camera_stop_button;\n\tprivate Button text_voice_camera_play_button;\n\tprivate Button text_voice_camera_rerecord_button;\n\tprivate EditText text_voice_camera_amount;\n\tprivate EditText text_voice_camera_tag;\n\tprivate MyCount countDownTimer;\n\tprivate RecordingHelper mRecordingHelper;\n\tprivate AudioPlay mAudioPlay;\n\tprivate long _id;\n\tprivate Bundle intentExtras;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprivate TextView text_voice_camera_date_bar_dateview;\n\tprivate String dateViewString;\n\tprivate ArrayList<String> mEditList;\n\tprivate boolean setLocation = false; \n\tprivate boolean setUnknown = false;\n\tprivate Boolean isChanged = false;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.text_voice_camera);\n\n\t\t// ////// ******** Initializing and assigning memory to UI Items ********** /////////\n\n\t\ttext_voice_camera_header_title = (TextView) findViewById(R.id.text_voice_camera_header_title);\n\t\ttext_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.text_voice_camera_voice_details);\n\t\ttext_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.text_voice_camera_time_details_chronometer);\n\t\ttext_voice_camera_stop_button = (Button) findViewById(R.id.text_voice_camera_stop_button);\n\t\ttext_voice_camera_play_button = (Button) findViewById(R.id.text_voice_camera_play_button);\n\t\ttext_voice_camera_rerecord_button = (Button) findViewById(R.id.text_voice_camera_rerecord_button);\n\t\ttext_voice_camera_amount = (EditText) findViewById(R.id.text_voice_camera_amount);\n\t\ttext_voice_camera_tag = (EditText) findViewById(R.id.text_voice_camera_tag);\n\t\ttext_voice_camera_date_bar_dateview = (TextView) findViewById(R.id.text_voice_camera_date_bar_dateview);\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\t// //////********* Get id from intent extras ******** ////////////\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceBundle\");\n\t\tif(intentExtras.containsKey(\"_id\")){\n\t\t\t_id = intentExtras.getLong(\"_id\");\n\t\t}\n\n\t\tif(intentExtras.containsKey(\"setLocation\")){\n\t\t\tsetLocation = intentExtras.getBoolean(\"setLocation\");\n\t\t}\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mEditList.get(0));\n\t\t\tString amount = mEditList.get(2);\n\t\t\tString tag = mEditList.get(1);\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\")) {\n\t\t\t\t\ttext_voice_camera_amount.setText(amount);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(tag.equals(getString(R.string.unknown_entry))){\n\t\t\t\tsetUnknown = true;\n\t\t\t}\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)) || tag.equals(getString(R.string.unknown_entry)))) {\n\t\t\t\ttext_voice_camera_tag.setText(tag);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// ////// ******** Handle Date Bar ********* ////////\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tnew DateHandler(this, Long.parseLong(mEditList.get(6)));\n\t\t} else if (intentExtras.containsKey(\"timeInMillis\")) {\n\t\t\tnew DateHandler(this, intentExtras.getLong(\"timeInMillis\"));\n\t\t} else {\n\t\t\tnew DateHandler(this);\n\t\t}\n\n\t\t// ////// ******** Starts Recording each time activity starts ****** ///////\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tsetGraphicsVoice();\n\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\") && !setUnknown) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\ttext_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\t\tmRecordingHelper.startRecording();\n\t\t\t\tcontrolVoiceChronometer();\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\tsetClickListeners();\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tsuper.onResume();\n\t\tdateViewString = text_voice_camera_date_bar_dateview.getText().toString();\n\t}\n\t\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio  ***** ///////\n\t\ttry {\n\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\tprivate void setClickListeners() {\n\t\t// ////// ******* Adding Click Listeners to UI Items ******** //////////\n\n\t\ttext_voice_camera_stop_button.setOnClickListener(this);\n\t\ttext_voice_camera_play_button.setOnClickListener(this);\n\t\ttext_voice_camera_rerecord_button.setOnClickListener(this);\n\n\t\tButton text_voice_camera_save_entry = (Button) findViewById(R.id.text_voice_camera_save_entry);\n\t\ttext_voice_camera_save_entry.setOnClickListener(this);\n\n\t\tButton text_voice_camera_delete = (Button) findViewById(R.id.text_voice_camera_delete);\n\t\ttext_voice_camera_delete.setOnClickListener(this);\n\t}\n\n\tprivate void controlVoiceChronometer() {\n\t\ttext_voice_camera_time_details_chronometer.start();\n\t\ttext_voice_camera_time_details_chronometer.setOnChronometerTickListener(new OnChronometerTickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onChronometerTick(Chronometer chronometer) {\n\t\t\t\t\t\tif (text_voice_camera_time_details_chronometer.getText().length() > 5) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\t\t\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate void setGraphicsVoice() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\ttext_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\ttext_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// ///// ******** Adding On Click Actions to click listeners *********\n\t\t// //////////\n\n\t\t// // ***** if stop button pressed ****** //////\n\t\tif (v.getId() == R.id.text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\t\t\t\ttext_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t} catch (NullPointerException e) {\n\n\t\t\t}\n\t\t}\n\n\t\t// // ***** if play button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\t// // ***** if rerecord button pressed ****** //////\n\t\telse if (v.getId() == R.id.text_voice_camera_rerecord_button) {\n\t\t\tisChanged = true;\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\ttext_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\t\t\ttext_voice_camera_rerecord_button.setVisibility(View.GONE);\n\n\t\t\t// //// ****** Restarts chronometer and recording ******* ////////\n\t\t\tif(mRecordingHelper != null)\n\t\t\t\tif (mRecordingHelper.isRecording())\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\tmRecordingHelper = new RecordingHelper(_id + \"\", this);\n\t\t\tmRecordingHelper.startRecording();\n\t\t\ttext_voice_camera_time_details_chronometer.setBase(SystemClock.elapsedRealtime());\n\t\t\ttext_voice_camera_time_details_chronometer.start();\n\t\t}\n\n\t\t// //////******** Adding Action to save entry ********* ///////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_save_entry) {\n\t\t\tsaveEntry();\n\t\t}\n\n\t\t// /////// ********* Adding action if delete button ********** /////////\n\n\t\tif (v.getId() == R.id.text_voice_camera_delete) {\n\t\t\t// //// ***** Check whether audio is recording or not *******\n\t\t\t// ///////\n\t\t\t// //// ****** If audio recording started then stop recording audio\n\t\t\t// ***** ///////\n\t\t\ttry {\n\t\t\t\tif (mRecordingHelper.isRecording()) {\n\t\t\t\t\tmRecordingHelper.stopRecording();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t// *******//////\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttext_voice_camera_time_details_chronometer.stop();\n\n\t\t\tnew FileDelete(_id);\n\n\t\t\t// //// ******* Delete entry from database ******** /////////\n\t\t\tmDatabaseAdapter.open();\n\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\tmDatabaseAdapter.close();\n\t\t\t\n\t\t\tif(intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\t\tIntent mIntent = new Intent(this, ShowTextActivity.class);\n\t\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t\tBundle tempBundle = new Bundle();\n\t\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\t\tmEditList = new ArrayList<String>();\n\t\t\t\tmEditList.addAll(listOnResult);\n\t\t\t\tmIntent.putExtra(\"textShowBundle\", tempBundle);\n\t\t\t\tsetResult(Activity.RESULT_CANCELED, mIntent);\n\t\t\t}\n\t\t\tfinish();\n\t\t}\n\t}\n\n\tprivate void saveEntry() {\n\t\t\n\t\t// ///// ******* Creating HashMap to update info ******* ////////\n\t\tHashMap<String, String> _list = new HashMap<String, String>();\n\t\t_list.put(DatabaseAdapter.KEY_ID, Long.toString(_id));\n\n\t\tif (!text_voice_camera_amount.getText().toString().equals(\".\") && !text_voice_camera_amount.getText().toString().equals(\"\")) {\n\t\t\tDouble mAmount = Double.parseDouble(text_voice_camera_amount.getText().toString());\n\t\t\tmAmount = (double) ((int) ((mAmount + 0.005) * 100.0) / 100.0);\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, mAmount.toString());\n\t\t} else {\n\t\t\t_list.put(DatabaseAdapter.KEY_AMOUNT, null);\n\t\t}\n\t\tif (text_voice_camera_tag.getText().toString() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_TAG, text_voice_camera_tag.getText().toString());\n\t\t}\n\n\t\tif (!text_voice_camera_date_bar_dateview.getText().toString().equals(dateViewString)) {\n\t\t\ttry {\n\t\t\t\tif (!intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME,mDateHelper.getTimeMillis() + \"\");\n\t\t\t\t} else {\n\t\t\t\t\tif(!intentExtras.containsKey(\"timeInMillis\")){\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString());\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\t\tmCalendar.setTimeInMillis(intentExtras.getLong(\"timeInMillis\"));\n\t\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\tDateHelper mDateHelper = new DateHelper(text_voice_camera_date_bar_dateview.getText().toString(),mCalendar);\n\t\t\t\t\t\t_list.put(DatabaseAdapter.KEY_DATE_TIME, mDateHelper.getTimeMillis()+\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(setLocation == true && LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\t\t_list.put(DatabaseAdapter.KEY_LOCATION, LocationHelper.currentAddress);\n\t\t}\n\t\t\n\t\t// //// ******* Update database if user added additional info *******\t\t ///////\n\t\tmDatabaseAdapter.open();\n\t\tmDatabaseAdapter.editDatabase(_list);\n\t\tmDatabaseAdapter.close();\n\t\t\n\t\t\n\t\tif(!intentExtras.containsKey(\"isFromShowPage\")){\n\t\t\tIntent intentExpenseListing = new Intent(this, ExpenseListing.class);\n\t\t\tBundle mToHighLight = new Bundle();\n\t\t\tmToHighLight.putString(\"toHighLight\", _list.get(DatabaseAdapter.KEY_ID));\n\t\t\tintentExpenseListing.putExtras(mToHighLight);\n\t\t\tintentExpenseListing.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\t\t\tstartActivity(intentExpenseListing);\n\t\t} else {\n\t\t\t\n\t\t\tIntent mIntent = new Intent(this, ShowVoiceActivity.class);\n\t\t\tBundle tempBundle = new Bundle();\n\t\t\tArrayList<String> listOnResult = new ArrayList<String>();\n\t\t\tlistOnResult.add(mEditList.get(0));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_TAG));\n\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_AMOUNT));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) != null ){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDate(_list.get(DatabaseAdapter.KEY_DATE_TIME), mEditList.get(7)));\n\t\t\t} else if (_list.containsKey(DatabaseAdapter.KEY_DATE_TIME) && mEditList.get(7) == null){\n\t\t\t\tlistOnResult.add(new DisplayDate().getLocationDateDate(_list.get(DatabaseAdapter.KEY_DATE_TIME)));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(3));\n\t\t\t}\t\t\t\t\n\t\t\tif((!mEditList.get(1).equals(listOnResult.get(1))) || (!mEditList.get(2).equals(new StringProcessing().getStringDoubleDecimal(listOnResult.get(2)))) || isChanged ) {\n\t\t\t\tShowTextActivity.favID = null;\n\t\t\t\tHashMap<String, String> listForFav = new HashMap<String, String>();\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_FAVORITE, \"\");\n\t\t\t\tlistForFav.put(DatabaseAdapter.KEY_ID, mEditList.get(0));\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.editDatabase(listForFav);\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tlistOnResult.add(\"\");\n\t\t\t} else if(ShowVoiceActivity.favID == null) {\n\t\t\t\t\tlistOnResult.add(mEditList.get(4));\n\t\t\t\t}\n\t\t\t\telse { \n\t\t\t\t\tlistOnResult.add(ShowVoiceActivity.favID);\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(5));\n\t\t\tif(_list.containsKey(DatabaseAdapter.KEY_DATE_TIME)) {\n\t\t\t\tlistOnResult.add(_list.get(DatabaseAdapter.KEY_DATE_TIME));\n\t\t\t} else {\n\t\t\t\tlistOnResult.add(mEditList.get(6));\n\t\t\t}\n\t\t\tlistOnResult.add(mEditList.get(7));\n\t\t\tmEditList = new ArrayList<String>();\n\t\t\tmEditList.addAll(listOnResult);\n\t\t\ttempBundle.putStringArrayList(\"mDisplayList\", listOnResult);\n\t\t\tmIntent.putExtra(\"voiceShowBundle\", tempBundle);\n\t\t\tsetResult(Activity.RESULT_OK, mIntent);\n\t\t}\n\t\tfinish();\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\ttext_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\ttext_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\ttext_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t// /// ****************** Handling back press of key ********** ///////////\n\tpublic boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\tif (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\t\t\tonBackPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onKeyDown(keyCode, event);\n\t}\n\n\tpublic void onBackPressed() {\n\t\t// This will be called either automatically for you on 2.0\n\t\t// or later, or by the code above on earlier versions of the platform.\n\t\tsaveEntry();\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn;\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-13T07:29:45Z", "hash_sni": "67f6b011b817b50c5090672798396298673fbf4c", "name_sni": "src/com/vinsol/expensetracker/Voice.java", "patch_t": [" import com.vinsol.expensetracker.utils.DisplayTime;\n import com.vinsol.expensetracker.utils.FileDelete;\n import com.vinsol.expensetracker.utils.RecordingHelper;\n+import com.vinsol.expensetracker.utils.StringProcessing;\n \n public class Voice extends Activity implements OnClickListener {\n \n@@ -424,7 +425,7 @@ public class Voice extends Activity implements OnClickListener {\n \t\t\t} else {\n \t\t\t\tlistOnResult.add(mEditList.get(3));\n \t\t\t}\t\t\t\t\n-\t\t\tif((mEditList.get(1) != listOnResult.get(1)) || (mEditList.get(2) != listOnResult.get(2)) || isChanged ) {\n+\t\t\tif((!mEditList.get(1).equals(listOnResult.get(1))) || (!mEditList.get(2).equals(new StringProcessing().getStringDoubleDecimal(listOnResult.get(2)))) || isChanged ) {\n \t\t\t\tShowTextActivity.favID = null;\n \t\t\t\tHashMap<String, String> listForFav = new HashMap<String, String>();\n \t\t\t\tlistForFav.put(DatabaseAdapter.KEY_FAVORITE, \"\");"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay Bundle DatabaseAdapter DateHandler DateHelper DisplayDate DisplayTime File FileDelete HashMap, StringString Intent MyCount OnChronometerTickListener RecordingHelper StringProcessing add addAll addFlags canRead cancel close contains containsKey controlVoiceChronometer deleteDatabaseEntryID editDatabase elapsedRealtime equals findViewById finish get getBoolean getBundleExtra getDisplayTime getExternalStorageState getId getInstance getIntent getLocationDate getLocationDateDate getLong getPlayBackTime getRepeatCount getString getStringArrayList getStringDoubleDecimal getText getTimeMillis isAudioPlaying isRecording length makeText onBackPressed open parseDouble parseLong printStackTrace put putExtra putExtras putString putStringArrayList saveEntry setBase setClickListeners setContentView setFirstDayOfWeek setGraphicsVoice setOnChronometerTickListener setOnClickListener setResult setText setTimeInMillis setVisibility show start startActivity startPlayBack startRecording stop stopPlayBack stopRecording toString trim"], "_version_": 1526756842129063936, "subject_t": ["Removed bug from favorite"], "comments_t": ["\t\t// or later, or by the code above on earlier versions of the platform. \t\t// ///// ******** Adding On Click Actions to click listeners ********* \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t// ////// ******** Starts Recording each time activity starts ****** /////// \t\t\t// //// ***** Check whether audio is recording or not ******* \t\t\t// ****** /////// \t\t\t// //// ****** If audio recording started then stop recording audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** \t\t\t// //// ****** Restarts chronometer and recording ******* //////// \t\t\t// //// ******* Delete entry from database ******** ///////// \t\t// /////// ********* Adding action if delete button ********** ///////// \t\t// ////// ******** Initializing and assigning memory to UI Items ********** ///////// \t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //// ******** to handle playback of recorded file ********* \t\t\t// ***** /////// \t// /// ****************** Handling back press of key ********** /////////// \t\t// // ***** if rerecord button pressed ****** ////// \t\t\t// *******////// \t\t// ////// ******* Adding Click Listeners to UI Items ******** ////////// \t\t// //// ******* Update database if user added additional info *******\t\t /////// \t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t// ////// ******** Handle Date Bar ********* //////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t// // ***** if stop button pressed ****** ////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t// This will be called either automatically for you on 2.0 \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t// //////******** Adding Action to save entry ********* /////////// \t\t// //// ****** If audio recording started then stop recording audio  ***** /////// \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// ///// ******* Creating HashMap to update info ******* //////// \t\t\t// /////// \t\t// //////********* Get id from intent extras ******** //////////// \t\t\t// //////// \t\t// // ***** if play button pressed ****** ////// \t\t// //////////"], "parents_ss": ["a455ffce4cda2c7214c09b76dee3e92cb5e03741"], "id": "vinsol/expense-tracker\u000067f6b011b817b50c5090672798396298673fbf4c\u0000src/com/vinsol/expensetracker/Voice.java", "callsites_cs": "<unknown>.stopPlayBack()#<unknown>.isRecording()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.containsKey(java.lang.String)#android.os.Bundle.getLong(java.lang.String)#android.widget.Chronometer.stop()#<unknown>.FileDelete(long)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>)#<unknown>.startRecording()#java.lang.String.equals(java.lang.String)#java.lang.Throwable.printStackTrace()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.deleteDatabaseEntryID(java.lang.String)#<unknown>.getTimeMillis()#android.app.Activity.getIntent()#java.util.Calendar.setTimeInMillis(long)#android.app.Activity.findViewById(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.Long.toString(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#<unknown>.isAudioPlaying()#android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.DateHandler(com.vinsol.expensetracker.Voice)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#com.vinsol.expensetracker.Voice.setGraphicsVoice()#java.lang.Long.toString(long)#android.view.View.setVisibility(int)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#<unknown>.getLocationDateDate(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.getText()#android.widget.TextView.setText(<unknown>)#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.lang.Double.parseDouble(java.lang.String)#<unknown>.stopPlayBack()#java.lang.String.equals(<unknown>)#java.lang.String.contains(java.lang.String)#android.view.View.setVisibility(int)#android.content.Context.getString(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#<unknown>.open()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.ArrayList, String()#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice)#android.content.Intent.getBundleExtra(java.lang.String)#android.os.Bundle.putString(java.lang.String, <unknown>)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setContentView(<unknown>)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#<unknown>.stopPlayBack()#android.os.Environment.getExternalStorageState()#com.vinsol.expensetracker.Voice.setClickListeners()#android.os.CountDownTimer.cancel()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.CharSequence.length()#.OnChronometerTickListener()#<unknown>.open()#<unknown>.getLocationDate(<unknown>, java.lang.String)#android.widget.TextView.setText(<unknown>)#android.widget.Chronometer.start()#android.widget.Toast.show()#<unknown>.getDisplayTime(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.startPlayBack()#java.lang.String.equals(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#<unknown>.close()#java.lang.Double.toString()#java.lang.String.equals(java.lang.String)#android.view.View.getId()#java.util.Calendar.getInstance()#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#android.app.Activity.finish()#java.io.File.File(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.stopRecording()#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.lang.String.equals(<unknown>)#android.view.View.setVisibility(int)#android.os.Environment.getExternalStorageState()#java.lang.Throwable.printStackTrace()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#<unknown>.getPlayBackTime()#<unknown>.stopRecording()#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#android.widget.Chronometer.start()#java.lang.Long.parseLong(java.lang.String)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#android.os.Bundle.containsKey(java.lang.String)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.Bundle()#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#<unknown>.DateHandler(com.vinsol.expensetracker.Voice, long)#java.lang.String.equals(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#<unknown>.DateHelper(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.app.Activity.setResult(int, android.content.Intent)#android.widget.TextView.getText()#android.content.Intent.putExtras(android.os.Bundle)#<unknown>.DateHelper(java.lang.String, java.util.Calendar)#java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.lang.String.equals(java.lang.String)#android.view.View.setVisibility(int)#com.vinsol.expensetracker.Voice.saveEntry()#java.lang.CharSequence.toString()#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#<unknown>.trim()#com.vinsol.expensetracker.Voice.onBackPressed()#android.app.Activity.startActivity(android.content.Intent)#android.view.View.setVisibility(int)#android.app.Activity.finish()#android.os.Bundle.getLong(java.lang.String)#java.util.ArrayList<java.lang.String>.add(java.lang.String)#<unknown>.StringProcessing()#android.os.Bundle.containsKey(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.startRecording()#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#java.util.ArrayList<java.lang.String>.get(int)#java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>)#<unknown>.DisplayDate()#<unknown>.isAudioPlaying()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.CountDownTimer.start()#<unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice)#android.content.Context.getString(<unknown>)#java.lang.String.equals(java.lang.String)#android.widget.EditText.getText()#com.vinsol.expensetracker.Voice.controlVoiceChronometer()#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String)#java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.Bundle.getBoolean(java.lang.String)#<unknown>.close()#java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice)#android.os.SystemClock.elapsedRealtime()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.widget.TextView.getText()#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.add(java.lang.String)#android.view.KeyEvent.getRepeatCount()#java.util.ArrayList<java.lang.String>.add(<unknown>)#android.content.Context.getString(<unknown>)#<unknown>.getDisplayTime(<unknown>)#com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int)#<unknown>.getPlayBackTime()#android.widget.Chronometer.setOnChronometerTickListener()#android.widget.TextView.setText(java.lang.String)#java.lang.CharSequence.toString()#java.lang.String.equals(java.lang.String)#com.vinsol.expensetracker.Voice.saveEntry()#<unknown>.getPlayBackTime()#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.os.Bundle.containsKey(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>)#android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.os.Bundle.containsKey(java.lang.String)#android.view.View.setVisibility(int)#<unknown>.getDisplayTime(<unknown>)#<unknown>.getDisplayTime(long)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setVisibility(int)#android.view.View.setVisibility(int)#java.io.File.canRead()#android.content.Intent.addFlags(int)#android.os.Bundle.Bundle()#android.app.Activity.setResult(int, android.content.Intent)#android.app.Activity.findViewById(<unknown>)#java.lang.CharSequence.toString()#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.app.Activity.findViewById(<unknown>)#java.util.ArrayList<java.lang.String>.add(<unknown>)#<unknown>.isRecording()#java.lang.String.equals(<unknown>)#<unknown>.getStringDoubleDecimal(java.lang.String)#android.widget.Chronometer.setBase(long)", "callsites_t": ["<unknown>.stopPlayBack() <unknown>.isRecording() java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.os.Bundle.containsKey(java.lang.String) android.os.Bundle.getLong(java.lang.String) android.widget.Chronometer.stop() <unknown>.FileDelete(long) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.containsKey(<unknown>) <unknown>.startRecording() java.lang.String.equals(java.lang.String) java.lang.Throwable.printStackTrace() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.deleteDatabaseEntryID(java.lang.String) <unknown>.getTimeMillis() android.app.Activity.getIntent() java.util.Calendar.setTimeInMillis(long) android.app.Activity.findViewById(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.Long.toString(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) <unknown>.isAudioPlaying() android.widget.Toast.makeText(com.vinsol.expensetracker.Voice, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.DateHandler(com.vinsol.expensetracker.Voice) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() com.vinsol.expensetracker.Voice.setGraphicsVoice() java.lang.Long.toString(long) android.view.View.setVisibility(int) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) <unknown>.getLocationDateDate(<unknown>) android.app.Activity.findViewById(<unknown>) android.widget.TextView.getText() android.widget.TextView.setText(<unknown>) android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.lang.Double.parseDouble(java.lang.String) <unknown>.stopPlayBack() java.lang.String.equals(<unknown>) java.lang.String.contains(java.lang.String) android.view.View.setVisibility(int) android.content.Context.getString(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() <unknown>.open() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.ArrayList, String() <unknown>.DatabaseAdapter(com.vinsol.expensetracker.Voice) android.content.Intent.getBundleExtra(java.lang.String) android.os.Bundle.putString(java.lang.String, <unknown>) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setContentView(<unknown>) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) <unknown>.stopPlayBack() android.os.Environment.getExternalStorageState() com.vinsol.expensetracker.Voice.setClickListeners() android.os.CountDownTimer.cancel() java.util.ArrayList<java.lang.String>.get(int) java.lang.CharSequence.length() .OnChronometerTickListener() <unknown>.open() <unknown>.getLocationDate(<unknown>, java.lang.String) android.widget.TextView.setText(<unknown>) android.widget.Chronometer.start() android.widget.Toast.show() <unknown>.getDisplayTime(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.startPlayBack() java.lang.String.equals(java.lang.String) java.lang.Long.parseLong(java.lang.String) <unknown>.close() java.lang.Double.toString() java.lang.String.equals(java.lang.String) android.view.View.getId() java.util.Calendar.getInstance() android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) android.app.Activity.finish() java.io.File.File(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.stopRecording() <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.lang.String.equals(<unknown>) android.view.View.setVisibility(int) android.os.Environment.getExternalStorageState() java.lang.Throwable.printStackTrace() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) <unknown>.getPlayBackTime() <unknown>.stopRecording() android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.add(<unknown>) android.view.View.setVisibility(int) android.view.View.setVisibility(int) android.widget.Chronometer.start() java.lang.Long.parseLong(java.lang.String) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) android.os.Bundle.containsKey(java.lang.String) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.Bundle() java.lang.String.equals(java.lang.String) android.widget.EditText.getText() <unknown>.DateHandler(com.vinsol.expensetracker.Voice, long) java.lang.String.equals(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) <unknown>.DateHelper(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) android.app.Activity.setResult(int, android.content.Intent) android.widget.TextView.getText() android.content.Intent.putExtras(android.os.Bundle) <unknown>.DateHelper(java.lang.String, java.util.Calendar) java.util.ArrayList<java.lang.String>.addAll(java.util.ArrayList<java.lang.String>) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.lang.String.equals(java.lang.String) android.view.View.setVisibility(int) com.vinsol.expensetracker.Voice.saveEntry() java.lang.CharSequence.toString() android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) <unknown>.trim() com.vinsol.expensetracker.Voice.onBackPressed() android.app.Activity.startActivity(android.content.Intent) android.view.View.setVisibility(int) android.app.Activity.finish() android.os.Bundle.getLong(java.lang.String) java.util.ArrayList<java.lang.String>.add(java.lang.String) <unknown>.StringProcessing() android.os.Bundle.containsKey(java.lang.String) android.app.Activity.findViewById(<unknown>) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.app.Activity.findViewById(<unknown>) <unknown>.startRecording() android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) java.util.ArrayList<java.lang.String>.get(int) java.util.HashMap<java.lang.String,java.lang.String>.HashMap, StringString() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, <unknown>) <unknown>.DisplayDate() <unknown>.isAudioPlaying() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.CountDownTimer.start() <unknown>.RecordingHelper(java.lang.String, com.vinsol.expensetracker.Voice) android.content.Context.getString(<unknown>) java.lang.String.equals(java.lang.String) android.widget.EditText.getText() com.vinsol.expensetracker.Voice.controlVoiceChronometer() java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, java.lang.String) java.util.HashMap<java.lang.String,java.lang.String>.put(<unknown>, null) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.Bundle.getBoolean(java.lang.String) <unknown>.close() java.util.HashMap<java.lang.String,java.lang.String>.get(<unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.Voice) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.Voice) android.os.SystemClock.elapsedRealtime() java.util.ArrayList<java.lang.String>.add(<unknown>) android.widget.TextView.getText() <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.add(java.lang.String) android.view.KeyEvent.getRepeatCount() java.util.ArrayList<java.lang.String>.add(<unknown>) android.content.Context.getString(<unknown>) <unknown>.getDisplayTime(<unknown>) com.vinsol.expensetracker.Voice.MyCount.MyCount(<unknown>, int) <unknown>.getPlayBackTime() android.widget.Chronometer.setOnChronometerTickListener() android.widget.TextView.setText(java.lang.String) java.lang.CharSequence.toString() java.lang.String.equals(java.lang.String) com.vinsol.expensetracker.Voice.saveEntry() <unknown>.getPlayBackTime() android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.os.Bundle.containsKey(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.editDatabase(java.util.HashMap<java.lang.String,java.lang.String>) android.content.Intent.Intent(com.vinsol.expensetracker.Voice, java.lang.Class) java.util.ArrayList<java.lang.String>.ArrayList, String() android.os.Bundle.containsKey(java.lang.String) android.view.View.setVisibility(int) <unknown>.getDisplayTime(<unknown>) <unknown>.getDisplayTime(long) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setVisibility(int) android.view.View.setVisibility(int) java.io.File.canRead() android.content.Intent.addFlags(int) android.os.Bundle.Bundle() android.app.Activity.setResult(int, android.content.Intent) android.app.Activity.findViewById(<unknown>) java.lang.CharSequence.toString() java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.app.Activity.findViewById(<unknown>) java.util.ArrayList<java.lang.String>.add(<unknown>) <unknown>.isRecording() java.lang.String.equals(<unknown>) <unknown>.getStringDoubleDecimal(java.lang.String) android.widget.Chronometer.setBase(long)"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.util.Log android.app.Activity java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate static final int EDIT_RESULT = 35;\n\tprivate RelativeLayout dateBarRelativeLayout;\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprotected static String favID = null;\n\tprivate FavoriteHelper mFavoriteHelper;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\t\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\t\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag\n\t\t\t\t\t.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t}\n\t\t\t\n\t\t\tif(mShowList.get(4) != null){\n\t\t\t\tif(!mShowList.get(4).equals(\"\")){\n\t\t\t\t\tfavID = mShowList.get(4);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\n\t\t\tif(mShowList.get(7) != null)\n\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\n\t\t\tif(mShowList.get(6) != null)\n\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\telse {\n\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tmFavoriteHelper = new FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// ///// ***** Sets Title Voice Entry *********///////\n\t\tshow_text_voice_camera_header_title.setText(\"Voice Entry\");\n\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n\n\t\t\tmShowList.set(4, favID);\n\t\t\tintentExtras.remove(\"mDisplayList\");\n\t\t\tintentExtras.putStringArrayList(\"mDisplayList\", mShowList);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivityForResult(editIntent, EDIT_RESULT);\n//\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t\t\n\t\tsuper.onActivityResult(requestCode, resultCode, data);\n\t\tif (EDIT_RESULT == requestCode) {\n\t\t\tif(Activity.RESULT_OK == resultCode) {\n\t\t\t\t\n\t\t\t\tintentExtras = data.getBundleExtra(\"voiceShowBundle\");\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tmShowList = new ArrayList<String>();\n\t\t\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t\t\tLog.v(\"mShowListOnResult\", mShowList.toString());\n\t\t\t\t\tif(mShowList.get(0) != null){\n\t\t\t\t\t\tif(mShowList.get(0) != \"\"){\n\t\t\t\t\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfinish();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfinish();\n\t\t\t\t\t}\n\t\t\t\t\tString amount = mShowList.get(2);\n\t\t\t\t\tString tag = mShowList.get(1);\n\t\t\t\t\t\n\t\t\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(7) != null)\n\t\t\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(6) != null)\n\t\t\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\t\t\telse {\n\t\t\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\t\tupdateUI();\n\t\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmFavoriteHelper.setShowList(mShowList);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\n\t\tif(resultCode == Activity.RESULT_CANCELED){\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-13T07:29:45Z", "hash_sni": "67f6b011b817b50c5090672798396298673fbf4c", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" \t\t\t\tshow_text_voice_camera_tag_textview.setText(\"description\");\n \t\t\t}\n \t\t\t\n+\t\t\tif(mShowList.get(4) != null){\n+\t\t\t\tif(!mShowList.get(4).equals(\"\")){\n+\t\t\t\t\tfavID = mShowList.get(4);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t\n \t\t\tCalendar mCalendar = Calendar.getInstance();\n \t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n \t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler ShowLocationHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getDrawable getExternalStorageState getId getInstance getIntent getPlayBackTime getResources getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putBoolean putExtra putStringArrayList remove set setBackgroundDrawable setContentView setFirstDayOfWeek setOnClickListener setShowList setText setTimeInMillis setVisibility show start startActivityForResult startPlayBack stop stopPlayBack toString updateUI v"], "_version_": 1526756842136403968, "subject_t": ["Removed bug from favorite"], "comments_t": ["\t\t// ///// ***** Sets Title Voice Entry *********/////// \t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** //\t\t\tfinish(); \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ****** If audio recording started then stop recording audio ***** /////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["a455ffce4cda2c7214c09b76dee3e92cb5e03741"], "id": "vinsol/expense-tracker\u000067f6b011b817b50c5090672798396298673fbf4c\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "android.os.Bundle.remove(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.startActivityForResult(android.content.Intent, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.io.File.canRead()#android.widget.Toast.show()#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getPlayBackTime()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#<unknown>.open()#android.content.Context.getString(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#java.util.AbstractCollection<java.lang.String>.toString()#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#android.widget.Toast.show()#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.widget.TextView.setText(java.lang.String)#android.view.View.setVisibility(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#java.io.File.File(java.lang.String)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#android.view.ContextThemeWrapper.getResources()#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.content.Context.getString(<unknown>)#android.util.Log.v(java.lang.String, java.lang.String)#android.widget.TextView.setText(java.lang.String)#<unknown>.setShowList(java.util.ArrayList<java.lang.String>)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#java.lang.String.contains(java.lang.String)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#java.lang.String.equals(<unknown>)#android.os.Environment.getExternalStorageState()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#android.app.Activity.finish()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#java.lang.Long.toString(java.lang.Long)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#<unknown>.getDisplayTime(<unknown>)#android.os.CountDownTimer.cancel()#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setBackgroundDrawable(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.util.ArrayList<java.lang.String>.ArrayList, String()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.Toast.show()#java.lang.String.equals(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#java.util.Calendar.setTimeInMillis(long)#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.res.Resources.getDrawable(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#<unknown>.DisplayTime()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.view.View.getId()#android.view.View.setVisibility(int)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.os.Bundle.putBoolean(java.lang.String, boolean)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.getInstance()#android.view.View.setVisibility(int)", "callsites_t": ["android.os.Bundle.remove(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.startActivityForResult(android.content.Intent, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.io.File.canRead() android.widget.Toast.show() java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getPlayBackTime() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) <unknown>.open() android.content.Context.getString(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) java.util.AbstractCollection<java.lang.String>.toString() <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) android.widget.Toast.show() java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.widget.TextView.setText(java.lang.String) android.view.View.setVisibility(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) java.io.File.File(java.lang.String) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) android.view.ContextThemeWrapper.getResources() android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.content.Context.getString(<unknown>) android.util.Log.v(java.lang.String, java.lang.String) android.widget.TextView.setText(java.lang.String) <unknown>.setShowList(java.util.ArrayList<java.lang.String>) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) java.lang.String.contains(java.lang.String) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) java.lang.String.equals(<unknown>) android.os.Environment.getExternalStorageState() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() android.app.Activity.finish() java.io.File.File(java.lang.String) android.widget.Toast.show() java.lang.Long.toString(java.lang.Long) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() <unknown>.getDisplayTime(<unknown>) android.os.CountDownTimer.cancel() java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setBackgroundDrawable(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.util.ArrayList<java.lang.String>.ArrayList, String() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.Toast.show() java.lang.String.equals(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) java.util.Calendar.setTimeInMillis(long) java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.content.res.Resources.getDrawable(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) <unknown>.getPlayBackTime() android.app.Activity.finish() <unknown>.DisplayTime() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.view.View.getId() android.view.View.setVisibility(int) android.content.Intent.getBundleExtra(java.lang.String) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.os.Bundle.putBoolean(java.lang.String, boolean) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) java.util.Calendar.getInstance() android.view.View.setVisibility(int)"]}, {"user_sni": "Victor Melnik", "repo_sni": "inetstd/phonegap-android-custom-splashscreen", "imports_t": ["android.app.AlertDialog android.os.CountDownTimer android.view.View android.util.Log android.widget.ImageView.ScaleType com.phonegap.DroidGap android.os.Bundle android.widget.ImageView android.view.ViewGroup android.content.DialogInterface"], "email_sni": "victor@inetstd.com", "contents_t": ["package com.inetstd.android.phonegap.customsplashscreen;\n\nimport android.app.AlertDialog;\nimport android.content.DialogInterface;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.ImageView.ScaleType;\n\nimport com.phonegap.DroidGap;\n\n\n\npublic abstract class DroidGapWithCustomSplashScreen extends DroidGap {\n\n\tpublic static final String C_CUSTOM_SPLASH_SCREEN = \"C_CUSTOM_SPLASH_SCREEN\";\n\tpublic static final String C_ERROR_URL = null;\n\n\tViewGroup pgContainerView = null;\n\tViewGroup webViewContainer = null;\n\tImageView customSpashScreen = null; \n\n\tprotected int hideCustomSplashScreenTimeout = 5000;\n\n\tpublic DroidGapWithCustomSplashScreen() {\n\t\tsuper();\n\t}\n\n\t@Override\n\tpublic void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\t\t\t\t\n\t}\t\n\n\n\t@Override\n\tpublic void init() {\t\t\n\n\t\tsuper.init();\t\t\n\t\t// root is child of FrameLayout. In init method PG puts root to viewstack. Before root.getParent() returns null. \t\t\n\t\tpgContainerView = (ViewGroup) root.getParent();\n\n\t\t// better to use invisible. with View.GONE - WebView has 0,0 size and on show will call window.onresize \t\n\t\tcustomSpashScreen = new ImageView(this);\t\t\n\t\tcustomSpashScreen.setImageResource(super.getIntegerProperty(C_CUSTOM_SPLASH_SCREEN, 0));\n\t\tcustomSpashScreen.setScaleType(ScaleType.CENTER_CROP);\n\t\tpgContainerView.addView(customSpashScreen);\n\n\t\t// shows splash screen and hide \n\t\tshowCustomSplashScreen();\t\t\n\t}\n\n\tpublic void showCustomSplashScreen() {\t\t\n\t\tif (customSpashScreen == null) return;\n\t\troot.setVisibility(View.INVISIBLE);\n\t\tappView.setVisibility(View.INVISIBLE);\t\t\n\t\tcustomSpashScreen.setImageResource(super.getIntegerProperty(C_CUSTOM_SPLASH_SCREEN, 0));\n\t\tcustomSpashScreen.setVisibility(View.VISIBLE);\t\t\n\n\t}\n\n\tpublic void hideCustomSplashScreen() {\t\t\n\t\tif (customSpashScreen == null) return;\t\t\n\t\ttry {\t\t\n\t\t\tcustomSpashScreen.setVisibility(View.GONE);\t\t\n\t\t\troot.setVisibility(View.VISIBLE);\n\t\t\tappView.setVisibility(View.VISIBLE);\n\t\t} catch (Exception e) {\n\t\t\tLog.e(\"DroidGapWithCustomSplashScreen\", \"hideCustomSplashScreen - do it in ui thread\");\n\t\t}\n\t}\n\n\tprotected void hideCustomSplashScreen(final int timeout) {\n\t\tif (customSpashScreen == null) return;\n\t\t// emulate callback \n\t\tnew CountDownTimer(timeout, timeout) {\n\t\t\tpublic void onFinish() {\n\t\t\t\thideCustomSplashScreen();\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void onTick(long millisUntilFinished) {}\n\t\t}.start();\t\t\t\n\t}\n\n\tprotected abstract void onTryAgain();\n\n\t@Override\n\tpublic void displayError(final String title, final String message, final String button, final boolean exit) {\n\t\tfinal DroidGap me = this;\n\t\tshowCustomSplashScreen();\t\n\t\tme.runOnUiThread(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tAlertDialog.Builder dlg = new AlertDialog.Builder(me);\n\t\t\t\tdlg.setMessage(\"No Internet connection\");\n\t\t\t\tdlg.setTitle(\"Please, check connection settings\");\n\t\t\t\tdlg.setCancelable(false);\n\t\t\t\tdlg.setPositiveButton(\"Try again\", new AlertDialog.OnClickListener() {\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\t\tonTryAgain();\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tdlg.setNegativeButton(\"Exit\",\n\t\t\t\t\t\tnew AlertDialog.OnClickListener() {\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\t\tme.endActivity();                        \n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tdlg.create();\n\t\t\t\tdlg.show();\n\t\t\t}\n\t\t});\n\t}\n\n\n}\n"], "body_t": ["<empty>"], "date_tdt": "2012-03-14T19:34:01Z", "hash_sni": "c2493f9a50efe6338f389056cef9b62d88f07773", "name_sni": "src/com/inetstd/android/phonegap/customsplashscreen/DroidGapWithCustomSplashScreen.java", "patch_t": [" \n import android.app.AlertDialog;\n import android.content.DialogInterface;\n-import android.content.Intent;\n-import android.graphics.Bitmap;\n-import android.graphics.Color;\n import android.os.Bundle;\n import android.os.CountDownTimer;\n import android.util.Log;\n import android.view.View;\n import android.view.ViewGroup;\n-import android.webkit.WebView;\n-import android.webkit.WebViewClient;\n import android.widget.ImageView;\n import android.widget.ImageView.ScaleType;\n \n-import com.inetstd.android.phonegap.customsplashscreen.test.LandingActivity;\n import com.phonegap.DroidGap;\n \n \n@@ -54,6 +48,7 @@ public abstract class DroidGapWithCustomSplashScreen extends DroidGap {\n \t\tcustomSpashScreen.setScaleType(ScaleType.CENTER_CROP);\n \t\tpgContainerView.addView(customSpashScreen);\n \n+\t\t// shows splash screen and hide \n \t\tshowCustomSplashScreen();\t\t\n \t}\n "], "score": 1.0, "methods_t": ["AlertDialog.Builder AlertDialog.OnClickListener CountDownTimer ImageView Runnable addView create dismiss e endActivity getParent hideCustomSplashScreen onTryAgain runOnUiThread setCancelable setImageResource setMessage setNegativeButton setPositiveButton setScaleType setTitle setVisibility show showCustomSplashScreen start"], "_version_": 1526757698189656064, "subject_t": ["code formatting"], "comments_t": ["\t\t// better to use invisible. with View.GONE - WebView has 0,0 size and on show will call window.onresize \t \t\t// emulate callback  \t\t// shows splash screen and hide  \t\t// root is child of FrameLayout. In init method PG puts root to viewstack. Before root.getParent() returns null. \t\t"], "parents_ss": ["262c98513c7a7a5a926cc391442ea20529ffb124"], "id": "inetstd/phonegap-android-custom-splashscreen\u0000c2493f9a50efe6338f389056cef9b62d88f07773\u0000src/com/inetstd/android/phonegap/customsplashscreen/DroidGapWithCustomSplashScreen.java", "callsites_cs": "<unknown>.setVisibility(int)#<unknown>.getParent()#.AlertDialog.OnClickListener()#<unknown>.setVisibility(int)#android.util.Log.e(java.lang.String, java.lang.String)#android.app.AlertDialog.Builder.show()#android.widget.ImageView.setImageResource(<unknown>)#android.app.AlertDialog.Builder.create()#android.content.DialogInterface.dismiss()#com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen.showCustomSplashScreen()#<unknown>.runOnUiThread()#android.widget.ImageView.setVisibility(int)#android.app.AlertDialog.Builder.setPositiveButton(java.lang.String, )#<unknown>.endActivity()#android.widget.ImageView.setScaleType(android.widget.ImageView.ScaleType)#android.os.CountDownTimer.start()#com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen.showCustomSplashScreen()#android.app.AlertDialog.Builder.AlertDialog.Builder(com.inetstd.android.phonegap.customsplashscreen.DroidGap)#android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, )#com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen.hideCustomSplashScreen()#android.widget.ImageView.setImageResource(<unknown>)#.CountDownTimer(int, int)#android.app.AlertDialog.Builder.setMessage(java.lang.String)#<unknown>.setVisibility(int)#android.app.AlertDialog.Builder.setCancelable(boolean)#android.view.ViewGroup.addView(android.widget.ImageView)#android.widget.ImageView.setVisibility(int)#android.widget.ImageView.ImageView(com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen)#android.app.AlertDialog.Builder.setTitle(java.lang.String)#com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen.onTryAgain()#<unknown>.setVisibility(int)#.Runnable()", "callsites_t": ["<unknown>.setVisibility(int) <unknown>.getParent() .AlertDialog.OnClickListener() <unknown>.setVisibility(int) android.util.Log.e(java.lang.String, java.lang.String) android.app.AlertDialog.Builder.show() android.widget.ImageView.setImageResource(<unknown>) android.app.AlertDialog.Builder.create() android.content.DialogInterface.dismiss() com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen.showCustomSplashScreen() <unknown>.runOnUiThread() android.widget.ImageView.setVisibility(int) android.app.AlertDialog.Builder.setPositiveButton(java.lang.String, ) <unknown>.endActivity() android.widget.ImageView.setScaleType(android.widget.ImageView.ScaleType) android.os.CountDownTimer.start() com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen.showCustomSplashScreen() android.app.AlertDialog.Builder.AlertDialog.Builder(com.inetstd.android.phonegap.customsplashscreen.DroidGap) android.app.AlertDialog.Builder.setNegativeButton(java.lang.String, ) com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen.hideCustomSplashScreen() android.widget.ImageView.setImageResource(<unknown>) .CountDownTimer(int, int) android.app.AlertDialog.Builder.setMessage(java.lang.String) <unknown>.setVisibility(int) android.app.AlertDialog.Builder.setCancelable(boolean) android.view.ViewGroup.addView(android.widget.ImageView) android.widget.ImageView.setVisibility(int) android.widget.ImageView.ImageView(com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen) android.app.AlertDialog.Builder.setTitle(java.lang.String) com.inetstd.android.phonegap.customsplashscreen.DroidGapWithCustomSplashScreen.onTryAgain() <unknown>.setVisibility(int) .Runnable()"]}, {"user_sni": "Hitesh Sondhi", "repo_sni": "vinsol/expense-tracker", "imports_t": ["android.os.CountDownTimer android.widget.Toast android.view.View.OnClickListener android.os.Bundle android.widget.Button android.content.Intent java.io.File com.vinsol.expensetracker.utils.AudioPlay java.util.ArrayList com.vinsol.expensetracker.utils.DisplayTime android.widget.Chronometer android.widget.TextView android.widget.RelativeLayout com.vinsol.expensetracker.utils.FileDelete android.view.View android.app.Activity java.util.Calendar"], "email_sni": "hiteshsondhi88@gmail.com", "contents_t": ["package com.vinsol.expensetracker;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.Chronometer;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.vinsol.expensetracker.utils.AudioPlay;\nimport com.vinsol.expensetracker.utils.DisplayTime;\nimport com.vinsol.expensetracker.utils.FileDelete;\n\npublic class ShowVoiceActivity extends Activity implements OnClickListener {\n\n\tprivate static final int EDIT_RESULT = 35;\n\tprivate RelativeLayout dateBarRelativeLayout;\n\tprivate TextView show_text_voice_camera_header_title;\n\tprivate RelativeLayout show_text_voice_camera_voice_details;\n\tprivate TextView show_text_voice_camera_amount;\n\tprivate TextView show_text_voice_camera_tag_textview;\n\tprivate Button show_text_voice_camera_delete;\n\tprivate Button show_text_voice_camera_play_button;\n\tprivate Button show_text_voice_camera_stop_button;\n\tprivate Chronometer show_text_voice_camera_time_details_chronometer;\n\tprivate MyCount countDownTimer;\n\tprivate Button show_text_voice_camera_edit;\n\n\tprivate AudioPlay mAudioPlay;\n\tprivate Long _id = null;\n\tprivate Bundle intentExtras;\n\tprivate ArrayList<String> mShowList;\n\tprivate DatabaseAdapter mDatabaseAdapter;\n\tprotected static String favID = null;\n\tprivate FavoriteHelper mFavoriteHelper;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tsetContentView(R.layout.show_text_voice_camera);\n\t\t\n\t\tdateBarRelativeLayout = (RelativeLayout) findViewById(R.id.show_text_voice_camera_date_bar); \n\t\tshow_text_voice_camera_header_title = (TextView) findViewById(R.id.show_text_voice_camera_header_title);\n\t\tshow_text_voice_camera_voice_details = (RelativeLayout) findViewById(R.id.show_text_voice_camera_voice_details);\n\t\tshow_text_voice_camera_amount = (TextView) findViewById(R.id.show_text_voice_camera_amount);\n\t\tshow_text_voice_camera_tag_textview = (TextView) findViewById(R.id.show_text_voice_camera_tag_textview);\n\t\tshow_text_voice_camera_delete = (Button) findViewById(R.id.show_text_voice_camera_delete);\n\t\tshow_text_voice_camera_play_button = (Button) findViewById(R.id.show_text_voice_camera_play_button);\n\t\tshow_text_voice_camera_stop_button = (Button) findViewById(R.id.show_text_voice_camera_stop_button);\n\t\tshow_text_voice_camera_time_details_chronometer = (Chronometer) findViewById(R.id.show_text_voice_camera_time_details_chronometer);\n\t\tshow_text_voice_camera_edit = (Button) findViewById(R.id.show_text_voice_camera_edit);\n\n\t\tdateBarRelativeLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.date_bar_bg_wo_shadow));\n\t\t\n\t\tmDatabaseAdapter = new DatabaseAdapter(this);\n\n\t\tintentExtras = getIntent().getBundleExtra(\"voiceShowBundle\");\n\n\t\tshow_text_voice_camera_header_title.setText(getString(R.string.finished_voiceentry));\n\t\t\n\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\tmShowList = new ArrayList<String>();\n\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\tString amount = mShowList.get(2);\n\t\t\tString tag = mShowList.get(1);\n\t\t\t\n\t\t\tif (!(amount.equals(\"\") || amount == null)) {\n\t\t\t\tif (!amount.contains(\"?\"))\n\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t}\n\t\t\t\n\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)))) {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t} else {\n\t\t\t\tshow_text_voice_camera_tag_textview.setText(getString(R.string.finished_voiceentry));\n\t\t\t}\n\t\t\t\n\t\t\tif(mShowList.get(4) != null){\n\t\t\t\tif(!mShowList.get(4).equals(\"\")){\n\t\t\t\t\tfavID = mShowList.get(4);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\n\t\t\tif(mShowList.get(7) != null)\n\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\n\t\t\t\n\t\t\tif(mShowList.get(6) != null) {\n\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\tupdateUI();\n\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t} else {\n\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\tmFavoriteHelper = new FavoriteHelper(this, mShowList);\n\t\t\t}\n\t\t} else {\n\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t}\n\t\t\n\t}\n\n\tprivate void updateUI() {\n\t\t// //// ****** Shows Voice Details ********////////\n\t\tshow_text_voice_camera_voice_details.setVisibility(View.VISIBLE);\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_delete) {\n\n\t\t\tif (_id != null) {\n\n\t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio\n\t\t\t\t// *******//////\n\t\t\t\ttry {\n\t\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t\t}\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\n\t\t\t\tnew FileDelete(_id);\n\n\t\t\t\tmDatabaseAdapter.open();\n\t\t\t\tmDatabaseAdapter.deleteDatabaseEntryID(Long.toString(_id));\n\t\t\t\tmDatabaseAdapter.close();\n\t\t\t\tToast.makeText(this, \"Deleted\", Toast.LENGTH_SHORT).show();\n\t\t\t\tfinish();\n\t\t\t} else {\n\t\t\t\tToast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n\t\t\t}\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_play_button) {\n\t\t\t// //// ******** to handle playback of recorded file *********\n\t\t\t// ////////\n\t\t\tmAudioPlay = new AudioPlay(_id + \"\", this);\n\n\t\t\t// ///// ******* Chronometer Starts Countdown ****** ///////\n\t\t\tcountDownTimer = new MyCount(mAudioPlay.getPlayBackTime(), 1000);\n\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.VISIBLE);\n\n\t\t\t// /// ******** Start Audio Playback and counter to play audio\n\t\t\t// ****** ///////\n\t\t\tif (!mAudioPlay.isAudioPlaying()) {\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t} else {\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\tmAudioPlay.startPlayBack();\n\t\t\t}\n\t\t\tcountDownTimer.start();\n\t\t}\n\n\t\tif (v.getId() == R.id.show_text_voice_camera_stop_button) {\n\t\t\ttry {\n\t\t\t\tcountDownTimer.cancel();\n\t\t\t} catch (NullPointerException e) {\n\t\t\t}\n\t\t\t\n\t\t\t// //// ****** Handles UI items on button click ****** ///////\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\n\t\t\t// //// ******* Stop Recording Audio and stop chronometer ********\n\t\t\t// ////////\n\t\t\tshow_text_voice_camera_time_details_chronometer.stop();\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying()) {\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t}\n\t\t\n\t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n\t\t\tIntent editIntent = new Intent(this, Voice.class);\n\t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n\t\t\ttry {\n\t\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t\t} catch (Exception e) {\n\n\t\t\t}\n\t\t\tmShowList.set(4, favID);\n\t\t\tintentExtras.remove(\"mDisplayList\");\n\t\t\tintentExtras.putStringArrayList(\"mDisplayList\", mShowList);\n\t\t\teditIntent.putExtra(\"voiceBundle\", intentExtras);\n\t\t\tstartActivityForResult(editIntent, EDIT_RESULT);\n//\t\t\tfinish();\n\t\t}\n\t}\n\n\t// /////// ********* CountdownTimer for Chronometer ********* //////////\n\t// countdowntimer is an abstract class, so extend it and fill in methods\n\tprivate class MyCount extends CountDownTimer {\n\n\t\tDisplayTime mDisplayTime;\n\n\t\tpublic MyCount(long millisInFuture, long countDownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t\tmDisplayTime = new DisplayTime();\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFinish() {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tshow_text_voice_camera_time_details_chronometer.setText(mDisplayTime.getDisplayTime(millisUntilFinished));\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onPause() {\n\n\t\t// //// ***** Check whether audio is recording or not ******* ///////\n\t\t// //// ****** If audio recording started then stop recording audio ***** ///////\n\t\ttry {\n\t\t\tif (mAudioPlay.isAudioPlaying())\n\t\t\t\tmAudioPlay.stopPlayBack();\n\t\t} catch (Exception e) {\n\n\t\t}\n\t\tsuper.onPause();\n\t}\n\n\t@Override\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\t\t\n\t\tsuper.onActivityResult(requestCode, resultCode, data);\n\t\tif (EDIT_RESULT == requestCode) {\n\t\t\tif(Activity.RESULT_OK == resultCode) {\n\t\t\t\t\n\t\t\t\tintentExtras = data.getBundleExtra(\"voiceShowBundle\");\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\tmShowList = new ArrayList<String>();\n\t\t\t\t\tmShowList = intentExtras.getStringArrayList(\"mDisplayList\");\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(0) != null){\n\t\t\t\t\t\tif(mShowList.get(0) != \"\"){\n\t\t\t\t\t\t\t_id = Long.parseLong(mShowList.get(0));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfinish();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfinish();\n\t\t\t\t\t}\n\t\t\t\t\tString amount = mShowList.get(2);\n\t\t\t\t\tString tag = mShowList.get(1);\n\n\t\t\t\t\tif (amount != null) {\n\t\t\t\t\t\tif(!amount.equals(\"\") && !amount.equals(\"?\")){\n\t\t\t\t\t\t\tshow_text_voice_camera_amount.setText(amount);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfinish();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfinish();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!(tag.equals(\"\") || tag == null || tag.equals(getString(R.string.unfinished_voiceentry)) || tag.equals(getString(R.string.finished_voiceentry)))) {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(tag);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshow_text_voice_camera_tag_textview.setText(getString(R.string.finished_voiceentry));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tCalendar mCalendar = Calendar.getInstance();\n\t\t\t\t\tmCalendar.setTimeInMillis(Long.parseLong(mShowList.get(6)));\n\t\t\t\t\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(7) != null)\n\t\t\t\t\t\tnew ShowLocationHandler(this, mShowList.get(7));\n\t\t\t\t\t\n\t\t\t\t\tif(mShowList.get(6) != null)\n\t\t\t\t\t\tnew ShowDateHandler(this, mShowList.get(6));\n\t\t\t\t\telse {\n\t\t\t\t\t\tnew ShowDateHandler(this,R.string.voice);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tshow_text_voice_camera_delete.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_play_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_stop_button.setOnClickListener(this);\n\t\t\t\tshow_text_voice_camera_edit.setOnClickListener(this);\n\n\t\t\t\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t\t\t\tupdateUI();\n\t\t\t\t\tif (intentExtras.containsKey(\"mDisplayList\")) {\n\t\t\t\t\t\tFile tempFile = new File(\"/sdcard/ExpenseTracker/Audio/\" + _id+ \".amr\");\n\n\t\t\t\t\t\tif (tempFile.canRead()) {\n\t\t\t\t\t\t\tmAudioPlay = new AudioPlay(Long.toString(_id), this);\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.VISIBLE);\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(new DisplayTime().getDisplayTime(mAudioPlay.getPlayBackTime()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshow_text_voice_camera_time_details_chronometer.setText(\"Audio File Missing\");\n\t\t\t\t\t\t\tshow_text_voice_camera_stop_button.setVisibility(View.GONE);\n\t\t\t\t\t\t\tshow_text_voice_camera_play_button.setVisibility(View.GONE);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmFavoriteHelper.setShowList(mShowList);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tToast.makeText(this, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\n\t\tif(resultCode == Activity.RESULT_CANCELED){\n\t\t\tfinish();\n\t\t}\n\t}\n\t\n}\n"], "body_t": ["<empty>"], "date_tdt": "2011-12-15T09:51:31Z", "hash_sni": "9d5faedd71e83ebfd3c5f3455253ad41f37920a5", "name_sni": "src/com/vinsol/expensetracker/ShowVoiceActivity.java", "patch_t": [" \t\tif(v.getId() == R.id.show_text_voice_camera_edit){\n \t\t\tIntent editIntent = new Intent(this, Voice.class);\n \t\t\tintentExtras.putBoolean(\"isFromShowPage\", true);\n+\t\t\ttry {\n+\t\t\t\tif (mAudioPlay.isAudioPlaying())\n+\t\t\t\t\tmAudioPlay.stopPlayBack();\n+\t\t\t} catch (Exception e) {\n \n+\t\t\t}\n \t\t\tmShowList.set(4, favID);\n \t\t\tintentExtras.remove(\"mDisplayList\");\n \t\t\tintentExtras.putStringArrayList(\"mDisplayList\", mShowList);"], "score": 1.0, "methods_t": ["ArrayList, String AudioPlay DatabaseAdapter DisplayTime FavoriteHelper File FileDelete Intent MyCount ShowDateHandler ShowLocationHandler canRead cancel close contains containsKey deleteDatabaseEntryID equals findViewById finish get getBundleExtra getDisplayTime getDrawable getExternalStorageState getId getInstance getIntent getPlayBackTime getResources getString getStringArrayList isAudioPlaying makeText open parseLong printStackTrace putBoolean putExtra putStringArrayList remove set setBackgroundDrawable setContentView setFirstDayOfWeek setOnClickListener setShowList setText setTimeInMillis setVisibility show start startActivityForResult startPlayBack stop stopPlayBack toString updateUI"], "_version_": 1526758321028071424, "subject_t": ["Removed Critical bugs"], "comments_t": ["\t\t\t\t// *******////// \t// /////// ********* CountdownTimer for Chronometer ********* ////////// \t\t\t// ///// ******* Chronometer Starts Countdown ****** /////// \t\t\t// ****** /////// \t\t\t// /// ******** Start Audio Playback and counter to play audio \t\t\t// //// ******* Stop Recording Audio and stop chronometer ******** //\t\t\tfinish(); \t// countdowntimer is an abstract class, so extend it and fill in methods \t\t\t\t// /// ******* If Audio PlayBack is there stop playing audio \t\t\t// //// ****** Handles UI items on button click ****** /////// \t\t// //// ****** Shows Voice Details ********//////// \t\t// //// ****** If audio recording started then stop recording audio ***** /////// \t\t// //// ***** Check whether audio is recording or not ******* /////// \t\t\t// //////// \t\t\t// //// ******** to handle playback of recorded file *********"], "parents_ss": ["01ff50fd300f5fe2f5d3da40c48da70c176965bc"], "id": "vinsol/expense-tracker\u00009d5faedd71e83ebfd3c5f3455253ad41f37920a5\u0000src/com/vinsol/expensetracker/ShowVoiceActivity.java", "callsites_cs": "android.os.Bundle.remove(java.lang.String)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.close()#java.util.ArrayList<java.lang.String>.get(int)#java.lang.String.equals(java.lang.String)#android.content.Context.getString(<unknown>)#java.util.Calendar.setFirstDayOfWeek(int)#android.app.Activity.findViewById(<unknown>)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.startActivityForResult(android.content.Intent, int)#<unknown>.stopPlayBack()#android.app.Activity.setContentView(<unknown>)#java.lang.Long.toString(java.lang.Long)#android.widget.TextView.setText(<unknown>)#android.widget.TextView.setText(java.lang.String)#java.io.File.canRead()#android.widget.Toast.show()#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.isAudioPlaying()#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.getPlayBackTime()#android.app.Activity.getIntent()#android.view.View.setVisibility(int)#<unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#<unknown>.open()#android.content.Context.getString(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.Toast.show()#<unknown>.DisplayTime()#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.os.Bundle.containsKey(java.lang.String)#android.content.Context.getString(<unknown>)#android.view.View.setVisibility(int)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class)#java.io.File.File(java.lang.String)#android.os.Environment.getExternalStorageState()#java.util.Calendar.setTimeInMillis(long)#java.lang.String.contains(java.lang.String)#android.content.Intent.putExtra(java.lang.String, android.os.Bundle)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.stopPlayBack()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.widget.TextView.setText(<unknown>)#<unknown>.getDisplayTime(long)#<unknown>.DisplayTime()#<unknown>.FileDelete(java.lang.Long)#java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity)#java.lang.String.equals(<unknown>)#android.view.ContextThemeWrapper.getResources()#android.app.Activity.findViewById(<unknown>)#<unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>)#android.view.View.setVisibility(int)#android.app.Activity.findViewById(<unknown>)#<unknown>.getDisplayTime(<unknown>)#android.content.Intent.getBundleExtra(java.lang.String)#java.lang.String.equals(<unknown>)#android.widget.Chronometer.stop()#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#<unknown>.deleteDatabaseEntryID(<unknown>)#android.os.Bundle.getStringArrayList(java.lang.String)#android.widget.TextView.setText(java.lang.String)#com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int)#android.content.Context.getString(<unknown>)#<unknown>.setShowList(java.util.ArrayList<java.lang.String>)#android.os.CountDownTimer.start()#<unknown>.getPlayBackTime()#android.view.View.setVisibility(int)#java.lang.Long.toString(java.lang.Long)#<unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity)#<unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.set(int, java.lang.String)#java.lang.String.equals(<unknown>)#android.os.Environment.getExternalStorageState()#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.isAudioPlaying()#java.lang.Throwable.printStackTrace()#android.app.Activity.finish()#java.io.File.File(java.lang.String)#android.widget.Toast.show()#java.lang.Long.toString(java.lang.Long)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#<unknown>.getDisplayTime(<unknown>)#android.os.CountDownTimer.cancel()#android.widget.TextView.setText(<unknown>)#java.lang.String.equals(java.lang.String)#android.app.Activity.findViewById(<unknown>)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setBackgroundDrawable(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setVisibility(int)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.DisplayTime()#java.util.ArrayList<java.lang.String>.get(int)#com.vinsol.expensetracker.ShowVoiceActivity.updateUI()#android.os.Bundle.containsKey(java.lang.String)#java.util.Calendar.getInstance()#java.util.ArrayList<java.lang.String>.ArrayList, String()#java.lang.Long.parseLong(java.lang.String)#java.util.ArrayList<java.lang.String>.ArrayList, String()#android.widget.TextView.setText(java.lang.String)#java.lang.Long.parseLong(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#java.io.File.canRead()#<unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#android.view.View.setVisibility(int)#android.widget.Toast.show()#java.lang.String.equals(java.lang.String)#java.util.Calendar.setFirstDayOfWeek(int)#java.util.Calendar.setTimeInMillis(long)#java.lang.Long.parseLong(java.lang.String)#<unknown>.getDisplayTime(<unknown>)#java.lang.String.equals(java.lang.String)#android.content.res.Resources.getDrawable(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(java.lang.String)#<unknown>.getPlayBackTime()#android.app.Activity.finish()#<unknown>.DisplayTime()#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#<unknown>.startPlayBack()#<unknown>.getDisplayTime(<unknown>)#android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)#android.app.Activity.findViewById(<unknown>)#java.lang.String.equals(java.lang.String)#java.lang.String.equals(java.lang.String)#android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int)#android.content.Intent.getBundleExtra(java.lang.String)#android.view.View.getId()#android.view.View.setVisibility(int)#java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity)#java.util.ArrayList<java.lang.String>.get(int)#<unknown>.getPlayBackTime()#android.os.Bundle.putBoolean(java.lang.String, boolean)#android.widget.TextView.setText(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.view.View.setVisibility(int)#android.widget.TextView.setText(<unknown>)#java.util.ArrayList<java.lang.String>.get(int)#android.widget.TextView.setText(java.lang.String)#java.util.Calendar.getInstance()#android.view.View.setVisibility(int)", "callsites_t": ["android.os.Bundle.remove(java.lang.String) java.util.ArrayList<java.lang.String>.get(int) <unknown>.close() java.util.ArrayList<java.lang.String>.get(int) java.lang.String.equals(java.lang.String) android.content.Context.getString(<unknown>) java.util.Calendar.setFirstDayOfWeek(int) android.app.Activity.findViewById(<unknown>) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.startActivityForResult(android.content.Intent, int) <unknown>.stopPlayBack() android.app.Activity.setContentView(<unknown>) java.lang.Long.toString(java.lang.Long) android.widget.TextView.setText(<unknown>) android.widget.TextView.setText(java.lang.String) java.io.File.canRead() android.widget.Toast.show() java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.isAudioPlaying() android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.getPlayBackTime() android.app.Activity.getIntent() android.view.View.setVisibility(int) <unknown>.DatabaseAdapter(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) <unknown>.open() android.content.Context.getString(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.Toast.show() <unknown>.DisplayTime() android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.os.Bundle.containsKey(java.lang.String) android.content.Context.getString(<unknown>) android.view.View.setVisibility(int) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) android.content.Intent.Intent(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.Class) java.io.File.File(java.lang.String) android.os.Environment.getExternalStorageState() java.util.Calendar.setTimeInMillis(long) java.lang.String.contains(java.lang.String) android.content.Intent.putExtra(java.lang.String, android.os.Bundle) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.stopPlayBack() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.widget.TextView.setText(<unknown>) <unknown>.getDisplayTime(long) <unknown>.DisplayTime() <unknown>.FileDelete(java.lang.Long) java.lang.Object.AudioPlay(<unknown>, com.vinsol.expensetracker.ShowVoiceActivity) java.lang.String.equals(<unknown>) android.view.ContextThemeWrapper.getResources() android.app.Activity.findViewById(<unknown>) <unknown>.FavoriteHelper(com.vinsol.expensetracker.ShowVoiceActivity, java.util.ArrayList<java.lang.String>) android.view.View.setVisibility(int) android.app.Activity.findViewById(<unknown>) <unknown>.getDisplayTime(<unknown>) android.content.Intent.getBundleExtra(java.lang.String) java.lang.String.equals(<unknown>) android.widget.Chronometer.stop() android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) <unknown>.deleteDatabaseEntryID(<unknown>) android.os.Bundle.getStringArrayList(java.lang.String) android.widget.TextView.setText(java.lang.String) com.vinsol.expensetracker.ShowVoiceActivity.MyCount.MyCount(<unknown>, int) android.content.Context.getString(<unknown>) <unknown>.setShowList(java.util.ArrayList<java.lang.String>) android.os.CountDownTimer.start() <unknown>.getPlayBackTime() android.view.View.setVisibility(int) java.lang.Long.toString(java.lang.Long) <unknown>.AudioPlay(java.lang.String, com.vinsol.expensetracker.ShowVoiceActivity) <unknown>.ShowLocationHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.set(int, java.lang.String) java.lang.String.equals(<unknown>) android.os.Environment.getExternalStorageState() android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.isAudioPlaying() java.lang.Throwable.printStackTrace() android.app.Activity.finish() java.io.File.File(java.lang.String) android.widget.Toast.show() java.lang.Long.toString(java.lang.Long) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() <unknown>.getDisplayTime(<unknown>) android.os.CountDownTimer.cancel() android.widget.TextView.setText(<unknown>) java.lang.String.equals(java.lang.String) android.app.Activity.findViewById(<unknown>) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setBackgroundDrawable(<unknown>) java.util.ArrayList<java.lang.String>.get(int) <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setVisibility(int) java.util.ArrayList<java.lang.String>.get(int) <unknown>.DisplayTime() java.util.ArrayList<java.lang.String>.get(int) com.vinsol.expensetracker.ShowVoiceActivity.updateUI() android.os.Bundle.containsKey(java.lang.String) java.util.Calendar.getInstance() java.util.ArrayList<java.lang.String>.ArrayList, String() java.lang.Long.parseLong(java.lang.String) java.util.ArrayList<java.lang.String>.ArrayList, String() android.widget.TextView.setText(java.lang.String) java.lang.Long.parseLong(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) java.io.File.canRead() <unknown>.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) android.view.View.setVisibility(int) android.widget.Toast.show() java.lang.String.equals(java.lang.String) java.util.Calendar.setFirstDayOfWeek(int) java.util.Calendar.setTimeInMillis(long) java.lang.Long.parseLong(java.lang.String) <unknown>.getDisplayTime(<unknown>) java.lang.String.equals(java.lang.String) android.content.res.Resources.getDrawable(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(java.lang.String) <unknown>.getPlayBackTime() android.app.Activity.finish() <unknown>.DisplayTime() android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) <unknown>.startPlayBack() <unknown>.getDisplayTime(<unknown>) android.os.Bundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>) android.app.Activity.findViewById(<unknown>) java.lang.String.equals(java.lang.String) java.lang.String.equals(java.lang.String) android.widget.Toast.makeText(com.vinsol.expensetracker.ShowVoiceActivity, java.lang.String, int) android.content.Intent.getBundleExtra(java.lang.String) android.view.View.getId() android.view.View.setVisibility(int) java.lang.Object.ShowDateHandler(com.vinsol.expensetracker.ShowVoiceActivity, <unknown>) java.util.ArrayList<java.lang.String>.get(int) android.view.View.setOnClickListener(com.vinsol.expensetracker.ShowVoiceActivity) java.util.ArrayList<java.lang.String>.get(int) <unknown>.getPlayBackTime() android.os.Bundle.putBoolean(java.lang.String, boolean) android.widget.TextView.setText(<unknown>) android.app.Activity.findViewById(<unknown>) android.view.View.setVisibility(int) android.widget.TextView.setText(<unknown>) java.util.ArrayList<java.lang.String>.get(int) android.widget.TextView.setText(java.lang.String) java.util.Calendar.getInstance() android.view.View.setVisibility(int)"]}, {"user_sni": "King, Shane", "repo_sni": "CardinalNow/Android-CountdownTimer", "imports_t": ["android.view.animation.RotateAnimation android.os.CountDownTimer android.view.animation.Animation android.os.Bundle android.widget.TextView android.text.format.Time com.todddavies.components.progressbar.ProgressWheel android.app.Activity"], "email_sni": "sking@cardinalsolutions.com", "contents_t": ["package com.cardinalsolutions.countdowntimer;\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.text.format.Time;\nimport android.view.animation.Animation;\nimport android.view.animation.RotateAnimation;\nimport android.widget.TextView;\nimport com.todddavies.components.progressbar.ProgressWheel;\n\n/**\n * Countdown Timer\n *\n * CountdownTimerActivity is the main activity of this application.  To configure  is a utility class that allows the developer to turn off logging by setting the LOGGING\n * flag to false prior to generating an APK.\n *\n * @author Shane King\n *         28 Aug 2014\n *         10:00\n */\npublic class CountdownTimerActivity extends Activity {\n\n\tprivate static final String TAG = \"CountdownTimer\";\n\n\tprivate TextView mCountdownNote;\n\tprivate ProgressWheel mDaysWheel;\n\tprivate TextView mDaysLabel;\n\tprivate ProgressWheel mHoursWheel;\n\tprivate TextView mHoursLabel;\n\tprivate ProgressWheel mMinutesWheel;\n\tprivate TextView mMinutesLabel;\n\tprivate ProgressWheel mSecondsWheel;\n\tprivate TextView mSecondsLabel;\n\n\t// Timer setup\n\tTime conferenceTime = new Time(Time.getCurrentTimezone());\n\tint hour = 22;\n\tint minute = 33;\n\tint second = 0;\n\tint monthDay = 28;\n\t// month is zero based...7 == August\n\tint month = 7;\n\tint year = conferenceTime.year;\n\n\t// Values displayed by the timer\n\tprivate int mDisplayDays;\n\tprivate int mDisplayHours;\n\tprivate int mDisplayMinutes;\n\tprivate int mDisplaySeconds;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_countdown_timer);\n\n\t\tconfigureViews();\n\t\tconfigureConferenceDate();\n\n\t}\n\n\tprivate void configureViews() {\n\n\t\tthis.mCountdownNote = (TextView) findViewById(R.id.activity_countdown_timer_note);\n\t\tthis.mDaysWheel = (ProgressWheel) findViewById(R.id.activity_countdown_timer_days);\n\t\tthis.mHoursWheel = (ProgressWheel) findViewById(R.id.activity_countdown_timer_hours);\n\t\tthis.mMinutesWheel = (ProgressWheel) findViewById(R.id.activity_countdown_timer_minutes);\n\t\tthis.mSecondsWheel = (ProgressWheel) findViewById(R.id.activity_countdown_timer_seconds);\n\t\tthis.mDaysLabel = (TextView) findViewById(R.id.activity_countdown_timer_days_text);\n\t\tthis.mHoursLabel = (TextView) findViewById(R.id.activity_countdown_timer_hours_text);\n\t\tthis.mMinutesLabel = (TextView) findViewById(R.id.activity_countdown_timer_minutes_text);\n\t\tthis.mSecondsLabel = (TextView) findViewById(R.id.activity_countdown_timer_seconds_text);\n\n\t}\n\n\tprivate void closeActivity() {\n\t\t// Start your subsequent activity here.  Increasing year so timer will never go away for\n\t\t// demo purposes only.  Remove next 2 lines of code in your app!!\n\t\tyear = year + 1;\n\t\tconfigureConferenceDate();\n\n\t}\n\n\tprivate void configureConferenceDate() {\n\t\tconferenceTime.set(second, minute, hour, monthDay, month, year);\n\t\tconferenceTime.normalize(true);\n\t\tlong confMillis = conferenceTime.toMillis(true);\n\n\t\tTime nowTime = new Time(Time.getCurrentTimezone());\n\t\tnowTime.setToNow();\n\t\tnowTime.normalize(true);\n\t\tlong nowMillis = nowTime.toMillis(true);\n\n\t\tlong milliDiff = confMillis - nowMillis;\n\n\t\tnew CountDownTimer(milliDiff, 1000) {\n\n\t\t\t@Override\n\t\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\t\t// decompose difference into days, hours, minutes and seconds\n\t\t\t\tCountdownTimerActivity.this.mDisplayDays = (int) ((millisUntilFinished / 1000) / 86400);\n\t\t\t\tCountdownTimerActivity.this.mDisplayHours = (int) (((millisUntilFinished / 1000) - (CountdownTimerActivity.this.mDisplayDays * 86400)) / 3600);\n\t\t\t\tCountdownTimerActivity.this.mDisplayMinutes = (int) (((millisUntilFinished / 1000) - ((CountdownTimerActivity.this.mDisplayDays * 86400) + (CountdownTimerActivity.this.mDisplayHours * 3600))) / 60);\n\t\t\t\tCountdownTimerActivity.this.mDisplaySeconds = (int) ((millisUntilFinished / 1000) % 60);\n\n\t\t\t\tCountdownTimerActivity.this.mDaysWheel.setText(String.valueOf(CountdownTimerActivity.this.mDisplayDays));\n\t\t\t\tCountdownTimerActivity.this.mDaysWheel.setProgress(CountdownTimerActivity.this.mDisplayDays);\n\n\t\t\t\tCountdownTimerActivity.this.mHoursWheel.setText(String.valueOf(CountdownTimerActivity.this.mDisplayHours));\n\t\t\t\tCountdownTimerActivity.this.mHoursWheel.setProgress(CountdownTimerActivity.this.mDisplayHours * 15);\n\n\t\t\t\tCountdownTimerActivity.this.mMinutesWheel.setText(String.valueOf(CountdownTimerActivity.this.mDisplayMinutes));\n\t\t\t\tCountdownTimerActivity.this.mMinutesWheel.setProgress(CountdownTimerActivity.this.mDisplayMinutes * 6);\n\n\t\t\t\tAnimation an = new RotateAnimation(0.0f, 90.0f, 250f, 273f);\n\t\t\t\tan.setFillAfter(true);\n\n\t\t\t\tCountdownTimerActivity.this.mSecondsWheel.setText(String.valueOf(CountdownTimerActivity.this.mDisplaySeconds));\n\t\t\t\tCountdownTimerActivity.this.mSecondsWheel.setProgress(CountdownTimerActivity.this.mDisplaySeconds * 6);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onFinish() {\n\t\t\t\tLogger.d(TAG, \"Timer Finished...\");\n\t\t\t\t// This is where you would launch the activity for \n\t\t\t\tcloseActivity();\n\t\t\t}\n\t\t}.start();\n\t}\n}\n"], "body_t": ["<empty>"], "date_tdt": "2014-09-12T15:19:16Z", "hash_sni": "ee94a68b44876147d209e589574ac5612c749e74", "name_sni": "app/src/main/java/com/cardinalsolutions/countdowntimer/CountdownTimerActivity.java", "patch_t": [" \t\t\t@Override\n \t\t\tpublic void onFinish() {\n \t\t\t\tLogger.d(TAG, \"Timer Finished...\");\n+\t\t\t\t// This is where you would launch the activity for \n \t\t\t\tcloseActivity();\n \t\t\t}\n \t\t}.start();"], "score": 1.0, "methods_t": ["CountDownTimer RotateAnimation Time closeActivity configureConferenceDate configureViews d findViewById getCurrentTimezone normalize set setContentView setFillAfter setProgress setText setToNow start toMillis valueOf"], "_version_": 1526758473419718656, "subject_t": ["Adding license, README, and screenshot"], "comments_t": ["\t\t\t\t// decompose difference into days, hours, minutes and seconds \t// Timer setup \t\t// demo purposes only.  Remove next 2 lines of code in your app!! /** \n * Countdown Timer CountdownTimerActivity is the main activity of this application.  To configure  is a utility class that allows the developer to turn off logging by setting the LOGGING flag to false prior to generating an APK.\n * @author Shane King28 Aug 2014 10:00\n */\n \t// month is zero based...7 == August \t// Values displayed by the timer \t\t// Start your subsequent activity here.  Increasing year so timer will never go away for \t\t\t\t// This is where you would launch the activity for "], "parents_ss": ["9023554fc9a4f9929273975f90b38a7a0baeed03"], "id": "CardinalNow/Android-CountdownTimer\u0000ee94a68b44876147d209e589574ac5612c749e74\u0000app/src/main/java/com/cardinalsolutions/countdowntimer/CountdownTimerActivity.java", "callsites_cs": "android.text.format.Time.Time(java.lang.String)#android.text.format.Time.toMillis(boolean)#<unknown>.setProgress(int)#.CountDownTimer(long, int)#android.view.animation.Animation.setFillAfter(boolean)#java.lang.String.valueOf(int)#android.text.format.Time.set(int, int, int, int, int, int)#android.text.format.Time.normalize(boolean)#<unknown>.setProgress(int)#<unknown>.d(java.lang.String, java.lang.String)#com.cardinalsolutions.countdowntimer.CountdownTimerActivity.configureConferenceDate()#android.text.format.Time.toMillis(boolean)#android.view.animation.RotateAnimation.RotateAnimation(float, float, float, float)#<unknown>.setProgress(int)#android.app.Activity.setContentView(<unknown>)#android.text.format.Time.setToNow()#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#<unknown>.setText(java.lang.String)#<unknown>.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.app.Activity.findViewById(<unknown>)#android.text.format.Time.normalize(boolean)#java.lang.String.valueOf(int)#<unknown>.setText(java.lang.String)#android.os.CountDownTimer.start()#java.lang.String.valueOf(int)#android.text.format.Time.getCurrentTimezone()#com.cardinalsolutions.countdowntimer.CountdownTimerActivity.configureViews()#com.cardinalsolutions.countdowntimer.CountdownTimerActivity.configureConferenceDate()#java.lang.String.valueOf(int)#<unknown>.setText(java.lang.String)#android.app.Activity.findViewById(<unknown>)#com.cardinalsolutions.countdowntimer.CountdownTimerActivity.closeActivity()#<unknown>.setProgress(int)#android.app.Activity.findViewById(<unknown>)#android.text.format.Time.Time(java.lang.String)#android.app.Activity.findViewById(<unknown>)#android.text.format.Time.getCurrentTimezone()", "callsites_t": ["android.text.format.Time.Time(java.lang.String) android.text.format.Time.toMillis(boolean) <unknown>.setProgress(int) .CountDownTimer(long, int) android.view.animation.Animation.setFillAfter(boolean) java.lang.String.valueOf(int) android.text.format.Time.set(int, int, int, int, int, int) android.text.format.Time.normalize(boolean) <unknown>.setProgress(int) <unknown>.d(java.lang.String, java.lang.String) com.cardinalsolutions.countdowntimer.CountdownTimerActivity.configureConferenceDate() android.text.format.Time.toMillis(boolean) android.view.animation.RotateAnimation.RotateAnimation(float, float, float, float) <unknown>.setProgress(int) android.app.Activity.setContentView(<unknown>) android.text.format.Time.setToNow() android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) <unknown>.setText(java.lang.String) <unknown>.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) android.app.Activity.findViewById(<unknown>) android.text.format.Time.normalize(boolean) java.lang.String.valueOf(int) <unknown>.setText(java.lang.String) android.os.CountDownTimer.start() java.lang.String.valueOf(int) android.text.format.Time.getCurrentTimezone() com.cardinalsolutions.countdowntimer.CountdownTimerActivity.configureViews() com.cardinalsolutions.countdowntimer.CountdownTimerActivity.configureConferenceDate() java.lang.String.valueOf(int) <unknown>.setText(java.lang.String) android.app.Activity.findViewById(<unknown>) com.cardinalsolutions.countdowntimer.CountdownTimerActivity.closeActivity() <unknown>.setProgress(int) android.app.Activity.findViewById(<unknown>) android.text.format.Time.Time(java.lang.String) android.app.Activity.findViewById(<unknown>) android.text.format.Time.getCurrentTimezone()"]}], "numFound": 122, "start": 0}}